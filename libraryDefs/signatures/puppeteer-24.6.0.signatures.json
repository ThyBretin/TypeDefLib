{
  "functions": [
    {
      "name": "convertCookiesPartitionKeyFromPuppeteerToCdp",
      "parameters": [
        {
          "name": "partitionKey",
          "type": "string | CookiePartitionKey",
          "optional": false
        }
      ],
      "returnType": "CookiePartitionKey",
      "jsdoc": null
    },
    {
      "name": "BrowserContextEvent.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserContextEvent.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.__@iterator@54430",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContextEvent.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "BrowserEvent.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BrowserEvent.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.__@iterator@54430",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "BrowserEvent.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "CDPSessionEvent.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CDPSessionEvent.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.__@iterator@54430",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "CDPSessionEvent.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "connect",
      "parameters": [
        {
          "name": "options",
          "type": "ConnectOptions",
          "optional": false
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "fromSession",
      "parameters": [
        {
          "name": "session",
          "type": "CDPSession",
          "optional": false
        }
      ],
      "returnType": "Connection",
      "jsdoc": null
    },
    {
      "name": "Connection.fromSession",
      "parameters": [
        {
          "name": "session",
          "type": "CDPSession",
          "optional": false
        }
      ],
      "returnType": "Connection",
      "jsdoc": null
    },
    {
      "name": "toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultArgs",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "executablePath",
      "parameters": [
        {
          "name": "channel",
          "type": "ChromeReleaseChannel",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "connectTab",
      "parameters": [
        {
          "name": "tabId",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Promise<ExtensionTransport>",
      "jsdoc": null
    },
    {
      "name": "ExtensionTransport.connectTab",
      "parameters": [
        {
          "name": "tabId",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Promise<ExtensionTransport>",
      "jsdoc": null
    },
    {
      "name": "InterceptResolutionAction.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "InterceptResolutionAction.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.__@iterator@54430",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "InterceptResolutionAction.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "launch",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "race",
      "parameters": [
        {
          "name": "locators",
          "type": "Locators",
          "optional": false
        }
      ],
      "returnType": "Locator<AwaitedLocator<Locators[number]>>",
      "jsdoc": {
        "description": "Creates a race between multiple locators trying to locate elements in\r\nparallel but ensures that only a single element receives the action.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Locator.race",
      "parameters": [
        {
          "name": "locators",
          "type": "Locators",
          "optional": false
        }
      ],
      "returnType": "Locator<AwaitedLocator<Locators[number]>>",
      "jsdoc": {
        "description": "Creates a race between multiple locators trying to locate elements in\r\nparallel but ensures that only a single element receives the action.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "LocatorEvent.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.__@iterator@54430",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "LocatorEvent.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "MouseButton.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MouseButton.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.__@iterator@54430",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "MouseButton.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "PageEvent.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "PageEvent.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.__@iterator@54430",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "PageEvent.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ProtocolError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "ProtocolError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ProtocolError.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProtocolError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProtocolError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProtocolError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProtocolError.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "ProtocolError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "registerCustomQueryHandler",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "queryHandler",
          "type": "CustomQueryHandler",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Registers a  | custom query handler .",
        "params": [
          {
            "name": "name",
            "description": "- The name that the custom query handler will be registered\r\nunder."
          },
          {
            "name": "queryHandler",
            "description": "- The  | custom query handler \r\nto register."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "unregisterCustomQueryHandler",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Unregisters a custom query handler for a given name.",
        "deprecated": false
      }
    },
    {
      "name": "customQueryHandlerNames",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Gets the names of all custom query handlers.",
        "deprecated": false
      }
    },
    {
      "name": "clearCustomQueryHandlers",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "description": "Unregisters all custom query handlers.",
        "deprecated": false
      }
    },
    {
      "name": "Puppeteer.registerCustomQueryHandler",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "queryHandler",
          "type": "CustomQueryHandler",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Registers a  | custom query handler .",
        "params": [
          {
            "name": "name",
            "description": "- The name that the custom query handler will be registered\r\nunder."
          },
          {
            "name": "queryHandler",
            "description": "- The  | custom query handler \r\nto register."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Puppeteer.unregisterCustomQueryHandler",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Unregisters a custom query handler for a given name.",
        "deprecated": false
      }
    },
    {
      "name": "Puppeteer.customQueryHandlerNames",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Gets the names of all custom query handlers.",
        "deprecated": false
      }
    },
    {
      "name": "Puppeteer.clearCustomQueryHandlers",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "description": "Unregisters all custom query handlers.",
        "deprecated": false
      }
    },
    {
      "name": "trimCache",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Removes all non-current Firefox and Chrome binaries in the cache directory\r\nidentified by the provided Puppeteer configuration. The current browser\r\nversion is determined by resolving PUPPETEER_REVISIONS from Puppeteer\r\nunless `configuration.browserRevision` is provided.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "default.connect",
      "parameters": [
        {
          "name": "options",
          "type": "ConnectOptions",
          "optional": false
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Puppeteer to an existing browser instance.",
        "params": [
          {
            "name": "options",
            "description": "- Set of configurable options to set on the browser."
          }
        ],
        "returns": "Promise which resolves to browser instance.",
        "deprecated": false
      }
    },
    {
      "name": "default.launch",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "Launches a browser instance with given arguments and options when\r\nspecified.\r\n\r\nWhen using with `puppeteer-core`,\r\n | options.executablePath  or\r\n | options.channel  must be provided.",
        "params": [
          {
            "name": "options",
            "description": "- Options to configure launching behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.executablePath",
      "parameters": [
        {
          "name": "channel",
          "type": "ChromeReleaseChannel",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "The default executable path for a given ChromeReleaseChannel.",
        "deprecated": false
      }
    },
    {
      "name": "default.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "default.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "default.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "default.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "default.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "default.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "default.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "default.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "default.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "default.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "default.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.__@iterator@54430",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "default.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "default.defaultArgs",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "options",
            "description": "- Set of configurable options to set on the browser."
          }
        ],
        "returns": "The default arguments that the browser will be launched with.",
        "deprecated": false
      }
    },
    {
      "name": "default.trimCache",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Removes all non-current Firefox and Chrome binaries in the cache directory\r\nidentified by the provided Puppeteer configuration. The current browser\r\nversion is determined by resolving PUPPETEER_REVISIONS from Puppeteer\r\nunless `configuration.browserRevision` is provided.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerError.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerError.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.registerCustomQueryHandler",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "queryHandler",
          "type": "CustomQueryHandler",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Registers a  | custom query handler .",
        "params": [
          {
            "name": "name",
            "description": "- The name that the custom query handler will be registered\r\nunder."
          },
          {
            "name": "queryHandler",
            "description": "- The  | custom query handler \r\nto register."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.unregisterCustomQueryHandler",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Unregisters a custom query handler for a given name.",
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.customQueryHandlerNames",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Gets the names of all custom query handlers.",
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.clearCustomQueryHandlers",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "description": "Unregisters all custom query handlers.",
        "deprecated": false
      }
    },
    {
      "name": "from",
      "parameters": [
        {
          "name": "src",
          "type": "string | Object | Stream | Blob | ArrayBuffer | Iterable<any> | AsyncIterable<any> | AsyncGeneratorFunction | Promise<...>",
          "optional": false
        }
      ],
      "returnType": "Duplex",
      "jsdoc": {
        "description": "A utility method for creating duplex streams.\n\n- `Stream` converts writable stream into writable `Duplex` and readable stream\n  to `Duplex`.\n- `Blob` converts into readable `Duplex`.\n- `string` converts into readable `Duplex`.\n- `ArrayBuffer` converts into readable `Duplex`.\n- `AsyncIterable` converts into a readable `Duplex`. Cannot yield `null`.\n- `AsyncGeneratorFunction` converts into a readable/writable transform\n  `Duplex`. Must take a source `AsyncIterable` as first parameter. Cannot yield\n  `null`.\n- `AsyncFunction` converts into a writable `Duplex`. Must return\n  either `null` or `undefined`\n- `Object ({ writable, readable })` converts `readable` and\n  `writable` into `Stream` and then combines them into `Duplex` where the\n  `Duplex` will write to the `writable` and read from the `readable`.\n- `Promise` converts into readable `Duplex`. Value `null` is ignored.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "toWeb",
      "parameters": [
        {
          "name": "streamDuplex",
          "type": "Duplex",
          "optional": false
        }
      ],
      "returnType": "{ readable: ReadableStream<any>; writable: WritableStream<any>; }",
      "jsdoc": {
        "description": "A utility method for creating a web `ReadableStream` and `WritableStream` from a `Duplex`.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "fromWeb",
      "parameters": [
        {
          "name": "duplexStream",
          "type": "{ readable: ReadableStream<any>; writable: WritableStream<any>; }",
          "optional": false
        },
        {
          "name": "options",
          "type": "Pick<DuplexOptions<Duplex>, \"allowHalfOpen\" | \"decodeStrings\" | \"encoding\" | \"highWaterMark\" | \"objectMode\" | \"signal\">",
          "optional": true
        }
      ],
      "returnType": "Duplex",
      "jsdoc": {
        "description": "A utility method for creating a `Duplex` from a web `ReadableStream` and `WritableStream`.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "duplexPair",
      "parameters": [
        {
          "name": "options",
          "type": "DuplexOptions<Duplex>",
          "optional": true
        }
      ],
      "returnType": "[Duplex, Duplex]",
      "jsdoc": {
        "description": "The utility function `duplexPair` returns an Array with two items,\neach being a `Duplex` stream connected to the other side:\n\n```js\nconst [ sideA, sideB ] = duplexPair();\n```\n\nWhatever is written to one stream is made readable on the other. It provides\nbehavior analogous to a network connection, where the data written by the client\nbecomes readable by the server, and vice-versa.\n\nThe Duplex streams are symmetrical; one or the other may be used without any\ndifference in behavior.",
        "params": [
          {
            "name": "options",
            "description": "A value to pass to both    constructors,\nto set options such as buffering."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "addAbortSignal",
      "parameters": [
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": false
        },
        {
          "name": "stream",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "A stream to attach a signal to.\n\nAttaches an AbortSignal to a readable or writeable stream. This lets code\ncontrol stream destruction using an `AbortController`.\n\nCalling `abort` on the `AbortController` corresponding to the passed `AbortSignal` will behave the same way as calling `.destroy(new AbortError())` on the\nstream, and `controller.error(new AbortError())` for webstreams.\n\n```js\nimport fs from 'node:fs';\n\nconst controller = new AbortController();\nconst read = addAbortSignal(\n  controller.signal,\n  fs.createReadStream(('object.json')),\n);\n// Later, abort the operation closing the stream\ncontroller.abort();\n```\n\nOr using an `AbortSignal` with a readable stream as an async iterable:\n\n```js\nconst controller = new AbortController();\nsetTimeout(() => controller.abort(), 10_000); // set a timeout\nconst stream = addAbortSignal(\n  controller.signal,\n  fs.createReadStream(('object.json')),\n);\n(async () => {\n  try {\n    for await (const chunk of stream) {\n      await process(chunk);\n    }\n  } catch (e) {\n    if (e.name === 'AbortError') {\n      // The operation was cancelled\n    } else {\n      throw e;\n    }\n  }\n})();\n```\n\nOr using an `AbortSignal` with a ReadableStream:\n\n```js\nconst controller = new AbortController();\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue('hello');\n    controller.enqueue('world');\n    controller.close();\n  },\n});\n\naddAbortSignal(controller.signal, rs);\n\nfinished(rs, (err) => {\n  if (err) {\n    if (err.name === 'AbortError') {\n      // The operation was cancelled\n    }\n  }\n});\n\nconst reader = rs.getReader();\n\nreader.read().then(({ value, done }) => {\n  console.log(value); // hello\n  console.log(done); // false\n  controller.abort();\n});\n```",
        "params": [
          {
            "name": "signal",
            "description": "A signal representing possible cancellation"
          },
          {
            "name": "stream",
            "description": "A stream to attach a signal to."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "getDefaultHighWaterMark",
      "parameters": [
        {
          "name": "objectMode",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the default highWaterMark used by streams.\nDefaults to `65536` (64 KiB), or `16` for `objectMode`.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "setDefaultHighWaterMark",
      "parameters": [
        {
          "name": "objectMode",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Sets the default highWaterMark used by streams.",
        "params": [
          {
            "name": "value",
            "description": "highWaterMark value"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "finished",
      "parameters": [
        {
          "name": "stream",
          "type": "ReadableStream | WritableStream | ReadWriteStream",
          "optional": false
        },
        {
          "name": "options",
          "type": "FinishedOptions",
          "optional": false
        },
        {
          "name": "callback",
          "type": "(err?: ErrnoException) => void",
          "optional": false
        }
      ],
      "returnType": "() => void",
      "jsdoc": {
        "description": "A readable and/or writable stream/webstream.\n\nA function to get notified when a stream is no longer readable, writable\nor has experienced an error or a premature close event.\n\n```js\nimport { finished } from 'node:stream';\nimport fs from 'node:fs';\n\nconst rs = fs.createReadStream('archive.tar');\n\nfinished(rs, (err) => {\n  if (err) {\n    console.error('Stream failed.', err);\n  } else {\n    console.log('Stream is done reading.');\n  }\n});\n\nrs.resume(); // Drain the stream.\n```\n\nEspecially useful in error handling scenarios where a stream is destroyed\nprematurely (like an aborted HTTP request), and will not emit `'end'` or `'finish'`.\n\nThe `finished` API provides [`promise version`](https://nodejs.org/docs/latest-v22.x/api/stream.html#streamfinishedstream-options).\n\n`stream.finished()` leaves dangling event listeners (in particular `'error'`, `'end'`, `'finish'` and `'close'`) after `callback` has been\ninvoked. The reason for this is so that unexpected `'error'` events (due to\nincorrect stream implementations) do not cause unexpected crashes.\nIf this is unwanted behavior then the returned cleanup function needs to be\ninvoked in the callback:\n\n```js\nconst cleanup = finished(rs, (err) => {\n  cleanup();\n  // ...\n});\n```",
        "params": [
          {
            "name": "stream",
            "description": "A readable and/or writable stream."
          },
          {
            "name": "callback",
            "description": "A callback function that takes an optional error argument."
          }
        ],
        "returns": "A cleanup function which removes all registered listeners.",
        "deprecated": false
      }
    },
    {
      "name": "pipeline",
      "parameters": [
        {
          "name": "source",
          "type": "A",
          "optional": false
        },
        {
          "name": "destination",
          "type": "B",
          "optional": false
        },
        {
          "name": "callback",
          "type": "PipelineCallback<B>",
          "optional": false
        }
      ],
      "returnType": "B extends WritableStream ? B : WritableStream",
      "jsdoc": {
        "description": "A module method to pipe between streams and generators forwarding errors and\nproperly cleaning up and provide a callback when the pipeline is complete.\n\n```js\nimport { pipeline } from 'node:stream';\nimport fs from 'node:fs';\nimport zlib from 'node:zlib';\n\n// Use the pipeline API to easily pipe a series of streams\n// together and get notified when the pipeline is fully done.\n\n// A pipeline to gzip a potentially huge tar file efficiently:\n\npipeline(\n  fs.createReadStream('archive.tar'),\n  zlib.createGzip(),\n  fs.createWriteStream('archive.tar.gz'),\n  (err) => {\n    if (err) {\n      console.error('Pipeline failed.', err);\n    } else {\n      console.log('Pipeline succeeded.');\n    }\n  },\n);\n```\n\nThe `pipeline` API provides a [`promise version`](https://nodejs.org/docs/latest-v22.x/api/stream.html#streampipelinesource-transforms-destination-options).\n\n`stream.pipeline()` will call `stream.destroy(err)` on all streams except:\n\n* `Readable` streams which have emitted `'end'` or `'close'`.\n* `Writable` streams which have emitted `'finish'` or `'close'`.\n\n`stream.pipeline()` leaves dangling event listeners on the streams\nafter the `callback` has been invoked. In the case of reuse of streams after\nfailure, this can cause event listener leaks and swallowed errors. If the last\nstream is readable, dangling event listeners will be removed so that the last\nstream can be consumed later.\n\n`stream.pipeline()` closes all the streams when an error is raised.\nThe `IncomingRequest` usage with `pipeline` could lead to an unexpected behavior\nonce it would destroy the socket without sending the expected response.\nSee the example below:\n\n```js\nimport fs from 'node:fs';\nimport http from 'node:http';\nimport { pipeline } from 'node:stream';\n\nconst server = http.createServer((req, res) => {\n  const fileStream = fs.createReadStream('./fileNotExist.txt');\n  pipeline(fileStream, res, (err) => {\n    if (err) {\n      console.log(err); // No such file\n      // this message can't be sent once `pipeline` already destroyed the socket\n      return res.end('error!!!');\n    }\n  });\n});\n```",
        "params": [
          {
            "name": "callback",
            "description": "Called when the pipeline is fully done."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isErrored",
      "parameters": [
        {
          "name": "stream",
          "type": "Readable | Writable | ReadableStream | WritableStream",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns whether the stream has encountered an error.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "isReadable",
      "parameters": [
        {
          "name": "stream",
          "type": "Readable | ReadableStream",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns whether the stream is readable.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "once",
      "parameters": [
        {
          "name": "emitter",
          "type": "EventEmitter<DefaultEventMap>",
          "optional": false
        },
        {
          "name": "eventName",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "options",
          "type": "StaticEventEmitterOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<any[]>",
      "jsdoc": {
        "description": "Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\nsemantics and does not listen to the `'error'` event.\n\n```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```\n\nThe special handling of the `'error'` event is only used when `events.once()` is used to wait for another event. If `events.once()` is used to wait for the\n'`error'` event itself, then it is treated as any other kind of event without\nspecial handling:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```\n\nAn `AbortSignal` can be used to cancel waiting for the event:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "on",
      "parameters": [
        {
          "name": "emitter",
          "type": "EventEmitter<DefaultEventMap>",
          "optional": false
        },
        {
          "name": "eventName",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "options",
          "type": "StaticEventEmitterIteratorOptions",
          "optional": true
        }
      ],
      "returnType": "AsyncIterator<any[], any, any>",
      "jsdoc": {
        "description": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```\n\nReturns an `AsyncIterator` that iterates `eventName` events. It will throw\nif the `EventEmitter` emits `'error'`. It removes all listeners when\nexiting the loop. The `value` returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn `AbortSignal` can be used to cancel waiting on events:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```\n\nUse the `close` option to specify an array of event names that will end the iteration:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "listenerCount",
      "parameters": [
        {
          "name": "emitter",
          "type": "EventEmitter<DefaultEventMap>",
          "optional": false
        },
        {
          "name": "eventName",
          "type": "string | symbol",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "A class method that returns the number of listeners for the given `eventName` registered on the given `emitter`.\n\n```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```",
        "params": [
          {
            "name": "emitter",
            "description": "The emitter to query"
          },
          {
            "name": "eventName",
            "description": "The event name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "getEventListeners",
      "parameters": [
        {
          "name": "emitter",
          "type": "EventEmitter<DefaultEventMap> | EventTarget",
          "optional": false
        },
        {
          "name": "name",
          "type": "string | symbol",
          "optional": false
        }
      ],
      "returnType": "Function[]",
      "jsdoc": {
        "description": "Returns a copy of the array of listeners for the event named `eventName`.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.listeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "getMaxListeners",
      "parameters": [
        {
          "name": "emitter",
          "type": "EventEmitter<DefaultEventMap> | EventTarget",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the currently set max amount of listeners.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.getMaxListeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "setMaxListeners",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": true
        },
        {
          "name": "eventTargets",
          "type": "(EventEmitter<DefaultEventMap> | EventTarget)[]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```",
        "params": [
          {
            "name": "n",
            "description": "A non-negative number. The maximum number of listeners per `EventTarget` event."
          },
          {
            "name": "eventTargets",
            "description": "Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, `n` is set as the default max for all newly created {EventTarget} and {EventEmitter}\nobjects."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "addAbortListener",
      "parameters": [
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": false
        },
        {
          "name": "resource",
          "type": "(event: Event) => void",
          "optional": false
        }
      ],
      "returnType": "Disposable",
      "jsdoc": {
        "description": "Listens once to the `abort` event on the provided `signal`.\n\nListening to the `abort` event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using `AbortSignal`s in Node.js APIs by solving these\ntwo issues by listening to the event such that `stopImmediatePropagation` does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.from",
      "parameters": [
        {
          "name": "src",
          "type": "string | Object | Stream | Blob | ArrayBuffer | Iterable<any> | AsyncIterable<any> | AsyncGeneratorFunction | Promise<...>",
          "optional": false
        }
      ],
      "returnType": "Duplex",
      "jsdoc": {
        "description": "A utility method for creating duplex streams.\n\n- `Stream` converts writable stream into writable `Duplex` and readable stream\n  to `Duplex`.\n- `Blob` converts into readable `Duplex`.\n- `string` converts into readable `Duplex`.\n- `ArrayBuffer` converts into readable `Duplex`.\n- `AsyncIterable` converts into a readable `Duplex`. Cannot yield `null`.\n- `AsyncGeneratorFunction` converts into a readable/writable transform\n  `Duplex`. Must take a source `AsyncIterable` as first parameter. Cannot yield\n  `null`.\n- `AsyncFunction` converts into a writable `Duplex`. Must return\n  either `null` or `undefined`\n- `Object ({ writable, readable })` converts `readable` and\n  `writable` into `Stream` and then combines them into `Duplex` where the\n  `Duplex` will write to the `writable` and read from the `readable`.\n- `Promise` converts into readable `Duplex`. Value `null` is ignored.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.toWeb",
      "parameters": [
        {
          "name": "streamDuplex",
          "type": "Duplex",
          "optional": false
        }
      ],
      "returnType": "{ readable: ReadableStream<any>; writable: WritableStream<any>; }",
      "jsdoc": {
        "description": "A utility method for creating a web `ReadableStream` and `WritableStream` from a `Duplex`.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.fromWeb",
      "parameters": [
        {
          "name": "duplexStream",
          "type": "{ readable: ReadableStream<any>; writable: WritableStream<any>; }",
          "optional": false
        },
        {
          "name": "options",
          "type": "Pick<DuplexOptions<Duplex>, \"allowHalfOpen\" | \"decodeStrings\" | \"encoding\" | \"highWaterMark\" | \"objectMode\" | \"signal\">",
          "optional": true
        }
      ],
      "returnType": "Duplex",
      "jsdoc": {
        "description": "A utility method for creating a `Duplex` from a web `ReadableStream` and `WritableStream`.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.duplexPair",
      "parameters": [
        {
          "name": "options",
          "type": "DuplexOptions<Duplex>",
          "optional": true
        }
      ],
      "returnType": "[Duplex, Duplex]",
      "jsdoc": {
        "description": "The utility function `duplexPair` returns an Array with two items,\neach being a `Duplex` stream connected to the other side:\n\n```js\nconst [ sideA, sideB ] = duplexPair();\n```\n\nWhatever is written to one stream is made readable on the other. It provides\nbehavior analogous to a network connection, where the data written by the client\nbecomes readable by the server, and vice-versa.\n\nThe Duplex streams are symmetrical; one or the other may be used without any\ndifference in behavior.",
        "params": [
          {
            "name": "options",
            "description": "A value to pass to both    constructors,\nto set options such as buffering."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addAbortSignal",
      "parameters": [
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": false
        },
        {
          "name": "stream",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "A stream to attach a signal to.\n\nAttaches an AbortSignal to a readable or writeable stream. This lets code\ncontrol stream destruction using an `AbortController`.\n\nCalling `abort` on the `AbortController` corresponding to the passed `AbortSignal` will behave the same way as calling `.destroy(new AbortError())` on the\nstream, and `controller.error(new AbortError())` for webstreams.\n\n```js\nimport fs from 'node:fs';\n\nconst controller = new AbortController();\nconst read = addAbortSignal(\n  controller.signal,\n  fs.createReadStream(('object.json')),\n);\n// Later, abort the operation closing the stream\ncontroller.abort();\n```\n\nOr using an `AbortSignal` with a readable stream as an async iterable:\n\n```js\nconst controller = new AbortController();\nsetTimeout(() => controller.abort(), 10_000); // set a timeout\nconst stream = addAbortSignal(\n  controller.signal,\n  fs.createReadStream(('object.json')),\n);\n(async () => {\n  try {\n    for await (const chunk of stream) {\n      await process(chunk);\n    }\n  } catch (e) {\n    if (e.name === 'AbortError') {\n      // The operation was cancelled\n    } else {\n      throw e;\n    }\n  }\n})();\n```\n\nOr using an `AbortSignal` with a ReadableStream:\n\n```js\nconst controller = new AbortController();\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue('hello');\n    controller.enqueue('world');\n    controller.close();\n  },\n});\n\naddAbortSignal(controller.signal, rs);\n\nfinished(rs, (err) => {\n  if (err) {\n    if (err.name === 'AbortError') {\n      // The operation was cancelled\n    }\n  }\n});\n\nconst reader = rs.getReader();\n\nreader.read().then(({ value, done }) => {\n  console.log(value); // hello\n  console.log(done); // false\n  controller.abort();\n});\n```",
        "params": [
          {
            "name": "signal",
            "description": "A signal representing possible cancellation"
          },
          {
            "name": "stream",
            "description": "A stream to attach a signal to."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.getDefaultHighWaterMark",
      "parameters": [
        {
          "name": "objectMode",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the default highWaterMark used by streams.\nDefaults to `65536` (64 KiB), or `16` for `objectMode`.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.setDefaultHighWaterMark",
      "parameters": [
        {
          "name": "objectMode",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Sets the default highWaterMark used by streams.",
        "params": [
          {
            "name": "value",
            "description": "highWaterMark value"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.finished",
      "parameters": [
        {
          "name": "stream",
          "type": "ReadableStream | WritableStream | ReadWriteStream",
          "optional": false
        },
        {
          "name": "options",
          "type": "FinishedOptions",
          "optional": false
        },
        {
          "name": "callback",
          "type": "(err?: ErrnoException) => void",
          "optional": false
        }
      ],
      "returnType": "() => void",
      "jsdoc": {
        "description": "A readable and/or writable stream/webstream.\n\nA function to get notified when a stream is no longer readable, writable\nor has experienced an error or a premature close event.\n\n```js\nimport { finished } from 'node:stream';\nimport fs from 'node:fs';\n\nconst rs = fs.createReadStream('archive.tar');\n\nfinished(rs, (err) => {\n  if (err) {\n    console.error('Stream failed.', err);\n  } else {\n    console.log('Stream is done reading.');\n  }\n});\n\nrs.resume(); // Drain the stream.\n```\n\nEspecially useful in error handling scenarios where a stream is destroyed\nprematurely (like an aborted HTTP request), and will not emit `'end'` or `'finish'`.\n\nThe `finished` API provides [`promise version`](https://nodejs.org/docs/latest-v22.x/api/stream.html#streamfinishedstream-options).\n\n`stream.finished()` leaves dangling event listeners (in particular `'error'`, `'end'`, `'finish'` and `'close'`) after `callback` has been\ninvoked. The reason for this is so that unexpected `'error'` events (due to\nincorrect stream implementations) do not cause unexpected crashes.\nIf this is unwanted behavior then the returned cleanup function needs to be\ninvoked in the callback:\n\n```js\nconst cleanup = finished(rs, (err) => {\n  cleanup();\n  // ...\n});\n```",
        "params": [
          {
            "name": "stream",
            "description": "A readable and/or writable stream."
          },
          {
            "name": "callback",
            "description": "A callback function that takes an optional error argument."
          }
        ],
        "returns": "A cleanup function which removes all registered listeners.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.pipeline",
      "parameters": [
        {
          "name": "source",
          "type": "A",
          "optional": false
        },
        {
          "name": "destination",
          "type": "B",
          "optional": false
        },
        {
          "name": "callback",
          "type": "PipelineCallback<B>",
          "optional": false
        }
      ],
      "returnType": "B extends WritableStream ? B : WritableStream",
      "jsdoc": {
        "description": "A module method to pipe between streams and generators forwarding errors and\nproperly cleaning up and provide a callback when the pipeline is complete.\n\n```js\nimport { pipeline } from 'node:stream';\nimport fs from 'node:fs';\nimport zlib from 'node:zlib';\n\n// Use the pipeline API to easily pipe a series of streams\n// together and get notified when the pipeline is fully done.\n\n// A pipeline to gzip a potentially huge tar file efficiently:\n\npipeline(\n  fs.createReadStream('archive.tar'),\n  zlib.createGzip(),\n  fs.createWriteStream('archive.tar.gz'),\n  (err) => {\n    if (err) {\n      console.error('Pipeline failed.', err);\n    } else {\n      console.log('Pipeline succeeded.');\n    }\n  },\n);\n```\n\nThe `pipeline` API provides a [`promise version`](https://nodejs.org/docs/latest-v22.x/api/stream.html#streampipelinesource-transforms-destination-options).\n\n`stream.pipeline()` will call `stream.destroy(err)` on all streams except:\n\n* `Readable` streams which have emitted `'end'` or `'close'`.\n* `Writable` streams which have emitted `'finish'` or `'close'`.\n\n`stream.pipeline()` leaves dangling event listeners on the streams\nafter the `callback` has been invoked. In the case of reuse of streams after\nfailure, this can cause event listener leaks and swallowed errors. If the last\nstream is readable, dangling event listeners will be removed so that the last\nstream can be consumed later.\n\n`stream.pipeline()` closes all the streams when an error is raised.\nThe `IncomingRequest` usage with `pipeline` could lead to an unexpected behavior\nonce it would destroy the socket without sending the expected response.\nSee the example below:\n\n```js\nimport fs from 'node:fs';\nimport http from 'node:http';\nimport { pipeline } from 'node:stream';\n\nconst server = http.createServer((req, res) => {\n  const fileStream = fs.createReadStream('./fileNotExist.txt');\n  pipeline(fileStream, res, (err) => {\n    if (err) {\n      console.log(err); // No such file\n      // this message can't be sent once `pipeline` already destroyed the socket\n      return res.end('error!!!');\n    }\n  });\n});\n```",
        "params": [
          {
            "name": "callback",
            "description": "Called when the pipeline is fully done."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.isErrored",
      "parameters": [
        {
          "name": "stream",
          "type": "Readable | Writable | ReadableStream | WritableStream",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns whether the stream has encountered an error.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.isReadable",
      "parameters": [
        {
          "name": "stream",
          "type": "Readable | ReadableStream",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns whether the stream is readable.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "emitter",
          "type": "EventEmitter<DefaultEventMap>",
          "optional": false
        },
        {
          "name": "eventName",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "options",
          "type": "StaticEventEmitterOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<any[]>",
      "jsdoc": {
        "description": "Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\nsemantics and does not listen to the `'error'` event.\n\n```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```\n\nThe special handling of the `'error'` event is only used when `events.once()` is used to wait for another event. If `events.once()` is used to wait for the\n'`error'` event itself, then it is treated as any other kind of event without\nspecial handling:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```\n\nAn `AbortSignal` can be used to cancel waiting for the event:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "emitter",
          "type": "EventEmitter<DefaultEventMap>",
          "optional": false
        },
        {
          "name": "eventName",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "options",
          "type": "StaticEventEmitterIteratorOptions",
          "optional": true
        }
      ],
      "returnType": "AsyncIterator<any[], any, any>",
      "jsdoc": {
        "description": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```\n\nReturns an `AsyncIterator` that iterates `eventName` events. It will throw\nif the `EventEmitter` emits `'error'`. It removes all listeners when\nexiting the loop. The `value` returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn `AbortSignal` can be used to cancel waiting on events:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```\n\nUse the `close` option to specify an array of event names that will end the iteration:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.listenerCount",
      "parameters": [
        {
          "name": "emitter",
          "type": "EventEmitter<DefaultEventMap>",
          "optional": false
        },
        {
          "name": "eventName",
          "type": "string | symbol",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "A class method that returns the number of listeners for the given `eventName` registered on the given `emitter`.\n\n```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```",
        "params": [
          {
            "name": "emitter",
            "description": "The emitter to query"
          },
          {
            "name": "eventName",
            "description": "The event name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "ScreenRecorder.getEventListeners",
      "parameters": [
        {
          "name": "emitter",
          "type": "EventEmitter<DefaultEventMap> | EventTarget",
          "optional": false
        },
        {
          "name": "name",
          "type": "string | symbol",
          "optional": false
        }
      ],
      "returnType": "Function[]",
      "jsdoc": {
        "description": "Returns a copy of the array of listeners for the event named `eventName`.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.listeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.getMaxListeners",
      "parameters": [
        {
          "name": "emitter",
          "type": "EventEmitter<DefaultEventMap> | EventTarget",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the currently set max amount of listeners.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.getMaxListeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.setMaxListeners",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": true
        },
        {
          "name": "eventTargets",
          "type": "(EventEmitter<DefaultEventMap> | EventTarget)[]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```",
        "params": [
          {
            "name": "n",
            "description": "A non-negative number. The maximum number of listeners per `EventTarget` event."
          },
          {
            "name": "eventTargets",
            "description": "Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, `n` is set as the default max for all newly created {EventTarget} and {EventEmitter}\nobjects."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addAbortListener",
      "parameters": [
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": false
        },
        {
          "name": "resource",
          "type": "(event: Event) => void",
          "optional": false
        }
      ],
      "returnType": "Disposable",
      "jsdoc": {
        "description": "Listens once to the `abort` event on the provided `signal`.\n\nListening to the `abort` event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using `AbortSignal`s in Node.js APIs by solving these\ntwo issues by listening to the event such that `stopImmediatePropagation` does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.__promisify__",
      "parameters": [
        {
          "name": "stream",
          "type": "ReadableStream | WritableStream | ReadWriteStream",
          "optional": false
        },
        {
          "name": "options",
          "type": "FinishedOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.isDisturbed",
      "parameters": [
        {
          "name": "stream",
          "type": "Readable | ReadableStream",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns whether the stream has been read from or cancelled.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.valueOf",
      "parameters": [],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.__@toPrimitive@55547",
      "parameters": [
        {
          "name": "hint",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Converts a Symbol object to a symbol.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "TargetType.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TargetType.__@iterator@54430",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "TargetType.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "TimeoutError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "TimeoutError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "TimeoutError.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TimeoutError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TimeoutError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TimeoutError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TimeoutError.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "TimeoutError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TouchError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "TouchError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "TouchError.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TouchError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TouchError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TouchError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "TouchError.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "TouchError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "UnsupportedOperation.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "UnsupportedOperation.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "UnsupportedOperation.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "UnsupportedOperation.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "UnsupportedOperation.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "UnsupportedOperation.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "UnsupportedOperation.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "UnsupportedOperation.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Accessibility.snapshot",
      "parameters": [
        {
          "name": "options",
          "type": "SnapshotOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<SerializedAXNode>",
      "jsdoc": {
        "description": "Captures the current state of the accessibility tree.\r\nThe returned object represents the root accessible node of the page.",
        "params": [],
        "returns": "An AXNode object representing the snapshot.",
        "deprecated": false
      }
    },
    {
      "name": "Browser.process",
      "parameters": [],
      "returnType": "ChildProcess",
      "jsdoc": {
        "description": "Gets the associated\r\n ://nodejs.org/api/child_process.html#class-childprocess | ChildProcess .",
        "params": [],
        "returns": "`null` if this instance was connected to via\r\n  .",
        "deprecated": false
      }
    },
    {
      "name": "Browser.createBrowserContext",
      "parameters": [
        {
          "name": "options",
          "type": "BrowserContextOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserContext>",
      "jsdoc": {
        "description": "Creates a new  | browser context .\r\n\r\nThis won't share cookies/cache with other  | browser contexts .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Browser.browserContexts",
      "parameters": [],
      "returnType": "BrowserContext[]",
      "jsdoc": {
        "description": "Gets a list of open  | browser contexts .\r\n\r\nIn a newly-created  | browser , this will return a single\r\ninstance of   .",
        "deprecated": false
      }
    },
    {
      "name": "Browser.defaultBrowserContext",
      "parameters": [],
      "returnType": "BrowserContext",
      "jsdoc": {
        "description": "Gets the default  | browser context .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Browser.wsEndpoint",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets the WebSocket URL to connect to this  | browser .\r\n\r\nThis is usually used with   .\r\n\r\nYou can find the debugger URL (`webSocketDebuggerUrl`) from\r\n`http://HOST:PORT/json/version`.\r\n\r\nSee  ://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target | browser endpoint \r\nfor more information.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Browser.newPage",
      "parameters": [],
      "returnType": "Promise<Page>",
      "jsdoc": {
        "description": "Creates a new  | page  in the\r\n | default browser context .",
        "deprecated": false
      }
    },
    {
      "name": "Browser.targets",
      "parameters": [],
      "returnType": "Target[]",
      "jsdoc": {
        "description": "Gets all active  | targets .\r\n\r\nIn case of multiple  | browser contexts , this returns\r\nall  | targets  in all\r\n | browser contexts .",
        "deprecated": false
      }
    },
    {
      "name": "Browser.target",
      "parameters": [],
      "returnType": "Target",
      "jsdoc": {
        "description": "Gets the  | target  associated with the\r\n | default browser context ).",
        "deprecated": false
      }
    },
    {
      "name": "Browser.waitForTarget",
      "parameters": [
        {
          "name": "predicate",
          "type": "(x: Target) => boolean | Promise<boolean>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitForTargetOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Target>",
      "jsdoc": {
        "description": "Waits until a  | target  matching the given `predicate`\r\nappears and returns it.\r\n\r\nThis will look all open  | browser contexts .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Browser.pages",
      "parameters": [],
      "returnType": "Promise<Page[]>",
      "jsdoc": {
        "description": "Gets a list of all open  | pages  inside this   .\r\n\r\nIf there are multiple  | browser contexts , this\r\nreturns all  | pages  in all\r\n | browser contexts .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Browser.version",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "Gets a string representing this  | browser's  name and\r\nversion.\r\n\r\nFor headless browser, this is similar to `\"HeadlessChrome/61.0.3153.0\"`. For\r\nnon-headless or new-headless, this is similar to `\"Chrome/61.0.3153.0\"`. For\r\nFirefox, it is similar to `\"Firefox/116.0a1\"`.\r\n\r\nThe format of    might change with future releases of\r\nbrowsers.",
        "deprecated": false
      }
    },
    {
      "name": "Browser.userAgent",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "Gets this  | browser's  original user agent.\r\n\r\n | Pages  can override the user agent with\r\n  .",
        "deprecated": false
      }
    },
    {
      "name": "Browser.close",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Closes this  | browser  and all associated\r\n | pages .",
        "deprecated": false
      }
    },
    {
      "name": "Browser.disconnect",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Disconnects Puppeteer from this  | browser , but leaves the\r\nprocess running.",
        "deprecated": false
      }
    },
    {
      "name": "Browser.cookies",
      "parameters": [],
      "returnType": "Promise<Cookie[]>",
      "jsdoc": {
        "description": "Returns all cookies in the default   .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Browser.setCookie",
      "parameters": [
        {
          "name": "cookies",
          "type": "CookieData[]",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Sets cookies in the default   .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Browser.deleteCookie",
      "parameters": [
        {
          "name": "cookies",
          "type": "Cookie[]",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Removes cookies from the default   .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Browser.isConnected",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Whether Puppeteer is connected to this  | browser .",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Browser.on",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<BrowserEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "Browser",
      "jsdoc": {
        "description": "Bind an event listener to fire when an event occurs.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to listen to. Can be a string or symbol."
          },
          {
            "name": "handler",
            "description": "- the function to be called when the event occurs."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Browser.off",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<BrowserEvents>[Key]>",
          "optional": true
        }
      ],
      "returnType": "Browser",
      "jsdoc": {
        "description": "Remove an event listener from firing.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to stop listening to."
          },
          {
            "name": "handler",
            "description": "- the function that should be removed."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Browser.emit",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "event",
          "type": "EventsWithWildcard<BrowserEvents>[Key]",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Emit an event and call any associated listeners.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to emit"
          },
          {
            "name": "eventData",
            "description": "- any data you'd like to emit with the event"
          }
        ],
        "returns": "`true` if there are any listeners, `false` if there are not.",
        "deprecated": false
      }
    },
    {
      "name": "Browser.once",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<BrowserEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "Browser",
      "jsdoc": {
        "description": "Like `on` but the listener will only be fired once and then it will be removed.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to listen to"
          },
          {
            "name": "handler",
            "description": "- the handler function to run when the event occurs"
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Browser.listenerCount",
      "parameters": [
        {
          "name": "type",
          "type": "keyof BrowserEvents",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the number of listeners for a given event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to get the listener count for"
          }
        ],
        "returns": "the number of listeners bound to the given event",
        "deprecated": false
      }
    },
    {
      "name": "Browser.removeAllListeners",
      "parameters": [
        {
          "name": "type",
          "type": "keyof BrowserEvents",
          "optional": true
        }
      ],
      "returnType": "Browser",
      "jsdoc": {
        "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to remove listeners for."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.targets",
      "parameters": [],
      "returnType": "Target[]",
      "jsdoc": {
        "description": "Gets all active  | targets  inside this\r\n | browser context .",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.waitForTarget",
      "parameters": [
        {
          "name": "predicate",
          "type": "(x: Target) => boolean | Promise<boolean>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitForTargetOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Target>",
      "jsdoc": {
        "description": "Waits until a  | target  matching the given `predicate`\r\nappears and returns it.\r\n\r\nThis will look all open  | browser contexts .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.pages",
      "parameters": [],
      "returnType": "Promise<Page[]>",
      "jsdoc": {
        "description": "Gets a list of all open  | pages  inside this\r\n | browser context .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.overridePermissions",
      "parameters": [
        {
          "name": "origin",
          "type": "string",
          "optional": false
        },
        {
          "name": "permissions",
          "type": "Permission[]",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Grants this  | browser context  the given\r\n`permissions` within the given `origin`.",
        "params": [
          {
            "name": "origin",
            "description": "- The origin to grant permissions to, e.g.\r\n\"https://example.com\"."
          },
          {
            "name": "permissions",
            "description": "- An array of permissions to grant. All permissions that\r\nare not listed here will be automatically denied."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.clearPermissionOverrides",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Clears all permission overrides for this\r\n | browser context .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.newPage",
      "parameters": [],
      "returnType": "Promise<Page>",
      "jsdoc": {
        "description": "Creates a new  | page  in this\r\n | browser context .",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.browser",
      "parameters": [],
      "returnType": "Browser",
      "jsdoc": {
        "description": "Gets the  | browser  associated with this\r\n | browser context .",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.close",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Closes this  | browser context  and all associated\r\n | pages .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.cookies",
      "parameters": [],
      "returnType": "Promise<Cookie[]>",
      "jsdoc": {
        "description": "Gets all cookies in the browser context.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.setCookie",
      "parameters": [
        {
          "name": "cookies",
          "type": "CookieData[]",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Sets a cookie in the browser context.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.deleteCookie",
      "parameters": [
        {
          "name": "cookies",
          "type": "Cookie[]",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Removes cookie in the browser context",
        "params": [
          {
            "name": "cookies",
            "description": "-  | cookie  to remove"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.on",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<BrowserContextEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "BrowserContext",
      "jsdoc": {
        "description": "Bind an event listener to fire when an event occurs.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to listen to. Can be a string or symbol."
          },
          {
            "name": "handler",
            "description": "- the function to be called when the event occurs."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.off",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<BrowserContextEvents>[Key]>",
          "optional": true
        }
      ],
      "returnType": "BrowserContext",
      "jsdoc": {
        "description": "Remove an event listener from firing.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to stop listening to."
          },
          {
            "name": "handler",
            "description": "- the function that should be removed."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.emit",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "event",
          "type": "EventsWithWildcard<BrowserContextEvents>[Key]",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Emit an event and call any associated listeners.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to emit"
          },
          {
            "name": "eventData",
            "description": "- any data you'd like to emit with the event"
          }
        ],
        "returns": "`true` if there are any listeners, `false` if there are not.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.once",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<BrowserContextEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "BrowserContext",
      "jsdoc": {
        "description": "Like `on` but the listener will only be fired once and then it will be removed.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to listen to"
          },
          {
            "name": "handler",
            "description": "- the handler function to run when the event occurs"
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.listenerCount",
      "parameters": [
        {
          "name": "type",
          "type": "keyof BrowserContextEvents",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the number of listeners for a given event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to get the listener count for"
          }
        ],
        "returns": "the number of listeners bound to the given event",
        "deprecated": false
      }
    },
    {
      "name": "BrowserContext.removeAllListeners",
      "parameters": [
        {
          "name": "type",
          "type": "keyof BrowserContextEvents",
          "optional": true
        }
      ],
      "returnType": "BrowserContext",
      "jsdoc": {
        "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to remove listeners for."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "BrowserLauncher.launch",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": null
    },
    {
      "name": "BrowserLauncher.executablePath",
      "parameters": [
        {
          "name": "channel",
          "type": "ChromeReleaseChannel",
          "optional": true
        },
        {
          "name": "validatePath",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "BrowserLauncher.defaultArgs",
      "parameters": [
        {
          "name": "object",
          "type": "LaunchOptions",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": null
    },
    {
      "name": "CDPSession.connection",
      "parameters": [],
      "returnType": "Connection",
      "jsdoc": {
        "description": "The underlying connection for this session, if any.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "CDPSession.send",
      "parameters": [
        {
          "name": "method",
          "type": "T",
          "optional": false
        },
        {
          "name": "params",
          "type": "Commands[T][\"paramsType\"][0]",
          "optional": true
        },
        {
          "name": "options",
          "type": "CommandOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Commands[T][\"returnType\"]>",
      "jsdoc": null
    },
    {
      "name": "CDPSession.detach",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Detaches the cdpSession from the target. Once detached, the cdpSession object\r\nwon't emit any events and can't be used to send messages.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSession.id",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the session's id.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSession.on",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "CDPSession",
      "jsdoc": {
        "description": "Bind an event listener to fire when an event occurs.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to listen to. Can be a string or symbol."
          },
          {
            "name": "handler",
            "description": "- the function to be called when the event occurs."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSession.off",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
          "optional": true
        }
      ],
      "returnType": "CDPSession",
      "jsdoc": {
        "description": "Remove an event listener from firing.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to stop listening to."
          },
          {
            "name": "handler",
            "description": "- the function that should be removed."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSession.emit",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "event",
          "type": "EventsWithWildcard<CDPSessionEvents>[Key]",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Emit an event and call any associated listeners.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to emit"
          },
          {
            "name": "eventData",
            "description": "- any data you'd like to emit with the event"
          }
        ],
        "returns": "`true` if there are any listeners, `false` if there are not.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSession.once",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "CDPSession",
      "jsdoc": {
        "description": "Like `on` but the listener will only be fired once and then it will be removed.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to listen to"
          },
          {
            "name": "handler",
            "description": "- the handler function to run when the event occurs"
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "CDPSession.listenerCount",
      "parameters": [
        {
          "name": "type",
          "type": "keyof CDPSessionEvents",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the number of listeners for a given event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to get the listener count for"
          }
        ],
        "returns": "the number of listeners bound to the given event",
        "deprecated": false
      }
    },
    {
      "name": "CDPSession.removeAllListeners",
      "parameters": [
        {
          "name": "type",
          "type": "keyof CDPSessionEvents",
          "optional": true
        }
      ],
      "returnType": "CDPSession",
      "jsdoc": {
        "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to remove listeners for."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Connection.session",
      "parameters": [
        {
          "name": "sessionId",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "CDPSession",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "sessionId",
            "description": "- The session id"
          }
        ],
        "returns": "The current CDP session if it exists",
        "deprecated": false
      }
    },
    {
      "name": "Connection.url",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "Connection.send",
      "parameters": [
        {
          "name": "method",
          "type": "T",
          "optional": false
        },
        {
          "name": "params",
          "type": "Commands[T][\"paramsType\"][0]",
          "optional": true
        },
        {
          "name": "options",
          "type": "CommandOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Commands[T][\"returnType\"]>",
      "jsdoc": null
    },
    {
      "name": "Connection.dispose",
      "parameters": [],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "Connection.createSession",
      "parameters": [
        {
          "name": "targetInfo",
          "type": "TargetInfo",
          "optional": false
        }
      ],
      "returnType": "Promise<CDPSession>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "targetInfo",
            "description": "- The target info"
          }
        ],
        "returns": "The CDP session that is created",
        "deprecated": false
      }
    },
    {
      "name": "Connection.on",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "Connection",
      "jsdoc": {
        "description": "Bind an event listener to fire when an event occurs.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to listen to. Can be a string or symbol."
          },
          {
            "name": "handler",
            "description": "- the function to be called when the event occurs."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Connection.off",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
          "optional": true
        }
      ],
      "returnType": "Connection",
      "jsdoc": {
        "description": "Remove an event listener from firing.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to stop listening to."
          },
          {
            "name": "handler",
            "description": "- the function that should be removed."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Connection.emit",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "event",
          "type": "EventsWithWildcard<CDPSessionEvents>[Key]",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Emit an event and call any associated listeners.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to emit"
          },
          {
            "name": "eventData",
            "description": "- any data you'd like to emit with the event"
          }
        ],
        "returns": "`true` if there are any listeners, `false` if there are not.",
        "deprecated": false
      }
    },
    {
      "name": "Connection.once",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "Connection",
      "jsdoc": {
        "description": "Like `on` but the listener will only be fired once and then it will be removed.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to listen to"
          },
          {
            "name": "handler",
            "description": "- the handler function to run when the event occurs"
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Connection.listenerCount",
      "parameters": [
        {
          "name": "type",
          "type": "keyof CDPSessionEvents",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the number of listeners for a given event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to get the listener count for"
          }
        ],
        "returns": "the number of listeners bound to the given event",
        "deprecated": false
      }
    },
    {
      "name": "Connection.removeAllListeners",
      "parameters": [
        {
          "name": "type",
          "type": "keyof CDPSessionEvents",
          "optional": true
        }
      ],
      "returnType": "Connection",
      "jsdoc": {
        "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to remove listeners for."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "ConsoleMessage.type",
      "parameters": [],
      "returnType": "ConsoleMessageType",
      "jsdoc": {
        "description": "The type of the console message.",
        "deprecated": false
      }
    },
    {
      "name": "ConsoleMessage.text",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The text of the console message.",
        "deprecated": false
      }
    },
    {
      "name": "ConsoleMessage.args",
      "parameters": [],
      "returnType": "JSHandle<unknown>[]",
      "jsdoc": {
        "description": "An array of arguments passed to the console.",
        "deprecated": false
      }
    },
    {
      "name": "ConsoleMessage.location",
      "parameters": [],
      "returnType": "ConsoleMessageLocation",
      "jsdoc": {
        "description": "The location of the console message.",
        "deprecated": false
      }
    },
    {
      "name": "ConsoleMessage.stackTrace",
      "parameters": [],
      "returnType": "ConsoleMessageLocation[]",
      "jsdoc": {
        "description": "The array of locations on the stack of the console message.",
        "deprecated": false
      }
    },
    {
      "name": "Coverage.startJSCoverage",
      "parameters": [
        {
          "name": "options",
          "type": "JSCoverageOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "options",
            "description": "- Set of configurable options for coverage defaults to\r\n`resetOnNavigation : true, reportAnonymousScripts : false,`\r\n`includeRawScriptCoverage : false, useBlockCoverage : true`"
          }
        ],
        "returns": "Promise that resolves when coverage is started.",
        "deprecated": false
      }
    },
    {
      "name": "Coverage.stopJSCoverage",
      "parameters": [],
      "returnType": "Promise<JSCoverageEntry[]>",
      "jsdoc": {
        "description": "Promise that resolves to the array of coverage reports for\r\nall scripts.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Coverage.startCSSCoverage",
      "parameters": [
        {
          "name": "options",
          "type": "CSSCoverageOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "options",
            "description": "- Set of configurable options for coverage, defaults to\r\n`resetOnNavigation : true`"
          }
        ],
        "returns": "Promise that resolves when coverage is started.",
        "deprecated": false
      }
    },
    {
      "name": "Coverage.stopCSSCoverage",
      "parameters": [],
      "returnType": "Promise<CoverageEntry[]>",
      "jsdoc": {
        "description": "Promise that resolves to the array of coverage reports\r\nfor all stylesheets.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "CSSCoverage.start",
      "parameters": [
        {
          "name": "options",
          "type": "{ resetOnNavigation?: boolean; }",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": null
    },
    {
      "name": "CSSCoverage.stop",
      "parameters": [],
      "returnType": "Promise<CoverageEntry[]>",
      "jsdoc": null
    },
    {
      "name": "CustomQuerySelectorRegistry.register",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "handler",
          "type": "CustomQueryHandler",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "CustomQuerySelectorRegistry.unregister",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "CustomQuerySelectorRegistry.get",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "CustomQuerySelector",
      "jsdoc": null
    },
    {
      "name": "CustomQuerySelectorRegistry.clear",
      "parameters": [],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "DeviceRequestPrompt.waitForDevice",
      "parameters": [
        {
          "name": "filter",
          "type": "(device: DeviceRequestPromptDevice) => boolean",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitTimeoutOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<DeviceRequestPromptDevice>",
      "jsdoc": {
        "description": "Resolve to the first device in the prompt matching a filter.",
        "deprecated": false
      }
    },
    {
      "name": "DeviceRequestPrompt.select",
      "parameters": [
        {
          "name": "device",
          "type": "DeviceRequestPromptDevice",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Select a device in the prompt's list.",
        "deprecated": false
      }
    },
    {
      "name": "DeviceRequestPrompt.cancel",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Cancel the prompt.",
        "deprecated": false
      }
    },
    {
      "name": "Dialog.type",
      "parameters": [],
      "returnType": "DialogType",
      "jsdoc": {
        "description": "The type of the dialog.",
        "deprecated": false
      }
    },
    {
      "name": "Dialog.message",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The message displayed in the dialog.",
        "deprecated": false
      }
    },
    {
      "name": "Dialog.defaultValue",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The default value of the prompt, or an empty string if the dialog\r\nis not a `prompt`.",
        "deprecated": false
      }
    },
    {
      "name": "Dialog.accept",
      "parameters": [
        {
          "name": "promptText",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "A promise that resolves when the dialog has been accepted.",
        "params": [
          {
            "name": "promptText",
            "description": "- optional text that will be entered in the dialog\r\nprompt. Has no effect if the dialog's type is not `prompt`."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Dialog.dismiss",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "A promise which will resolve once the dialog has been dismissed",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.$",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        }
      ],
      "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
      "jsdoc": {
        "description": "Queries the current element for an element matching the given selector.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          }
        ],
        "returns": "A  | element handle  to the first element\r\nmatching the given selector. Otherwise, `null`.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.$$",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "options",
          "type": "QueryOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>[]>",
      "jsdoc": {
        "description": "Queries the current element for all elements matching the given selector.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          }
        ],
        "returns": "An array of  | element handles  that point to\r\nelements matching the given selector.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.$eval",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "Runs the given function on the first element matching the given selector in\r\nthe current element.\r\n\r\nIf the given function returns a promise, then this method will wait till\r\nthe promise resolves.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          },
          {
            "name": "pageFunction",
            "description": "- The function to be evaluated in this element's page's\r\ncontext. The first element matching the selector will be passed in as the\r\nfirst argument."
          },
          {
            "name": "args",
            "description": "- Additional arguments to pass to `pageFunction`."
          }
        ],
        "returns": "A promise to the result of the function.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.$$eval",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "Runs the given function on an array of elements matching the given selector\r\nin the current element.\r\n\r\nIf the given function returns a promise, then this method will wait till\r\nthe promise resolves.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          },
          {
            "name": "pageFunction",
            "description": "- The function to be evaluated in the element's page's\r\ncontext. An array of elements matching the given selector will be passed to\r\nthe function as its first argument."
          },
          {
            "name": "args",
            "description": "- Additional arguments to pass to `pageFunction`."
          }
        ],
        "returns": "A promise to the result of the function.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.waitForSelector",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitForSelectorOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
      "jsdoc": {
        "description": "Wait for an element matching the given selector to appear in the current\r\nelement.\r\n\r\nUnlike   , this method does not work across\r\nnavigations or if the element is detached from DOM.",
        "params": [
          {
            "name": "selector",
            "description": "- The selector to query and wait for."
          },
          {
            "name": "options",
            "description": "- Options for customizing waiting behavior."
          }
        ],
        "returns": "An element matching the given selector.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.isVisible",
      "parameters": [],
      "returnType": "Promise<boolean>",
      "jsdoc": {
        "description": "An element is considered to be visible if all of the following is\r\ntrue:\r\n\r\n- the element has\r\n   ://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle | computed styles .\r\n\r\n- the element has a non-empty\r\n   ://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect | bounding client rect .\r\n\r\n- the element's  ://developer.mozilla.org/en-US/docs/Web/CSS/visibility | visibility \r\n  is not `hidden` or `collapse`.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.isHidden",
      "parameters": [],
      "returnType": "Promise<boolean>",
      "jsdoc": {
        "description": "An element is considered to be hidden if at least one of the following is true:\r\n\r\n- the element has no\r\n   ://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle | computed styles .\r\n\r\n- the element has an empty\r\n   ://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect | bounding client rect .\r\n\r\n- the element's  ://developer.mozilla.org/en-US/docs/Web/CSS/visibility | visibility \r\n  is `hidden` or `collapse`.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.toElement",
      "parameters": [
        {
          "name": "tagName",
          "type": "K",
          "optional": false
        }
      ],
      "returnType": "Promise<HandleFor<ElementFor<K>>>",
      "jsdoc": {
        "description": "Converts the current handle to the given element type.",
        "params": [
          {
            "name": "tagName",
            "description": "- The tag name of the desired element type."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.contentFrame",
      "parameters": [],
      "returnType": "Promise<Frame>",
      "jsdoc": {
        "description": "Resolves the frame associated with the element, if any. Always exists for\r\nHTMLIFrameElements.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.contentFrame",
      "parameters": [],
      "returnType": "Promise<Frame>",
      "jsdoc": {
        "description": "Resolves the frame associated with the element, if any. Always exists for\r\nHTMLIFrameElements.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.clickablePoint",
      "parameters": [
        {
          "name": "offset",
          "type": "Offset",
          "optional": true
        }
      ],
      "returnType": "Promise<Point>",
      "jsdoc": {
        "description": "Returns the middle point within an element unless a specific offset is provided.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.hover",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This method scrolls element into view if needed, and then\r\nuses    to hover over the center of the element.\r\nIf the element is detached from DOM, the method throws an error.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.click",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<ClickOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This method scrolls element into view if needed, and then\r\nuses    to click in the center of the element.\r\nIf the element is detached from DOM, the method throws an error.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.drag",
      "parameters": [
        {
          "name": "target",
          "type": "Point | ElementHandle<Element>",
          "optional": false
        }
      ],
      "returnType": "Promise<void | DragData>",
      "jsdoc": {
        "description": "Drags an element over the given element or point.",
        "params": [],
        "returns": "DEPRECATED. When drag interception is enabled, the drag payload is\r\nreturned.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.dragEnter",
      "parameters": [
        {
          "name": "data",
          "type": "DragData",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ElementHandle.dragOver",
      "parameters": [
        {
          "name": "data",
          "type": "DragData",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ElementHandle.drop",
      "parameters": [
        {
          "name": "element",
          "type": "ElementHandle<Element>",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Drops the given element onto the current one.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.drop",
      "parameters": [
        {
          "name": "data",
          "type": "DragData",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Drops the given element onto the current one.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.dragAndDrop",
      "parameters": [
        {
          "name": "target",
          "type": "ElementHandle<Node>",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ delay: number; }",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ElementHandle.select",
      "parameters": [
        {
          "name": "values",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "Promise<string[]>",
      "jsdoc": {
        "description": "Triggers a `change` and `input` event once all the provided options have been\r\nselected. If there's no `<select>` element matching `selector`, the method\r\nthrows an error.",
        "params": [
          {
            "name": "values",
            "description": "- Values of options to select. If the `<select>` has the\r\n`multiple` attribute, all values are considered, otherwise only the first\r\none is taken into account."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.uploadFile",
      "parameters": [
        {
          "name": "paths",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Sets the value of an\r\n ://developer.mozilla.org/en-US/docs/Web/HTML/Element/input | input element \r\nto the given file paths.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.tap",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This method scrolls element into view if needed, and then uses\r\n   to tap in the center of the element.\r\nIf the element is detached from DOM, the method throws an error.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.touchStart",
      "parameters": [],
      "returnType": "Promise<TouchHandle>",
      "jsdoc": {
        "description": "This method scrolls the element into view if needed, and then\r\nstarts a touch in the center of the element.",
        "params": [],
        "returns": "A    representing the touch that was started",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.touchMove",
      "parameters": [
        {
          "name": "touch",
          "type": "TouchHandle",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This method scrolls the element into view if needed, and then\r\nmoves the touch to the center of the element.",
        "params": [
          {
            "name": "touch",
            "description": "- An optional   . If provided, this touch\r\nwill be moved. If not provided, the first active touch will be moved."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.touchEnd",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": null
    },
    {
      "name": "ElementHandle.focus",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Calls  ://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus | focus  on the element.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.type",
      "parameters": [
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<KeyboardTypeOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Focuses the element, and then sends a `keydown`, `keypress`/`input`, and\r\n`keyup` event for each character in the text.\r\n\r\nTo press a special key, like `Control` or `ArrowDown`,\r\nuse   .",
        "params": [
          {
            "name": "options",
            "description": "- Delay in milliseconds. Defaults to 0."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.press",
      "parameters": [
        {
          "name": "key",
          "type": "KeyInput",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<KeyPressOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Focuses the element, and then uses    and   .",
        "params": [
          {
            "name": "key",
            "description": "- Name of key to press, such as `ArrowLeft`.\r\nSee    for a list of all key names."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.boundingBox",
      "parameters": [],
      "returnType": "Promise<BoundingBox>",
      "jsdoc": {
        "description": "This method returns the bounding box of the element (relative to the main frame),\r\nor `null` if the element is  ://drafts.csswg.org/css-display-4/#box-generation | not part of the layout \r\n(example: `display: none`).",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.boxModel",
      "parameters": [],
      "returnType": "Promise<BoxModel>",
      "jsdoc": {
        "description": "This method returns boxes of the element,\r\nor `null` if the element is  ://drafts.csswg.org/css-display-4/#box-generation | not part of the layout \r\n(example: `display: none`).",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.screenshot",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<ScreenshotOptions> & { encoding: \"base64\"; }",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "This method scrolls element into view if needed, and then uses\r\n (screenshot:2)   to take a screenshot of the element.\r\nIf the element is detached from DOM, the method throws an error.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.screenshot",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<ScreenshotOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "description": "This method scrolls element into view if needed, and then uses\r\n (screenshot:2)   to take a screenshot of the element.\r\nIf the element is detached from DOM, the method throws an error.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.isIntersectingViewport",
      "parameters": [
        {
          "name": "options",
          "type": "{ threshold?: number; }",
          "optional": true
        }
      ],
      "returnType": "Promise<boolean>",
      "jsdoc": {
        "description": "Resolves to true if the element is visible in the current viewport. If an\r\nelement is an SVG, we check if the svg owner element is in the viewport\r\ninstead. See https://crbug.com/963246.",
        "params": [
          {
            "name": "options",
            "description": "- Threshold for the intersection between 0 (no intersection) and 1\r\n(full intersection). Defaults to 1."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.scrollIntoView",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Scrolls the element into view using either the automation protocol client\r\nor by calling element.scrollIntoView.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.autofill",
      "parameters": [
        {
          "name": "data",
          "type": "AutofillData",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "If the element is a form input, you can use   \r\nto test if the form is compatible with the browser's autofill\r\nimplementation. Throws an error if the form cannot be autofilled.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.backendNodeId",
      "parameters": [],
      "returnType": "Promise<number>",
      "jsdoc": {
        "description": "When connected using Chrome DevTools Protocol, it returns a\r\nDOM.BackendNodeId for the element.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.evaluate",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "Evaluates the given function with the current handle as its first argument.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.evaluateHandle",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
      "jsdoc": {
        "description": "Evaluates the given function with the current handle as its first argument.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.getProperty",
      "parameters": [
        {
          "name": "propertyName",
          "type": "HandleOr<K>",
          "optional": false
        }
      ],
      "returnType": "Promise<HandleFor<ElementType[K]>>",
      "jsdoc": {
        "description": "Fetches a single property from the referenced object.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.getProperty",
      "parameters": [
        {
          "name": "propertyName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<JSHandle<unknown>>",
      "jsdoc": {
        "description": "Fetches a single property from the referenced object.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.getProperties",
      "parameters": [],
      "returnType": "Promise<Map<string, JSHandle<unknown>>>",
      "jsdoc": {
        "description": "Gets a map of handles representing the properties of the current handle.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.jsonValue",
      "parameters": [],
      "returnType": "Promise<ElementType>",
      "jsdoc": {
        "description": "A vanilla object representing the serializable portions of the\r\nreferenced object.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.asElement",
      "parameters": [],
      "returnType": "ElementHandle<Node>",
      "jsdoc": {
        "description": "Either `null` or the handle itself if the handle is an\r\ninstance of   .",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.dispose",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Releases the object referenced by the handle for garbage collection.",
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of the JSHandle.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ElementHandle.remoteObject",
      "parameters": [],
      "returnType": "RemoteObject",
      "jsdoc": {
        "description": "Provides access to the\r\n ://chromedevtools.github.io/devtools-protocol/tot/Runtime/#type-RemoteObject | Protocol.Runtime.RemoteObject \r\nbacking this handle.",
        "deprecated": false
      }
    },
    {
      "name": "EventEmitter.on",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<Events>[Key]>",
          "optional": false
        }
      ],
      "returnType": "EventEmitter<Events>",
      "jsdoc": {
        "description": "Bind an event listener to fire when an event occurs.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to listen to. Can be a string or symbol."
          },
          {
            "name": "handler",
            "description": "- the function to be called when the event occurs."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "EventEmitter.off",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<Events>[Key]>",
          "optional": true
        }
      ],
      "returnType": "EventEmitter<Events>",
      "jsdoc": {
        "description": "Remove an event listener from firing.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to stop listening to."
          },
          {
            "name": "handler",
            "description": "- the function that should be removed."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "EventEmitter.emit",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "event",
          "type": "EventsWithWildcard<Events>[Key]",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Emit an event and call any associated listeners.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to emit"
          },
          {
            "name": "eventData",
            "description": "- any data you'd like to emit with the event"
          }
        ],
        "returns": "`true` if there are any listeners, `false` if there are not.",
        "deprecated": false
      }
    },
    {
      "name": "EventEmitter.once",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<Events>[Key]>",
          "optional": false
        }
      ],
      "returnType": "EventEmitter<Events>",
      "jsdoc": {
        "description": "Like `on` but the listener will only be fired once and then it will be removed.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to listen to"
          },
          {
            "name": "handler",
            "description": "- the handler function to run when the event occurs"
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "EventEmitter.listenerCount",
      "parameters": [
        {
          "name": "type",
          "type": "keyof Events | \"*\"",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the number of listeners for a given event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to get the listener count for"
          }
        ],
        "returns": "the number of listeners bound to the given event",
        "deprecated": false
      }
    },
    {
      "name": "EventEmitter.removeAllListeners",
      "parameters": [
        {
          "name": "type",
          "type": "keyof Events | \"*\"",
          "optional": true
        }
      ],
      "returnType": "EventEmitter<Events>",
      "jsdoc": {
        "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to remove listeners for."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "ExtensionTransport.send",
      "parameters": [
        {
          "name": "message",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "ExtensionTransport.close",
      "parameters": [],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "FileChooser.isMultiple",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Whether file chooser allow for\r\n ://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple | multiple \r\nfile selection.",
        "deprecated": false
      }
    },
    {
      "name": "FileChooser.accept",
      "parameters": [
        {
          "name": "paths",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Accept the file chooser request with the given file paths.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "FileChooser.cancel",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Closes the file chooser without selecting any files.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.page",
      "parameters": [],
      "returnType": "Page",
      "jsdoc": {
        "description": "The page associated with the frame.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.goto",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "GoToOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<HTTPResponse>",
      "jsdoc": {
        "description": "Navigates the frame or page to the given `url`.",
        "params": [
          {
            "name": "url",
            "description": "- URL to navigate the frame to. The URL should include scheme,\r\ne.g. `https://`"
          },
          {
            "name": "options",
            "description": "- Options to configure waiting behavior."
          }
        ],
        "returns": "A promise which resolves to the main resource response. In case of\r\nmultiple redirects, the navigation will resolve with the response of the\r\nlast redirect.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.waitForNavigation",
      "parameters": [
        {
          "name": "options",
          "type": "WaitForOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<HTTPResponse>",
      "jsdoc": {
        "description": "Waits for the frame to navigate. It is useful for when you run code which\r\nwill indirectly cause the frame to navigate.\r\n\r\nUsage of the\r\n ://developer.mozilla.org/en-US/docs/Web/API/History_API | History API \r\nto change the URL is considered a navigation.",
        "params": [
          {
            "name": "options",
            "description": "- Options to configure waiting behavior."
          }
        ],
        "returns": "A promise which resolves to the main resource response.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.frameElement",
      "parameters": [],
      "returnType": "Promise<ElementHandle<HTMLIFrameElement>>",
      "jsdoc": {
        "description": "",
        "params": [],
        "returns": "The frame element associated with this frame (if any).",
        "deprecated": false
      }
    },
    {
      "name": "Frame.evaluateHandle",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
      "jsdoc": {
        "description": "Behaves identically to    except it's run within\r\nthe context of this frame.\r\n\r\nSee    for details.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.evaluate",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "Behaves identically to    except it's run within\r\nthe context of this frame.\r\n\r\nSee    for details.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.locator",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        }
      ],
      "returnType": "Locator<ParseSelector<Selector, Element>>",
      "jsdoc": {
        "description": "Creates a locator for the provided selector. See    for\r\ndetails and supported actions.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Frame.locator",
      "parameters": [
        {
          "name": "func",
          "type": "() => Awaitable<Ret>",
          "optional": false
        }
      ],
      "returnType": "Locator<Ret>",
      "jsdoc": {
        "description": "Creates a locator for the provided selector. See    for\r\ndetails and supported actions.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Frame.$",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        }
      ],
      "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
      "jsdoc": {
        "description": "Queries the frame for an element matching the given selector.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          }
        ],
        "returns": "A  | element handle  to the first element\r\nmatching the given selector. Otherwise, `null`.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.$$",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "options",
          "type": "QueryOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>[]>",
      "jsdoc": {
        "description": "Queries the frame for all elements matching the given selector.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          }
        ],
        "returns": "An array of  | element handles  that point to\r\nelements matching the given selector.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.$eval",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "Runs the given function on the first element matching the given selector in\r\nthe frame.\r\n\r\nIf the given function returns a promise, then this method will wait till\r\nthe promise resolves.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          },
          {
            "name": "pageFunction",
            "description": "- The function to be evaluated in the frame's context.\r\nThe first element matching the selector will be passed to the function as\r\nits first argument."
          },
          {
            "name": "args",
            "description": "- Additional arguments to pass to `pageFunction`."
          }
        ],
        "returns": "A promise to the result of the function.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.$$eval",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "Runs the given function on an array of elements matching the given selector\r\nin the frame.\r\n\r\nIf the given function returns a promise, then this method will wait till\r\nthe promise resolves.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          },
          {
            "name": "pageFunction",
            "description": "- The function to be evaluated in the frame's context.\r\nAn array of elements matching the given selector will be passed to the\r\nfunction as its first argument."
          },
          {
            "name": "args",
            "description": "- Additional arguments to pass to `pageFunction`."
          }
        ],
        "returns": "A promise to the result of the function.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.waitForSelector",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitForSelectorOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
      "jsdoc": {
        "description": "Waits for an element matching the given selector to appear in the frame.\r\n\r\nThis method works across navigations.",
        "params": [
          {
            "name": "selector",
            "description": "- The selector to query and wait for."
          },
          {
            "name": "options",
            "description": "- Options for customizing waiting behavior."
          }
        ],
        "returns": "An element matching the given selector.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.waitForFunction",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "options",
          "type": "FrameWaitForFunctionOptions",
          "optional": true
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "pageFunction",
            "description": "- the function to evaluate in the frame context."
          },
          {
            "name": "options",
            "description": "- options to configure the polling method and timeout."
          },
          {
            "name": "args",
            "description": "- arguments to pass to the `pageFunction`."
          }
        ],
        "returns": "the promise which resolve when the `pageFunction` returns a truthy value.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.content",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "The full HTML contents of the frame, including the DOCTYPE.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.setContent",
      "parameters": [
        {
          "name": "html",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitForOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Set the content of the frame.",
        "params": [
          {
            "name": "html",
            "description": "- HTML markup to assign to the page."
          },
          {
            "name": "options",
            "description": "- Options to configure how long before timing out and at\r\nwhat point to consider the content setting successful."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Frame.name",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The frame's `name` attribute as specified in the tag.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Frame.url",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The frame's URL.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.parentFrame",
      "parameters": [],
      "returnType": "Frame",
      "jsdoc": {
        "description": "The parent frame, if any. Detached and main frames return `null`.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.childFrames",
      "parameters": [],
      "returnType": "Frame[]",
      "jsdoc": {
        "description": "An array of child frames.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.isDetached",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Is`true` if the frame has been detached. Otherwise, `false`.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Frame.addScriptTag",
      "parameters": [
        {
          "name": "options",
          "type": "FrameAddScriptTagOptions",
          "optional": false
        }
      ],
      "returnType": "Promise<ElementHandle<HTMLScriptElement>>",
      "jsdoc": {
        "description": "Adds a `<script>` tag into the page with the desired url or content.",
        "params": [
          {
            "name": "options",
            "description": "- Options for the script."
          }
        ],
        "returns": "An  | element handle  to the injected\r\n`<script>` element.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.addStyleTag",
      "parameters": [
        {
          "name": "options",
          "type": "Omit<FrameAddStyleTagOptions, \"url\">",
          "optional": false
        }
      ],
      "returnType": "Promise<ElementHandle<HTMLStyleElement>>",
      "jsdoc": {
        "description": "Adds a `HTMLStyleElement` into the frame with the desired URL",
        "params": [],
        "returns": "An  | element handle  to the loaded `<style>`\r\nelement.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.addStyleTag",
      "parameters": [
        {
          "name": "options",
          "type": "FrameAddStyleTagOptions",
          "optional": false
        }
      ],
      "returnType": "Promise<ElementHandle<HTMLLinkElement>>",
      "jsdoc": {
        "description": "Adds a `HTMLStyleElement` into the frame with the desired URL",
        "params": [],
        "returns": "An  | element handle  to the loaded `<style>`\r\nelement.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.click",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<ClickOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Clicks the first element found that matches `selector`.",
        "params": [
          {
            "name": "selector",
            "description": "- The selector to query for."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Frame.focus",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Focuses the first element that matches the `selector`.",
        "params": [
          {
            "name": "selector",
            "description": "- The selector to query for."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Frame.hover",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Hovers the pointer over the center of the first element that matches the\r\n`selector`.",
        "params": [
          {
            "name": "selector",
            "description": "- The selector to query for."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Frame.select",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        },
        {
          "name": "values",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "Promise<string[]>",
      "jsdoc": {
        "description": "Selects a set of value on the first `<select>` element that matches the\r\n`selector`.",
        "params": [
          {
            "name": "selector",
            "description": "- The selector to query for."
          },
          {
            "name": "values",
            "description": "- The array of values to select. If the `<select>` has the\r\n`multiple` attribute, all values are considered, otherwise only the first\r\none is taken into account."
          }
        ],
        "returns": "the list of values that were successfully selected.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.tap",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Taps the first element that matches the `selector`.",
        "params": [
          {
            "name": "selector",
            "description": "- The selector to query for."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Frame.type",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<KeyboardTypeOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character\r\nin the text.",
        "params": [
          {
            "name": "selector",
            "description": "- the selector for the element to type into. If there are\r\nmultiple the first will be used."
          },
          {
            "name": "text",
            "description": "- text to type into the element"
          },
          {
            "name": "options",
            "description": "- takes one option, `delay`, which sets the time to wait\r\nbetween key presses in milliseconds. Defaults to `0`."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Frame.title",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "The frame's title.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.on",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<FrameEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "Frame",
      "jsdoc": {
        "description": "Bind an event listener to fire when an event occurs.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to listen to. Can be a string or symbol."
          },
          {
            "name": "handler",
            "description": "- the function to be called when the event occurs."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.off",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<FrameEvents>[Key]>",
          "optional": true
        }
      ],
      "returnType": "Frame",
      "jsdoc": {
        "description": "Remove an event listener from firing.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to stop listening to."
          },
          {
            "name": "handler",
            "description": "- the function that should be removed."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.emit",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "event",
          "type": "EventsWithWildcard<FrameEvents>[Key]",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Emit an event and call any associated listeners.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to emit"
          },
          {
            "name": "eventData",
            "description": "- any data you'd like to emit with the event"
          }
        ],
        "returns": "`true` if there are any listeners, `false` if there are not.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.once",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<FrameEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "Frame",
      "jsdoc": {
        "description": "Like `on` but the listener will only be fired once and then it will be removed.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to listen to"
          },
          {
            "name": "handler",
            "description": "- the handler function to run when the event occurs"
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Frame.listenerCount",
      "parameters": [
        {
          "name": "type",
          "type": "keyof FrameEvents",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the number of listeners for a given event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to get the listener count for"
          }
        ],
        "returns": "the number of listeners bound to the given event",
        "deprecated": false
      }
    },
    {
      "name": "Frame.removeAllListeners",
      "parameters": [
        {
          "name": "type",
          "type": "keyof FrameEvents",
          "optional": true
        }
      ],
      "returnType": "Frame",
      "jsdoc": {
        "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to remove listeners for."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.url",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The URL of the request",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.continueRequestOverrides",
      "parameters": [],
      "returnType": "ContinueRequestOverrides",
      "jsdoc": {
        "description": "The `ContinueRequestOverrides` that will be used\r\nif the interception is allowed to continue (ie, `abort()` and\r\n`respond()` aren't called).",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.responseForRequest",
      "parameters": [],
      "returnType": "Partial<ResponseForRequest>",
      "jsdoc": {
        "description": "The `ResponseForRequest` that gets used if the\r\ninterception is allowed to respond (ie, `abort()` is not called).",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.abortErrorReason",
      "parameters": [],
      "returnType": "ErrorReason",
      "jsdoc": {
        "description": "The most recent reason for aborting the request",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.interceptResolutionState",
      "parameters": [],
      "returnType": "InterceptResolutionState",
      "jsdoc": {
        "description": "An InterceptResolutionState object describing the current resolution\r\naction and priority.\r\n\r\nInterceptResolutionState contains:\r\naction: InterceptResolutionAction\r\npriority?: number\r\n\r\nInterceptResolutionAction is one of: `abort`, `respond`, `continue`,\r\n`disabled`, `none`, or `already-handled`.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.isInterceptResolutionHandled",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Is `true` if the intercept resolution has already been handled,\r\n`false` otherwise.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.enqueueInterceptAction",
      "parameters": [
        {
          "name": "pendingHandler",
          "type": "() => void | PromiseLike<unknown>",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Adds an async request handler to the processing queue.\r\nDeferred handlers are not guaranteed to execute in any particular order,\r\nbut they are guaranteed to resolve before the request interception\r\nis finalized.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.finalizeInterceptions",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Awaits pending interception handlers and then decides how to fulfill\r\nthe request interception.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.resourceType",
      "parameters": [],
      "returnType": "\"script\" | \"image\" | \"font\" | \"document\" | \"stylesheet\" | \"media\" | \"texttrack\" | \"xhr\" | \"fetch\" | \"prefetch\" | \"eventsource\" | \"websocket\" | \"manifest\" | \"signedexchange\" | \"ping\" | \"cspviolationreport\" | \"preflight\" | \"other\"",
      "jsdoc": {
        "description": "Contains the request's resource type as it was perceived by the rendering\r\nengine.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.method",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The method used (`GET`, `POST`, etc.)",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.postData",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The request's post body, if any.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.hasPostData",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "True when the request has POST data. Note that   \r\nmight still be undefined when this flag is true when the data is too long\r\nor not readily available in the decoded form. In that case, use\r\n  .",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.fetchPostData",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "Fetches the POST data for the request from the browser.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.headers",
      "parameters": [],
      "returnType": "Record<string, string>",
      "jsdoc": {
        "description": "An object with HTTP headers associated with the request. All\r\nheader names are lower-case.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.response",
      "parameters": [],
      "returnType": "HTTPResponse",
      "jsdoc": {
        "description": "A matching `HTTPResponse` object, or null if the response has not\r\nbeen received yet.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.frame",
      "parameters": [],
      "returnType": "Frame",
      "jsdoc": {
        "description": "The frame that initiated the request, or null if navigating to\r\nerror pages.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.isNavigationRequest",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "True if the request is the driver of the current frame's navigation.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.initiator",
      "parameters": [],
      "returnType": "Initiator",
      "jsdoc": {
        "description": "The initiator of the request.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.redirectChain",
      "parameters": [],
      "returnType": "HTTPRequest[]",
      "jsdoc": {
        "description": "A `redirectChain` is a chain of requests initiated to fetch a resource.",
        "params": [],
        "returns": "the chain of requests - if a server responds with at least a\r\nsingle redirect, this chain will contain all requests that were redirected.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.failure",
      "parameters": [],
      "returnType": "{ errorText: string; }",
      "jsdoc": {
        "description": "Access information about the request's failure.",
        "params": [],
        "returns": "`null` unless the request failed. If the request fails this can\r\nreturn an object with `errorText` containing a human-readable error\r\nmessage, e.g. `net::ERR_FAILED`. It is not guaranteed that there will be\r\nfailure text if the request fails.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.continue",
      "parameters": [
        {
          "name": "overrides",
          "type": "ContinueRequestOverrides",
          "optional": true
        },
        {
          "name": "priority",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Continues request with optional request overrides.",
        "params": [
          {
            "name": "overrides",
            "description": "- optional overrides to apply to the request."
          },
          {
            "name": "priority",
            "description": "- If provided, intercept is resolved using cooperative\r\nhandling rules. Otherwise, intercept is resolved immediately."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.respond",
      "parameters": [
        {
          "name": "response",
          "type": "Partial<ResponseForRequest>",
          "optional": false
        },
        {
          "name": "priority",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Fulfills a request with the given response.",
        "params": [
          {
            "name": "response",
            "description": "- the response to fulfill the request with."
          },
          {
            "name": "priority",
            "description": "- If provided, intercept is resolved using\r\ncooperative handling rules. Otherwise, intercept is resolved\r\nimmediately."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTTPRequest.abort",
      "parameters": [
        {
          "name": "errorCode",
          "type": "ErrorCode",
          "optional": true
        },
        {
          "name": "priority",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Aborts a request.",
        "params": [
          {
            "name": "errorCode",
            "description": "- optional error code to provide."
          },
          {
            "name": "priority",
            "description": "- If provided, intercept is resolved using\r\ncooperative handling rules. Otherwise, intercept is resolved\r\nimmediately."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.remoteAddress",
      "parameters": [],
      "returnType": "RemoteAddress",
      "jsdoc": {
        "description": "The IP address and port number used to connect to the remote\r\nserver.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.url",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The URL of the response.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.ok",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "True if the response was successful (status in the range 200-299).",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.status",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "The status code of the response (e.g., 200 for a success).",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.statusText",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The status text of the response (e.g. usually an \"OK\" for a\r\nsuccess).",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.headers",
      "parameters": [],
      "returnType": "Record<string, string>",
      "jsdoc": {
        "description": "An object with HTTP headers associated with the response. All\r\nheader names are lower-case.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.securityDetails",
      "parameters": [],
      "returnType": "SecurityDetails",
      "jsdoc": {
        "description": "   if the response was received over the\r\nsecure connection, or `null` otherwise.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.timing",
      "parameters": [],
      "returnType": "ResourceTiming",
      "jsdoc": {
        "description": "Timing information related to the response.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.content",
      "parameters": [],
      "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "description": "Promise which resolves to a buffer with response body.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.buffer",
      "parameters": [],
      "returnType": "Promise<Buffer<ArrayBufferLike>>",
      "jsdoc": {
        "description": "{@inheritDoc HTTPResponse.content}",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.text",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "Promise which resolves to a text (utf8) representation of response body.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.json",
      "parameters": [],
      "returnType": "Promise<any>",
      "jsdoc": {
        "description": "Promise which resolves to a JSON representation of response body.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.request",
      "parameters": [],
      "returnType": "HTTPRequest",
      "jsdoc": {
        "description": "A matching    object.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.fromCache",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "True if the response was served from either the browser's disk\r\ncache or memory cache.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.fromServiceWorker",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "True if the response was served by a service worker.",
        "deprecated": false
      }
    },
    {
      "name": "HTTPResponse.frame",
      "parameters": [],
      "returnType": "Frame",
      "jsdoc": {
        "description": "A    that initiated this response, or `null` if\r\nnavigating to error pages.",
        "deprecated": false
      }
    },
    {
      "name": "JSCoverage.start",
      "parameters": [
        {
          "name": "options",
          "type": "{ resetOnNavigation?: boolean; reportAnonymousScripts?: boolean; includeRawScriptCoverage?: boolean; useBlockCoverage?: boolean; }",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": null
    },
    {
      "name": "JSCoverage.stop",
      "parameters": [],
      "returnType": "Promise<JSCoverageEntry[]>",
      "jsdoc": null
    },
    {
      "name": "JSHandle.evaluate",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "Evaluates the given function with the current handle as its first argument.",
        "deprecated": false
      }
    },
    {
      "name": "JSHandle.evaluateHandle",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
      "jsdoc": {
        "description": "Evaluates the given function with the current handle as its first argument.",
        "deprecated": false
      }
    },
    {
      "name": "JSHandle.getProperty",
      "parameters": [
        {
          "name": "propertyName",
          "type": "HandleOr<K>",
          "optional": false
        }
      ],
      "returnType": "Promise<HandleFor<T[K]>>",
      "jsdoc": {
        "description": "Fetches a single property from the referenced object.",
        "deprecated": false
      }
    },
    {
      "name": "JSHandle.getProperty",
      "parameters": [
        {
          "name": "propertyName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<JSHandle<unknown>>",
      "jsdoc": {
        "description": "Fetches a single property from the referenced object.",
        "deprecated": false
      }
    },
    {
      "name": "JSHandle.getProperties",
      "parameters": [],
      "returnType": "Promise<Map<string, JSHandle<unknown>>>",
      "jsdoc": {
        "description": "Gets a map of handles representing the properties of the current handle.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "JSHandle.jsonValue",
      "parameters": [],
      "returnType": "Promise<T>",
      "jsdoc": {
        "description": "A vanilla object representing the serializable portions of the\r\nreferenced object.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "JSHandle.asElement",
      "parameters": [],
      "returnType": "ElementHandle<Node>",
      "jsdoc": {
        "description": "Either `null` or the handle itself if the handle is an\r\ninstance of   .",
        "deprecated": false
      }
    },
    {
      "name": "JSHandle.dispose",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Releases the object referenced by the handle for garbage collection.",
        "deprecated": false
      }
    },
    {
      "name": "JSHandle.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of the JSHandle.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "JSHandle.remoteObject",
      "parameters": [],
      "returnType": "RemoteObject",
      "jsdoc": {
        "description": "Provides access to the\r\n ://chromedevtools.github.io/devtools-protocol/tot/Runtime/#type-RemoteObject | Protocol.Runtime.RemoteObject \r\nbacking this handle.",
        "deprecated": false
      }
    },
    {
      "name": "Keyboard.down",
      "parameters": [
        {
          "name": "key",
          "type": "KeyInput",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<KeyDownOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Dispatches a `keydown` event.",
        "params": [
          {
            "name": "key",
            "description": "- Name of key to press, such as `ArrowLeft`.\r\nSee    for a list of all key names."
          },
          {
            "name": "options",
            "description": "- An object of options. Accepts text which, if specified,\r\ngenerates an input event with this text. Accepts commands which, if specified,\r\nis the commands of keyboard shortcuts,\r\nsee  ://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code  for valid command names."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Keyboard.up",
      "parameters": [
        {
          "name": "key",
          "type": "KeyInput",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Dispatches a `keyup` event.",
        "params": [
          {
            "name": "key",
            "description": "- Name of key to release, such as `ArrowLeft`.\r\nSee  | KeyInput \r\nfor a list of all key names."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Keyboard.sendCharacter",
      "parameters": [
        {
          "name": "char",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Dispatches a `keypress` and `input` event.\r\nThis does not send a `keydown` or `keyup` event.",
        "params": [
          {
            "name": "char",
            "description": "- Character to send into the page."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Keyboard.type",
      "parameters": [
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<KeyboardTypeOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Sends a `keydown`, `keypress`/`input`,\r\nand `keyup` event for each character in the text.",
        "params": [
          {
            "name": "text",
            "description": "- A text to type into a focused element."
          },
          {
            "name": "options",
            "description": "- An object of options. Accepts delay which,\r\nif specified, is the time to wait between `keydown` and `keyup` in milliseconds.\r\nDefaults to 0."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Keyboard.press",
      "parameters": [
        {
          "name": "key",
          "type": "KeyInput",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<KeyPressOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Shortcut for   \r\nand   .",
        "params": [
          {
            "name": "key",
            "description": "- Name of key to press, such as `ArrowLeft`.\r\nSee    for a list of all key names."
          },
          {
            "name": "options",
            "description": "- An object of options. Accepts text which, if specified,\r\ngenerates an input event with this text. Accepts delay which,\r\nif specified, is the time to wait between `keydown` and `keyup` in milliseconds.\r\nDefaults to 0. Accepts commands which, if specified,\r\nis the commands of keyboard shortcuts,\r\nsee  ://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code  for valid command names."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Locator.setTimeout",
      "parameters": [
        {
          "name": "timeout",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Locator<T>",
      "jsdoc": {
        "description": "Creates a new locator instance by cloning the current locator and setting\r\nthe total timeout for the locator actions.\r\n\r\nPass `0` to disable timeout.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Locator.setVisibility",
      "parameters": [
        {
          "name": "visibility",
          "type": "VisibilityOption",
          "optional": false
        }
      ],
      "returnType": "Locator<NodeType>",
      "jsdoc": {
        "description": "Creates a new locator instance by cloning the current locator with the\r\nvisibility property changed to the specified value.",
        "deprecated": false
      }
    },
    {
      "name": "Locator.setWaitForEnabled",
      "parameters": [
        {
          "name": "value",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "Locator<NodeType>",
      "jsdoc": {
        "description": "Creates a new locator instance by cloning the current locator and\r\nspecifying whether to wait for input elements to become enabled before the\r\naction. Applicable to `click` and `fill` actions.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Locator.setEnsureElementIsInTheViewport",
      "parameters": [
        {
          "name": "value",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "Locator<ElementType>",
      "jsdoc": {
        "description": "Creates a new locator instance by cloning the current locator and\r\nspecifying whether the locator should scroll the element into viewport if\r\nit is not in the viewport already.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Locator.setWaitForStableBoundingBox",
      "parameters": [
        {
          "name": "value",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "Locator<ElementType>",
      "jsdoc": {
        "description": "Creates a new locator instance by cloning the current locator and\r\nspecifying whether the locator has to wait for the element's bounding box\r\nto be same between two consecutive animation frames.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Locator.clone",
      "parameters": [],
      "returnType": "Locator<T>",
      "jsdoc": {
        "description": "Clones the locator.",
        "deprecated": false
      }
    },
    {
      "name": "Locator.waitHandle",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<ActionOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<HandleFor<T>>",
      "jsdoc": {
        "description": "Waits for the locator to get a handle from the page.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Locator.wait",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<ActionOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<T>",
      "jsdoc": {
        "description": "Waits for the locator to get the serialized value from the page.\r\n\r\nNote this requires the value to be JSON-serializable.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Locator.map",
      "parameters": [
        {
          "name": "mapper",
          "type": "Mapper<T, To>",
          "optional": false
        }
      ],
      "returnType": "Locator<To>",
      "jsdoc": {
        "description": "Maps the locator using the provided mapper.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Locator.filter",
      "parameters": [
        {
          "name": "predicate",
          "type": "Predicate<T, S>",
          "optional": false
        }
      ],
      "returnType": "Locator<S>",
      "jsdoc": {
        "description": "Creates an expectation that is evaluated against located values.\r\n\r\nIf the expectations do not match, then the locator will retry.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Locator.click",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<LocatorClickOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Clicks the located element.",
        "deprecated": false
      }
    },
    {
      "name": "Locator.fill",
      "parameters": [
        {
          "name": "value",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<ActionOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Fills out the input identified by the locator using the provided value. The\r\ntype of the input is determined at runtime and the appropriate fill-out\r\nmethod is chosen based on the type. `contenteditable`, select, textarea and\r\ninput elements are supported.",
        "deprecated": false
      }
    },
    {
      "name": "Locator.hover",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<ActionOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Hovers over the located element.",
        "deprecated": false
      }
    },
    {
      "name": "Locator.scroll",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<LocatorScrollOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Scrolls the located element.",
        "deprecated": false
      }
    },
    {
      "name": "Locator.on",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<LocatorEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "Locator<T>",
      "jsdoc": {
        "description": "Bind an event listener to fire when an event occurs.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to listen to. Can be a string or symbol."
          },
          {
            "name": "handler",
            "description": "- the function to be called when the event occurs."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Locator.off",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<LocatorEvents>[Key]>",
          "optional": true
        }
      ],
      "returnType": "Locator<T>",
      "jsdoc": {
        "description": "Remove an event listener from firing.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to stop listening to."
          },
          {
            "name": "handler",
            "description": "- the function that should be removed."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Locator.emit",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "event",
          "type": "EventsWithWildcard<LocatorEvents>[Key]",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Emit an event and call any associated listeners.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to emit"
          },
          {
            "name": "eventData",
            "description": "- any data you'd like to emit with the event"
          }
        ],
        "returns": "`true` if there are any listeners, `false` if there are not.",
        "deprecated": false
      }
    },
    {
      "name": "Locator.once",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<LocatorEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "Locator<T>",
      "jsdoc": {
        "description": "Like `on` but the listener will only be fired once and then it will be removed.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to listen to"
          },
          {
            "name": "handler",
            "description": "- the handler function to run when the event occurs"
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Locator.listenerCount",
      "parameters": [
        {
          "name": "type",
          "type": "keyof LocatorEvents",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the number of listeners for a given event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to get the listener count for"
          }
        ],
        "returns": "the number of listeners bound to the given event",
        "deprecated": false
      }
    },
    {
      "name": "Locator.removeAllListeners",
      "parameters": [
        {
          "name": "type",
          "type": "keyof LocatorEvents",
          "optional": true
        }
      ],
      "returnType": "Locator<T>",
      "jsdoc": {
        "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to remove listeners for."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Mouse.reset",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Resets the mouse to the default state: No buttons pressed; position at\r\n(0,0).",
        "deprecated": false
      }
    },
    {
      "name": "Mouse.move",
      "parameters": [
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<MouseMoveOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Moves the mouse to the given coordinate.",
        "params": [
          {
            "name": "x",
            "description": "- Horizontal position of the mouse."
          },
          {
            "name": "y",
            "description": "- Vertical position of the mouse."
          },
          {
            "name": "options",
            "description": "- Options to configure behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Mouse.down",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<MouseOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Presses the mouse.",
        "params": [
          {
            "name": "options",
            "description": "- Options to configure behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Mouse.up",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<MouseOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Releases the mouse.",
        "params": [
          {
            "name": "options",
            "description": "- Options to configure behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Mouse.click",
      "parameters": [
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<MouseClickOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.",
        "params": [
          {
            "name": "x",
            "description": "- Horizontal position of the mouse."
          },
          {
            "name": "y",
            "description": "- Vertical position of the mouse."
          },
          {
            "name": "options",
            "description": "- Options to configure behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Mouse.wheel",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<MouseWheelOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Dispatches a `mousewheel` event.",
        "params": [
          {
            "name": "options",
            "description": "- Optional: `MouseWheelOptions`."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Mouse.drag",
      "parameters": [
        {
          "name": "start",
          "type": "Point",
          "optional": false
        },
        {
          "name": "target",
          "type": "Point",
          "optional": false
        }
      ],
      "returnType": "Promise<DragData>",
      "jsdoc": {
        "description": "Dispatches a `drag` event.",
        "params": [
          {
            "name": "start",
            "description": "- starting point for drag"
          },
          {
            "name": "target",
            "description": "- point to drag to"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Mouse.dragEnter",
      "parameters": [
        {
          "name": "target",
          "type": "Point",
          "optional": false
        },
        {
          "name": "data",
          "type": "DragData",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Dispatches a `dragenter` event.",
        "params": [
          {
            "name": "target",
            "description": "- point for emitting `dragenter` event"
          },
          {
            "name": "data",
            "description": "- drag data containing items and operations mask"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Mouse.dragOver",
      "parameters": [
        {
          "name": "target",
          "type": "Point",
          "optional": false
        },
        {
          "name": "data",
          "type": "DragData",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Dispatches a `dragover` event.",
        "params": [
          {
            "name": "target",
            "description": "- point for emitting `dragover` event"
          },
          {
            "name": "data",
            "description": "- drag data containing items and operations mask"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Mouse.drop",
      "parameters": [
        {
          "name": "target",
          "type": "Point",
          "optional": false
        },
        {
          "name": "data",
          "type": "DragData",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Performs a dragenter, dragover, and drop in sequence.",
        "params": [
          {
            "name": "target",
            "description": "- point to drop on"
          },
          {
            "name": "data",
            "description": "- drag data containing items and operations mask"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Mouse.dragAndDrop",
      "parameters": [
        {
          "name": "start",
          "type": "Point",
          "optional": false
        },
        {
          "name": "target",
          "type": "Point",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ delay?: number; }",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Performs a drag, dragenter, dragover, and drop in sequence.",
        "params": [
          {
            "name": "start",
            "description": "- point to drag from"
          },
          {
            "name": "target",
            "description": "- point to drop on"
          },
          {
            "name": "options",
            "description": "- An object of options. Accepts delay which,\r\nif specified, is the time to wait between `dragover` and `drop` in milliseconds.\r\nDefaults to 0."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.isServiceWorkerBypassed",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "`true` if the service worker are being bypassed, `false` otherwise.",
        "deprecated": false
      }
    },
    {
      "name": "Page.isDragInterceptionEnabled",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "`true` if drag events are being intercepted, `false` otherwise.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Page.isJavaScriptEnabled",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "`true` if the page has JavaScript enabled, `false` otherwise.",
        "deprecated": false
      }
    },
    {
      "name": "Page.waitForFileChooser",
      "parameters": [
        {
          "name": "options",
          "type": "WaitTimeoutOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<FileChooser>",
      "jsdoc": {
        "description": "This method is typically coupled with an action that triggers file\r\nchoosing.\r\n\r\n:::caution\r\n\r\nThis must be called before the file chooser is launched. It will not return\r\na currently active file chooser.\r\n\r\n:::\r\n\r\n:::caution\r\n\r\nInterception of file dialogs triggered via DOM APIs such as\r\nwindow.showOpenFilePicker is currently not supported.\r\n\r\n:::",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Page.setGeolocation",
      "parameters": [
        {
          "name": "options",
          "type": "GeolocationOptions",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Sets the page's geolocation.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Page.target",
      "parameters": [],
      "returnType": "Target",
      "jsdoc": {
        "description": "A target this page was created from.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Page.browser",
      "parameters": [],
      "returnType": "Browser",
      "jsdoc": {
        "description": "Get the browser the page belongs to.",
        "deprecated": false
      }
    },
    {
      "name": "Page.browserContext",
      "parameters": [],
      "returnType": "BrowserContext",
      "jsdoc": {
        "description": "Get the browser context that the page belongs to.",
        "deprecated": false
      }
    },
    {
      "name": "Page.mainFrame",
      "parameters": [],
      "returnType": "Frame",
      "jsdoc": {
        "description": "The page's main frame.",
        "deprecated": false
      }
    },
    {
      "name": "Page.createCDPSession",
      "parameters": [],
      "returnType": "Promise<CDPSession>",
      "jsdoc": {
        "description": "Creates a Chrome Devtools Protocol session attached to the page.",
        "deprecated": false
      }
    },
    {
      "name": "Page.frames",
      "parameters": [],
      "returnType": "Frame[]",
      "jsdoc": {
        "description": "An array of all frames attached to the page.",
        "deprecated": false
      }
    },
    {
      "name": "Page.workers",
      "parameters": [],
      "returnType": "WebWorker[]",
      "jsdoc": {
        "description": "All of the dedicated  * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API |      * WebWorkers} associated with the page.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Page.setRequestInterception",
      "parameters": [
        {
          "name": "value",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Activating request interception enables   ,\r\n   and    methods. This\r\nprovides the capability to modify network requests that are made by a page.\r\n\r\nOnce request interception is enabled, every request will stall unless it's\r\ncontinued, responded or aborted; or completed using the browser cache.\r\n\r\nSee the\r\n ://pptr.dev/guides/network-interception|Request interception guide \r\nfor more details.",
        "params": [
          {
            "name": "value",
            "description": "- Whether to enable request interception."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.setBypassServiceWorker",
      "parameters": [
        {
          "name": "bypass",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Toggles ignoring of service worker for each request.",
        "params": [
          {
            "name": "bypass",
            "description": "- Whether to bypass service worker and load from network."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.setDragInterception",
      "parameters": [
        {
          "name": "enabled",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "enabled",
            "description": "- Whether to enable drag interception."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "Page.setOfflineMode",
      "parameters": [
        {
          "name": "enabled",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Sets the network connection to offline.\r\n\r\nIt does not change the parameters used in  ",
        "params": [
          {
            "name": "enabled",
            "description": "- When `true`, enables offline mode for the page."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.emulateNetworkConditions",
      "parameters": [
        {
          "name": "networkConditions",
          "type": "NetworkConditions",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This does not affect WebSockets and WebRTC PeerConnections (see\r\nhttps://crbug.com/563644). To set the page offline, you can use\r\n  .\r\n\r\nA list of predefined network conditions can be used by importing\r\n  .",
        "params": [
          {
            "name": "networkConditions",
            "description": "- Passing `null` disables network condition\r\nemulation."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.setDefaultNavigationTimeout",
      "parameters": [
        {
          "name": "timeout",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "This setting will change the default maximum navigation time for the\r\nfollowing methods and related shortcuts:\r\n\r\n-  | page.goBack(options) \r\n\r\n-  | page.goForward(options) \r\n\r\n-  | page.goto(url,options) \r\n\r\n-  | page.reload(options) \r\n\r\n-  | page.setContent(html,options) \r\n\r\n-  | page.waitForNavigation(options)",
        "params": [
          {
            "name": "timeout",
            "description": "- Maximum navigation time in milliseconds."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.setDefaultTimeout",
      "parameters": [
        {
          "name": "timeout",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "timeout",
            "description": "- Maximum time in milliseconds."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.getDefaultTimeout",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Maximum time in milliseconds.",
        "deprecated": false
      }
    },
    {
      "name": "Page.getDefaultNavigationTimeout",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Maximum navigation time in milliseconds.",
        "deprecated": false
      }
    },
    {
      "name": "Page.locator",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        }
      ],
      "returnType": "Locator<ParseSelector<Selector, Element>>",
      "jsdoc": {
        "description": "Creates a locator for the provided selector. See    for\r\ndetails and supported actions.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.locator",
      "parameters": [
        {
          "name": "func",
          "type": "() => Awaitable<Ret>",
          "optional": false
        }
      ],
      "returnType": "Locator<Ret>",
      "jsdoc": {
        "description": "Creates a locator for the provided selector. See    for\r\ndetails and supported actions.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.$",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        }
      ],
      "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
      "jsdoc": {
        "description": "Finds the first element that matches the selector. If no element matches\r\nthe selector, the return value resolves to `null`.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.$$",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "options",
          "type": "QueryOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>[]>",
      "jsdoc": {
        "description": "Finds elements on the page that match the selector. If no elements\r\nmatch the selector, the return value resolves to `[]`.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.evaluateHandle",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "pageFunction",
            "description": "- a function that is run within the page"
          },
          {
            "name": "args",
            "description": "- arguments to be passed to the pageFunction"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.queryObjects",
      "parameters": [
        {
          "name": "prototypeHandle",
          "type": "JSHandle<Prototype>",
          "optional": false
        }
      ],
      "returnType": "Promise<JSHandle<Prototype[]>>",
      "jsdoc": {
        "description": "This method iterates the JavaScript heap and finds all objects with the\r\ngiven prototype.",
        "params": [
          {
            "name": "prototypeHandle",
            "description": "- a handle to the object prototype."
          }
        ],
        "returns": "Promise which resolves to a handle to an array of objects with\r\nthis prototype.",
        "deprecated": false
      }
    },
    {
      "name": "Page.$eval",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "This method finds the first element within the page that matches the selector\r\nand passes the result as the first argument to the `pageFunction`.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          },
          {
            "name": "pageFunction",
            "description": "- the function to be evaluated in the page context.\r\nWill be passed the result of the element matching the selector as its\r\nfirst argument."
          },
          {
            "name": "args",
            "description": "- any additional arguments to pass through to `pageFunction`."
          }
        ],
        "returns": "The result of calling `pageFunction`. If it returns an element it\r\nis wrapped in an   , else the raw value itself is\r\nreturned.",
        "deprecated": false
      }
    },
    {
      "name": "Page.$$eval",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "This method returns all elements matching the selector and passes the\r\nresulting array as the first argument to the `pageFunction`.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          },
          {
            "name": "pageFunction",
            "description": "- the function to be evaluated in the page context.\r\nWill be passed an array of matching elements as its first argument."
          },
          {
            "name": "args",
            "description": "- any additional arguments to pass through to `pageFunction`."
          }
        ],
        "returns": "The result of calling `pageFunction`. If it returns an element it\r\nis wrapped in an   , else the raw value itself is\r\nreturned.",
        "deprecated": false
      }
    },
    {
      "name": "Page.cookies",
      "parameters": [
        {
          "name": "urls",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "Promise<Cookie[]>",
      "jsdoc": {
        "description": "If no URLs are specified, this method returns cookies for the\r\ncurrent page URL. If URLs are specified, only cookies for those\r\nURLs are returned.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Page.deleteCookie",
      "parameters": [
        {
          "name": "cookies",
          "type": "DeleteCookiesRequest[]",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Page.setCookie",
      "parameters": [
        {
          "name": "cookies",
          "type": "CookieParam[]",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Page.addScriptTag",
      "parameters": [
        {
          "name": "options",
          "type": "FrameAddScriptTagOptions",
          "optional": false
        }
      ],
      "returnType": "Promise<ElementHandle<HTMLScriptElement>>",
      "jsdoc": {
        "description": "Adds a `<script>` tag into the page with the desired URL or content.",
        "params": [
          {
            "name": "options",
            "description": "- Options for the script."
          }
        ],
        "returns": "An  | element handle  to the injected\r\n`<script>` element.",
        "deprecated": false
      }
    },
    {
      "name": "Page.addStyleTag",
      "parameters": [
        {
          "name": "options",
          "type": "Omit<FrameAddStyleTagOptions, \"url\">",
          "optional": false
        }
      ],
      "returnType": "Promise<ElementHandle<HTMLStyleElement>>",
      "jsdoc": {
        "description": "Adds a `<link rel=\"stylesheet\">` tag into the page with the desired URL or\r\na `<style type=\"text/css\">` tag with the content.\r\n\r\nShortcut for\r\n (addStyleTag:2) | page.mainFrame().addStyleTag(options) .",
        "params": [],
        "returns": "An  | element handle  to the injected `<link>`\r\nor `<style>` element.",
        "deprecated": false
      }
    },
    {
      "name": "Page.addStyleTag",
      "parameters": [
        {
          "name": "options",
          "type": "FrameAddStyleTagOptions",
          "optional": false
        }
      ],
      "returnType": "Promise<ElementHandle<HTMLLinkElement>>",
      "jsdoc": {
        "description": "Adds a `<link rel=\"stylesheet\">` tag into the page with the desired URL or\r\na `<style type=\"text/css\">` tag with the content.\r\n\r\nShortcut for\r\n (addStyleTag:2) | page.mainFrame().addStyleTag(options) .",
        "params": [],
        "returns": "An  | element handle  to the injected `<link>`\r\nor `<style>` element.",
        "deprecated": false
      }
    },
    {
      "name": "Page.exposeFunction",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "pptrFunction",
          "type": "Function | { default: Function; }",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "The method adds a function called `name` on the page's `window` object.\r\nWhen called, the function executes `puppeteerFunction` in node.js and\r\nreturns a `Promise` which resolves to the return value of\r\n`puppeteerFunction`.\r\n\r\nIf the puppeteerFunction returns a `Promise`, it will be awaited.\r\n\r\n:::note\r\n\r\nFunctions installed via `page.exposeFunction` survive navigations.\r\n\r\n:::",
        "params": [
          {
            "name": "name",
            "description": "- Name of the function on the window object"
          },
          {
            "name": "pptrFunction",
            "description": "- Callback function which will be called in Puppeteer's\r\ncontext."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.removeExposedFunction",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "The method removes a previously added function via $  \r\ncalled `name` from the page's `window` object.",
        "deprecated": false
      }
    },
    {
      "name": "Page.authenticate",
      "parameters": [
        {
          "name": "credentials",
          "type": "Credentials",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Provide credentials for `HTTP authentication`.\r\n\r\n:::note\r\n\r\nRequest interception will be turned on behind the scenes to\r\nimplement authentication. This might affect performance.\r\n\r\n:::",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Page.setExtraHTTPHeaders",
      "parameters": [
        {
          "name": "headers",
          "type": "Record<string, string>",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "The extra HTTP headers will be sent with every request the page initiates.\r\n\r\n:::tip\r\n\r\nAll HTTP header names are lowercased. (HTTP headers are\r\ncase-insensitive, so this shouldn’t impact your server code.)\r\n\r\n:::\r\n\r\n:::note\r\n\r\npage.setExtraHTTPHeaders does not guarantee the order of headers in\r\nthe outgoing requests.\r\n\r\n:::",
        "params": [
          {
            "name": "headers",
            "description": "- An object containing additional HTTP headers to be sent\r\nwith every request. All header values must be strings."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.setUserAgent",
      "parameters": [
        {
          "name": "userAgent",
          "type": "string",
          "optional": false
        },
        {
          "name": "userAgentMetadata",
          "type": "UserAgentMetadata",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "userAgent",
            "description": "- Specific user agent to use in this page"
          },
          {
            "name": "userAgentData",
            "description": "- Specific user agent client hint data to use in this\r\npage"
          }
        ],
        "returns": "Promise which resolves when the user agent is set.",
        "deprecated": false
      }
    },
    {
      "name": "Page.metrics",
      "parameters": [],
      "returnType": "Promise<Metrics>",
      "jsdoc": {
        "description": "Object containing metrics as key/value pairs.",
        "params": [],
        "returns": "- `Timestamp` : The timestamp when the metrics sample was taken.\r\n\r\n- `Documents` : Number of documents in the page.\r\n\r\n- `Frames` : Number of frames in the page.\r\n\r\n- `JSEventListeners` : Number of events in the page.\r\n\r\n- `Nodes` : Number of DOM nodes in the page.\r\n\r\n- `LayoutCount` : Total number of full or partial page layout.\r\n\r\n- `RecalcStyleCount` : Total number of page style recalculations.\r\n\r\n- `LayoutDuration` : Combined durations of all page layouts.\r\n\r\n- `RecalcStyleDuration` : Combined duration of all page style\r\n  recalculations.\r\n\r\n- `ScriptDuration` : Combined duration of JavaScript execution.\r\n\r\n- `TaskDuration` : Combined duration of all tasks performed by the browser.\r\n\r\n- `JSHeapUsedSize` : Used JavaScript heap size.\r\n\r\n- `JSHeapTotalSize` : Total JavaScript heap size.",
        "deprecated": false
      }
    },
    {
      "name": "Page.url",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The page's URL.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Page.content",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "The full HTML contents of the page, including the DOCTYPE.",
        "deprecated": false
      }
    },
    {
      "name": "Page.setContent",
      "parameters": [
        {
          "name": "html",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitForOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Set the content of the page.",
        "params": [
          {
            "name": "html",
            "description": "- HTML markup to assign to the page."
          },
          {
            "name": "options",
            "description": "- Parameters that has some properties."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.goto",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "GoToOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<HTTPResponse>",
      "jsdoc": {
        "description": "{@inheritDoc Frame.goto}",
        "deprecated": false
      }
    },
    {
      "name": "Page.reload",
      "parameters": [
        {
          "name": "options",
          "type": "WaitForOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<HTTPResponse>",
      "jsdoc": {
        "description": "Reloads the page.",
        "params": [
          {
            "name": "options",
            "description": "- Options to configure waiting behavior."
          }
        ],
        "returns": "A promise which resolves to the main resource response. In case of\r\nmultiple redirects, the navigation will resolve with the response of the\r\nlast redirect.",
        "deprecated": false
      }
    },
    {
      "name": "Page.waitForNavigation",
      "parameters": [
        {
          "name": "options",
          "type": "WaitForOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<HTTPResponse>",
      "jsdoc": {
        "description": "Waits for the page to navigate to a new URL or to reload. It is useful when\r\nyou run code that will indirectly cause the page to navigate.",
        "params": [
          {
            "name": "options",
            "description": "- Navigation parameters which might have the following\r\nproperties:"
          }
        ],
        "returns": "A `Promise` which resolves to the main resource response.\r\n\r\n- In case of multiple redirects, the navigation will resolve with the\r\nresponse of the last redirect.\r\n- In case of navigation to a different anchor or navigation due to History\r\nAPI usage, the navigation will resolve with `null`.",
        "deprecated": false
      }
    },
    {
      "name": "Page.waitForRequest",
      "parameters": [
        {
          "name": "urlOrPredicate",
          "type": "string | AwaitablePredicate<HTTPRequest>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitTimeoutOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<HTTPRequest>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "urlOrPredicate",
            "description": "- A URL or predicate to wait for"
          },
          {
            "name": "options",
            "description": "- Optional waiting parameters"
          }
        ],
        "returns": "Promise which resolves to the matched request",
        "deprecated": false
      }
    },
    {
      "name": "Page.waitForResponse",
      "parameters": [
        {
          "name": "urlOrPredicate",
          "type": "string | AwaitablePredicate<HTTPResponse>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitTimeoutOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<HTTPResponse>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "urlOrPredicate",
            "description": "- A URL or predicate to wait for."
          },
          {
            "name": "options",
            "description": "- Optional waiting parameters"
          }
        ],
        "returns": "Promise which resolves to the matched response.",
        "deprecated": false
      }
    },
    {
      "name": "Page.waitForNetworkIdle",
      "parameters": [
        {
          "name": "options",
          "type": "WaitForNetworkIdleOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Waits for the network to be idle.",
        "params": [
          {
            "name": "options",
            "description": "- Options to configure waiting behavior."
          }
        ],
        "returns": "A promise which resolves once the network is idle.",
        "deprecated": false
      }
    },
    {
      "name": "Page.waitForFrame",
      "parameters": [
        {
          "name": "urlOrPredicate",
          "type": "string | ((frame: Frame) => Awaitable<boolean>)",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitTimeoutOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Frame>",
      "jsdoc": {
        "description": "Waits for a frame matching the given conditions to appear.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Page.goBack",
      "parameters": [
        {
          "name": "options",
          "type": "WaitForOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<HTTPResponse>",
      "jsdoc": {
        "description": "This method navigate to the previous page in history.",
        "params": [
          {
            "name": "options",
            "description": "- Navigation parameters"
          }
        ],
        "returns": "Promise which resolves to the main resource response. In case of\r\nmultiple redirects, the navigation will resolve with the response of the\r\nlast redirect. If can not go back, resolves to `null`.",
        "deprecated": false
      }
    },
    {
      "name": "Page.goForward",
      "parameters": [
        {
          "name": "options",
          "type": "WaitForOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<HTTPResponse>",
      "jsdoc": {
        "description": "This method navigate to the next page in history.",
        "params": [
          {
            "name": "options",
            "description": "- Navigation Parameter"
          }
        ],
        "returns": "Promise which resolves to the main resource response. In case of\r\nmultiple redirects, the navigation will resolve with the response of the\r\nlast redirect. If can not go forward, resolves to `null`.",
        "deprecated": false
      }
    },
    {
      "name": "Page.bringToFront",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Brings page to front (activates tab).",
        "deprecated": false
      }
    },
    {
      "name": "Page.emulate",
      "parameters": [
        {
          "name": "device",
          "type": "Device",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Emulates a given device's metrics and user agent.\r\n\r\nTo aid emulation, Puppeteer provides a list of known devices that can be\r\nvia   .",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Page.setJavaScriptEnabled",
      "parameters": [
        {
          "name": "enabled",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "enabled",
            "description": "- Whether or not to enable JavaScript on the page."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.setBypassCSP",
      "parameters": [
        {
          "name": "enabled",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Toggles bypassing page's Content-Security-Policy.",
        "params": [
          {
            "name": "enabled",
            "description": "- sets bypassing of page's Content-Security-Policy."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.emulateMediaType",
      "parameters": [
        {
          "name": "type",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "type",
            "description": "- Changes the CSS media type of the page. The only allowed\r\nvalues are `screen`, `print` and `null`. Passing `null` disables CSS media\r\nemulation."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.emulateCPUThrottling",
      "parameters": [
        {
          "name": "factor",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Enables CPU throttling to emulate slow CPUs.",
        "params": [
          {
            "name": "factor",
            "description": "- slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.emulateMediaFeatures",
      "parameters": [
        {
          "name": "features",
          "type": "MediaFeature[]",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "features",
            "description": "- `<?Array<Object>>` Given an array of media feature\r\nobjects, emulates CSS media features on the page. Each media feature object\r\nmust have the following properties:"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.emulateTimezone",
      "parameters": [
        {
          "name": "timezoneId",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "timezoneId",
            "description": "- Changes the timezone of the page. See\r\n ://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt | ICU’s metaZones.txt \r\nfor a list of supported timezone IDs. Passing\r\n`null` disables timezone emulation."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.emulateIdleState",
      "parameters": [
        {
          "name": "overrides",
          "type": "{ isUserActive: boolean; isScreenUnlocked: boolean; }",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Emulates the idle state.\r\nIf no arguments set, clears idle state emulation.",
        "params": [
          {
            "name": "overrides",
            "description": "- Mock idle state. If not set, clears idle overrides"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.emulateVisionDeficiency",
      "parameters": [
        {
          "name": "type",
          "type": "\"none\" | \"blurredVision\" | \"reducedContrast\" | \"achromatopsia\" | \"deuteranopia\" | \"protanopia\" | \"tritanopia\"",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Simulates the given vision deficiency on the page.",
        "params": [
          {
            "name": "type",
            "description": "- the type of deficiency to simulate, or `'none'` to reset."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.setViewport",
      "parameters": [
        {
          "name": "viewport",
          "type": "Viewport",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "`page.setViewport` will resize the page. A lot of websites don't expect\r\nphones to change size, so you should set the viewport before navigating to\r\nthe page.\r\n\r\nIn the case of multiple pages in a single browser, each page can have its\r\nown viewport size. Setting the viewport to `null` resets the viewport to\r\nits default value.",
        "params": [
          {
            "name": "viewport",
            "description": "-"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.viewport",
      "parameters": [],
      "returnType": "Viewport",
      "jsdoc": {
        "description": "Returns the current page viewport settings without checking the actual page\r\nviewport.\r\n\r\nThis is either the viewport set with the previous   \r\ncall or the default viewport set via\r\n |      * ConnectOptions.defaultViewport}.",
        "deprecated": false
      }
    },
    {
      "name": "Page.evaluate",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "Evaluates a function in the page's context and returns the result.\r\n\r\nIf the function passed to `page.evaluate` returns a Promise, the\r\nfunction will wait for the promise to resolve and return its value.",
        "params": [
          {
            "name": "pageFunction",
            "description": "- a function that is run within the page"
          },
          {
            "name": "args",
            "description": "- arguments to be passed to the pageFunction"
          }
        ],
        "returns": "the return value of `pageFunction`.",
        "deprecated": false
      }
    },
    {
      "name": "Page.evaluateOnNewDocument",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<NewDocumentScriptEvaluation>",
      "jsdoc": {
        "description": "Adds a function which would be invoked in one of the following scenarios:\r\n\r\n- whenever the page is navigated\r\n\r\n- whenever the child frame is attached or navigated. In this case, the\r\n  function is invoked in the context of the newly attached frame.\r\n\r\nThe function is invoked after the document was created but before any of\r\nits scripts were run. This is useful to amend the JavaScript environment,\r\ne.g. to seed `Math.random`.",
        "params": [
          {
            "name": "pageFunction",
            "description": "- Function to be evaluated in browser context"
          },
          {
            "name": "args",
            "description": "- Arguments to pass to `pageFunction`"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.removeScriptToEvaluateOnNewDocument",
      "parameters": [
        {
          "name": "identifier",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Removes script that injected into page by Page.evaluateOnNewDocument.",
        "params": [
          {
            "name": "identifier",
            "description": "- script identifier"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.setCacheEnabled",
      "parameters": [
        {
          "name": "enabled",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Toggles ignoring cache for each request based on the enabled state. By\r\ndefault, caching is enabled.",
        "params": [
          {
            "name": "enabled",
            "description": "- sets the `enabled` state of cache"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.screencast",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<ScreencastOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<ScreenRecorder>",
      "jsdoc": {
        "description": "Captures a screencast of this  | page .",
        "params": [
          {
            "name": "options",
            "description": "- Configures screencast behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.screenshot",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<ScreenshotOptions> & { encoding: \"base64\"; }",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "Captures a screenshot of this  | page .",
        "params": [
          {
            "name": "options",
            "description": "- Configures screenshot behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.screenshot",
      "parameters": [
        {
          "name": "options",
          "type": "Readonly<ScreenshotOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "description": "Captures a screenshot of this  | page .",
        "params": [
          {
            "name": "options",
            "description": "- Configures screenshot behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.createPDFStream",
      "parameters": [
        {
          "name": "options",
          "type": "PDFOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<ReadableStream<Uint8Array<ArrayBufferLike>>>",
      "jsdoc": {
        "description": "Generates a PDF of the page with the `print` CSS media type.",
        "params": [
          {
            "name": "options",
            "description": "- options for generating the PDF."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.pdf",
      "parameters": [
        {
          "name": "options",
          "type": "PDFOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "description": "{@inheritDoc Page.createPDFStream}",
        "deprecated": false
      }
    },
    {
      "name": "Page.title",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "The page's title",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Page.close",
      "parameters": [
        {
          "name": "options",
          "type": "{ runBeforeUnload?: boolean; }",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": null
    },
    {
      "name": "Page.isClosed",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Indicates that the page has been closed.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Page.click",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<ClickOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This method fetches an element with `selector`, scrolls it into view if\r\nneeded, and then uses    to click in the center of the\r\nelement. If there's no element matching `selector`, the method throws an\r\nerror.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix . If there are\r\nmultiple elements satisfying the `selector`, the first will be clicked"
          },
          {
            "name": "options",
            "description": "- `Object`"
          }
        ],
        "returns": "Promise which resolves when the element matching `selector` is\r\nsuccessfully clicked. The Promise will be rejected if there is no element\r\nmatching `selector`.",
        "deprecated": false
      }
    },
    {
      "name": "Page.focus",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This method fetches an element with `selector` and focuses it. If\r\nthere's no element matching `selector`, the method throws an error.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix .\r\nIf there are multiple elements satisfying the selector, the first\r\nwill be focused."
          }
        ],
        "returns": "Promise which resolves when the element matching selector\r\nis successfully focused. The promise will be rejected if there is\r\nno element matching selector.",
        "deprecated": false
      }
    },
    {
      "name": "Page.hover",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This method fetches an element with `selector`, scrolls it into view if\r\nneeded, and then uses   \r\nto hover over the center of the element.\r\nIf there's no element matching `selector`, the method throws an error.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix . If there are\r\nmultiple elements satisfying the `selector`, the first will be hovered."
          }
        ],
        "returns": "Promise which resolves when the element matching `selector` is\r\nsuccessfully hovered. Promise gets rejected if there's no element matching\r\n`selector`.",
        "deprecated": false
      }
    },
    {
      "name": "Page.select",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        },
        {
          "name": "values",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "Promise<string[]>",
      "jsdoc": {
        "description": "Triggers a `change` and `input` event once all the provided options have been\r\nselected. If there's no `<select>` element matching `selector`, the method\r\nthrows an error.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          },
          {
            "name": "values",
            "description": "- Values of options to select. If the `<select>` has the\r\n`multiple` attribute, all values are considered, otherwise only the first one\r\nis taken into account."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.tap",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This method fetches an element with `selector`, scrolls it into view if\r\nneeded, and then uses   \r\nto tap in the center of the element.\r\nIf there's no element matching `selector`, the method throws an error.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix . If there are multiple elements satisfying the\r\nselector, the first will be tapped."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.type",
      "parameters": [
        {
          "name": "selector",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "Readonly<KeyboardTypeOptions>",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Sends a `keydown`, `keypress/input`, and `keyup` event for each character\r\nin the text.\r\n\r\nTo press a special key, like `Control` or `ArrowDown`, use   .",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          },
          {
            "name": "text",
            "description": "- A text to type into a focused element."
          },
          {
            "name": "options",
            "description": "- have property `delay` which is the Time to wait between\r\nkey presses in milliseconds. Defaults to `0`."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.waitForSelector",
      "parameters": [
        {
          "name": "selector",
          "type": "Selector",
          "optional": false
        },
        {
          "name": "options",
          "type": "WaitForSelectorOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
      "jsdoc": {
        "description": "Wait for the `selector` to appear in page. If at the moment of calling the\r\nmethod the `selector` already exists, the method will return immediately. If\r\nthe `selector` doesn't appear after the `timeout` milliseconds of waiting, the\r\nfunction will throw.",
        "params": [
          {
            "name": "selector",
            "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
          },
          {
            "name": "options",
            "description": "- Optional waiting parameters"
          }
        ],
        "returns": "Promise which resolves when element specified by selector string\r\nis added to DOM. Resolves to `null` if waiting for hidden: `true` and\r\nselector is not found in DOM.",
        "deprecated": false
      }
    },
    {
      "name": "Page.waitForFunction",
      "parameters": [
        {
          "name": "pageFunction",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "options",
          "type": "FrameWaitForFunctionOptions",
          "optional": true
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
      "jsdoc": {
        "description": "Waits for the provided function, `pageFunction`, to return a truthy value when\r\nevaluated in the page's context.",
        "params": [
          {
            "name": "pageFunction",
            "description": "- Function to be evaluated in browser context until it returns a\r\ntruthy value."
          },
          {
            "name": "options",
            "description": "- Options for configuring waiting behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Page.waitForDevicePrompt",
      "parameters": [
        {
          "name": "options",
          "type": "WaitTimeoutOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<DeviceRequestPrompt>",
      "jsdoc": {
        "description": "This method is typically coupled with an action that triggers a device\r\nrequest from an api such as WebBluetooth.\r\n\r\n:::caution\r\n\r\nThis must be called before the device request is made. It will not return a\r\ncurrently active device prompt.\r\n\r\n:::",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Page.on",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<PageEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "Page",
      "jsdoc": {
        "description": "Bind an event listener to fire when an event occurs.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to listen to. Can be a string or symbol."
          },
          {
            "name": "handler",
            "description": "- the function to be called when the event occurs."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Page.off",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<PageEvents>[Key]>",
          "optional": true
        }
      ],
      "returnType": "Page",
      "jsdoc": {
        "description": "Remove an event listener from firing.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to stop listening to."
          },
          {
            "name": "handler",
            "description": "- the function that should be removed."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Page.emit",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "event",
          "type": "EventsWithWildcard<PageEvents>[Key]",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Emit an event and call any associated listeners.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to emit"
          },
          {
            "name": "eventData",
            "description": "- any data you'd like to emit with the event"
          }
        ],
        "returns": "`true` if there are any listeners, `false` if there are not.",
        "deprecated": false
      }
    },
    {
      "name": "Page.once",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<PageEvents>[Key]>",
          "optional": false
        }
      ],
      "returnType": "Page",
      "jsdoc": {
        "description": "Like `on` but the listener will only be fired once and then it will be removed.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to listen to"
          },
          {
            "name": "handler",
            "description": "- the handler function to run when the event occurs"
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Page.listenerCount",
      "parameters": [
        {
          "name": "type",
          "type": "keyof PageEvents",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the number of listeners for a given event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to get the listener count for"
          }
        ],
        "returns": "the number of listeners bound to the given event",
        "deprecated": false
      }
    },
    {
      "name": "Page.removeAllListeners",
      "parameters": [
        {
          "name": "type",
          "type": "keyof PageEvents",
          "optional": true
        }
      ],
      "returnType": "Page",
      "jsdoc": {
        "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to remove listeners for."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "Puppeteer.connect",
      "parameters": [
        {
          "name": "options",
          "type": "ConnectOptions",
          "optional": false
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Puppeteer to an existing browser instance.",
        "params": [
          {
            "name": "options",
            "description": "- Set of configurable options to set on the browser."
          }
        ],
        "returns": "Promise which resolves to browser instance.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.connect",
      "parameters": [
        {
          "name": "options",
          "type": "ConnectOptions",
          "optional": false
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Puppeteer to an existing browser instance.",
        "params": [
          {
            "name": "options",
            "description": "- Set of configurable options to set on the browser."
          }
        ],
        "returns": "Promise which resolves to browser instance.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.launch",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "Launches a browser instance with given arguments and options when\r\nspecified.\r\n\r\nWhen using with `puppeteer-core`,\r\n | options.executablePath  or\r\n | options.channel  must be provided.",
        "params": [
          {
            "name": "options",
            "description": "- Options to configure launching behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.executablePath",
      "parameters": [
        {
          "name": "channel",
          "type": "ChromeReleaseChannel",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "The default executable path for a given ChromeReleaseChannel.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "puppeteer.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.__@iterator@54430",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "puppeteer.defaultArgs",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "options",
            "description": "- Set of configurable options to set on the browser."
          }
        ],
        "returns": "The default arguments that the browser will be launched with.",
        "deprecated": false
      }
    },
    {
      "name": "puppeteer.trimCache",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Removes all non-current Firefox and Chrome binaries in the cache directory\r\nidentified by the provided Puppeteer configuration. The current browser\r\nversion is determined by resolving PUPPETEER_REVISIONS from Puppeteer\r\nunless `configuration.browserRevision` is provided.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.connect",
      "parameters": [
        {
          "name": "options",
          "type": "ConnectOptions",
          "optional": false
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Puppeteer to an existing browser instance.",
        "params": [
          {
            "name": "options",
            "description": "- Set of configurable options to set on the browser."
          }
        ],
        "returns": "Promise which resolves to browser instance.",
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.launch",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "Launches a browser instance with given arguments and options when\r\nspecified.\r\n\r\nWhen using with `puppeteer-core`,\r\n | options.executablePath  or\r\n | options.channel  must be provided.",
        "params": [
          {
            "name": "options",
            "description": "- Options to configure launching behavior."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.executablePath",
      "parameters": [
        {
          "name": "channel",
          "type": "ChromeReleaseChannel",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "The default executable path for a given ChromeReleaseChannel.",
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.executablePath",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "The default executable path for a given ChromeReleaseChannel.",
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.executablePath",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The default executable path for a given ChromeReleaseChannel.",
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.defaultArgs",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "options",
            "description": "- Set of configurable options to set on the browser."
          }
        ],
        "returns": "The default arguments that the browser will be launched with.",
        "deprecated": false
      }
    },
    {
      "name": "PuppeteerNode.trimCache",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Removes all non-current Firefox and Chrome binaries in the cache directory\r\nidentified by the provided Puppeteer configuration. The current browser\r\nversion is determined by resolving PUPPETEER_REVISIONS from Puppeteer\r\nunless `configuration.browserRevision` is provided.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.stop",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Stops the recorder.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder._transform",
      "parameters": [
        {
          "name": "chunk",
          "type": "any",
          "optional": false
        },
        {
          "name": "encoding",
          "type": "BufferEncoding",
          "optional": false
        },
        {
          "name": "callback",
          "type": "TransformCallback",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder._flush",
      "parameters": [
        {
          "name": "callback",
          "type": "TransformCallback",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"close\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"data\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(chunk: any) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"drain\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"end\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"error\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(err: Error) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"finish\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"pause\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"pipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"readable\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"resume\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"unpipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.addListener",
      "parameters": [
        {
          "name": "event",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(...args: any[]) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"close\"",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"data\"",
          "optional": false
        },
        {
          "name": "chunk",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"drain\"",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"end\"",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"error\"",
          "optional": false
        },
        {
          "name": "err",
          "type": "Error",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"finish\"",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"pause\"",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"pipe\"",
          "optional": false
        },
        {
          "name": "src",
          "type": "Readable",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"readable\"",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"resume\"",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "\"unpipe\"",
          "optional": false
        },
        {
          "name": "src",
          "type": "Readable",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.emit",
      "parameters": [
        {
          "name": "event",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"close\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"data\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(chunk: any) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"drain\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"end\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"error\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(err: Error) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"finish\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"pause\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"pipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"readable\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"resume\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "\"unpipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.on",
      "parameters": [
        {
          "name": "event",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(...args: any[]) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"close\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"data\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(chunk: any) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"drain\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"end\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"error\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(err: Error) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"finish\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"pause\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"pipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"readable\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"resume\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "\"unpipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.once",
      "parameters": [
        {
          "name": "event",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(...args: any[]) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"close\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"data\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(chunk: any) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"drain\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"end\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"error\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(err: Error) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"finish\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"pause\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"pipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"readable\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"resume\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"unpipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependListener",
      "parameters": [
        {
          "name": "event",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(...args: any[]) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"close\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"data\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(chunk: any) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"drain\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"end\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"error\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(err: Error) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"finish\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"pause\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"pipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"readable\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"resume\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"unpipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.prependOnceListener",
      "parameters": [
        {
          "name": "event",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(...args: any[]) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"close\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"data\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(chunk: any) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"drain\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"end\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"error\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(err: Error) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"finish\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"pause\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"pipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"readable\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"resume\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "() => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"unpipe\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(src: Readable) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.removeListener",
      "parameters": [
        {
          "name": "event",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(...args: any[]) => void",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.pipe",
      "parameters": [
        {
          "name": "destination",
          "type": "T",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ end?: boolean; }",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.compose",
      "parameters": [
        {
          "name": "stream",
          "type": "T | ComposeFnParam | Iterable<T> | AsyncIterable<T>",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ signal: AbortSignal; }",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.__@captureRejectionSymbol@55364",
      "parameters": [
        {
          "name": "error",
          "type": "Error",
          "optional": false
        },
        {
          "name": "event",
          "type": "string | symbol",
          "optional": false
        },
        {
          "name": "args",
          "type": "AnyRest",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder._construct",
      "parameters": [
        {
          "name": "callback",
          "type": "(error?: Error) => void",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder._read",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.read",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "The `readable.read()` method reads data out of the internal buffer and\nreturns it. If no data is available to be read, `null` is returned. By default,\nthe data is returned as a `Buffer` object unless an encoding has been\nspecified using the `readable.setEncoding()` method or the stream is operating\nin object mode.\n\nThe optional `size` argument specifies a specific number of bytes to read. If\n`size` bytes are not available to be read, `null` will be returned _unless_ the\nstream has ended, in which case all of the data remaining in the internal buffer\nwill be returned.\n\nIf the `size` argument is not specified, all of the data contained in the\ninternal buffer will be returned.\n\nThe `size` argument must be less than or equal to 1 GiB.\n\nThe `readable.read()` method should only be called on `Readable` streams\noperating in paused mode. In flowing mode, `readable.read()` is called\nautomatically until the internal buffer is fully drained.\n\n```js\nconst readable = getReadableStreamSomehow();\n\n// 'readable' may be triggered multiple times as data is buffered in\nreadable.on('readable', () => {\n  let chunk;\n  console.log('Stream is readable (new data received in buffer)');\n  // Use a loop to make sure we read all currently available data\n  while (null !== (chunk = readable.read())) {\n    console.log(`Read ${chunk.length} bytes of data...`);\n  }\n});\n\n// 'end' will be triggered once when there is no more data available\nreadable.on('end', () => {\n  console.log('Reached end of stream.');\n});\n```\n\nEach call to `readable.read()` returns a chunk of data, or `null`. The chunks\nare not concatenated. A `while` loop is necessary to consume all data\ncurrently in the buffer. When reading a large file `.read()` may return `null`,\nhaving consumed all buffered content so far, but there is still more data to\ncome not yet buffered. In this case a new `'readable'` event will be emitted\nwhen there is more data in the buffer. Finally the `'end'` event will be\nemitted when there is no more data to come.\n\nTherefore to read a file's whole contents from a `readable`, it is necessary\nto collect chunks across multiple `'readable'` events:\n\n```js\nconst chunks = [];\n\nreadable.on('readable', () => {\n  let chunk;\n  while (null !== (chunk = readable.read())) {\n    chunks.push(chunk);\n  }\n});\n\nreadable.on('end', () => {\n  const content = chunks.join('');\n});\n```\n\nA `Readable` stream in object mode will always return a single item from\na call to `readable.read(size)`, regardless of the value of the `size` argument.\n\nIf the `readable.read()` method returns a chunk of data, a `'data'` event will\nalso be emitted.\n\nCalling    after the `'end'` event has\nbeen emitted will return `null`. No runtime error will be raised.",
        "params": [
          {
            "name": "size",
            "description": "Optional argument to specify how much data to read."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.setEncoding",
      "parameters": [
        {
          "name": "encoding",
          "type": "BufferEncoding",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "The `readable.setEncoding()` method sets the character encoding for\ndata read from the `Readable` stream.\n\nBy default, no encoding is assigned and stream data will be returned as `Buffer` objects. Setting an encoding causes the stream data\nto be returned as strings of the specified encoding rather than as `Buffer` objects. For instance, calling `readable.setEncoding('utf8')` will cause the\noutput data to be interpreted as UTF-8 data, and passed as strings. Calling `readable.setEncoding('hex')` will cause the data to be encoded in hexadecimal\nstring format.\n\nThe `Readable` stream will properly handle multi-byte characters delivered\nthrough the stream that would otherwise become improperly decoded if simply\npulled from the stream as `Buffer` objects.\n\n```js\nconst readable = getReadableStreamSomehow();\nreadable.setEncoding('utf8');\nreadable.on('data', (chunk) => {\n  assert.equal(typeof chunk, 'string');\n  console.log('Got %d characters of string data:', chunk.length);\n});\n```",
        "params": [
          {
            "name": "encoding",
            "description": "The encoding to use."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.pause",
      "parameters": [],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "The `readable.pause()` method will cause a stream in flowing mode to stop\nemitting `'data'` events, switching out of flowing mode. Any data that\nbecomes available will remain in the internal buffer.\n\n```js\nconst readable = getReadableStreamSomehow();\nreadable.on('data', (chunk) => {\n  console.log(`Received ${chunk.length} bytes of data.`);\n  readable.pause();\n  console.log('There will be no additional data for 1 second.');\n  setTimeout(() => {\n    console.log('Now data will start flowing again.');\n    readable.resume();\n  }, 1000);\n});\n```\n\nThe `readable.pause()` method has no effect if there is a `'readable'` event listener.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.resume",
      "parameters": [],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "The `readable.resume()` method causes an explicitly paused `Readable` stream to\nresume emitting `'data'` events, switching the stream into flowing mode.\n\nThe `readable.resume()` method can be used to fully consume the data from a\nstream without actually processing any of that data:\n\n```js\ngetReadableStreamSomehow()\n  .resume()\n  .on('end', () => {\n    console.log('Reached the end, but did not read anything.');\n  });\n```\n\nThe `readable.resume()` method has no effect if there is a `'readable'` event listener.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.isPaused",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "The `readable.isPaused()` method returns the current operating state of the `Readable`.\nThis is used primarily by the mechanism that underlies the `readable.pipe()` method.\nIn most typical cases, there will be no reason to use this method directly.\n\n```js\nconst readable = new stream.Readable();\n\nreadable.isPaused(); // === false\nreadable.pause();\nreadable.isPaused(); // === true\nreadable.resume();\nreadable.isPaused(); // === false\n```",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.unpipe",
      "parameters": [
        {
          "name": "destination",
          "type": "WritableStream",
          "optional": true
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "The `readable.unpipe()` method detaches a `Writable` stream previously attached\nusing the    method.\n\nIf the `destination` is not specified, then _all_ pipes are detached.\n\nIf the `destination` is specified, but no pipe is set up for it, then\nthe method does nothing.\n\n```js\nimport fs from 'node:fs';\nconst readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream('file.txt');\n// All the data from readable goes into 'file.txt',\n// but only for the first second.\nreadable.pipe(writable);\nsetTimeout(() => {\n  console.log('Stop writing to file.txt.');\n  readable.unpipe(writable);\n  console.log('Manually close the file stream.');\n  writable.end();\n}, 1000);\n```",
        "params": [
          {
            "name": "destination",
            "description": "Optional specific stream to unpipe"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.unshift",
      "parameters": [
        {
          "name": "chunk",
          "type": "any",
          "optional": false
        },
        {
          "name": "encoding",
          "type": "BufferEncoding",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Passing `chunk` as `null` signals the end of the stream (EOF) and behaves the\nsame as `readable.push(null)`, after which no more data can be written. The EOF\nsignal is put at the end of the buffer and any buffered data will still be\nflushed.\n\nThe `readable.unshift()` method pushes a chunk of data back into the internal\nbuffer. This is useful in certain situations where a stream is being consumed by\ncode that needs to \"un-consume\" some amount of data that it has optimistically\npulled out of the source, so that the data can be passed on to some other party.\n\nThe `stream.unshift(chunk)` method cannot be called after the `'end'` event\nhas been emitted or a runtime error will be thrown.\n\nDevelopers using `stream.unshift()` often should consider switching to\nuse of a `Transform` stream instead. See the `API for stream implementers` section for more information.\n\n```js\n// Pull off a header delimited by \\n\\n.\n// Use unshift() if we get too much.\n// Call the callback with (error, header, stream).\nimport { StringDecoder } from 'node:string_decoder';\nfunction parseHeader(stream, callback) {\n  stream.on('error', callback);\n  stream.on('readable', onReadable);\n  const decoder = new StringDecoder('utf8');\n  let header = '';\n  function onReadable() {\n    let chunk;\n    while (null !== (chunk = stream.read())) {\n      const str = decoder.write(chunk);\n      if (str.includes('\\n\\n')) {\n        // Found the header boundary.\n        const split = str.split(/\\n\\n/);\n        header += split.shift();\n        const remaining = split.join('\\n\\n');\n        const buf = Buffer.from(remaining, 'utf8');\n        stream.removeListener('error', callback);\n        // Remove the 'readable' listener before unshifting.\n        stream.removeListener('readable', onReadable);\n        if (buf.length)\n          stream.unshift(buf);\n        // Now the body of the message can be read from the stream.\n        callback(null, header, stream);\n        return;\n      }\n      // Still reading the header.\n      header += str;\n    }\n  }\n}\n```\n\nUnlike   , `stream.unshift(chunk)` will not\nend the reading process by resetting the internal reading state of the stream.\nThis can cause unexpected results if `readable.unshift()` is called during a\nread (i.e. from within a    implementation on a\ncustom stream). Following the call to `readable.unshift()` with an immediate    will reset the reading state appropriately,\nhowever it is best to simply avoid calling `readable.unshift()` while in the\nprocess of performing a read.",
        "params": [
          {
            "name": "chunk",
            "description": "Chunk of data to unshift onto the read queue. For streams not operating in object mode, `chunk` must\nbe a {string}, {Buffer}, {TypedArray}, {DataView} or `null`. For object mode streams, `chunk` may be any JavaScript value."
          },
          {
            "name": "encoding",
            "description": "Encoding of string chunks. Must be a valid `Buffer` encoding, such as `'utf8'` or `'ascii'`."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.wrap",
      "parameters": [
        {
          "name": "stream",
          "type": "ReadableStream",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Prior to Node.js 0.10, streams did not implement the entire `node:stream` module API as it is currently defined. (See `Compatibility` for more\ninformation.)\n\nWhen using an older Node.js library that emits `'data'` events and has a    method that is advisory only, the `readable.wrap()` method can be used to create a `Readable`\nstream that uses\nthe old stream as its data source.\n\nIt will rarely be necessary to use `readable.wrap()` but the method has been\nprovided as a convenience for interacting with older Node.js applications and\nlibraries.\n\n```js\nimport { OldReader } from './old-api-module.js';\nimport { Readable } from 'node:stream';\nconst oreader = new OldReader();\nconst myReader = new Readable().wrap(oreader);\n\nmyReader.on('readable', () => {\n  myReader.read(); // etc.\n});\n```",
        "params": [
          {
            "name": "stream",
            "description": "An \"old style\" readable stream"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.push",
      "parameters": [
        {
          "name": "chunk",
          "type": "any",
          "optional": false
        },
        {
          "name": "encoding",
          "type": "BufferEncoding",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.iterator",
      "parameters": [
        {
          "name": "options",
          "type": "{ destroyOnReturn?: boolean; }",
          "optional": true
        }
      ],
      "returnType": "AsyncIterator<any, any, any>",
      "jsdoc": {
        "description": "The iterator created by this method gives users the option to cancel the destruction\nof the stream if the `for await...of` loop is exited by `return`, `break`, or `throw`,\nor if the iterator should destroy the stream if the stream emitted an error during iteration.",
        "params": [
          {
            "description": "When set to `false`, calling `return` on the async iterator,\nor exiting a `for await...of` iteration using a `break`, `return`, or `throw` will not destroy the stream.\n**Default: `true`**."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.map",
      "parameters": [
        {
          "name": "fn",
          "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => any",
          "optional": false
        },
        {
          "name": "options",
          "type": "ArrayOptions",
          "optional": true
        }
      ],
      "returnType": "Readable",
      "jsdoc": {
        "description": "This method allows mapping over the stream. The *fn* function will be called for every chunk in the stream.\nIf the *fn* function returns a promise - that promise will be `await`ed before being passed to the result stream.",
        "params": [
          {
            "name": "fn",
            "description": "a function to map over every chunk in the stream. Async or not."
          }
        ],
        "returns": "a stream mapped with the function *fn*.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.filter",
      "parameters": [
        {
          "name": "fn",
          "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => boolean | Promise<boolean>",
          "optional": false
        },
        {
          "name": "options",
          "type": "ArrayOptions",
          "optional": true
        }
      ],
      "returnType": "Readable",
      "jsdoc": {
        "description": "This method allows filtering the stream. For each chunk in the stream the *fn* function will be called\nand if it returns a truthy value, the chunk will be passed to the result stream.\nIf the *fn* function returns a promise - that promise will be `await`ed.",
        "params": [
          {
            "name": "fn",
            "description": "a function to filter chunks from the stream. Async or not."
          }
        ],
        "returns": "a stream filtered with the predicate *fn*.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.forEach",
      "parameters": [
        {
          "name": "fn",
          "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => void | Promise<void>",
          "optional": false
        },
        {
          "name": "options",
          "type": "ArrayOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This method allows iterating a stream. For each chunk in the stream the *fn* function will be called.\nIf the *fn* function returns a promise - that promise will be `await`ed.\n\nThis method is different from `for await...of` loops in that it can optionally process chunks concurrently.\nIn addition, a `forEach` iteration can only be stopped by having passed a `signal` option\nand aborting the related AbortController while `for await...of` can be stopped with `break` or `return`.\nIn either case the stream will be destroyed.\n\nThis method is different from listening to the `'data'` event in that it uses the `readable` event\nin the underlying machinary and can limit the number of concurrent *fn* calls.",
        "params": [
          {
            "name": "fn",
            "description": "a function to call on each chunk of the stream. Async or not."
          }
        ],
        "returns": "a promise for when the stream has finished.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.toArray",
      "parameters": [
        {
          "name": "options",
          "type": "Pick<ArrayOptions, \"signal\">",
          "optional": true
        }
      ],
      "returnType": "Promise<any[]>",
      "jsdoc": {
        "description": "This method allows easily obtaining the contents of a stream.\n\nAs this method reads the entire stream into memory, it negates the benefits of streams. It's intended\nfor interoperability and convenience, not as the primary way to consume streams.",
        "params": [],
        "returns": "a promise containing an array with the contents of the stream.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.some",
      "parameters": [
        {
          "name": "fn",
          "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => boolean | Promise<boolean>",
          "optional": false
        },
        {
          "name": "options",
          "type": "ArrayOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<boolean>",
      "jsdoc": {
        "description": "This method is similar to `Array.prototype.some` and calls *fn* on each chunk in the stream\nuntil the awaited return value is `true` (or any truthy value). Once an *fn* call on a chunk\n`await`ed return value is truthy, the stream is destroyed and the promise is fulfilled with `true`.\nIf none of the *fn* calls on the chunks return a truthy value, the promise is fulfilled with `false`.",
        "params": [
          {
            "name": "fn",
            "description": "a function to call on each chunk of the stream. Async or not."
          }
        ],
        "returns": "a promise evaluating to `true` if *fn* returned a truthy value for at least one of the chunks.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.find",
      "parameters": [
        {
          "name": "fn",
          "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => data is T",
          "optional": false
        },
        {
          "name": "options",
          "type": "ArrayOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<T>",
      "jsdoc": {
        "description": "This method is similar to `Array.prototype.find` and calls *fn* on each chunk in the stream\nto find a chunk with a truthy value for *fn*. Once an *fn* call's awaited return value is truthy,\nthe stream is destroyed and the promise is fulfilled with value for which *fn* returned a truthy value.\nIf all of the *fn* calls on the chunks return a falsy value, the promise is fulfilled with `undefined`.",
        "params": [
          {
            "name": "fn",
            "description": "a function to call on each chunk of the stream. Async or not."
          }
        ],
        "returns": "a promise evaluating to the first chunk for which *fn* evaluated with a truthy value,\nor `undefined` if no element was found.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.find",
      "parameters": [
        {
          "name": "fn",
          "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => boolean | Promise<boolean>",
          "optional": false
        },
        {
          "name": "options",
          "type": "ArrayOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<any>",
      "jsdoc": {
        "description": "This method is similar to `Array.prototype.find` and calls *fn* on each chunk in the stream\nto find a chunk with a truthy value for *fn*. Once an *fn* call's awaited return value is truthy,\nthe stream is destroyed and the promise is fulfilled with value for which *fn* returned a truthy value.\nIf all of the *fn* calls on the chunks return a falsy value, the promise is fulfilled with `undefined`.",
        "params": [
          {
            "name": "fn",
            "description": "a function to call on each chunk of the stream. Async or not."
          }
        ],
        "returns": "a promise evaluating to the first chunk for which *fn* evaluated with a truthy value,\nor `undefined` if no element was found.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.every",
      "parameters": [
        {
          "name": "fn",
          "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => boolean | Promise<boolean>",
          "optional": false
        },
        {
          "name": "options",
          "type": "ArrayOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<boolean>",
      "jsdoc": {
        "description": "This method is similar to `Array.prototype.every` and calls *fn* on each chunk in the stream\nto check if all awaited return values are truthy value for *fn*. Once an *fn* call on a chunk\n`await`ed return value is falsy, the stream is destroyed and the promise is fulfilled with `false`.\nIf all of the *fn* calls on the chunks return a truthy value, the promise is fulfilled with `true`.",
        "params": [
          {
            "name": "fn",
            "description": "a function to call on each chunk of the stream. Async or not."
          }
        ],
        "returns": "a promise evaluating to `true` if *fn* returned a truthy value for every one of the chunks.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.flatMap",
      "parameters": [
        {
          "name": "fn",
          "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => any",
          "optional": false
        },
        {
          "name": "options",
          "type": "ArrayOptions",
          "optional": true
        }
      ],
      "returnType": "Readable",
      "jsdoc": {
        "description": "This method returns a new stream by applying the given callback to each chunk of the stream\nand then flattening the result.\n\nIt is possible to return a stream or another iterable or async iterable from *fn* and the result streams\nwill be merged (flattened) into the returned stream.",
        "params": [
          {
            "name": "fn",
            "description": "a function to map over every chunk in the stream. May be async. May be a stream or generator."
          }
        ],
        "returns": "a stream flat-mapped with the function *fn*.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.drop",
      "parameters": [
        {
          "name": "limit",
          "type": "number",
          "optional": false
        },
        {
          "name": "options",
          "type": "Pick<ArrayOptions, \"signal\">",
          "optional": true
        }
      ],
      "returnType": "Readable",
      "jsdoc": {
        "description": "This method returns a new stream with the first *limit* chunks dropped from the start.",
        "params": [
          {
            "name": "limit",
            "description": "the number of chunks to drop from the readable."
          }
        ],
        "returns": "a stream with *limit* chunks dropped from the start.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.take",
      "parameters": [
        {
          "name": "limit",
          "type": "number",
          "optional": false
        },
        {
          "name": "options",
          "type": "Pick<ArrayOptions, \"signal\">",
          "optional": true
        }
      ],
      "returnType": "Readable",
      "jsdoc": {
        "description": "This method returns a new stream with the first *limit* chunks.",
        "params": [
          {
            "name": "limit",
            "description": "the number of chunks to take from the readable."
          }
        ],
        "returns": "a stream with *limit* chunks taken.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.asIndexedPairs",
      "parameters": [
        {
          "name": "options",
          "type": "Pick<ArrayOptions, \"signal\">",
          "optional": true
        }
      ],
      "returnType": "Readable",
      "jsdoc": {
        "description": "This method returns a new stream with chunks of the underlying stream paired with a counter\nin the form `[index, chunk]`. The first index value is `0` and it increases by 1 for each chunk produced.",
        "params": [],
        "returns": "a stream of indexed pairs.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.reduce",
      "parameters": [
        {
          "name": "fn",
          "type": "(previous: any, data: any, options?: Pick<ArrayOptions, \"signal\">) => T",
          "optional": false
        },
        {
          "name": "initial",
          "type": "undefined",
          "optional": true
        },
        {
          "name": "options",
          "type": "Pick<ArrayOptions, \"signal\">",
          "optional": true
        }
      ],
      "returnType": "Promise<T>",
      "jsdoc": {
        "description": "This method calls *fn* on each chunk of the stream in order, passing it the result from the calculation\non the previous element. It returns a promise for the final value of the reduction.\n\nIf no *initial* value is supplied the first chunk of the stream is used as the initial value.\nIf the stream is empty, the promise is rejected with a `TypeError` with the `ERR_INVALID_ARGS` code property.\n\nThe reducer function iterates the stream element-by-element which means that there is no *concurrency* parameter\nor parallelism. To perform a reduce concurrently, you can extract the async function to `readable.map` method.",
        "params": [
          {
            "name": "fn",
            "description": "a reducer function to call over every chunk in the stream. Async or not."
          },
          {
            "name": "initial",
            "description": "the initial value to use in the reduction."
          }
        ],
        "returns": "a promise for the final value of the reduction.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.reduce",
      "parameters": [
        {
          "name": "fn",
          "type": "(previous: T, data: any, options?: Pick<ArrayOptions, \"signal\">) => T",
          "optional": false
        },
        {
          "name": "initial",
          "type": "T",
          "optional": false
        },
        {
          "name": "options",
          "type": "Pick<ArrayOptions, \"signal\">",
          "optional": true
        }
      ],
      "returnType": "Promise<T>",
      "jsdoc": {
        "description": "This method calls *fn* on each chunk of the stream in order, passing it the result from the calculation\non the previous element. It returns a promise for the final value of the reduction.\n\nIf no *initial* value is supplied the first chunk of the stream is used as the initial value.\nIf the stream is empty, the promise is rejected with a `TypeError` with the `ERR_INVALID_ARGS` code property.\n\nThe reducer function iterates the stream element-by-element which means that there is no *concurrency* parameter\nor parallelism. To perform a reduce concurrently, you can extract the async function to `readable.map` method.",
        "params": [
          {
            "name": "fn",
            "description": "a reducer function to call over every chunk in the stream. Async or not."
          },
          {
            "name": "initial",
            "description": "the initial value to use in the reduction."
          }
        ],
        "returns": "a promise for the final value of the reduction.",
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder._destroy",
      "parameters": [
        {
          "name": "error",
          "type": "Error",
          "optional": false
        },
        {
          "name": "callback",
          "type": "(error?: Error) => void",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.destroy",
      "parameters": [
        {
          "name": "error",
          "type": "Error",
          "optional": true
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'` event (unless `emitClose` is set to `false`). After this call, the readable\nstream will release any internal resources and subsequent calls to `push()` will be ignored.\n\nOnce `destroy()` has been called any further calls will be a no-op and no\nfurther errors except from `_destroy()` may be emitted as `'error'`.\n\nImplementors should not override this method, but instead implement `readable._destroy()`.",
        "params": [
          {
            "name": "error",
            "description": "Error which will be passed as payload in `'error'` event"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.__@asyncIterator@55382",
      "parameters": [],
      "returnType": "AsyncIterator<any, any, any>",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.__@asyncDispose@55384",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Calls `readable.destroy()` with an `AbortError` and returns a promise that fulfills when the stream is finished.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder._write",
      "parameters": [
        {
          "name": "chunk",
          "type": "any",
          "optional": false
        },
        {
          "name": "encoding",
          "type": "BufferEncoding",
          "optional": false
        },
        {
          "name": "callback",
          "type": "(error?: Error) => void",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder._writev",
      "parameters": [
        {
          "name": "chunks",
          "type": "{ chunk: any; encoding: BufferEncoding; }[]",
          "optional": false
        },
        {
          "name": "callback",
          "type": "(error?: Error) => void",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder._final",
      "parameters": [
        {
          "name": "callback",
          "type": "(error?: Error) => void",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "ScreenRecorder.write",
      "parameters": [
        {
          "name": "chunk",
          "type": "any",
          "optional": false
        },
        {
          "name": "callback",
          "type": "(error: Error) => void",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "The `writable.write()` method writes some data to the stream, and calls the\nsupplied `callback` once the data has been fully handled. If an error\noccurs, the `callback` will be called with the error as its\nfirst argument. The `callback` is called asynchronously and before `'error'` is\nemitted.\n\nThe return value is `true` if the internal buffer is less than the `highWaterMark` configured when the stream was created after admitting `chunk`.\nIf `false` is returned, further attempts to write data to the stream should\nstop until the `'drain'` event is emitted.\n\nWhile a stream is not draining, calls to `write()` will buffer `chunk`, and\nreturn false. Once all currently buffered chunks are drained (accepted for\ndelivery by the operating system), the `'drain'` event will be emitted.\nOnce `write()` returns false, do not write more chunks\nuntil the `'drain'` event is emitted. While calling `write()` on a stream that\nis not draining is allowed, Node.js will buffer all written chunks until\nmaximum memory usage occurs, at which point it will abort unconditionally.\nEven before it aborts, high memory usage will cause poor garbage collector\nperformance and high RSS (which is not typically released back to the system,\neven after the memory is no longer required). Since TCP sockets may never\ndrain if the remote peer does not read the data, writing a socket that is\nnot draining may lead to a remotely exploitable vulnerability.\n\nWriting data while the stream is not draining is particularly\nproblematic for a `Transform`, because the `Transform` streams are paused\nby default until they are piped or a `'data'` or `'readable'` event handler\nis added.\n\nIf the data to be written can be generated or fetched on demand, it is\nrecommended to encapsulate the logic into a `Readable` and use   . However, if calling `write()` is preferred, it is\npossible to respect backpressure and avoid memory issues using the `'drain'` event:\n\n```js\nfunction write(data, cb) {\n  if (!stream.write(data)) {\n    stream.once('drain', cb);\n  } else {\n    process.nextTick(cb);\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite('hello', () => {\n  console.log('Write completed, do more writes now.');\n});\n```\n\nA `Writable` stream in object mode will always ignore the `encoding` argument.",
        "params": [
          {
            "name": "chunk",
            "description": "Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n{TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`."
          },
          {
            "name": "encoding",
            "description": "The encoding, if `chunk` is a string."
          },
          {
            "name": "callback",
            "description": "Callback for when this chunk of data is flushed."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.write",
      "parameters": [
        {
          "name": "chunk",
          "type": "any",
          "optional": false
        },
        {
          "name": "encoding",
          "type": "BufferEncoding",
          "optional": false
        },
        {
          "name": "callback",
          "type": "(error: Error) => void",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "The `writable.write()` method writes some data to the stream, and calls the\nsupplied `callback` once the data has been fully handled. If an error\noccurs, the `callback` will be called with the error as its\nfirst argument. The `callback` is called asynchronously and before `'error'` is\nemitted.\n\nThe return value is `true` if the internal buffer is less than the `highWaterMark` configured when the stream was created after admitting `chunk`.\nIf `false` is returned, further attempts to write data to the stream should\nstop until the `'drain'` event is emitted.\n\nWhile a stream is not draining, calls to `write()` will buffer `chunk`, and\nreturn false. Once all currently buffered chunks are drained (accepted for\ndelivery by the operating system), the `'drain'` event will be emitted.\nOnce `write()` returns false, do not write more chunks\nuntil the `'drain'` event is emitted. While calling `write()` on a stream that\nis not draining is allowed, Node.js will buffer all written chunks until\nmaximum memory usage occurs, at which point it will abort unconditionally.\nEven before it aborts, high memory usage will cause poor garbage collector\nperformance and high RSS (which is not typically released back to the system,\neven after the memory is no longer required). Since TCP sockets may never\ndrain if the remote peer does not read the data, writing a socket that is\nnot draining may lead to a remotely exploitable vulnerability.\n\nWriting data while the stream is not draining is particularly\nproblematic for a `Transform`, because the `Transform` streams are paused\nby default until they are piped or a `'data'` or `'readable'` event handler\nis added.\n\nIf the data to be written can be generated or fetched on demand, it is\nrecommended to encapsulate the logic into a `Readable` and use   . However, if calling `write()` is preferred, it is\npossible to respect backpressure and avoid memory issues using the `'drain'` event:\n\n```js\nfunction write(data, cb) {\n  if (!stream.write(data)) {\n    stream.once('drain', cb);\n  } else {\n    process.nextTick(cb);\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite('hello', () => {\n  console.log('Write completed, do more writes now.');\n});\n```\n\nA `Writable` stream in object mode will always ignore the `encoding` argument.",
        "params": [
          {
            "name": "chunk",
            "description": "Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n{TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`."
          },
          {
            "name": "encoding",
            "description": "The encoding, if `chunk` is a string."
          },
          {
            "name": "callback",
            "description": "Callback for when this chunk of data is flushed."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.setDefaultEncoding",
      "parameters": [
        {
          "name": "encoding",
          "type": "BufferEncoding",
          "optional": false
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "The `writable.setDefaultEncoding()` method sets the default `encoding` for a `Writable` stream.",
        "params": [
          {
            "name": "encoding",
            "description": "The new default encoding"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.end",
      "parameters": [
        {
          "name": "cb",
          "type": "() => void",
          "optional": true
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Calling the `writable.end()` method signals that no more data will be written\nto the `Writable`. The optional `chunk` and `encoding` arguments allow one\nfinal additional chunk of data to be written immediately before closing the\nstream.\n\nCalling the    method after calling    will raise an error.\n\n```js\n// Write 'hello, ' and then end with 'world!'.\nimport fs from 'node:fs';\nconst file = fs.createWriteStream('example.txt');\nfile.write('hello, ');\nfile.end('world!');\n// Writing more now is not allowed!\n```",
        "params": [
          {
            "name": "chunk",
            "description": "Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n{TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`."
          },
          {
            "name": "encoding",
            "description": "The encoding if `chunk` is a string"
          },
          {
            "name": "callback",
            "description": "Callback for when the stream is finished."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.end",
      "parameters": [
        {
          "name": "chunk",
          "type": "any",
          "optional": false
        },
        {
          "name": "cb",
          "type": "() => void",
          "optional": true
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Calling the `writable.end()` method signals that no more data will be written\nto the `Writable`. The optional `chunk` and `encoding` arguments allow one\nfinal additional chunk of data to be written immediately before closing the\nstream.\n\nCalling the    method after calling    will raise an error.\n\n```js\n// Write 'hello, ' and then end with 'world!'.\nimport fs from 'node:fs';\nconst file = fs.createWriteStream('example.txt');\nfile.write('hello, ');\nfile.end('world!');\n// Writing more now is not allowed!\n```",
        "params": [
          {
            "name": "chunk",
            "description": "Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n{TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`."
          },
          {
            "name": "encoding",
            "description": "The encoding if `chunk` is a string"
          },
          {
            "name": "callback",
            "description": "Callback for when the stream is finished."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.end",
      "parameters": [
        {
          "name": "chunk",
          "type": "any",
          "optional": false
        },
        {
          "name": "encoding",
          "type": "BufferEncoding",
          "optional": false
        },
        {
          "name": "cb",
          "type": "() => void",
          "optional": true
        }
      ],
      "returnType": "ScreenRecorder",
      "jsdoc": {
        "description": "Calling the `writable.end()` method signals that no more data will be written\nto the `Writable`. The optional `chunk` and `encoding` arguments allow one\nfinal additional chunk of data to be written immediately before closing the\nstream.\n\nCalling the    method after calling    will raise an error.\n\n```js\n// Write 'hello, ' and then end with 'world!'.\nimport fs from 'node:fs';\nconst file = fs.createWriteStream('example.txt');\nfile.write('hello, ');\nfile.end('world!');\n// Writing more now is not allowed!\n```",
        "params": [
          {
            "name": "chunk",
            "description": "Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n{TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`."
          },
          {
            "name": "encoding",
            "description": "The encoding if `chunk` is a string"
          },
          {
            "name": "callback",
            "description": "Callback for when the stream is finished."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.cork",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "description": "The `writable.cork()` method forces all written data to be buffered in memory.\nThe buffered data will be flushed when either the    or    methods are called.\n\nThe primary intent of `writable.cork()` is to accommodate a situation in which\nseveral small chunks are written to the stream in rapid succession. Instead of\nimmediately forwarding them to the underlying destination, `writable.cork()` buffers all the chunks until `writable.uncork()` is called, which will pass them\nall to `writable._writev()`, if present. This prevents a head-of-line blocking\nsituation where data is being buffered while waiting for the first small chunk\nto be processed. However, use of `writable.cork()` without implementing `writable._writev()` may have an adverse effect on throughput.\n\nSee also: `writable.uncork()`, `writable._writev()`.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ScreenRecorder.uncork",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "description": "The `writable.uncork()` method flushes all data buffered since    was called.\n\nWhen using `writable.cork()` and `writable.uncork()` to manage the buffering\nof writes to a stream, defer calls to `writable.uncork()` using `process.nextTick()`. Doing so allows batching of all `writable.write()` calls that occur within a given Node.js event\nloop phase.\n\n```js\nstream.cork();\nstream.write('some ');\nstream.write('data ');\nprocess.nextTick(() => stream.uncork());\n```\n\nIf the `writable.cork()` method is called multiple times on a stream, the\nsame number of calls to `writable.uncork()` must be called to flush the buffered\ndata.\n\n```js\nstream.cork();\nstream.write('some ');\nstream.cork();\nstream.write('data ');\nprocess.nextTick(() => {\n  stream.uncork();\n  // The data will not be flushed until uncork() is called a second time.\n  stream.uncork();\n});\n```\n\nSee also: `writable.cork()`.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "SecurityDetails.issuer",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The name of the issuer of the certificate.",
        "deprecated": false
      }
    },
    {
      "name": "SecurityDetails.validFrom",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": " ://en.wikipedia.org/wiki/Unix_time | Unix timestamp \r\nmarking the start of the certificate's validity.",
        "deprecated": false
      }
    },
    {
      "name": "SecurityDetails.validTo",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": " ://en.wikipedia.org/wiki/Unix_time | Unix timestamp \r\nmarking the end of the certificate's validity.",
        "deprecated": false
      }
    },
    {
      "name": "SecurityDetails.protocol",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The security protocol being used, e.g. \"TLS 1.2\".",
        "deprecated": false
      }
    },
    {
      "name": "SecurityDetails.subjectName",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The name of the subject to which the certificate was issued.",
        "deprecated": false
      }
    },
    {
      "name": "SecurityDetails.subjectAlternativeNames",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "The list of  ://en.wikipedia.org/wiki/Subject_Alternative_Name | subject alternative names (SANs)  of the certificate.",
        "deprecated": false
      }
    },
    {
      "name": "Target.worker",
      "parameters": [],
      "returnType": "Promise<WebWorker>",
      "jsdoc": {
        "description": "If the target is not of type `\"service_worker\"` or `\"shared_worker\"`, returns `null`.",
        "deprecated": false
      }
    },
    {
      "name": "Target.page",
      "parameters": [],
      "returnType": "Promise<Page>",
      "jsdoc": {
        "description": "If the target is not of type `\"page\"`, `\"webview\"` or `\"background_page\"`,\r\nreturns `null`.",
        "deprecated": false
      }
    },
    {
      "name": "Target.asPage",
      "parameters": [],
      "returnType": "Promise<Page>",
      "jsdoc": {
        "description": "Forcefully creates a page for a target of any type. It is useful if you\r\nwant to handle a CDP target of type `other` as a page. If you deal with a\r\nregular page target, use   .",
        "deprecated": false
      }
    },
    {
      "name": "Target.url",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "Target.createCDPSession",
      "parameters": [],
      "returnType": "Promise<CDPSession>",
      "jsdoc": {
        "description": "Creates a Chrome Devtools Protocol session attached to the target.",
        "deprecated": false
      }
    },
    {
      "name": "Target.type",
      "parameters": [],
      "returnType": "TargetType",
      "jsdoc": {
        "description": "Identifies what kind of target this is.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "Target.browser",
      "parameters": [],
      "returnType": "Browser",
      "jsdoc": {
        "description": "Get the browser the target belongs to.",
        "deprecated": false
      }
    },
    {
      "name": "Target.browserContext",
      "parameters": [],
      "returnType": "BrowserContext",
      "jsdoc": {
        "description": "Get the browser context the target belongs to.",
        "deprecated": false
      }
    },
    {
      "name": "Target.opener",
      "parameters": [],
      "returnType": "Target",
      "jsdoc": {
        "description": "Get the target that opened this target. Top-level targets return `null`.",
        "deprecated": false
      }
    },
    {
      "name": "Touchscreen.tap",
      "parameters": [
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Dispatches a `touchstart` and `touchend` event.",
        "params": [
          {
            "name": "x",
            "description": "- Horizontal position of the tap."
          },
          {
            "name": "y",
            "description": "- Vertical position of the tap."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Touchscreen.touchStart",
      "parameters": [
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Promise<TouchHandle>",
      "jsdoc": {
        "description": "Dispatches a `touchstart` event.",
        "params": [
          {
            "name": "x",
            "description": "- Horizontal position of the tap."
          },
          {
            "name": "y",
            "description": "- Vertical position of the tap."
          }
        ],
        "returns": "A handle for the touch that was started.",
        "deprecated": false
      }
    },
    {
      "name": "Touchscreen.touchMove",
      "parameters": [
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Dispatches a `touchMove` event on the first touch that is active.",
        "params": [
          {
            "name": "x",
            "description": "- Horizontal position of the move."
          },
          {
            "name": "y",
            "description": "- Vertical position of the move."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Touchscreen.touchEnd",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Dispatches a `touchend` event on the first touch that is active.",
        "deprecated": false
      }
    },
    {
      "name": "Tracing.start",
      "parameters": [
        {
          "name": "options",
          "type": "TracingOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Starts a trace for the current page.",
        "params": [
          {
            "name": "options",
            "description": "- Optional `TracingOptions`."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Tracing.stop",
      "parameters": [],
      "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "description": "Stops a trace started with the `start` method.",
        "params": [],
        "returns": "Promise which resolves to buffer with trace data.",
        "deprecated": false
      }
    },
    {
      "name": "WebWorker.url",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "The URL of this web worker.",
        "deprecated": false
      }
    },
    {
      "name": "WebWorker.evaluate",
      "parameters": [
        {
          "name": "func",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<Awaited<ReturnType<Func>>>",
      "jsdoc": {
        "description": "Evaluates a given function in the  | worker .",
        "params": [
          {
            "name": "func",
            "description": "- Function to be evaluated."
          },
          {
            "name": "args",
            "description": "- Arguments to pass into `func`."
          }
        ],
        "returns": "The result of `func`.",
        "deprecated": false
      }
    },
    {
      "name": "WebWorker.evaluateHandle",
      "parameters": [
        {
          "name": "func",
          "type": "string | Func",
          "optional": false
        },
        {
          "name": "args",
          "type": "Params",
          "optional": false
        }
      ],
      "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
      "jsdoc": {
        "description": "Evaluates a given function in the  | worker .",
        "params": [
          {
            "name": "func",
            "description": "- Function to be evaluated."
          },
          {
            "name": "args",
            "description": "- Arguments to pass into `func`."
          }
        ],
        "returns": "A  | handle  to the return value of `func`.",
        "deprecated": false
      }
    },
    {
      "name": "WebWorker.close",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": null
    },
    {
      "name": "WebWorker.on",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<Record<EventType, unknown>>[Key]>",
          "optional": false
        }
      ],
      "returnType": "WebWorker",
      "jsdoc": {
        "description": "Bind an event listener to fire when an event occurs.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to listen to. Can be a string or symbol."
          },
          {
            "name": "handler",
            "description": "- the function to be called when the event occurs."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "WebWorker.off",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<Record<EventType, unknown>>[Key]>",
          "optional": true
        }
      ],
      "returnType": "WebWorker",
      "jsdoc": {
        "description": "Remove an event listener from firing.",
        "params": [
          {
            "name": "type",
            "description": "- the event type you'd like to stop listening to."
          },
          {
            "name": "handler",
            "description": "- the function that should be removed."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "WebWorker.emit",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "event",
          "type": "EventsWithWildcard<Record<EventType, unknown>>[Key]",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Emit an event and call any associated listeners.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to emit"
          },
          {
            "name": "eventData",
            "description": "- any data you'd like to emit with the event"
          }
        ],
        "returns": "`true` if there are any listeners, `false` if there are not.",
        "deprecated": false
      }
    },
    {
      "name": "WebWorker.once",
      "parameters": [
        {
          "name": "type",
          "type": "Key",
          "optional": false
        },
        {
          "name": "handler",
          "type": "Handler<EventsWithWildcard<Record<EventType, unknown>>[Key]>",
          "optional": false
        }
      ],
      "returnType": "WebWorker",
      "jsdoc": {
        "description": "Like `on` but the listener will only be fired once and then it will be removed.",
        "params": [
          {
            "name": "type",
            "description": "- the event you'd like to listen to"
          },
          {
            "name": "handler",
            "description": "- the handler function to run when the event occurs"
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    },
    {
      "name": "WebWorker.listenerCount",
      "parameters": [
        {
          "name": "type",
          "type": "EventType",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the number of listeners for a given event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to get the listener count for"
          }
        ],
        "returns": "the number of listeners bound to the given event",
        "deprecated": false
      }
    },
    {
      "name": "WebWorker.removeAllListeners",
      "parameters": [
        {
          "name": "type",
          "type": "EventType",
          "optional": true
        }
      ],
      "returnType": "WebWorker",
      "jsdoc": {
        "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
        "params": [
          {
            "name": "type",
            "description": "- the event to remove listeners for."
          }
        ],
        "returns": "`this` to enable you to chain method calls.",
        "deprecated": false
      }
    }
  ],
  "enums": [
    {
      "name": "BrowserContextEvent",
      "members": [
        {
          "name": "TargetChanged",
          "value": "\"targetchanged\""
        },
        {
          "name": "TargetCreated",
          "value": "\"targetcreated\""
        },
        {
          "name": "TargetDestroyed",
          "value": "\"targetdestroyed\""
        }
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserEvent",
      "members": [
        {
          "name": "Disconnected",
          "value": "\"disconnected\""
        },
        {
          "name": "TargetChanged",
          "value": "\"targetchanged\""
        },
        {
          "name": "TargetCreated",
          "value": "\"targetcreated\""
        },
        {
          "name": "TargetDestroyed",
          "value": "\"targetdestroyed\""
        }
      ],
      "jsdoc": {
        "description": "All the events a  | browser instance  may emit.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "InterceptResolutionAction",
      "members": [
        {
          "name": "Abort",
          "value": "\"abort\""
        },
        {
          "name": "Respond",
          "value": "\"respond\""
        },
        {
          "name": "Continue",
          "value": "\"continue\""
        },
        {
          "name": "Disabled",
          "value": "\"disabled\""
        },
        {
          "name": "None",
          "value": "\"none\""
        },
        {
          "name": "AlreadyHandled",
          "value": "\"already-handled\""
        }
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "LocatorEvent",
      "members": [
        {
          "name": "Action",
          "value": "\"action\""
        }
      ],
      "jsdoc": {
        "description": "All the events that a locator instance may emit.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent",
      "members": [
        {
          "name": "Close",
          "value": "\"close\""
        },
        {
          "name": "Console",
          "value": "\"console\""
        },
        {
          "name": "Dialog",
          "value": "\"dialog\""
        },
        {
          "name": "DOMContentLoaded",
          "value": "\"domcontentloaded\""
        },
        {
          "name": "Error",
          "value": "\"error\""
        },
        {
          "name": "FrameAttached",
          "value": "\"frameattached\""
        },
        {
          "name": "FrameDetached",
          "value": "\"framedetached\""
        },
        {
          "name": "FrameNavigated",
          "value": "\"framenavigated\""
        },
        {
          "name": "Load",
          "value": "\"load\""
        },
        {
          "name": "Metrics",
          "value": "\"metrics\""
        },
        {
          "name": "PageError",
          "value": "\"pageerror\""
        },
        {
          "name": "Popup",
          "value": "\"popup\""
        },
        {
          "name": "Request",
          "value": "\"request\""
        },
        {
          "name": "RequestServedFromCache",
          "value": "\"requestservedfromcache\""
        },
        {
          "name": "RequestFailed",
          "value": "\"requestfailed\""
        },
        {
          "name": "RequestFinished",
          "value": "\"requestfinished\""
        },
        {
          "name": "Response",
          "value": "\"response\""
        },
        {
          "name": "WorkerCreated",
          "value": "\"workercreated\""
        },
        {
          "name": "WorkerDestroyed",
          "value": "\"workerdestroyed\""
        }
      ],
      "jsdoc": {
        "description": "All the events that a page instance may emit.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "TargetType",
      "members": [
        {
          "name": "PAGE",
          "value": "\"page\""
        },
        {
          "name": "BACKGROUND_PAGE",
          "value": "\"background_page\""
        },
        {
          "name": "SERVICE_WORKER",
          "value": "\"service_worker\""
        },
        {
          "name": "SHARED_WORKER",
          "value": "\"shared_worker\""
        },
        {
          "name": "BROWSER",
          "value": "\"browser\""
        },
        {
          "name": "WEBVIEW",
          "value": "\"webview\""
        },
        {
          "name": "OTHER",
          "value": "\"other\""
        }
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    }
  ],
  "types": [
    {
      "name": "ActionOptions",
      "type": "ActionOptions",
      "properties": [
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ActionResult",
      "type": "ActionResult",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "AutofillData",
      "type": "AutofillData",
      "properties": [
        {
          "name": "creditCard",
          "type": "{ number: string; name: string; expiryMonth: string; expiryYear: string; cvc: string; }",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Awaitable",
      "type": "Awaitable<T>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "AwaitableIterable",
      "type": "AwaitableIterable<T>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "AwaitablePredicate",
      "type": "AwaitablePredicate<T>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "AwaitedLocator",
      "type": "AwaitedLocator<T>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BoundingBox",
      "type": "BoundingBox",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "optional": false
        },
        {
          "name": "height",
          "type": "number",
          "optional": false
        },
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "extends": [
        "Point"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BoxModel",
      "type": "BoxModel",
      "properties": [
        {
          "name": "content",
          "type": "Quad",
          "optional": false
        },
        {
          "name": "padding",
          "type": "Quad",
          "optional": false
        },
        {
          "name": "border",
          "type": "Quad",
          "optional": false
        },
        {
          "name": "margin",
          "type": "Quad",
          "optional": false
        },
        {
          "name": "width",
          "type": "number",
          "optional": false
        },
        {
          "name": "height",
          "type": "number",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserContextEvents",
      "type": "BrowserContextEvents",
      "properties": [
        {
          "name": "targetchanged",
          "type": "Target",
          "optional": false
        },
        {
          "name": "targetcreated",
          "type": "Target",
          "optional": false
        },
        {
          "name": "targetdestroyed",
          "type": "Target",
          "optional": false
        }
      ],
      "extends": [
        "Record<EventType, unknown>"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserContextOptions",
      "type": "BrowserContextOptions",
      "properties": [
        {
          "name": "proxyServer",
          "type": "string",
          "optional": true
        },
        {
          "name": "proxyBypassList",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "downloadBehavior",
          "type": "DownloadBehavior",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserEvents",
      "type": "BrowserEvents",
      "properties": [
        {
          "name": "disconnected",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "targetcreated",
          "type": "Target",
          "optional": false
        },
        {
          "name": "targetdestroyed",
          "type": "Target",
          "optional": false
        },
        {
          "name": "targetchanged",
          "type": "Target",
          "optional": false
        }
      ],
      "extends": [
        "Record<EventType, unknown>"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CDPEvents",
      "type": "CDPEvents",
      "properties": [
        {
          "name": "Console.messageAdded",
          "type": "MessageAddedEvent",
          "optional": false
        },
        {
          "name": "Debugger.breakpointResolved",
          "type": "BreakpointResolvedEvent",
          "optional": false
        },
        {
          "name": "Debugger.paused",
          "type": "PausedEvent",
          "optional": false
        },
        {
          "name": "Debugger.resumed",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Debugger.scriptFailedToParse",
          "type": "ScriptFailedToParseEvent",
          "optional": false
        },
        {
          "name": "Debugger.scriptParsed",
          "type": "ScriptParsedEvent",
          "optional": false
        },
        {
          "name": "HeapProfiler.addHeapSnapshotChunk",
          "type": "AddHeapSnapshotChunkEvent",
          "optional": false
        },
        {
          "name": "HeapProfiler.heapStatsUpdate",
          "type": "HeapStatsUpdateEvent",
          "optional": false
        },
        {
          "name": "HeapProfiler.lastSeenObjectId",
          "type": "LastSeenObjectIdEvent",
          "optional": false
        },
        {
          "name": "HeapProfiler.reportHeapSnapshotProgress",
          "type": "ReportHeapSnapshotProgressEvent",
          "optional": false
        },
        {
          "name": "HeapProfiler.resetProfiles",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Profiler.consoleProfileFinished",
          "type": "ConsoleProfileFinishedEvent",
          "optional": false
        },
        {
          "name": "Profiler.consoleProfileStarted",
          "type": "ConsoleProfileStartedEvent",
          "optional": false
        },
        {
          "name": "Profiler.preciseCoverageDeltaUpdate",
          "type": "PreciseCoverageDeltaUpdateEvent",
          "optional": false
        },
        {
          "name": "Runtime.bindingCalled",
          "type": "BindingCalledEvent",
          "optional": false
        },
        {
          "name": "Runtime.consoleAPICalled",
          "type": "ConsoleAPICalledEvent",
          "optional": false
        },
        {
          "name": "Runtime.exceptionRevoked",
          "type": "ExceptionRevokedEvent",
          "optional": false
        },
        {
          "name": "Runtime.exceptionThrown",
          "type": "ExceptionThrownEvent",
          "optional": false
        },
        {
          "name": "Runtime.executionContextCreated",
          "type": "ExecutionContextCreatedEvent",
          "optional": false
        },
        {
          "name": "Runtime.executionContextDestroyed",
          "type": "ExecutionContextDestroyedEvent",
          "optional": false
        },
        {
          "name": "Runtime.executionContextsCleared",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Runtime.inspectRequested",
          "type": "InspectRequestedEvent",
          "optional": false
        },
        {
          "name": "Accessibility.loadComplete",
          "type": "LoadCompleteEvent",
          "optional": false
        },
        {
          "name": "Accessibility.nodesUpdated",
          "type": "NodesUpdatedEvent",
          "optional": false
        },
        {
          "name": "Animation.animationCanceled",
          "type": "AnimationCanceledEvent",
          "optional": false
        },
        {
          "name": "Animation.animationCreated",
          "type": "AnimationCreatedEvent",
          "optional": false
        },
        {
          "name": "Animation.animationStarted",
          "type": "AnimationStartedEvent",
          "optional": false
        },
        {
          "name": "Animation.animationUpdated",
          "type": "AnimationUpdatedEvent",
          "optional": false
        },
        {
          "name": "Audits.issueAdded",
          "type": "IssueAddedEvent",
          "optional": false
        },
        {
          "name": "Autofill.addressFormFilled",
          "type": "AddressFormFilledEvent",
          "optional": false
        },
        {
          "name": "BackgroundService.recordingStateChanged",
          "type": "RecordingStateChangedEvent",
          "optional": false
        },
        {
          "name": "BackgroundService.backgroundServiceEventReceived",
          "type": "BackgroundServiceEventReceivedEvent",
          "optional": false
        },
        {
          "name": "Browser.downloadWillBegin",
          "type": "DownloadWillBeginEvent",
          "optional": false
        },
        {
          "name": "Browser.downloadProgress",
          "type": "DownloadProgressEvent",
          "optional": false
        },
        {
          "name": "CSS.fontsUpdated",
          "type": "FontsUpdatedEvent",
          "optional": false
        },
        {
          "name": "CSS.mediaQueryResultChanged",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "CSS.styleSheetAdded",
          "type": "StyleSheetAddedEvent",
          "optional": false
        },
        {
          "name": "CSS.styleSheetChanged",
          "type": "StyleSheetChangedEvent",
          "optional": false
        },
        {
          "name": "CSS.styleSheetRemoved",
          "type": "StyleSheetRemovedEvent",
          "optional": false
        },
        {
          "name": "CSS.computedStyleUpdated",
          "type": "ComputedStyleUpdatedEvent",
          "optional": false
        },
        {
          "name": "Cast.sinksUpdated",
          "type": "SinksUpdatedEvent",
          "optional": false
        },
        {
          "name": "Cast.issueUpdated",
          "type": "IssueUpdatedEvent",
          "optional": false
        },
        {
          "name": "DOM.attributeModified",
          "type": "AttributeModifiedEvent",
          "optional": false
        },
        {
          "name": "DOM.attributeRemoved",
          "type": "AttributeRemovedEvent",
          "optional": false
        },
        {
          "name": "DOM.characterDataModified",
          "type": "CharacterDataModifiedEvent",
          "optional": false
        },
        {
          "name": "DOM.childNodeCountUpdated",
          "type": "ChildNodeCountUpdatedEvent",
          "optional": false
        },
        {
          "name": "DOM.childNodeInserted",
          "type": "ChildNodeInsertedEvent",
          "optional": false
        },
        {
          "name": "DOM.childNodeRemoved",
          "type": "ChildNodeRemovedEvent",
          "optional": false
        },
        {
          "name": "DOM.distributedNodesUpdated",
          "type": "DistributedNodesUpdatedEvent",
          "optional": false
        },
        {
          "name": "DOM.documentUpdated",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "DOM.inlineStyleInvalidated",
          "type": "InlineStyleInvalidatedEvent",
          "optional": false
        },
        {
          "name": "DOM.pseudoElementAdded",
          "type": "PseudoElementAddedEvent",
          "optional": false
        },
        {
          "name": "DOM.topLayerElementsUpdated",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "DOM.scrollableFlagUpdated",
          "type": "ScrollableFlagUpdatedEvent",
          "optional": false
        },
        {
          "name": "DOM.pseudoElementRemoved",
          "type": "PseudoElementRemovedEvent",
          "optional": false
        },
        {
          "name": "DOM.setChildNodes",
          "type": "SetChildNodesEvent",
          "optional": false
        },
        {
          "name": "DOM.shadowRootPopped",
          "type": "ShadowRootPoppedEvent",
          "optional": false
        },
        {
          "name": "DOM.shadowRootPushed",
          "type": "ShadowRootPushedEvent",
          "optional": false
        },
        {
          "name": "DOMStorage.domStorageItemAdded",
          "type": "DomStorageItemAddedEvent",
          "optional": false
        },
        {
          "name": "DOMStorage.domStorageItemRemoved",
          "type": "DomStorageItemRemovedEvent",
          "optional": false
        },
        {
          "name": "DOMStorage.domStorageItemUpdated",
          "type": "DomStorageItemUpdatedEvent",
          "optional": false
        },
        {
          "name": "DOMStorage.domStorageItemsCleared",
          "type": "DomStorageItemsClearedEvent",
          "optional": false
        },
        {
          "name": "Emulation.virtualTimeBudgetExpired",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Input.dragIntercepted",
          "type": "DragInterceptedEvent",
          "optional": false
        },
        {
          "name": "Inspector.detached",
          "type": "DetachedEvent",
          "optional": false
        },
        {
          "name": "Inspector.targetCrashed",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Inspector.targetReloadedAfterCrash",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "LayerTree.layerPainted",
          "type": "LayerPaintedEvent",
          "optional": false
        },
        {
          "name": "LayerTree.layerTreeDidChange",
          "type": "LayerTreeDidChangeEvent",
          "optional": false
        },
        {
          "name": "Log.entryAdded",
          "type": "EntryAddedEvent",
          "optional": false
        },
        {
          "name": "Network.dataReceived",
          "type": "DataReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.eventSourceMessageReceived",
          "type": "EventSourceMessageReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.loadingFailed",
          "type": "LoadingFailedEvent",
          "optional": false
        },
        {
          "name": "Network.loadingFinished",
          "type": "LoadingFinishedEvent",
          "optional": false
        },
        {
          "name": "Network.requestIntercepted",
          "type": "RequestInterceptedEvent",
          "optional": false
        },
        {
          "name": "Network.requestServedFromCache",
          "type": "RequestServedFromCacheEvent",
          "optional": false
        },
        {
          "name": "Network.requestWillBeSent",
          "type": "RequestWillBeSentEvent",
          "optional": false
        },
        {
          "name": "Network.resourceChangedPriority",
          "type": "ResourceChangedPriorityEvent",
          "optional": false
        },
        {
          "name": "Network.signedExchangeReceived",
          "type": "SignedExchangeReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.responseReceived",
          "type": "ResponseReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketClosed",
          "type": "WebSocketClosedEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketCreated",
          "type": "WebSocketCreatedEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketFrameError",
          "type": "WebSocketFrameErrorEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketFrameReceived",
          "type": "WebSocketFrameReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketFrameSent",
          "type": "WebSocketFrameSentEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketHandshakeResponseReceived",
          "type": "WebSocketHandshakeResponseReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketWillSendHandshakeRequest",
          "type": "WebSocketWillSendHandshakeRequestEvent",
          "optional": false
        },
        {
          "name": "Network.webTransportCreated",
          "type": "WebTransportCreatedEvent",
          "optional": false
        },
        {
          "name": "Network.webTransportConnectionEstablished",
          "type": "WebTransportConnectionEstablishedEvent",
          "optional": false
        },
        {
          "name": "Network.webTransportClosed",
          "type": "WebTransportClosedEvent",
          "optional": false
        },
        {
          "name": "Network.requestWillBeSentExtraInfo",
          "type": "RequestWillBeSentExtraInfoEvent",
          "optional": false
        },
        {
          "name": "Network.responseReceivedExtraInfo",
          "type": "ResponseReceivedExtraInfoEvent",
          "optional": false
        },
        {
          "name": "Network.responseReceivedEarlyHints",
          "type": "ResponseReceivedEarlyHintsEvent",
          "optional": false
        },
        {
          "name": "Network.trustTokenOperationDone",
          "type": "TrustTokenOperationDoneEvent",
          "optional": false
        },
        {
          "name": "Network.policyUpdated",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Network.subresourceWebBundleMetadataReceived",
          "type": "SubresourceWebBundleMetadataReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.subresourceWebBundleMetadataError",
          "type": "SubresourceWebBundleMetadataErrorEvent",
          "optional": false
        },
        {
          "name": "Network.subresourceWebBundleInnerResponseParsed",
          "type": "SubresourceWebBundleInnerResponseParsedEvent",
          "optional": false
        },
        {
          "name": "Network.subresourceWebBundleInnerResponseError",
          "type": "SubresourceWebBundleInnerResponseErrorEvent",
          "optional": false
        },
        {
          "name": "Network.reportingApiReportAdded",
          "type": "ReportingApiReportAddedEvent",
          "optional": false
        },
        {
          "name": "Network.reportingApiReportUpdated",
          "type": "ReportingApiReportUpdatedEvent",
          "optional": false
        },
        {
          "name": "Network.reportingApiEndpointsChangedForOrigin",
          "type": "ReportingApiEndpointsChangedForOriginEvent",
          "optional": false
        },
        {
          "name": "Overlay.inspectNodeRequested",
          "type": "InspectNodeRequestedEvent",
          "optional": false
        },
        {
          "name": "Overlay.nodeHighlightRequested",
          "type": "NodeHighlightRequestedEvent",
          "optional": false
        },
        {
          "name": "Overlay.screenshotRequested",
          "type": "ScreenshotRequestedEvent",
          "optional": false
        },
        {
          "name": "Overlay.inspectModeCanceled",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Page.domContentEventFired",
          "type": "DomContentEventFiredEvent",
          "optional": false
        },
        {
          "name": "Page.fileChooserOpened",
          "type": "FileChooserOpenedEvent",
          "optional": false
        },
        {
          "name": "Page.frameAttached",
          "type": "FrameAttachedEvent",
          "optional": false
        },
        {
          "name": "Page.frameClearedScheduledNavigation",
          "type": "FrameClearedScheduledNavigationEvent",
          "optional": false
        },
        {
          "name": "Page.frameDetached",
          "type": "FrameDetachedEvent",
          "optional": false
        },
        {
          "name": "Page.frameSubtreeWillBeDetached",
          "type": "FrameSubtreeWillBeDetachedEvent",
          "optional": false
        },
        {
          "name": "Page.frameNavigated",
          "type": "FrameNavigatedEvent",
          "optional": false
        },
        {
          "name": "Page.documentOpened",
          "type": "DocumentOpenedEvent",
          "optional": false
        },
        {
          "name": "Page.frameResized",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Page.frameStartedNavigating",
          "type": "FrameStartedNavigatingEvent",
          "optional": false
        },
        {
          "name": "Page.frameRequestedNavigation",
          "type": "FrameRequestedNavigationEvent",
          "optional": false
        },
        {
          "name": "Page.frameScheduledNavigation",
          "type": "FrameScheduledNavigationEvent",
          "optional": false
        },
        {
          "name": "Page.frameStartedLoading",
          "type": "FrameStartedLoadingEvent",
          "optional": false
        },
        {
          "name": "Page.frameStoppedLoading",
          "type": "FrameStoppedLoadingEvent",
          "optional": false
        },
        {
          "name": "Page.downloadWillBegin",
          "type": "DownloadWillBeginEvent",
          "optional": false
        },
        {
          "name": "Page.downloadProgress",
          "type": "DownloadProgressEvent",
          "optional": false
        },
        {
          "name": "Page.interstitialHidden",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Page.interstitialShown",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Page.javascriptDialogClosed",
          "type": "JavascriptDialogClosedEvent",
          "optional": false
        },
        {
          "name": "Page.javascriptDialogOpening",
          "type": "JavascriptDialogOpeningEvent",
          "optional": false
        },
        {
          "name": "Page.lifecycleEvent",
          "type": "LifecycleEventEvent",
          "optional": false
        },
        {
          "name": "Page.backForwardCacheNotUsed",
          "type": "BackForwardCacheNotUsedEvent",
          "optional": false
        },
        {
          "name": "Page.loadEventFired",
          "type": "LoadEventFiredEvent",
          "optional": false
        },
        {
          "name": "Page.navigatedWithinDocument",
          "type": "NavigatedWithinDocumentEvent",
          "optional": false
        },
        {
          "name": "Page.screencastFrame",
          "type": "ScreencastFrameEvent",
          "optional": false
        },
        {
          "name": "Page.screencastVisibilityChanged",
          "type": "ScreencastVisibilityChangedEvent",
          "optional": false
        },
        {
          "name": "Page.windowOpen",
          "type": "WindowOpenEvent",
          "optional": false
        },
        {
          "name": "Page.compilationCacheProduced",
          "type": "CompilationCacheProducedEvent",
          "optional": false
        },
        {
          "name": "Performance.metrics",
          "type": "MetricsEvent",
          "optional": false
        },
        {
          "name": "PerformanceTimeline.timelineEventAdded",
          "type": "TimelineEventAddedEvent",
          "optional": false
        },
        {
          "name": "Security.certificateError",
          "type": "CertificateErrorEvent",
          "optional": false
        },
        {
          "name": "Security.visibleSecurityStateChanged",
          "type": "VisibleSecurityStateChangedEvent",
          "optional": false
        },
        {
          "name": "Security.securityStateChanged",
          "type": "SecurityStateChangedEvent",
          "optional": false
        },
        {
          "name": "ServiceWorker.workerErrorReported",
          "type": "WorkerErrorReportedEvent",
          "optional": false
        },
        {
          "name": "ServiceWorker.workerRegistrationUpdated",
          "type": "WorkerRegistrationUpdatedEvent",
          "optional": false
        },
        {
          "name": "ServiceWorker.workerVersionUpdated",
          "type": "WorkerVersionUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.cacheStorageContentUpdated",
          "type": "CacheStorageContentUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.cacheStorageListUpdated",
          "type": "CacheStorageListUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.indexedDBContentUpdated",
          "type": "IndexedDBContentUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.indexedDBListUpdated",
          "type": "IndexedDBListUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.interestGroupAccessed",
          "type": "InterestGroupAccessedEvent",
          "optional": false
        },
        {
          "name": "Storage.interestGroupAuctionEventOccurred",
          "type": "InterestGroupAuctionEventOccurredEvent",
          "optional": false
        },
        {
          "name": "Storage.interestGroupAuctionNetworkRequestCreated",
          "type": "InterestGroupAuctionNetworkRequestCreatedEvent",
          "optional": false
        },
        {
          "name": "Storage.sharedStorageAccessed",
          "type": "SharedStorageAccessedEvent",
          "optional": false
        },
        {
          "name": "Storage.storageBucketCreatedOrUpdated",
          "type": "StorageBucketCreatedOrUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.storageBucketDeleted",
          "type": "StorageBucketDeletedEvent",
          "optional": false
        },
        {
          "name": "Storage.attributionReportingSourceRegistered",
          "type": "AttributionReportingSourceRegisteredEvent",
          "optional": false
        },
        {
          "name": "Storage.attributionReportingTriggerRegistered",
          "type": "AttributionReportingTriggerRegisteredEvent",
          "optional": false
        },
        {
          "name": "Target.attachedToTarget",
          "type": "AttachedToTargetEvent",
          "optional": false
        },
        {
          "name": "Target.detachedFromTarget",
          "type": "DetachedFromTargetEvent",
          "optional": false
        },
        {
          "name": "Target.receivedMessageFromTarget",
          "type": "ReceivedMessageFromTargetEvent",
          "optional": false
        },
        {
          "name": "Target.targetCreated",
          "type": "TargetCreatedEvent",
          "optional": false
        },
        {
          "name": "Target.targetDestroyed",
          "type": "TargetDestroyedEvent",
          "optional": false
        },
        {
          "name": "Target.targetCrashed",
          "type": "TargetCrashedEvent",
          "optional": false
        },
        {
          "name": "Target.targetInfoChanged",
          "type": "TargetInfoChangedEvent",
          "optional": false
        },
        {
          "name": "Tethering.accepted",
          "type": "AcceptedEvent",
          "optional": false
        },
        {
          "name": "Tracing.bufferUsage",
          "type": "BufferUsageEvent",
          "optional": false
        },
        {
          "name": "Tracing.dataCollected",
          "type": "DataCollectedEvent",
          "optional": false
        },
        {
          "name": "Tracing.tracingComplete",
          "type": "TracingCompleteEvent",
          "optional": false
        },
        {
          "name": "Fetch.requestPaused",
          "type": "RequestPausedEvent",
          "optional": false
        },
        {
          "name": "Fetch.authRequired",
          "type": "AuthRequiredEvent",
          "optional": false
        },
        {
          "name": "WebAudio.contextCreated",
          "type": "ContextCreatedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.contextWillBeDestroyed",
          "type": "ContextWillBeDestroyedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.contextChanged",
          "type": "ContextChangedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioListenerCreated",
          "type": "AudioListenerCreatedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioListenerWillBeDestroyed",
          "type": "AudioListenerWillBeDestroyedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioNodeCreated",
          "type": "AudioNodeCreatedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioNodeWillBeDestroyed",
          "type": "AudioNodeWillBeDestroyedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioParamCreated",
          "type": "AudioParamCreatedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioParamWillBeDestroyed",
          "type": "AudioParamWillBeDestroyedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.nodesConnected",
          "type": "NodesConnectedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.nodesDisconnected",
          "type": "NodesDisconnectedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.nodeParamConnected",
          "type": "NodeParamConnectedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.nodeParamDisconnected",
          "type": "NodeParamDisconnectedEvent",
          "optional": false
        },
        {
          "name": "WebAuthn.credentialAdded",
          "type": "CredentialAddedEvent",
          "optional": false
        },
        {
          "name": "WebAuthn.credentialDeleted",
          "type": "CredentialDeletedEvent",
          "optional": false
        },
        {
          "name": "WebAuthn.credentialUpdated",
          "type": "CredentialUpdatedEvent",
          "optional": false
        },
        {
          "name": "WebAuthn.credentialAsserted",
          "type": "CredentialAssertedEvent",
          "optional": false
        },
        {
          "name": "Media.playerPropertiesChanged",
          "type": "PlayerPropertiesChangedEvent",
          "optional": false
        },
        {
          "name": "Media.playerEventsAdded",
          "type": "PlayerEventsAddedEvent",
          "optional": false
        },
        {
          "name": "Media.playerMessagesLogged",
          "type": "PlayerMessagesLoggedEvent",
          "optional": false
        },
        {
          "name": "Media.playerErrorsRaised",
          "type": "PlayerErrorsRaisedEvent",
          "optional": false
        },
        {
          "name": "Media.playersCreated",
          "type": "PlayersCreatedEvent",
          "optional": false
        },
        {
          "name": "DeviceAccess.deviceRequestPrompted",
          "type": "DeviceRequestPromptedEvent",
          "optional": false
        },
        {
          "name": "Preload.ruleSetUpdated",
          "type": "RuleSetUpdatedEvent",
          "optional": false
        },
        {
          "name": "Preload.ruleSetRemoved",
          "type": "RuleSetRemovedEvent",
          "optional": false
        },
        {
          "name": "Preload.preloadEnabledStateUpdated",
          "type": "PreloadEnabledStateUpdatedEvent",
          "optional": false
        },
        {
          "name": "Preload.prefetchStatusUpdated",
          "type": "PrefetchStatusUpdatedEvent",
          "optional": false
        },
        {
          "name": "Preload.prerenderStatusUpdated",
          "type": "PrerenderStatusUpdatedEvent",
          "optional": false
        },
        {
          "name": "Preload.preloadingAttemptSourcesUpdated",
          "type": "PreloadingAttemptSourcesUpdatedEvent",
          "optional": false
        },
        {
          "name": "FedCm.dialogShown",
          "type": "DialogShownEvent",
          "optional": false
        },
        {
          "name": "FedCm.dialogClosed",
          "type": "DialogClosedEvent",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CDPSessionEvents",
      "type": "CDPSessionEvents",
      "properties": [
        {
          "name": "sessionattached",
          "type": "CDPSession",
          "optional": false
        },
        {
          "name": "sessiondetached",
          "type": "CDPSession",
          "optional": false
        },
        {
          "name": "Console.messageAdded",
          "type": "MessageAddedEvent",
          "optional": false
        },
        {
          "name": "Debugger.breakpointResolved",
          "type": "BreakpointResolvedEvent",
          "optional": false
        },
        {
          "name": "Debugger.paused",
          "type": "PausedEvent",
          "optional": false
        },
        {
          "name": "Debugger.resumed",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Debugger.scriptFailedToParse",
          "type": "ScriptFailedToParseEvent",
          "optional": false
        },
        {
          "name": "Debugger.scriptParsed",
          "type": "ScriptParsedEvent",
          "optional": false
        },
        {
          "name": "HeapProfiler.addHeapSnapshotChunk",
          "type": "AddHeapSnapshotChunkEvent",
          "optional": false
        },
        {
          "name": "HeapProfiler.heapStatsUpdate",
          "type": "HeapStatsUpdateEvent",
          "optional": false
        },
        {
          "name": "HeapProfiler.lastSeenObjectId",
          "type": "LastSeenObjectIdEvent",
          "optional": false
        },
        {
          "name": "HeapProfiler.reportHeapSnapshotProgress",
          "type": "ReportHeapSnapshotProgressEvent",
          "optional": false
        },
        {
          "name": "HeapProfiler.resetProfiles",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Profiler.consoleProfileFinished",
          "type": "ConsoleProfileFinishedEvent",
          "optional": false
        },
        {
          "name": "Profiler.consoleProfileStarted",
          "type": "ConsoleProfileStartedEvent",
          "optional": false
        },
        {
          "name": "Profiler.preciseCoverageDeltaUpdate",
          "type": "PreciseCoverageDeltaUpdateEvent",
          "optional": false
        },
        {
          "name": "Runtime.bindingCalled",
          "type": "BindingCalledEvent",
          "optional": false
        },
        {
          "name": "Runtime.consoleAPICalled",
          "type": "ConsoleAPICalledEvent",
          "optional": false
        },
        {
          "name": "Runtime.exceptionRevoked",
          "type": "ExceptionRevokedEvent",
          "optional": false
        },
        {
          "name": "Runtime.exceptionThrown",
          "type": "ExceptionThrownEvent",
          "optional": false
        },
        {
          "name": "Runtime.executionContextCreated",
          "type": "ExecutionContextCreatedEvent",
          "optional": false
        },
        {
          "name": "Runtime.executionContextDestroyed",
          "type": "ExecutionContextDestroyedEvent",
          "optional": false
        },
        {
          "name": "Runtime.executionContextsCleared",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Runtime.inspectRequested",
          "type": "InspectRequestedEvent",
          "optional": false
        },
        {
          "name": "Accessibility.loadComplete",
          "type": "LoadCompleteEvent",
          "optional": false
        },
        {
          "name": "Accessibility.nodesUpdated",
          "type": "NodesUpdatedEvent",
          "optional": false
        },
        {
          "name": "Animation.animationCanceled",
          "type": "AnimationCanceledEvent",
          "optional": false
        },
        {
          "name": "Animation.animationCreated",
          "type": "AnimationCreatedEvent",
          "optional": false
        },
        {
          "name": "Animation.animationStarted",
          "type": "AnimationStartedEvent",
          "optional": false
        },
        {
          "name": "Animation.animationUpdated",
          "type": "AnimationUpdatedEvent",
          "optional": false
        },
        {
          "name": "Audits.issueAdded",
          "type": "IssueAddedEvent",
          "optional": false
        },
        {
          "name": "Autofill.addressFormFilled",
          "type": "AddressFormFilledEvent",
          "optional": false
        },
        {
          "name": "BackgroundService.recordingStateChanged",
          "type": "RecordingStateChangedEvent",
          "optional": false
        },
        {
          "name": "BackgroundService.backgroundServiceEventReceived",
          "type": "BackgroundServiceEventReceivedEvent",
          "optional": false
        },
        {
          "name": "Browser.downloadWillBegin",
          "type": "DownloadWillBeginEvent",
          "optional": false
        },
        {
          "name": "Browser.downloadProgress",
          "type": "DownloadProgressEvent",
          "optional": false
        },
        {
          "name": "CSS.fontsUpdated",
          "type": "FontsUpdatedEvent",
          "optional": false
        },
        {
          "name": "CSS.mediaQueryResultChanged",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "CSS.styleSheetAdded",
          "type": "StyleSheetAddedEvent",
          "optional": false
        },
        {
          "name": "CSS.styleSheetChanged",
          "type": "StyleSheetChangedEvent",
          "optional": false
        },
        {
          "name": "CSS.styleSheetRemoved",
          "type": "StyleSheetRemovedEvent",
          "optional": false
        },
        {
          "name": "CSS.computedStyleUpdated",
          "type": "ComputedStyleUpdatedEvent",
          "optional": false
        },
        {
          "name": "Cast.sinksUpdated",
          "type": "SinksUpdatedEvent",
          "optional": false
        },
        {
          "name": "Cast.issueUpdated",
          "type": "IssueUpdatedEvent",
          "optional": false
        },
        {
          "name": "DOM.attributeModified",
          "type": "AttributeModifiedEvent",
          "optional": false
        },
        {
          "name": "DOM.attributeRemoved",
          "type": "AttributeRemovedEvent",
          "optional": false
        },
        {
          "name": "DOM.characterDataModified",
          "type": "CharacterDataModifiedEvent",
          "optional": false
        },
        {
          "name": "DOM.childNodeCountUpdated",
          "type": "ChildNodeCountUpdatedEvent",
          "optional": false
        },
        {
          "name": "DOM.childNodeInserted",
          "type": "ChildNodeInsertedEvent",
          "optional": false
        },
        {
          "name": "DOM.childNodeRemoved",
          "type": "ChildNodeRemovedEvent",
          "optional": false
        },
        {
          "name": "DOM.distributedNodesUpdated",
          "type": "DistributedNodesUpdatedEvent",
          "optional": false
        },
        {
          "name": "DOM.documentUpdated",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "DOM.inlineStyleInvalidated",
          "type": "InlineStyleInvalidatedEvent",
          "optional": false
        },
        {
          "name": "DOM.pseudoElementAdded",
          "type": "PseudoElementAddedEvent",
          "optional": false
        },
        {
          "name": "DOM.topLayerElementsUpdated",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "DOM.scrollableFlagUpdated",
          "type": "ScrollableFlagUpdatedEvent",
          "optional": false
        },
        {
          "name": "DOM.pseudoElementRemoved",
          "type": "PseudoElementRemovedEvent",
          "optional": false
        },
        {
          "name": "DOM.setChildNodes",
          "type": "SetChildNodesEvent",
          "optional": false
        },
        {
          "name": "DOM.shadowRootPopped",
          "type": "ShadowRootPoppedEvent",
          "optional": false
        },
        {
          "name": "DOM.shadowRootPushed",
          "type": "ShadowRootPushedEvent",
          "optional": false
        },
        {
          "name": "DOMStorage.domStorageItemAdded",
          "type": "DomStorageItemAddedEvent",
          "optional": false
        },
        {
          "name": "DOMStorage.domStorageItemRemoved",
          "type": "DomStorageItemRemovedEvent",
          "optional": false
        },
        {
          "name": "DOMStorage.domStorageItemUpdated",
          "type": "DomStorageItemUpdatedEvent",
          "optional": false
        },
        {
          "name": "DOMStorage.domStorageItemsCleared",
          "type": "DomStorageItemsClearedEvent",
          "optional": false
        },
        {
          "name": "Emulation.virtualTimeBudgetExpired",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Input.dragIntercepted",
          "type": "DragInterceptedEvent",
          "optional": false
        },
        {
          "name": "Inspector.detached",
          "type": "DetachedEvent",
          "optional": false
        },
        {
          "name": "Inspector.targetCrashed",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Inspector.targetReloadedAfterCrash",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "LayerTree.layerPainted",
          "type": "LayerPaintedEvent",
          "optional": false
        },
        {
          "name": "LayerTree.layerTreeDidChange",
          "type": "LayerTreeDidChangeEvent",
          "optional": false
        },
        {
          "name": "Log.entryAdded",
          "type": "EntryAddedEvent",
          "optional": false
        },
        {
          "name": "Network.dataReceived",
          "type": "DataReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.eventSourceMessageReceived",
          "type": "EventSourceMessageReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.loadingFailed",
          "type": "LoadingFailedEvent",
          "optional": false
        },
        {
          "name": "Network.loadingFinished",
          "type": "LoadingFinishedEvent",
          "optional": false
        },
        {
          "name": "Network.requestIntercepted",
          "type": "RequestInterceptedEvent",
          "optional": false
        },
        {
          "name": "Network.requestServedFromCache",
          "type": "RequestServedFromCacheEvent",
          "optional": false
        },
        {
          "name": "Network.requestWillBeSent",
          "type": "RequestWillBeSentEvent",
          "optional": false
        },
        {
          "name": "Network.resourceChangedPriority",
          "type": "ResourceChangedPriorityEvent",
          "optional": false
        },
        {
          "name": "Network.signedExchangeReceived",
          "type": "SignedExchangeReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.responseReceived",
          "type": "ResponseReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketClosed",
          "type": "WebSocketClosedEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketCreated",
          "type": "WebSocketCreatedEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketFrameError",
          "type": "WebSocketFrameErrorEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketFrameReceived",
          "type": "WebSocketFrameReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketFrameSent",
          "type": "WebSocketFrameSentEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketHandshakeResponseReceived",
          "type": "WebSocketHandshakeResponseReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.webSocketWillSendHandshakeRequest",
          "type": "WebSocketWillSendHandshakeRequestEvent",
          "optional": false
        },
        {
          "name": "Network.webTransportCreated",
          "type": "WebTransportCreatedEvent",
          "optional": false
        },
        {
          "name": "Network.webTransportConnectionEstablished",
          "type": "WebTransportConnectionEstablishedEvent",
          "optional": false
        },
        {
          "name": "Network.webTransportClosed",
          "type": "WebTransportClosedEvent",
          "optional": false
        },
        {
          "name": "Network.requestWillBeSentExtraInfo",
          "type": "RequestWillBeSentExtraInfoEvent",
          "optional": false
        },
        {
          "name": "Network.responseReceivedExtraInfo",
          "type": "ResponseReceivedExtraInfoEvent",
          "optional": false
        },
        {
          "name": "Network.responseReceivedEarlyHints",
          "type": "ResponseReceivedEarlyHintsEvent",
          "optional": false
        },
        {
          "name": "Network.trustTokenOperationDone",
          "type": "TrustTokenOperationDoneEvent",
          "optional": false
        },
        {
          "name": "Network.policyUpdated",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Network.subresourceWebBundleMetadataReceived",
          "type": "SubresourceWebBundleMetadataReceivedEvent",
          "optional": false
        },
        {
          "name": "Network.subresourceWebBundleMetadataError",
          "type": "SubresourceWebBundleMetadataErrorEvent",
          "optional": false
        },
        {
          "name": "Network.subresourceWebBundleInnerResponseParsed",
          "type": "SubresourceWebBundleInnerResponseParsedEvent",
          "optional": false
        },
        {
          "name": "Network.subresourceWebBundleInnerResponseError",
          "type": "SubresourceWebBundleInnerResponseErrorEvent",
          "optional": false
        },
        {
          "name": "Network.reportingApiReportAdded",
          "type": "ReportingApiReportAddedEvent",
          "optional": false
        },
        {
          "name": "Network.reportingApiReportUpdated",
          "type": "ReportingApiReportUpdatedEvent",
          "optional": false
        },
        {
          "name": "Network.reportingApiEndpointsChangedForOrigin",
          "type": "ReportingApiEndpointsChangedForOriginEvent",
          "optional": false
        },
        {
          "name": "Overlay.inspectNodeRequested",
          "type": "InspectNodeRequestedEvent",
          "optional": false
        },
        {
          "name": "Overlay.nodeHighlightRequested",
          "type": "NodeHighlightRequestedEvent",
          "optional": false
        },
        {
          "name": "Overlay.screenshotRequested",
          "type": "ScreenshotRequestedEvent",
          "optional": false
        },
        {
          "name": "Overlay.inspectModeCanceled",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Page.domContentEventFired",
          "type": "DomContentEventFiredEvent",
          "optional": false
        },
        {
          "name": "Page.fileChooserOpened",
          "type": "FileChooserOpenedEvent",
          "optional": false
        },
        {
          "name": "Page.frameAttached",
          "type": "FrameAttachedEvent",
          "optional": false
        },
        {
          "name": "Page.frameClearedScheduledNavigation",
          "type": "FrameClearedScheduledNavigationEvent",
          "optional": false
        },
        {
          "name": "Page.frameDetached",
          "type": "FrameDetachedEvent",
          "optional": false
        },
        {
          "name": "Page.frameSubtreeWillBeDetached",
          "type": "FrameSubtreeWillBeDetachedEvent",
          "optional": false
        },
        {
          "name": "Page.frameNavigated",
          "type": "FrameNavigatedEvent",
          "optional": false
        },
        {
          "name": "Page.documentOpened",
          "type": "DocumentOpenedEvent",
          "optional": false
        },
        {
          "name": "Page.frameResized",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Page.frameStartedNavigating",
          "type": "FrameStartedNavigatingEvent",
          "optional": false
        },
        {
          "name": "Page.frameRequestedNavigation",
          "type": "FrameRequestedNavigationEvent",
          "optional": false
        },
        {
          "name": "Page.frameScheduledNavigation",
          "type": "FrameScheduledNavigationEvent",
          "optional": false
        },
        {
          "name": "Page.frameStartedLoading",
          "type": "FrameStartedLoadingEvent",
          "optional": false
        },
        {
          "name": "Page.frameStoppedLoading",
          "type": "FrameStoppedLoadingEvent",
          "optional": false
        },
        {
          "name": "Page.downloadWillBegin",
          "type": "DownloadWillBeginEvent",
          "optional": false
        },
        {
          "name": "Page.downloadProgress",
          "type": "DownloadProgressEvent",
          "optional": false
        },
        {
          "name": "Page.interstitialHidden",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Page.interstitialShown",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "Page.javascriptDialogClosed",
          "type": "JavascriptDialogClosedEvent",
          "optional": false
        },
        {
          "name": "Page.javascriptDialogOpening",
          "type": "JavascriptDialogOpeningEvent",
          "optional": false
        },
        {
          "name": "Page.lifecycleEvent",
          "type": "LifecycleEventEvent",
          "optional": false
        },
        {
          "name": "Page.backForwardCacheNotUsed",
          "type": "BackForwardCacheNotUsedEvent",
          "optional": false
        },
        {
          "name": "Page.loadEventFired",
          "type": "LoadEventFiredEvent",
          "optional": false
        },
        {
          "name": "Page.navigatedWithinDocument",
          "type": "NavigatedWithinDocumentEvent",
          "optional": false
        },
        {
          "name": "Page.screencastFrame",
          "type": "ScreencastFrameEvent",
          "optional": false
        },
        {
          "name": "Page.screencastVisibilityChanged",
          "type": "ScreencastVisibilityChangedEvent",
          "optional": false
        },
        {
          "name": "Page.windowOpen",
          "type": "WindowOpenEvent",
          "optional": false
        },
        {
          "name": "Page.compilationCacheProduced",
          "type": "CompilationCacheProducedEvent",
          "optional": false
        },
        {
          "name": "Performance.metrics",
          "type": "MetricsEvent",
          "optional": false
        },
        {
          "name": "PerformanceTimeline.timelineEventAdded",
          "type": "TimelineEventAddedEvent",
          "optional": false
        },
        {
          "name": "Security.certificateError",
          "type": "CertificateErrorEvent",
          "optional": false
        },
        {
          "name": "Security.visibleSecurityStateChanged",
          "type": "VisibleSecurityStateChangedEvent",
          "optional": false
        },
        {
          "name": "Security.securityStateChanged",
          "type": "SecurityStateChangedEvent",
          "optional": false
        },
        {
          "name": "ServiceWorker.workerErrorReported",
          "type": "WorkerErrorReportedEvent",
          "optional": false
        },
        {
          "name": "ServiceWorker.workerRegistrationUpdated",
          "type": "WorkerRegistrationUpdatedEvent",
          "optional": false
        },
        {
          "name": "ServiceWorker.workerVersionUpdated",
          "type": "WorkerVersionUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.cacheStorageContentUpdated",
          "type": "CacheStorageContentUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.cacheStorageListUpdated",
          "type": "CacheStorageListUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.indexedDBContentUpdated",
          "type": "IndexedDBContentUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.indexedDBListUpdated",
          "type": "IndexedDBListUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.interestGroupAccessed",
          "type": "InterestGroupAccessedEvent",
          "optional": false
        },
        {
          "name": "Storage.interestGroupAuctionEventOccurred",
          "type": "InterestGroupAuctionEventOccurredEvent",
          "optional": false
        },
        {
          "name": "Storage.interestGroupAuctionNetworkRequestCreated",
          "type": "InterestGroupAuctionNetworkRequestCreatedEvent",
          "optional": false
        },
        {
          "name": "Storage.sharedStorageAccessed",
          "type": "SharedStorageAccessedEvent",
          "optional": false
        },
        {
          "name": "Storage.storageBucketCreatedOrUpdated",
          "type": "StorageBucketCreatedOrUpdatedEvent",
          "optional": false
        },
        {
          "name": "Storage.storageBucketDeleted",
          "type": "StorageBucketDeletedEvent",
          "optional": false
        },
        {
          "name": "Storage.attributionReportingSourceRegistered",
          "type": "AttributionReportingSourceRegisteredEvent",
          "optional": false
        },
        {
          "name": "Storage.attributionReportingTriggerRegistered",
          "type": "AttributionReportingTriggerRegisteredEvent",
          "optional": false
        },
        {
          "name": "Target.attachedToTarget",
          "type": "AttachedToTargetEvent",
          "optional": false
        },
        {
          "name": "Target.detachedFromTarget",
          "type": "DetachedFromTargetEvent",
          "optional": false
        },
        {
          "name": "Target.receivedMessageFromTarget",
          "type": "ReceivedMessageFromTargetEvent",
          "optional": false
        },
        {
          "name": "Target.targetCreated",
          "type": "TargetCreatedEvent",
          "optional": false
        },
        {
          "name": "Target.targetDestroyed",
          "type": "TargetDestroyedEvent",
          "optional": false
        },
        {
          "name": "Target.targetCrashed",
          "type": "TargetCrashedEvent",
          "optional": false
        },
        {
          "name": "Target.targetInfoChanged",
          "type": "TargetInfoChangedEvent",
          "optional": false
        },
        {
          "name": "Tethering.accepted",
          "type": "AcceptedEvent",
          "optional": false
        },
        {
          "name": "Tracing.bufferUsage",
          "type": "BufferUsageEvent",
          "optional": false
        },
        {
          "name": "Tracing.dataCollected",
          "type": "DataCollectedEvent",
          "optional": false
        },
        {
          "name": "Tracing.tracingComplete",
          "type": "TracingCompleteEvent",
          "optional": false
        },
        {
          "name": "Fetch.requestPaused",
          "type": "RequestPausedEvent",
          "optional": false
        },
        {
          "name": "Fetch.authRequired",
          "type": "AuthRequiredEvent",
          "optional": false
        },
        {
          "name": "WebAudio.contextCreated",
          "type": "ContextCreatedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.contextWillBeDestroyed",
          "type": "ContextWillBeDestroyedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.contextChanged",
          "type": "ContextChangedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioListenerCreated",
          "type": "AudioListenerCreatedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioListenerWillBeDestroyed",
          "type": "AudioListenerWillBeDestroyedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioNodeCreated",
          "type": "AudioNodeCreatedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioNodeWillBeDestroyed",
          "type": "AudioNodeWillBeDestroyedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioParamCreated",
          "type": "AudioParamCreatedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.audioParamWillBeDestroyed",
          "type": "AudioParamWillBeDestroyedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.nodesConnected",
          "type": "NodesConnectedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.nodesDisconnected",
          "type": "NodesDisconnectedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.nodeParamConnected",
          "type": "NodeParamConnectedEvent",
          "optional": false
        },
        {
          "name": "WebAudio.nodeParamDisconnected",
          "type": "NodeParamDisconnectedEvent",
          "optional": false
        },
        {
          "name": "WebAuthn.credentialAdded",
          "type": "CredentialAddedEvent",
          "optional": false
        },
        {
          "name": "WebAuthn.credentialDeleted",
          "type": "CredentialDeletedEvent",
          "optional": false
        },
        {
          "name": "WebAuthn.credentialUpdated",
          "type": "CredentialUpdatedEvent",
          "optional": false
        },
        {
          "name": "WebAuthn.credentialAsserted",
          "type": "CredentialAssertedEvent",
          "optional": false
        },
        {
          "name": "Media.playerPropertiesChanged",
          "type": "PlayerPropertiesChangedEvent",
          "optional": false
        },
        {
          "name": "Media.playerEventsAdded",
          "type": "PlayerEventsAddedEvent",
          "optional": false
        },
        {
          "name": "Media.playerMessagesLogged",
          "type": "PlayerMessagesLoggedEvent",
          "optional": false
        },
        {
          "name": "Media.playerErrorsRaised",
          "type": "PlayerErrorsRaisedEvent",
          "optional": false
        },
        {
          "name": "Media.playersCreated",
          "type": "PlayersCreatedEvent",
          "optional": false
        },
        {
          "name": "DeviceAccess.deviceRequestPrompted",
          "type": "DeviceRequestPromptedEvent",
          "optional": false
        },
        {
          "name": "Preload.ruleSetUpdated",
          "type": "RuleSetUpdatedEvent",
          "optional": false
        },
        {
          "name": "Preload.ruleSetRemoved",
          "type": "RuleSetRemovedEvent",
          "optional": false
        },
        {
          "name": "Preload.preloadEnabledStateUpdated",
          "type": "PreloadEnabledStateUpdatedEvent",
          "optional": false
        },
        {
          "name": "Preload.prefetchStatusUpdated",
          "type": "PrefetchStatusUpdatedEvent",
          "optional": false
        },
        {
          "name": "Preload.prerenderStatusUpdated",
          "type": "PrerenderStatusUpdatedEvent",
          "optional": false
        },
        {
          "name": "Preload.preloadingAttemptSourcesUpdated",
          "type": "PreloadingAttemptSourcesUpdatedEvent",
          "optional": false
        },
        {
          "name": "FedCm.dialogShown",
          "type": "DialogShownEvent",
          "optional": false
        },
        {
          "name": "FedCm.dialogClosed",
          "type": "DialogClosedEvent",
          "optional": false
        }
      ],
      "extends": [
        "CDPEvents",
        "Record<EventType, unknown>"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ChromeHeadlessShellSettings",
      "type": "ChromeHeadlessShellSettings",
      "properties": [
        {
          "name": "skipDownload",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "downloadBaseUrl",
          "type": "string",
          "optional": true
        },
        {
          "name": "version",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ChromeReleaseChannel",
      "type": "ChromeReleaseChannel",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ChromeSettings",
      "type": "ChromeSettings",
      "properties": [
        {
          "name": "skipDownload",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "downloadBaseUrl",
          "type": "string",
          "optional": true
        },
        {
          "name": "version",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ClickOptions",
      "type": "ClickOptions",
      "properties": [
        {
          "name": "offset",
          "type": "Offset",
          "optional": true
        },
        {
          "name": "delay",
          "type": "number",
          "optional": true
        },
        {
          "name": "count",
          "type": "number",
          "optional": true
        },
        {
          "name": "button",
          "type": "MouseButton",
          "optional": true
        },
        {
          "name": "clickCount",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [
        "MouseClickOptions"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CommandOptions",
      "type": "CommandOptions",
      "properties": [
        {
          "name": "timeout",
          "type": "number",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CommonEventEmitter",
      "type": "CommonEventEmitter<Events>",
      "properties": [
        {
          "name": "on",
          "type": "<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>) => CommonEventEmitter<Events>",
          "optional": false
        },
        {
          "name": "off",
          "type": "<Key extends keyof Events>(type: Key, handler?: Handler<Events[Key]>) => CommonEventEmitter<Events>",
          "optional": false
        },
        {
          "name": "emit",
          "type": "<Key extends keyof Events>(type: Key, event: Events[Key]) => boolean",
          "optional": false
        },
        {
          "name": "once",
          "type": "<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>) => CommonEventEmitter<Events>",
          "optional": false
        },
        {
          "name": "listenerCount",
          "type": "(event: keyof Events) => number",
          "optional": false
        },
        {
          "name": "removeAllListeners",
          "type": "(event?: keyof Events) => CommonEventEmitter<Events>",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Configuration",
      "type": "Configuration",
      "properties": [
        {
          "name": "cacheDirectory",
          "type": "string",
          "optional": true
        },
        {
          "name": "executablePath",
          "type": "string",
          "optional": true
        },
        {
          "name": "defaultBrowser",
          "type": "SupportedBrowser",
          "optional": true
        },
        {
          "name": "temporaryDirectory",
          "type": "string",
          "optional": true
        },
        {
          "name": "skipDownload",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "logLevel",
          "type": "\"silent\" | \"error\" | \"warn\"",
          "optional": true
        },
        {
          "name": "experiments",
          "type": "ExperimentsConfiguration",
          "optional": true
        },
        {
          "name": "chrome",
          "type": "ChromeSettings",
          "optional": true
        },
        {
          "name": "chrome-headless-shell",
          "type": "ChromeHeadlessShellSettings",
          "optional": true
        },
        {
          "name": "firefox",
          "type": "FirefoxSettings",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Defines options to configure Puppeteer's behavior during installation and\r\nruntime.\r\n\r\nSee individual properties for more information.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ConnectionTransport",
      "type": "ConnectionTransport",
      "properties": [
        {
          "name": "send",
          "type": "(message: string) => void",
          "optional": false
        },
        {
          "name": "close",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "onmessage",
          "type": "(message: string) => void",
          "optional": true
        },
        {
          "name": "onclose",
          "type": "() => void",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ConnectOptions",
      "type": "ConnectOptions",
      "properties": [
        {
          "name": "acceptInsecureCerts",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "defaultViewport",
          "type": "Viewport",
          "optional": true
        },
        {
          "name": "downloadBehavior",
          "type": "DownloadBehavior",
          "optional": true
        },
        {
          "name": "slowMo",
          "type": "number",
          "optional": true
        },
        {
          "name": "targetFilter",
          "type": "TargetFilterCallback",
          "optional": true
        },
        {
          "name": "protocol",
          "type": "ProtocolType",
          "optional": true
        },
        {
          "name": "protocolTimeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "browserWSEndpoint",
          "type": "string",
          "optional": true
        },
        {
          "name": "browserURL",
          "type": "string",
          "optional": true
        },
        {
          "name": "transport",
          "type": "ConnectionTransport",
          "optional": true
        },
        {
          "name": "headers",
          "type": "Record<string, string>",
          "optional": true
        },
        {
          "name": "capabilities",
          "type": "SupportedWebDriverCapabilities",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Generic browser options that can be passed when launching any browser or when\r\nconnecting to an existing browser instance.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ConsoleMessageLocation",
      "type": "ConsoleMessageLocation",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "optional": true
        },
        {
          "name": "lineNumber",
          "type": "number",
          "optional": true
        },
        {
          "name": "columnNumber",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ConsoleMessageType",
      "type": "ConsoleMessageType",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "The supported types for console messages.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ContinueRequestOverrides",
      "type": "ContinueRequestOverrides",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "optional": true
        },
        {
          "name": "method",
          "type": "string",
          "optional": true
        },
        {
          "name": "postData",
          "type": "string",
          "optional": true
        },
        {
          "name": "headers",
          "type": "Record<string, string>",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Cookie",
      "type": "Cookie",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "value",
          "type": "string",
          "optional": false
        },
        {
          "name": "domain",
          "type": "string",
          "optional": false
        },
        {
          "name": "path",
          "type": "string",
          "optional": false
        },
        {
          "name": "expires",
          "type": "number",
          "optional": false
        },
        {
          "name": "size",
          "type": "number",
          "optional": false
        },
        {
          "name": "httpOnly",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "secure",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "session",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "sameSite",
          "type": "CookieSameSite",
          "optional": true
        },
        {
          "name": "priority",
          "type": "CookiePriority",
          "optional": true
        },
        {
          "name": "sameParty",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "sourceScheme",
          "type": "CookieSourceScheme",
          "optional": true
        },
        {
          "name": "partitionKey",
          "type": "string | CookiePartitionKey",
          "optional": true
        },
        {
          "name": "partitionKeyOpaque",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [
        "CookieData"
      ],
      "jsdoc": {
        "description": "Represents a cookie object.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CookieData",
      "type": "CookieData",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "value",
          "type": "string",
          "optional": false
        },
        {
          "name": "domain",
          "type": "string",
          "optional": false
        },
        {
          "name": "path",
          "type": "string",
          "optional": true
        },
        {
          "name": "secure",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "httpOnly",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "sameSite",
          "type": "CookieSameSite",
          "optional": true
        },
        {
          "name": "expires",
          "type": "number",
          "optional": true
        },
        {
          "name": "priority",
          "type": "CookiePriority",
          "optional": true
        },
        {
          "name": "sameParty",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "sourceScheme",
          "type": "CookieSourceScheme",
          "optional": true
        },
        {
          "name": "partitionKey",
          "type": "string | CookiePartitionKey",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Cookie parameter object used to set cookies in the browser-level cookies\r\nAPI.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CookieParam",
      "type": "CookieParam",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "value",
          "type": "string",
          "optional": false
        },
        {
          "name": "url",
          "type": "string",
          "optional": true
        },
        {
          "name": "domain",
          "type": "string",
          "optional": true
        },
        {
          "name": "path",
          "type": "string",
          "optional": true
        },
        {
          "name": "secure",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "httpOnly",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "sameSite",
          "type": "CookieSameSite",
          "optional": true
        },
        {
          "name": "expires",
          "type": "number",
          "optional": true
        },
        {
          "name": "priority",
          "type": "CookiePriority",
          "optional": true
        },
        {
          "name": "sameParty",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "sourceScheme",
          "type": "CookieSourceScheme",
          "optional": true
        },
        {
          "name": "partitionKey",
          "type": "string | CookiePartitionKey",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Cookie parameter object used to set cookies in the page-level cookies\r\nAPI.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CookiePartitionKey",
      "type": "CookiePartitionKey",
      "properties": [
        {
          "name": "sourceOrigin",
          "type": "string",
          "optional": false
        },
        {
          "name": "hasCrossSiteAncestor",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Represents a cookie partition key in Chrome.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CookiePriority",
      "type": "CookiePriority",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Represents the cookie's 'Priority' status:\r\nhttps://tools.ietf.org/html/draft-west-cookie-priority-00",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CookieSameSite",
      "type": "CookieSameSite",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CookieSourceScheme",
      "type": "CookieSourceScheme",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Represents the source scheme of the origin that originally set the cookie. A value of\r\n\"Unset\" allows protocol clients to emulate legacy cookie scope for the scheme.\r\nThis is a temporary ability and it will be removed in the future.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CoverageEntry",
      "type": "CoverageEntry",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "ranges",
          "type": "{ start: number; end: number; }[]",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "The CoverageEntry class represents one entry of the coverage report.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Credentials",
      "type": "Credentials",
      "properties": [
        {
          "name": "username",
          "type": "string",
          "optional": false
        },
        {
          "name": "password",
          "type": "string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CSSCoverageOptions",
      "type": "CSSCoverageOptions",
      "properties": [
        {
          "name": "resetOnNavigation",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Set of configurable options for CSS coverage.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CustomQueryHandler",
      "type": "CustomQueryHandler",
      "properties": [
        {
          "name": "queryOne",
          "type": "(node: Node, selector: string) => Node",
          "optional": true
        },
        {
          "name": "queryAll",
          "type": "(node: Node, selector: string) => Iterable<Node>",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CustomQuerySelector",
      "type": "CustomQuerySelector",
      "properties": [
        {
          "name": "querySelector",
          "type": "(root: Node, selector: string) => Awaitable<Node>",
          "optional": false
        },
        {
          "name": "querySelectorAll",
          "type": "(root: Node, selector: string) => AwaitableIterable<Node>",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "DebugInfo",
      "type": "DebugInfo",
      "properties": [
        {
          "name": "pendingProtocolErrors",
          "type": "Error[]",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "DeleteCookiesRequest",
      "type": "DeleteCookiesRequest",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "url",
          "type": "string",
          "optional": true
        },
        {
          "name": "domain",
          "type": "string",
          "optional": true
        },
        {
          "name": "path",
          "type": "string",
          "optional": true
        },
        {
          "name": "partitionKey",
          "type": "string | CookiePartitionKey",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Device",
      "type": "Device",
      "properties": [
        {
          "name": "userAgent",
          "type": "string",
          "optional": false
        },
        {
          "name": "viewport",
          "type": "Viewport",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "DownloadBehavior",
      "type": "DownloadBehavior",
      "properties": [
        {
          "name": "policy",
          "type": "DownloadPolicy",
          "optional": false
        },
        {
          "name": "downloadPath",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "DownloadPolicy",
      "type": "DownloadPolicy",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ElementFor",
      "type": "ElementFor<TagName>",
      "properties": [
        {
          "name": "addEventListener",
          "type": "{ <K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSymbolElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void; } | ... 120 more ... | { ...; }",
          "optional": false
        },
        {
          "name": "removeEventListener",
          "type": "{ <K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSymbolElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void; } | ... 120 more ... | { ...; }",
          "optional": false
        },
        {
          "name": "className",
          "type": "any",
          "optional": false
        },
        {
          "name": "attributes",
          "type": "NamedNodeMap",
          "optional": false
        },
        {
          "name": "classList",
          "type": "DOMTokenList",
          "optional": false
        },
        {
          "name": "clientHeight",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientLeft",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientTop",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientWidth",
          "type": "number",
          "optional": false
        },
        {
          "name": "currentCSSZoom",
          "type": "number",
          "optional": false
        },
        {
          "name": "id",
          "type": "string",
          "optional": false
        },
        {
          "name": "innerHTML",
          "type": "string",
          "optional": false
        },
        {
          "name": "localName",
          "type": "string",
          "optional": false
        },
        {
          "name": "namespaceURI",
          "type": "string",
          "optional": false
        },
        {
          "name": "onfullscreenchange",
          "type": "((this: Element, ev: Event) => any) | ((this: Element, ev: Event) => any) | ((this: Element, ev: Event) => any) | ((this: Element, ev: Event) => any) | ... 117 more ... | ((this: Element, ev: Event) => any)",
          "optional": false
        },
        {
          "name": "onfullscreenerror",
          "type": "((this: Element, ev: Event) => any) | ((this: Element, ev: Event) => any) | ((this: Element, ev: Event) => any) | ((this: Element, ev: Event) => any) | ... 117 more ... | ((this: Element, ev: Event) => any)",
          "optional": false
        },
        {
          "name": "outerHTML",
          "type": "string",
          "optional": false
        },
        {
          "name": "ownerDocument",
          "type": "Document",
          "optional": false
        },
        {
          "name": "part",
          "type": "DOMTokenList",
          "optional": false
        },
        {
          "name": "prefix",
          "type": "string",
          "optional": false
        },
        {
          "name": "scrollHeight",
          "type": "number",
          "optional": false
        },
        {
          "name": "scrollLeft",
          "type": "number",
          "optional": false
        },
        {
          "name": "scrollTop",
          "type": "number",
          "optional": false
        },
        {
          "name": "scrollWidth",
          "type": "number",
          "optional": false
        },
        {
          "name": "shadowRoot",
          "type": "ShadowRoot",
          "optional": false
        },
        {
          "name": "slot",
          "type": "string",
          "optional": false
        },
        {
          "name": "tagName",
          "type": "string",
          "optional": false
        },
        {
          "name": "attachShadow",
          "type": "(init: ShadowRootInit) => ShadowRoot",
          "optional": false
        },
        {
          "name": "checkVisibility",
          "type": "(options?: CheckVisibilityOptions) => boolean",
          "optional": false
        },
        {
          "name": "closest",
          "type": "{ <K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K]; <K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K]; <K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K]; <E extends Element = Element>(selectors: string): E; } | ... 120 more ......",
          "optional": false
        },
        {
          "name": "computedStyleMap",
          "type": "() => StylePropertyMapReadOnly",
          "optional": false
        },
        {
          "name": "getAttribute",
          "type": "((qualifiedName: string) => string) | ((qualifiedName: string) => string) | ((qualifiedName: string) => string) | ((qualifiedName: string) => string) | ((qualifiedName: string) => string) | ... 116 more ... | ((qualifiedName: string) => string)",
          "optional": false
        },
        {
          "name": "getAttributeNS",
          "type": "((namespace: string, localName: string) => string) | ((namespace: string, localName: string) => string) | ((namespace: string, localName: string) => string) | ((namespace: string, localName: string) => string) | ... 117 more ... | ((namespace: string, localName: string) => string)",
          "optional": false
        },
        {
          "name": "getAttributeNames",
          "type": "() => string[]",
          "optional": false
        },
        {
          "name": "getAttributeNode",
          "type": "((qualifiedName: string) => Attr) | ((qualifiedName: string) => Attr) | ((qualifiedName: string) => Attr) | ((qualifiedName: string) => Attr) | ((qualifiedName: string) => Attr) | ... 116 more ... | ((qualifiedName: string) => Attr)",
          "optional": false
        },
        {
          "name": "getAttributeNodeNS",
          "type": "((namespace: string, localName: string) => Attr) | ((namespace: string, localName: string) => Attr) | ((namespace: string, localName: string) => Attr) | ((namespace: string, localName: string) => Attr) | ... 117 more ... | ((namespace: string, localName: string) => Attr)",
          "optional": false
        },
        {
          "name": "getBoundingClientRect",
          "type": "() => DOMRect",
          "optional": false
        },
        {
          "name": "getClientRects",
          "type": "() => DOMRectList",
          "optional": false
        },
        {
          "name": "getElementsByClassName",
          "type": "(classNames: string) => HTMLCollectionOf<Element>",
          "optional": false
        },
        {
          "name": "getElementsByTagName",
          "type": "{ <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<...>; <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<...>; <K extends keyof HTMLElementDeprecatedTagNameMa...",
          "optional": false
        },
        {
          "name": "getElementsByTagNameNS",
          "type": "{ (namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<...>; (namespaceURI: \"http://www.w3.org/1998/Math/MathML\", localName: string): HTMLCollectionOf<...>; (namespace: string, localName: st...",
          "optional": false
        },
        {
          "name": "getHTML",
          "type": "(options?: GetHTMLOptions) => string",
          "optional": false
        },
        {
          "name": "hasAttribute",
          "type": "(qualifiedName: string) => boolean",
          "optional": false
        },
        {
          "name": "hasAttributeNS",
          "type": "((namespace: string, localName: string) => boolean) | ((namespace: string, localName: string) => boolean) | ((namespace: string, localName: string) => boolean) | ((namespace: string, localName: string) => boolean) | ... 117 more ... | ((namespace: string, localName: string) => boolean)",
          "optional": false
        },
        {
          "name": "hasAttributes",
          "type": "() => boolean",
          "optional": false
        },
        {
          "name": "hasPointerCapture",
          "type": "(pointerId: number) => boolean",
          "optional": false
        },
        {
          "name": "insertAdjacentElement",
          "type": "((where: InsertPosition, element: Element) => Element) | ((where: InsertPosition, element: Element) => Element) | ... 119 more ... | ((where: InsertPosition, element: Element) => Element)",
          "optional": false
        },
        {
          "name": "insertAdjacentHTML",
          "type": "(position: InsertPosition, string: string) => void",
          "optional": false
        },
        {
          "name": "insertAdjacentText",
          "type": "(where: InsertPosition, data: string) => void",
          "optional": false
        },
        {
          "name": "matches",
          "type": "(selectors: string) => boolean",
          "optional": false
        },
        {
          "name": "releasePointerCapture",
          "type": "(pointerId: number) => void",
          "optional": false
        },
        {
          "name": "removeAttribute",
          "type": "(qualifiedName: string) => void",
          "optional": false
        },
        {
          "name": "removeAttributeNS",
          "type": "((namespace: string, localName: string) => void) | ((namespace: string, localName: string) => void) | ((namespace: string, localName: string) => void) | ((namespace: string, localName: string) => void) | ... 117 more ... | ((namespace: string, localName: string) => void)",
          "optional": false
        },
        {
          "name": "removeAttributeNode",
          "type": "(attr: Attr) => Attr",
          "optional": false
        },
        {
          "name": "requestFullscreen",
          "type": "(options?: FullscreenOptions) => Promise<void>",
          "optional": false
        },
        {
          "name": "requestPointerLock",
          "type": "(options?: PointerLockOptions) => Promise<void>",
          "optional": false
        },
        {
          "name": "scroll",
          "type": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; } | { (options?: ScrollToOptions): void; (x: number, y: number): void; } | { ...; } | ... 118 more ... | { ...; }",
          "optional": false
        },
        {
          "name": "scrollBy",
          "type": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; } | { (options?: ScrollToOptions): void; (x: number, y: number): void; } | { ...; } | ... 118 more ... | { ...; }",
          "optional": false
        },
        {
          "name": "scrollIntoView",
          "type": "((arg?: boolean | ScrollIntoViewOptions) => void) | ((arg?: boolean | ScrollIntoViewOptions) => void) | ((arg?: boolean | ScrollIntoViewOptions) => void) | ... 118 more ... | ((arg?: boolean | ScrollIntoViewOptions) => void)",
          "optional": false
        },
        {
          "name": "scrollTo",
          "type": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; } | { (options?: ScrollToOptions): void; (x: number, y: number): void; } | { ...; } | ... 118 more ... | { ...; }",
          "optional": false
        },
        {
          "name": "setAttribute",
          "type": "(qualifiedName: string, value: string) => void",
          "optional": false
        },
        {
          "name": "setAttributeNS",
          "type": "((namespace: string, qualifiedName: string, value: string) => void) | ((namespace: string, qualifiedName: string, value: string) => void) | ((namespace: string, qualifiedName: string, value: string) => void) | ... 118 more ... | ((namespace: string, qualifiedName: string, value: string) => void)",
          "optional": false
        },
        {
          "name": "setAttributeNode",
          "type": "((attr: Attr) => Attr) | ((attr: Attr) => Attr) | ((attr: Attr) => Attr) | ((attr: Attr) => Attr) | ((attr: Attr) => Attr) | ((attr: Attr) => Attr) | ... 115 more ... | ((attr: Attr) => Attr)",
          "optional": false
        },
        {
          "name": "setAttributeNodeNS",
          "type": "((attr: Attr) => Attr) | ((attr: Attr) => Attr) | ((attr: Attr) => Attr) | ((attr: Attr) => Attr) | ((attr: Attr) => Attr) | ((attr: Attr) => Attr) | ... 115 more ... | ((attr: Attr) => Attr)",
          "optional": false
        },
        {
          "name": "setHTMLUnsafe",
          "type": "(html: string) => void",
          "optional": false
        },
        {
          "name": "setPointerCapture",
          "type": "(pointerId: number) => void",
          "optional": false
        },
        {
          "name": "toggleAttribute",
          "type": "(qualifiedName: string, force?: boolean) => boolean",
          "optional": false
        },
        {
          "name": "webkitMatchesSelector",
          "type": "(selectors: string) => boolean",
          "optional": false
        },
        {
          "name": "baseURI",
          "type": "string",
          "optional": false
        },
        {
          "name": "childNodes",
          "type": "NodeListOf<ChildNode>",
          "optional": false
        },
        {
          "name": "firstChild",
          "type": "ChildNode",
          "optional": false
        },
        {
          "name": "isConnected",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "lastChild",
          "type": "ChildNode",
          "optional": false
        },
        {
          "name": "nextSibling",
          "type": "ChildNode",
          "optional": false
        },
        {
          "name": "nodeName",
          "type": "string",
          "optional": false
        },
        {
          "name": "nodeType",
          "type": "number",
          "optional": false
        },
        {
          "name": "nodeValue",
          "type": "string",
          "optional": false
        },
        {
          "name": "parentElement",
          "type": "HTMLElement",
          "optional": false
        },
        {
          "name": "parentNode",
          "type": "ParentNode",
          "optional": false
        },
        {
          "name": "previousSibling",
          "type": "ChildNode",
          "optional": false
        },
        {
          "name": "textContent",
          "type": "string",
          "optional": false
        },
        {
          "name": "appendChild",
          "type": "<T extends Node>(node: T) => T",
          "optional": false
        },
        {
          "name": "cloneNode",
          "type": "(subtree?: boolean) => Node",
          "optional": false
        },
        {
          "name": "compareDocumentPosition",
          "type": "(other: Node) => number",
          "optional": false
        },
        {
          "name": "contains",
          "type": "((other: Node) => boolean) | ((other: Node) => boolean) | ((other: Node) => boolean) | ((other: Node) => boolean) | ((other: Node) => boolean) | ((other: Node) => boolean) | ... 115 more ... | ((other: Node) => boolean)",
          "optional": false
        },
        {
          "name": "getRootNode",
          "type": "(options?: GetRootNodeOptions) => Node",
          "optional": false
        },
        {
          "name": "hasChildNodes",
          "type": "() => boolean",
          "optional": false
        },
        {
          "name": "insertBefore",
          "type": "(<T extends Node>(node: T, child: Node) => T) | (<T extends Node>(node: T, child: Node) => T) | (<T extends Node>(node: T, child: Node) => T) | (<T extends Node>(node: T, child: Node) => T) | ... 117 more ... | (<T extends Node>(node: T, child: Node) => T)",
          "optional": false
        },
        {
          "name": "isDefaultNamespace",
          "type": "((namespace: string) => boolean) | ((namespace: string) => boolean) | ((namespace: string) => boolean) | ((namespace: string) => boolean) | ((namespace: string) => boolean) | ((namespace: string) => boolean) | ... 115 more ... | ((namespace: string) => boolean)",
          "optional": false
        },
        {
          "name": "isEqualNode",
          "type": "((otherNode: Node) => boolean) | ((otherNode: Node) => boolean) | ((otherNode: Node) => boolean) | ((otherNode: Node) => boolean) | ((otherNode: Node) => boolean) | ... 116 more ... | ((otherNode: Node) => boolean)",
          "optional": false
        },
        {
          "name": "isSameNode",
          "type": "((otherNode: Node) => boolean) | ((otherNode: Node) => boolean) | ((otherNode: Node) => boolean) | ((otherNode: Node) => boolean) | ((otherNode: Node) => boolean) | ... 116 more ... | ((otherNode: Node) => boolean)",
          "optional": false
        },
        {
          "name": "lookupNamespaceURI",
          "type": "((prefix: string) => string) | ((prefix: string) => string) | ((prefix: string) => string) | ((prefix: string) => string) | ((prefix: string) => string) | ((prefix: string) => string) | ((prefix: string) => string) | ... 114 more ... | ((prefix: string) => string)",
          "optional": false
        },
        {
          "name": "lookupPrefix",
          "type": "((namespace: string) => string) | ((namespace: string) => string) | ((namespace: string) => string) | ((namespace: string) => string) | ((namespace: string) => string) | ((namespace: string) => string) | ... 115 more ... | ((namespace: string) => string)",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "removeChild",
          "type": "<T extends Node>(child: T) => T",
          "optional": false
        },
        {
          "name": "replaceChild",
          "type": "<T extends Node>(node: Node, child: T) => T",
          "optional": false
        },
        {
          "name": "ELEMENT_NODE",
          "type": "1",
          "optional": false
        },
        {
          "name": "ATTRIBUTE_NODE",
          "type": "2",
          "optional": false
        },
        {
          "name": "TEXT_NODE",
          "type": "3",
          "optional": false
        },
        {
          "name": "CDATA_SECTION_NODE",
          "type": "4",
          "optional": false
        },
        {
          "name": "ENTITY_REFERENCE_NODE",
          "type": "5",
          "optional": false
        },
        {
          "name": "ENTITY_NODE",
          "type": "6",
          "optional": false
        },
        {
          "name": "PROCESSING_INSTRUCTION_NODE",
          "type": "7",
          "optional": false
        },
        {
          "name": "COMMENT_NODE",
          "type": "8",
          "optional": false
        },
        {
          "name": "DOCUMENT_NODE",
          "type": "9",
          "optional": false
        },
        {
          "name": "DOCUMENT_TYPE_NODE",
          "type": "10",
          "optional": false
        },
        {
          "name": "DOCUMENT_FRAGMENT_NODE",
          "type": "11",
          "optional": false
        },
        {
          "name": "NOTATION_NODE",
          "type": "12",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_DISCONNECTED",
          "type": "1",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_PRECEDING",
          "type": "2",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_FOLLOWING",
          "type": "4",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_CONTAINS",
          "type": "8",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_CONTAINED_BY",
          "type": "16",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
          "type": "32",
          "optional": false
        },
        {
          "name": "dispatchEvent",
          "type": "(event: Event) => boolean",
          "optional": false
        },
        {
          "name": "ariaAtomic",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaAutoComplete",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaBrailleLabel",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaBrailleRoleDescription",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaBusy",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaChecked",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaColCount",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaColIndex",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaColIndexText",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaColSpan",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaCurrent",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaDescription",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaDisabled",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaExpanded",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaHasPopup",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaHidden",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaInvalid",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaKeyShortcuts",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaLabel",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaLevel",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaLive",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaModal",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaMultiLine",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaMultiSelectable",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaOrientation",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaPlaceholder",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaPosInSet",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaPressed",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaReadOnly",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRelevant",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRequired",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRoleDescription",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRowCount",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRowIndex",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRowIndexText",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRowSpan",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaSelected",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaSetSize",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaSort",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaValueMax",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaValueMin",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaValueNow",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaValueText",
          "type": "string",
          "optional": false
        },
        {
          "name": "role",
          "type": "string",
          "optional": false
        },
        {
          "name": "animate",
          "type": "(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation",
          "optional": false
        },
        {
          "name": "getAnimations",
          "type": "(options?: GetAnimationsOptions) => Animation[]",
          "optional": false
        },
        {
          "name": "after",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "before",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "remove",
          "type": "(() => void) | { (): void; (index: number): void; }",
          "optional": false
        },
        {
          "name": "replaceWith",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "nextElementSibling",
          "type": "Element",
          "optional": false
        },
        {
          "name": "previousElementSibling",
          "type": "Element",
          "optional": false
        },
        {
          "name": "childElementCount",
          "type": "number",
          "optional": false
        },
        {
          "name": "children",
          "type": "HTMLCollection",
          "optional": false
        },
        {
          "name": "firstElementChild",
          "type": "Element",
          "optional": false
        },
        {
          "name": "lastElementChild",
          "type": "Element",
          "optional": false
        },
        {
          "name": "append",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "prepend",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "querySelector",
          "type": "{ <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K]; <K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K]; <K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K]; <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLE...",
          "optional": false
        },
        {
          "name": "querySelectorAll",
          "type": "{ <K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<...>; <K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<...>; <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<....",
          "optional": false
        },
        {
          "name": "replaceChildren",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "assignedSlot",
          "type": "HTMLSlotElement",
          "optional": false
        },
        {
          "name": "attributeStyleMap",
          "type": "StylePropertyMap",
          "optional": false
        },
        {
          "name": "style",
          "type": "CSSStyleDeclaration",
          "optional": false
        },
        {
          "name": "onabort",
          "type": "(this: GlobalEventHandlers, ev: UIEvent) => any",
          "optional": false
        },
        {
          "name": "onanimationcancel",
          "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
          "optional": false
        },
        {
          "name": "onanimationend",
          "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
          "optional": false
        },
        {
          "name": "onanimationiteration",
          "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
          "optional": false
        },
        {
          "name": "onanimationstart",
          "type": "(this: GlobalEventHandlers, ev: AnimationEvent) => any",
          "optional": false
        },
        {
          "name": "onauxclick",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "onbeforeinput",
          "type": "(this: GlobalEventHandlers, ev: InputEvent) => any",
          "optional": false
        },
        {
          "name": "onbeforetoggle",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onblur",
          "type": "(this: GlobalEventHandlers, ev: FocusEvent) => any",
          "optional": false
        },
        {
          "name": "oncancel",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "oncanplay",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "oncanplaythrough",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onchange",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onclick",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "onclose",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "oncontextlost",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "oncontextmenu",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "oncontextrestored",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "oncopy",
          "type": "(this: GlobalEventHandlers, ev: ClipboardEvent) => any",
          "optional": false
        },
        {
          "name": "oncuechange",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "oncut",
          "type": "(this: GlobalEventHandlers, ev: ClipboardEvent) => any",
          "optional": false
        },
        {
          "name": "ondblclick",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "ondrag",
          "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
          "optional": false
        },
        {
          "name": "ondragend",
          "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
          "optional": false
        },
        {
          "name": "ondragenter",
          "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
          "optional": false
        },
        {
          "name": "ondragleave",
          "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
          "optional": false
        },
        {
          "name": "ondragover",
          "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
          "optional": false
        },
        {
          "name": "ondragstart",
          "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
          "optional": false
        },
        {
          "name": "ondrop",
          "type": "(this: GlobalEventHandlers, ev: DragEvent) => any",
          "optional": false
        },
        {
          "name": "ondurationchange",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onemptied",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onended",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onerror",
          "type": "OnErrorEventHandlerNonNull",
          "optional": false
        },
        {
          "name": "onfocus",
          "type": "(this: GlobalEventHandlers, ev: FocusEvent) => any",
          "optional": false
        },
        {
          "name": "onformdata",
          "type": "(this: GlobalEventHandlers, ev: FormDataEvent) => any",
          "optional": false
        },
        {
          "name": "ongotpointercapture",
          "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
          "optional": false
        },
        {
          "name": "oninput",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "oninvalid",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onkeydown",
          "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
          "optional": false
        },
        {
          "name": "onkeypress",
          "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
          "optional": false
        },
        {
          "name": "onkeyup",
          "type": "(this: GlobalEventHandlers, ev: KeyboardEvent) => any",
          "optional": false
        },
        {
          "name": "onload",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onloadeddata",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onloadedmetadata",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onloadstart",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onlostpointercapture",
          "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
          "optional": false
        },
        {
          "name": "onmousedown",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "onmouseenter",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "onmouseleave",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "onmousemove",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "onmouseout",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "onmouseover",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "onmouseup",
          "type": "(this: GlobalEventHandlers, ev: MouseEvent) => any",
          "optional": false
        },
        {
          "name": "onpaste",
          "type": "(this: GlobalEventHandlers, ev: ClipboardEvent) => any",
          "optional": false
        },
        {
          "name": "onpause",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onplay",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onplaying",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onpointercancel",
          "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
          "optional": false
        },
        {
          "name": "onpointerdown",
          "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
          "optional": false
        },
        {
          "name": "onpointerenter",
          "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
          "optional": false
        },
        {
          "name": "onpointerleave",
          "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
          "optional": false
        },
        {
          "name": "onpointermove",
          "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
          "optional": false
        },
        {
          "name": "onpointerout",
          "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
          "optional": false
        },
        {
          "name": "onpointerover",
          "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
          "optional": false
        },
        {
          "name": "onpointerup",
          "type": "(this: GlobalEventHandlers, ev: PointerEvent) => any",
          "optional": false
        },
        {
          "name": "onprogress",
          "type": "(this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any",
          "optional": false
        },
        {
          "name": "onratechange",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onreset",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onresize",
          "type": "(this: GlobalEventHandlers, ev: UIEvent) => any",
          "optional": false
        },
        {
          "name": "onscroll",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onscrollend",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onsecuritypolicyviolation",
          "type": "(this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any",
          "optional": false
        },
        {
          "name": "onseeked",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onseeking",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onselect",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onselectionchange",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onselectstart",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onslotchange",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onstalled",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onsubmit",
          "type": "(this: GlobalEventHandlers, ev: SubmitEvent) => any",
          "optional": false
        },
        {
          "name": "onsuspend",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "ontimeupdate",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "ontoggle",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "ontouchcancel",
          "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
          "optional": true
        },
        {
          "name": "ontouchend",
          "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
          "optional": true
        },
        {
          "name": "ontouchmove",
          "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
          "optional": true
        },
        {
          "name": "ontouchstart",
          "type": "(this: GlobalEventHandlers, ev: TouchEvent) => any",
          "optional": true
        },
        {
          "name": "ontransitioncancel",
          "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
          "optional": false
        },
        {
          "name": "ontransitionend",
          "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
          "optional": false
        },
        {
          "name": "ontransitionrun",
          "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
          "optional": false
        },
        {
          "name": "ontransitionstart",
          "type": "(this: GlobalEventHandlers, ev: TransitionEvent) => any",
          "optional": false
        },
        {
          "name": "onvolumechange",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onwaiting",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onwebkitanimationend",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onwebkitanimationiteration",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onwebkitanimationstart",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onwebkittransitionend",
          "type": "(this: GlobalEventHandlers, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onwheel",
          "type": "(this: GlobalEventHandlers, ev: WheelEvent) => any",
          "optional": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "dataset",
          "type": "DOMStringMap",
          "optional": false
        },
        {
          "name": "nonce",
          "type": "string",
          "optional": true
        },
        {
          "name": "tabIndex",
          "type": "number",
          "optional": false
        },
        {
          "name": "blur",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "focus",
          "type": "(options?: FocusOptions) => void",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ElementScreenshotOptions",
      "type": "ElementScreenshotOptions",
      "properties": [
        {
          "name": "scrollIntoView",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "optimizeForSpeed",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "type",
          "type": "\"png\" | \"jpeg\" | \"webp\"",
          "optional": true
        },
        {
          "name": "quality",
          "type": "number",
          "optional": true
        },
        {
          "name": "fromSurface",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "fullPage",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "omitBackground",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "path",
          "type": "string",
          "optional": true
        },
        {
          "name": "clip",
          "type": "ScreenshotClip",
          "optional": true
        },
        {
          "name": "encoding",
          "type": "\"base64\" | \"binary\"",
          "optional": true
        },
        {
          "name": "captureBeyondViewport",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [
        "ScreenshotOptions"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ErrorCode",
      "type": "ErrorCode",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "EvaluateFunc",
      "type": "EvaluateFunc<T>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "EvaluateFuncWith",
      "type": "EvaluateFuncWith<V, T>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "EventsWithWildcard",
      "type": "EventsWithWildcard<Events>",
      "properties": [
        {
          "name": "*",
          "type": "Events[keyof Events]",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "EventType",
      "type": "EventType",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => symbol)",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ExperimentsConfiguration",
      "type": "ExperimentsConfiguration",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "Defines experiment options for Puppeteer.\r\n\r\nSee individual properties for more information.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "FileFormat",
      "type": "FileFormat",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "FirefoxSettings",
      "type": "FirefoxSettings",
      "properties": [
        {
          "name": "skipDownload",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "downloadBaseUrl",
          "type": "string",
          "optional": true
        },
        {
          "name": "version",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "FlattenHandle",
      "type": "FlattenHandle<T>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "FrameAddScriptTagOptions",
      "type": "FrameAddScriptTagOptions",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "optional": true
        },
        {
          "name": "path",
          "type": "string",
          "optional": true
        },
        {
          "name": "content",
          "type": "string",
          "optional": true
        },
        {
          "name": "type",
          "type": "string",
          "optional": true
        },
        {
          "name": "id",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "FrameAddStyleTagOptions",
      "type": "FrameAddStyleTagOptions",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "optional": true
        },
        {
          "name": "path",
          "type": "string",
          "optional": true
        },
        {
          "name": "content",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "FrameEvents",
      "type": "FrameEvents",
      "properties": [],
      "extends": [
        "Record<EventType, unknown>"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "FrameWaitForFunctionOptions",
      "type": "FrameWaitForFunctionOptions",
      "properties": [
        {
          "name": "polling",
          "type": "number | \"raf\" | \"mutation\"",
          "optional": true
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "GeolocationOptions",
      "type": "GeolocationOptions",
      "properties": [
        {
          "name": "longitude",
          "type": "number",
          "optional": false
        },
        {
          "name": "latitude",
          "type": "number",
          "optional": false
        },
        {
          "name": "accuracy",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "GoToOptions",
      "type": "GoToOptions",
      "properties": [
        {
          "name": "referer",
          "type": "string",
          "optional": true
        },
        {
          "name": "referrerPolicy",
          "type": "string",
          "optional": true
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "waitUntil",
          "type": "PuppeteerLifeCycleEvent | PuppeteerLifeCycleEvent[]",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        }
      ],
      "extends": [
        "WaitForOptions"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "HandleFor",
      "type": "HandleFor<T>",
      "properties": [
        {
          "name": "move",
          "type": "(() => JSHandle<T>) | (() => ElementHandle<T>)",
          "optional": false
        },
        {
          "name": "_",
          "type": "T | T",
          "optional": true
        },
        {
          "name": "evaluate",
          "type": "(<Params extends unknown[], Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>>(pageFunction: string | Func, ...args: Params) => Promise<...>) | (<Params extends unknown[], Func extends EvaluateFuncWith<...> = EvaluateFuncWith<...>>(pageFunction: string | Func, ...args: Params) => Promise<...>)",
          "optional": false
        },
        {
          "name": "evaluateHandle",
          "type": "(<Params extends unknown[], Func extends EvaluateFuncWith<T, Params> = EvaluateFuncWith<T, Params>>(pageFunction: string | Func, ...args: Params) => Promise<...>) | (<Params extends unknown[], Func extends EvaluateFuncWith<...> = EvaluateFuncWith<...>>(pageFunction: string | Func, ...args: Params) => Promise<...>)",
          "optional": false
        },
        {
          "name": "getProperty",
          "type": "{ <K extends keyof T>(propertyName: HandleOr<K>): Promise<HandleFor<T[K]>>; (propertyName: string): Promise<JSHandle<unknown>>; } | { ...; }",
          "optional": false
        },
        {
          "name": "getProperties",
          "type": "() => Promise<Map<string, JSHandle<unknown>>>",
          "optional": false
        },
        {
          "name": "jsonValue",
          "type": "(() => Promise<T>) | (() => Promise<T>)",
          "optional": false
        },
        {
          "name": "asElement",
          "type": "() => ElementHandle<Node>",
          "optional": false
        },
        {
          "name": "dispose",
          "type": "() => Promise<void>",
          "optional": false
        },
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "remoteObject",
          "type": "() => RemoteObject",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "HandleOr",
      "type": "HandleOr<T>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Handler",
      "type": "Handler<T>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "InnerParams",
      "type": "InnerParams<T>",
      "properties": [
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "{ (): string; (locales: string | string[], options?: NumberFormatOptions & DateTimeFormatOptions): string; }",
          "optional": false
        },
        {
          "name": "pop",
          "type": "() => unknown",
          "optional": false
        },
        {
          "name": "push",
          "type": "(...items: unknown[]) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "{ (...items: ConcatArray<unknown>[]): unknown[]; (...items: unknown[]): unknown[]; }",
          "optional": false
        },
        {
          "name": "join",
          "type": "(separator?: string) => string",
          "optional": false
        },
        {
          "name": "reverse",
          "type": "() => unknown[]",
          "optional": false
        },
        {
          "name": "shift",
          "type": "() => unknown",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => unknown[]",
          "optional": false
        },
        {
          "name": "sort",
          "type": "(compareFn?: (a: unknown, b: unknown) => number) => unknown[]",
          "optional": false
        },
        {
          "name": "splice",
          "type": "{ (start: number, deleteCount?: number): unknown[]; (start: number, deleteCount: number, ...items: unknown[]): unknown[]; }",
          "optional": false
        },
        {
          "name": "unshift",
          "type": "(...items: unknown[]) => number",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchElement: unknown, fromIndex?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchElement: unknown, fromIndex?: number) => number",
          "optional": false
        },
        {
          "name": "every",
          "type": "{ <S extends unknown>(predicate: (value: unknown, index: number, array: unknown[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: unknown, index: number, array: unknown[]) => unknown, thisArg?: any): boolean; }",
          "optional": false
        },
        {
          "name": "some",
          "type": "(predicate: (value: unknown, index: number, array: unknown[]) => unknown, thisArg?: any) => boolean",
          "optional": false
        },
        {
          "name": "forEach",
          "type": "(callbackfn: (value: unknown, index: number, array: unknown[]) => void, thisArg?: any) => void",
          "optional": false
        },
        {
          "name": "map",
          "type": "<U>(callbackfn: (value: unknown, index: number, array: unknown[]) => U, thisArg?: any) => U[]",
          "optional": false
        },
        {
          "name": "filter",
          "type": "{ <S extends unknown>(predicate: (value: unknown, index: number, array: unknown[]) => value is S, thisArg?: any): S[]; (predicate: (value: unknown, index: number, array: unknown[]) => unknown, thisArg?: any): unknown[]; }",
          "optional": false
        },
        {
          "name": "reduce",
          "type": "{ (callbackfn: (previousValue: unknown, currentValue: unknown, currentIndex: number, array: unknown[]) => unknown): unknown; (callbackfn: (previousValue: unknown, currentValue: unknown, currentIndex: number, array: unknown[]) => unknown, initialValue: unknown): unknown; <U>(callbackfn: (previousValue: U, currentValu...",
          "optional": false
        },
        {
          "name": "reduceRight",
          "type": "{ (callbackfn: (previousValue: unknown, currentValue: unknown, currentIndex: number, array: unknown[]) => unknown): unknown; (callbackfn: (previousValue: unknown, currentValue: unknown, currentIndex: number, array: unknown[]) => unknown, initialValue: unknown): unknown; <U>(callbackfn: (previousValue: U, currentValu...",
          "optional": false
        },
        {
          "name": "find",
          "type": "{ <S extends unknown>(predicate: (value: unknown, index: number, obj: unknown[]) => value is S, thisArg?: any): S; (predicate: (value: unknown, index: number, obj: unknown[]) => unknown, thisArg?: any): unknown; }",
          "optional": false
        },
        {
          "name": "findIndex",
          "type": "(predicate: (value: unknown, index: number, obj: unknown[]) => unknown, thisArg?: any) => number",
          "optional": false
        },
        {
          "name": "fill",
          "type": "(value: unknown, start?: number, end?: number) => unknown[]",
          "optional": false
        },
        {
          "name": "copyWithin",
          "type": "(target: number, start: number, end?: number) => unknown[]",
          "optional": false
        },
        {
          "name": "entries",
          "type": "() => ArrayIterator<[number, unknown]>",
          "optional": false
        },
        {
          "name": "keys",
          "type": "() => ArrayIterator<number>",
          "optional": false
        },
        {
          "name": "values",
          "type": "() => ArrayIterator<unknown>",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchElement: unknown, fromIndex?: number) => boolean",
          "optional": false
        },
        {
          "name": "flatMap",
          "type": "<U, This = undefined>(callback: (this: This, value: unknown, index: number, array: unknown[]) => U | readonly U[], thisArg?: This) => U[]",
          "optional": false
        },
        {
          "name": "flat",
          "type": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => ArrayIterator<unknown>",
          "optional": false
        },
        {
          "name": "__@unscopables@59128",
          "type": "{ [x: number]: boolean; length?: boolean; toString?: boolean; toLocaleString?: boolean; pop?: boolean; push?: boolean; concat?: boolean; join?: boolean; reverse?: boolean; shift?: boolean; slice?: boolean; sort?: boolean; ... 23 more ...; at?: boolean; }",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => unknown",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "InterceptResolutionState",
      "type": "InterceptResolutionState",
      "properties": [
        {
          "name": "action",
          "type": "InterceptResolutionAction",
          "optional": false
        },
        {
          "name": "priority",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "InternalNetworkConditions",
      "type": "InternalNetworkConditions",
      "properties": [
        {
          "name": "offline",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "download",
          "type": "number",
          "optional": false
        },
        {
          "name": "upload",
          "type": "number",
          "optional": false
        },
        {
          "name": "latency",
          "type": "number",
          "optional": false
        }
      ],
      "extends": [
        "NetworkConditions"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "JSCoverageEntry",
      "type": "JSCoverageEntry",
      "properties": [
        {
          "name": "rawScriptCoverage",
          "type": "ScriptCoverage",
          "optional": true
        },
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "ranges",
          "type": "{ start: number; end: number; }[]",
          "optional": false
        }
      ],
      "extends": [
        "CoverageEntry"
      ],
      "jsdoc": {
        "description": "The CoverageEntry class for JavaScript",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "JSCoverageOptions",
      "type": "JSCoverageOptions",
      "properties": [
        {
          "name": "resetOnNavigation",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "reportAnonymousScripts",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "includeRawScriptCoverage",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "useBlockCoverage",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Set of configurable options for JS coverage.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "KeyboardTypeOptions",
      "type": "KeyboardTypeOptions",
      "properties": [
        {
          "name": "delay",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "KeyDownOptions",
      "type": "KeyDownOptions",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "optional": true
        },
        {
          "name": "commands",
          "type": "string[]",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "KeyInput",
      "type": "KeyInput",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "All the valid keys that can be passed to functions that take user input, such\r\nas  | keyboard.press ",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "KeyPressOptions",
      "type": "KeyPressOptions",
      "properties": [
        {
          "name": "text",
          "type": "string",
          "optional": true
        },
        {
          "name": "commands",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "delay",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "LaunchOptions",
      "type": "LaunchOptions",
      "properties": [
        {
          "name": "channel",
          "type": "ChromeReleaseChannel",
          "optional": true
        },
        {
          "name": "executablePath",
          "type": "string",
          "optional": true
        },
        {
          "name": "ignoreDefaultArgs",
          "type": "boolean | string[]",
          "optional": true
        },
        {
          "name": "handleSIGINT",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "handleSIGTERM",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "handleSIGHUP",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "dumpio",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "env",
          "type": "Record<string, string>",
          "optional": true
        },
        {
          "name": "pipe",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "browser",
          "type": "SupportedBrowser",
          "optional": true
        },
        {
          "name": "extraPrefsFirefox",
          "type": "Record<string, unknown>",
          "optional": true
        },
        {
          "name": "waitForInitialPage",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "headless",
          "type": "boolean | \"shell\"",
          "optional": true
        },
        {
          "name": "userDataDir",
          "type": "string",
          "optional": true
        },
        {
          "name": "devtools",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "debuggingPort",
          "type": "number",
          "optional": true
        },
        {
          "name": "args",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "acceptInsecureCerts",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "defaultViewport",
          "type": "Viewport",
          "optional": true
        },
        {
          "name": "downloadBehavior",
          "type": "DownloadBehavior",
          "optional": true
        },
        {
          "name": "slowMo",
          "type": "number",
          "optional": true
        },
        {
          "name": "targetFilter",
          "type": "TargetFilterCallback",
          "optional": true
        },
        {
          "name": "protocol",
          "type": "ProtocolType",
          "optional": true
        },
        {
          "name": "protocolTimeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "browserWSEndpoint",
          "type": "string",
          "optional": true
        },
        {
          "name": "browserURL",
          "type": "string",
          "optional": true
        },
        {
          "name": "transport",
          "type": "ConnectionTransport",
          "optional": true
        },
        {
          "name": "headers",
          "type": "Record<string, string>",
          "optional": true
        },
        {
          "name": "capabilities",
          "type": "SupportedWebDriverCapabilities",
          "optional": true
        }
      ],
      "extends": [
        "ConnectOptions"
      ],
      "jsdoc": {
        "description": "Generic launch options that can be passed when launching any browser.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "LocatorClickOptions",
      "type": "LocatorClickOptions",
      "properties": [
        {
          "name": "offset",
          "type": "Offset",
          "optional": true
        },
        {
          "name": "delay",
          "type": "number",
          "optional": true
        },
        {
          "name": "count",
          "type": "number",
          "optional": true
        },
        {
          "name": "button",
          "type": "MouseButton",
          "optional": true
        },
        {
          "name": "clickCount",
          "type": "number",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "LocatorEvents",
      "type": "LocatorEvents",
      "properties": [
        {
          "name": "action",
          "type": "undefined",
          "optional": false
        }
      ],
      "extends": [
        "Record<EventType, unknown>"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "LocatorScrollOptions",
      "type": "LocatorScrollOptions",
      "properties": [
        {
          "name": "scrollTop",
          "type": "number",
          "optional": true
        },
        {
          "name": "scrollLeft",
          "type": "number",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        }
      ],
      "extends": [
        "ActionOptions"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "LowerCasePaperFormat",
      "type": "LowerCasePaperFormat",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Mapper",
      "type": "Mapper<From, To>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "MediaFeature",
      "type": "MediaFeature",
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "value",
          "type": "string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "A media feature to emulate.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Metrics",
      "type": "Metrics",
      "properties": [
        {
          "name": "Timestamp",
          "type": "number",
          "optional": true
        },
        {
          "name": "Documents",
          "type": "number",
          "optional": true
        },
        {
          "name": "Frames",
          "type": "number",
          "optional": true
        },
        {
          "name": "JSEventListeners",
          "type": "number",
          "optional": true
        },
        {
          "name": "Nodes",
          "type": "number",
          "optional": true
        },
        {
          "name": "LayoutCount",
          "type": "number",
          "optional": true
        },
        {
          "name": "RecalcStyleCount",
          "type": "number",
          "optional": true
        },
        {
          "name": "LayoutDuration",
          "type": "number",
          "optional": true
        },
        {
          "name": "RecalcStyleDuration",
          "type": "number",
          "optional": true
        },
        {
          "name": "ScriptDuration",
          "type": "number",
          "optional": true
        },
        {
          "name": "TaskDuration",
          "type": "number",
          "optional": true
        },
        {
          "name": "JSHeapUsedSize",
          "type": "number",
          "optional": true
        },
        {
          "name": "JSHeapTotalSize",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "MouseButton",
      "type": "MouseButton",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "MouseClickOptions",
      "type": "MouseClickOptions",
      "properties": [
        {
          "name": "delay",
          "type": "number",
          "optional": true
        },
        {
          "name": "count",
          "type": "number",
          "optional": true
        },
        {
          "name": "button",
          "type": "MouseButton",
          "optional": true
        },
        {
          "name": "clickCount",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [
        "MouseOptions"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "MouseMoveOptions",
      "type": "MouseMoveOptions",
      "properties": [
        {
          "name": "steps",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "MouseOptions",
      "type": "MouseOptions",
      "properties": [
        {
          "name": "button",
          "type": "MouseButton",
          "optional": true
        },
        {
          "name": "clickCount",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "MouseWheelOptions",
      "type": "MouseWheelOptions",
      "properties": [
        {
          "name": "deltaX",
          "type": "number",
          "optional": true
        },
        {
          "name": "deltaY",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Moveable",
      "type": "Moveable",
      "properties": [
        {
          "name": "move",
          "type": "() => Moveable",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "NetworkConditions",
      "type": "NetworkConditions",
      "properties": [
        {
          "name": "download",
          "type": "number",
          "optional": false
        },
        {
          "name": "upload",
          "type": "number",
          "optional": false
        },
        {
          "name": "latency",
          "type": "number",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "NewDocumentScriptEvaluation",
      "type": "NewDocumentScriptEvaluation",
      "properties": [
        {
          "name": "identifier",
          "type": "string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "NodeFor",
      "type": "NodeFor<ComplexSelector>",
      "properties": [
        {
          "name": "attributes",
          "type": "NamedNodeMap",
          "optional": false
        },
        {
          "name": "classList",
          "type": "DOMTokenList",
          "optional": false
        },
        {
          "name": "className",
          "type": "string",
          "optional": false
        },
        {
          "name": "clientHeight",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientLeft",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientTop",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientWidth",
          "type": "number",
          "optional": false
        },
        {
          "name": "currentCSSZoom",
          "type": "number",
          "optional": false
        },
        {
          "name": "id",
          "type": "string",
          "optional": false
        },
        {
          "name": "innerHTML",
          "type": "string",
          "optional": false
        },
        {
          "name": "localName",
          "type": "string",
          "optional": false
        },
        {
          "name": "namespaceURI",
          "type": "string",
          "optional": false
        },
        {
          "name": "onfullscreenchange",
          "type": "(this: Element, ev: Event) => any",
          "optional": false
        },
        {
          "name": "onfullscreenerror",
          "type": "(this: Element, ev: Event) => any",
          "optional": false
        },
        {
          "name": "outerHTML",
          "type": "string",
          "optional": false
        },
        {
          "name": "ownerDocument",
          "type": "Document",
          "optional": false
        },
        {
          "name": "part",
          "type": "DOMTokenList",
          "optional": false
        },
        {
          "name": "prefix",
          "type": "string",
          "optional": false
        },
        {
          "name": "scrollHeight",
          "type": "number",
          "optional": false
        },
        {
          "name": "scrollLeft",
          "type": "number",
          "optional": false
        },
        {
          "name": "scrollTop",
          "type": "number",
          "optional": false
        },
        {
          "name": "scrollWidth",
          "type": "number",
          "optional": false
        },
        {
          "name": "shadowRoot",
          "type": "ShadowRoot",
          "optional": false
        },
        {
          "name": "slot",
          "type": "string",
          "optional": false
        },
        {
          "name": "tagName",
          "type": "string",
          "optional": false
        },
        {
          "name": "attachShadow",
          "type": "(init: ShadowRootInit) => ShadowRoot",
          "optional": false
        },
        {
          "name": "checkVisibility",
          "type": "(options?: CheckVisibilityOptions) => boolean",
          "optional": false
        },
        {
          "name": "closest",
          "type": "{ <K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K]; <K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K]; <K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K]; <E extends Element = Element>(selectors: string): E; }",
          "optional": false
        },
        {
          "name": "computedStyleMap",
          "type": "() => StylePropertyMapReadOnly",
          "optional": false
        },
        {
          "name": "getAttribute",
          "type": "(qualifiedName: string) => string",
          "optional": false
        },
        {
          "name": "getAttributeNS",
          "type": "(namespace: string, localName: string) => string",
          "optional": false
        },
        {
          "name": "getAttributeNames",
          "type": "() => string[]",
          "optional": false
        },
        {
          "name": "getAttributeNode",
          "type": "(qualifiedName: string) => Attr",
          "optional": false
        },
        {
          "name": "getAttributeNodeNS",
          "type": "(namespace: string, localName: string) => Attr",
          "optional": false
        },
        {
          "name": "getBoundingClientRect",
          "type": "() => DOMRect",
          "optional": false
        },
        {
          "name": "getClientRects",
          "type": "() => DOMRectList",
          "optional": false
        },
        {
          "name": "getElementsByClassName",
          "type": "(classNames: string) => HTMLCollectionOf<Element>",
          "optional": false
        },
        {
          "name": "getElementsByTagName",
          "type": "{ <K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<...>; <K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<...>; <K extends keyof HTMLElementDeprecatedTagNameMa...",
          "optional": false
        },
        {
          "name": "getElementsByTagNameNS",
          "type": "{ (namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>; (namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<...>; (namespaceURI: \"http://www.w3.org/1998/Math/MathML\", localName: string): HTMLCollectionOf<...>; (namespace: string, localName: st...",
          "optional": false
        },
        {
          "name": "getHTML",
          "type": "(options?: GetHTMLOptions) => string",
          "optional": false
        },
        {
          "name": "hasAttribute",
          "type": "(qualifiedName: string) => boolean",
          "optional": false
        },
        {
          "name": "hasAttributeNS",
          "type": "(namespace: string, localName: string) => boolean",
          "optional": false
        },
        {
          "name": "hasAttributes",
          "type": "() => boolean",
          "optional": false
        },
        {
          "name": "hasPointerCapture",
          "type": "(pointerId: number) => boolean",
          "optional": false
        },
        {
          "name": "insertAdjacentElement",
          "type": "(where: InsertPosition, element: Element) => Element",
          "optional": false
        },
        {
          "name": "insertAdjacentHTML",
          "type": "(position: InsertPosition, string: string) => void",
          "optional": false
        },
        {
          "name": "insertAdjacentText",
          "type": "(where: InsertPosition, data: string) => void",
          "optional": false
        },
        {
          "name": "matches",
          "type": "(selectors: string) => boolean",
          "optional": false
        },
        {
          "name": "releasePointerCapture",
          "type": "(pointerId: number) => void",
          "optional": false
        },
        {
          "name": "removeAttribute",
          "type": "(qualifiedName: string) => void",
          "optional": false
        },
        {
          "name": "removeAttributeNS",
          "type": "(namespace: string, localName: string) => void",
          "optional": false
        },
        {
          "name": "removeAttributeNode",
          "type": "(attr: Attr) => Attr",
          "optional": false
        },
        {
          "name": "requestFullscreen",
          "type": "(options?: FullscreenOptions) => Promise<void>",
          "optional": false
        },
        {
          "name": "requestPointerLock",
          "type": "(options?: PointerLockOptions) => Promise<void>",
          "optional": false
        },
        {
          "name": "scroll",
          "type": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }",
          "optional": false
        },
        {
          "name": "scrollBy",
          "type": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }",
          "optional": false
        },
        {
          "name": "scrollIntoView",
          "type": "(arg?: boolean | ScrollIntoViewOptions) => void",
          "optional": false
        },
        {
          "name": "scrollTo",
          "type": "{ (options?: ScrollToOptions): void; (x: number, y: number): void; }",
          "optional": false
        },
        {
          "name": "setAttribute",
          "type": "(qualifiedName: string, value: string) => void",
          "optional": false
        },
        {
          "name": "setAttributeNS",
          "type": "(namespace: string, qualifiedName: string, value: string) => void",
          "optional": false
        },
        {
          "name": "setAttributeNode",
          "type": "(attr: Attr) => Attr",
          "optional": false
        },
        {
          "name": "setAttributeNodeNS",
          "type": "(attr: Attr) => Attr",
          "optional": false
        },
        {
          "name": "setHTMLUnsafe",
          "type": "(html: string) => void",
          "optional": false
        },
        {
          "name": "setPointerCapture",
          "type": "(pointerId: number) => void",
          "optional": false
        },
        {
          "name": "toggleAttribute",
          "type": "(qualifiedName: string, force?: boolean) => boolean",
          "optional": false
        },
        {
          "name": "webkitMatchesSelector",
          "type": "(selectors: string) => boolean",
          "optional": false
        },
        {
          "name": "addEventListener",
          "type": "{ <K extends keyof ElementEventMap>(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void; }",
          "optional": false
        },
        {
          "name": "removeEventListener",
          "type": "{ <K extends keyof ElementEventMap>(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void; (type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void; }",
          "optional": false
        },
        {
          "name": "baseURI",
          "type": "string",
          "optional": false
        },
        {
          "name": "childNodes",
          "type": "NodeListOf<ChildNode>",
          "optional": false
        },
        {
          "name": "firstChild",
          "type": "ChildNode",
          "optional": false
        },
        {
          "name": "isConnected",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "lastChild",
          "type": "ChildNode",
          "optional": false
        },
        {
          "name": "nextSibling",
          "type": "ChildNode",
          "optional": false
        },
        {
          "name": "nodeName",
          "type": "string",
          "optional": false
        },
        {
          "name": "nodeType",
          "type": "number",
          "optional": false
        },
        {
          "name": "nodeValue",
          "type": "string",
          "optional": false
        },
        {
          "name": "parentElement",
          "type": "HTMLElement",
          "optional": false
        },
        {
          "name": "parentNode",
          "type": "ParentNode",
          "optional": false
        },
        {
          "name": "previousSibling",
          "type": "ChildNode",
          "optional": false
        },
        {
          "name": "textContent",
          "type": "string",
          "optional": false
        },
        {
          "name": "appendChild",
          "type": "<T extends Node>(node: T) => T",
          "optional": false
        },
        {
          "name": "cloneNode",
          "type": "(subtree?: boolean) => Node",
          "optional": false
        },
        {
          "name": "compareDocumentPosition",
          "type": "(other: Node) => number",
          "optional": false
        },
        {
          "name": "contains",
          "type": "(other: Node) => boolean",
          "optional": false
        },
        {
          "name": "getRootNode",
          "type": "(options?: GetRootNodeOptions) => Node",
          "optional": false
        },
        {
          "name": "hasChildNodes",
          "type": "() => boolean",
          "optional": false
        },
        {
          "name": "insertBefore",
          "type": "<T extends Node>(node: T, child: Node) => T",
          "optional": false
        },
        {
          "name": "isDefaultNamespace",
          "type": "(namespace: string) => boolean",
          "optional": false
        },
        {
          "name": "isEqualNode",
          "type": "(otherNode: Node) => boolean",
          "optional": false
        },
        {
          "name": "isSameNode",
          "type": "(otherNode: Node) => boolean",
          "optional": false
        },
        {
          "name": "lookupNamespaceURI",
          "type": "(prefix: string) => string",
          "optional": false
        },
        {
          "name": "lookupPrefix",
          "type": "(namespace: string) => string",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "removeChild",
          "type": "<T extends Node>(child: T) => T",
          "optional": false
        },
        {
          "name": "replaceChild",
          "type": "<T extends Node>(node: Node, child: T) => T",
          "optional": false
        },
        {
          "name": "ELEMENT_NODE",
          "type": "1",
          "optional": false
        },
        {
          "name": "ATTRIBUTE_NODE",
          "type": "2",
          "optional": false
        },
        {
          "name": "TEXT_NODE",
          "type": "3",
          "optional": false
        },
        {
          "name": "CDATA_SECTION_NODE",
          "type": "4",
          "optional": false
        },
        {
          "name": "ENTITY_REFERENCE_NODE",
          "type": "5",
          "optional": false
        },
        {
          "name": "ENTITY_NODE",
          "type": "6",
          "optional": false
        },
        {
          "name": "PROCESSING_INSTRUCTION_NODE",
          "type": "7",
          "optional": false
        },
        {
          "name": "COMMENT_NODE",
          "type": "8",
          "optional": false
        },
        {
          "name": "DOCUMENT_NODE",
          "type": "9",
          "optional": false
        },
        {
          "name": "DOCUMENT_TYPE_NODE",
          "type": "10",
          "optional": false
        },
        {
          "name": "DOCUMENT_FRAGMENT_NODE",
          "type": "11",
          "optional": false
        },
        {
          "name": "NOTATION_NODE",
          "type": "12",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_DISCONNECTED",
          "type": "1",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_PRECEDING",
          "type": "2",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_FOLLOWING",
          "type": "4",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_CONTAINS",
          "type": "8",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_CONTAINED_BY",
          "type": "16",
          "optional": false
        },
        {
          "name": "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
          "type": "32",
          "optional": false
        },
        {
          "name": "dispatchEvent",
          "type": "(event: Event) => boolean",
          "optional": false
        },
        {
          "name": "ariaAtomic",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaAutoComplete",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaBrailleLabel",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaBrailleRoleDescription",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaBusy",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaChecked",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaColCount",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaColIndex",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaColIndexText",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaColSpan",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaCurrent",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaDescription",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaDisabled",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaExpanded",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaHasPopup",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaHidden",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaInvalid",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaKeyShortcuts",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaLabel",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaLevel",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaLive",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaModal",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaMultiLine",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaMultiSelectable",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaOrientation",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaPlaceholder",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaPosInSet",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaPressed",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaReadOnly",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRelevant",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRequired",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRoleDescription",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRowCount",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRowIndex",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRowIndexText",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaRowSpan",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaSelected",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaSetSize",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaSort",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaValueMax",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaValueMin",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaValueNow",
          "type": "string",
          "optional": false
        },
        {
          "name": "ariaValueText",
          "type": "string",
          "optional": false
        },
        {
          "name": "role",
          "type": "string",
          "optional": false
        },
        {
          "name": "animate",
          "type": "(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions) => Animation",
          "optional": false
        },
        {
          "name": "getAnimations",
          "type": "(options?: GetAnimationsOptions) => Animation[]",
          "optional": false
        },
        {
          "name": "after",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "before",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "remove",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "replaceWith",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "nextElementSibling",
          "type": "Element",
          "optional": false
        },
        {
          "name": "previousElementSibling",
          "type": "Element",
          "optional": false
        },
        {
          "name": "childElementCount",
          "type": "number",
          "optional": false
        },
        {
          "name": "children",
          "type": "HTMLCollection",
          "optional": false
        },
        {
          "name": "firstElementChild",
          "type": "Element",
          "optional": false
        },
        {
          "name": "lastElementChild",
          "type": "Element",
          "optional": false
        },
        {
          "name": "append",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "prepend",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "querySelector",
          "type": "{ <K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K]; <K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K]; <K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K]; <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLE...",
          "optional": false
        },
        {
          "name": "querySelectorAll",
          "type": "{ <K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>; <K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<...>; <K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<...>; <K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<....",
          "optional": false
        },
        {
          "name": "replaceChildren",
          "type": "(...nodes: (string | Node)[]) => void",
          "optional": false
        },
        {
          "name": "assignedSlot",
          "type": "HTMLSlotElement",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Offset",
      "type": "Offset",
      "properties": [
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvents",
      "type": "PageEvents",
      "properties": [
        {
          "name": "close",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "console",
          "type": "ConsoleMessage",
          "optional": false
        },
        {
          "name": "dialog",
          "type": "Dialog",
          "optional": false
        },
        {
          "name": "domcontentloaded",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "error",
          "type": "Error",
          "optional": false
        },
        {
          "name": "frameattached",
          "type": "Frame",
          "optional": false
        },
        {
          "name": "framedetached",
          "type": "Frame",
          "optional": false
        },
        {
          "name": "framenavigated",
          "type": "Frame",
          "optional": false
        },
        {
          "name": "load",
          "type": "undefined",
          "optional": false
        },
        {
          "name": "metrics",
          "type": "{ title: string; metrics: Metrics; }",
          "optional": false
        },
        {
          "name": "pageerror",
          "type": "Error",
          "optional": false
        },
        {
          "name": "popup",
          "type": "Page",
          "optional": false
        },
        {
          "name": "request",
          "type": "HTTPRequest",
          "optional": false
        },
        {
          "name": "response",
          "type": "HTTPResponse",
          "optional": false
        },
        {
          "name": "requestfailed",
          "type": "HTTPRequest",
          "optional": false
        },
        {
          "name": "requestfinished",
          "type": "HTTPRequest",
          "optional": false
        },
        {
          "name": "requestservedfromcache",
          "type": "HTTPRequest",
          "optional": false
        },
        {
          "name": "workercreated",
          "type": "WebWorker",
          "optional": false
        },
        {
          "name": "workerdestroyed",
          "type": "WebWorker",
          "optional": false
        }
      ],
      "extends": [
        "Record<EventType, unknown>"
      ],
      "jsdoc": {
        "description": "Denotes the objects received by callback functions for page events.\r\n\r\nSee    for more detail on the events and when they are\r\nemitted.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PaperFormat",
      "type": "PaperFormat",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "All the valid paper format types when printing a PDF.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PDFMargin",
      "type": "PDFMargin",
      "properties": [
        {
          "name": "top",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "bottom",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "left",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "right",
          "type": "string | number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PDFOptions",
      "type": "PDFOptions",
      "properties": [
        {
          "name": "scale",
          "type": "number",
          "optional": true
        },
        {
          "name": "displayHeaderFooter",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "headerTemplate",
          "type": "string",
          "optional": true
        },
        {
          "name": "footerTemplate",
          "type": "string",
          "optional": true
        },
        {
          "name": "printBackground",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "landscape",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "pageRanges",
          "type": "string",
          "optional": true
        },
        {
          "name": "format",
          "type": "PaperFormat",
          "optional": true
        },
        {
          "name": "width",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "height",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "preferCSSPageSize",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "margin",
          "type": "PDFMargin",
          "optional": true
        },
        {
          "name": "path",
          "type": "string",
          "optional": true
        },
        {
          "name": "omitBackground",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "tagged",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "outline",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "waitForFonts",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Valid options to configure PDF generation via   .",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Permission",
      "type": "Permission",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Point",
      "type": "Point",
      "properties": [
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Predicate",
      "type": "Predicate<From, To>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ProtocolLifeCycleEvent",
      "type": "ProtocolLifeCycleEvent",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ProtocolType",
      "type": "ProtocolType",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PuppeteerLifeCycleEvent",
      "type": "PuppeteerLifeCycleEvent",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Quad",
      "type": "Quad",
      "properties": [
        {
          "name": "0",
          "type": "Point",
          "optional": false
        },
        {
          "name": "1",
          "type": "Point",
          "optional": false
        },
        {
          "name": "2",
          "type": "Point",
          "optional": false
        },
        {
          "name": "3",
          "type": "Point",
          "optional": false
        },
        {
          "name": "length",
          "type": "4",
          "optional": false
        },
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "{ (): string; (locales: string | string[], options?: NumberFormatOptions & DateTimeFormatOptions): string; }",
          "optional": false
        },
        {
          "name": "pop",
          "type": "() => Point",
          "optional": false
        },
        {
          "name": "push",
          "type": "(...items: Point[]) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "{ (...items: ConcatArray<Point>[]): Point[]; (...items: (Point | ConcatArray<Point>)[]): Point[]; }",
          "optional": false
        },
        {
          "name": "join",
          "type": "(separator?: string) => string",
          "optional": false
        },
        {
          "name": "reverse",
          "type": "() => Point[]",
          "optional": false
        },
        {
          "name": "shift",
          "type": "() => Point",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => Point[]",
          "optional": false
        },
        {
          "name": "sort",
          "type": "(compareFn?: (a: Point, b: Point) => number) => Quad",
          "optional": false
        },
        {
          "name": "splice",
          "type": "{ (start: number, deleteCount?: number): Point[]; (start: number, deleteCount: number, ...items: Point[]): Point[]; }",
          "optional": false
        },
        {
          "name": "unshift",
          "type": "(...items: Point[]) => number",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchElement: Point, fromIndex?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchElement: Point, fromIndex?: number) => number",
          "optional": false
        },
        {
          "name": "every",
          "type": "{ <S extends Point>(predicate: (value: Point, index: number, array: Point[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: Point, index: number, array: Point[]) => unknown, thisArg?: any): boolean; }",
          "optional": false
        },
        {
          "name": "some",
          "type": "(predicate: (value: Point, index: number, array: Point[]) => unknown, thisArg?: any) => boolean",
          "optional": false
        },
        {
          "name": "forEach",
          "type": "(callbackfn: (value: Point, index: number, array: Point[]) => void, thisArg?: any) => void",
          "optional": false
        },
        {
          "name": "map",
          "type": "<U>(callbackfn: (value: Point, index: number, array: Point[]) => U, thisArg?: any) => U[]",
          "optional": false
        },
        {
          "name": "filter",
          "type": "{ <S extends Point>(predicate: (value: Point, index: number, array: Point[]) => value is S, thisArg?: any): S[]; (predicate: (value: Point, index: number, array: Point[]) => unknown, thisArg?: any): Point[]; }",
          "optional": false
        },
        {
          "name": "reduce",
          "type": "{ (callbackfn: (previousValue: Point, currentValue: Point, currentIndex: number, array: Point[]) => Point): Point; (callbackfn: (previousValue: Point, currentValue: Point, currentIndex: number, array: Point[]) => Point, initialValue: Point): Point; <U>(callbackfn: (previousValue: U, currentValue: Point, currentIndex...",
          "optional": false
        },
        {
          "name": "reduceRight",
          "type": "{ (callbackfn: (previousValue: Point, currentValue: Point, currentIndex: number, array: Point[]) => Point): Point; (callbackfn: (previousValue: Point, currentValue: Point, currentIndex: number, array: Point[]) => Point, initialValue: Point): Point; <U>(callbackfn: (previousValue: U, currentValue: Point, currentIndex...",
          "optional": false
        },
        {
          "name": "find",
          "type": "{ <S extends Point>(predicate: (value: Point, index: number, obj: Point[]) => value is S, thisArg?: any): S; (predicate: (value: Point, index: number, obj: Point[]) => unknown, thisArg?: any): Point; }",
          "optional": false
        },
        {
          "name": "findIndex",
          "type": "(predicate: (value: Point, index: number, obj: Point[]) => unknown, thisArg?: any) => number",
          "optional": false
        },
        {
          "name": "fill",
          "type": "(value: Point, start?: number, end?: number) => Quad",
          "optional": false
        },
        {
          "name": "copyWithin",
          "type": "(target: number, start: number, end?: number) => Quad",
          "optional": false
        },
        {
          "name": "entries",
          "type": "() => ArrayIterator<[number, Point]>",
          "optional": false
        },
        {
          "name": "keys",
          "type": "() => ArrayIterator<number>",
          "optional": false
        },
        {
          "name": "values",
          "type": "() => ArrayIterator<Point>",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchElement: Point, fromIndex?: number) => boolean",
          "optional": false
        },
        {
          "name": "flatMap",
          "type": "<U, This = undefined>(callback: (this: This, value: Point, index: number, array: Point[]) => U | readonly U[], thisArg?: This) => U[]",
          "optional": false
        },
        {
          "name": "flat",
          "type": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => ArrayIterator<Point>",
          "optional": false
        },
        {
          "name": "__@unscopables@59128",
          "type": "{ [x: number]: boolean; length?: boolean; toString?: boolean; toLocaleString?: boolean; pop?: boolean; push?: boolean; concat?: boolean; join?: boolean; reverse?: boolean; shift?: boolean; slice?: boolean; sort?: boolean; ... 23 more ...; at?: boolean; }",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => Point",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "QueryOptions",
      "type": "QueryOptions",
      "properties": [
        {
          "name": "isolate",
          "type": "boolean",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "RemoteAddress",
      "type": "RemoteAddress",
      "properties": [
        {
          "name": "ip",
          "type": "string",
          "optional": true
        },
        {
          "name": "port",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ResourceType",
      "type": "\"script\" | \"image\" | \"font\" | \"document\" | \"stylesheet\" | \"media\" | \"texttrack\" | \"xhr\" | \"fetch\" | \"prefetch\" | \"eventsource\" | \"websocket\" | \"manifest\" | \"signedexchange\" | \"ping\" | \"cspviolationreport\" | \"preflight\" | \"other\"",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Resource types for HTTPRequests as perceived by the rendering engine.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ResponseForRequest",
      "type": "ResponseForRequest",
      "properties": [
        {
          "name": "status",
          "type": "number",
          "optional": false
        },
        {
          "name": "headers",
          "type": "Record<string, unknown>",
          "optional": false
        },
        {
          "name": "contentType",
          "type": "string",
          "optional": false
        },
        {
          "name": "body",
          "type": "string | Uint8Array<ArrayBufferLike>",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Required response data to fulfill a request with.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ScreencastOptions",
      "type": "ScreencastOptions",
      "properties": [
        {
          "name": "path",
          "type": "`${string}.gif` | `${string}.webm` | `${string}.mp4`",
          "optional": true
        },
        {
          "name": "format",
          "type": "FileFormat",
          "optional": true
        },
        {
          "name": "crop",
          "type": "BoundingBox",
          "optional": true
        },
        {
          "name": "scale",
          "type": "number",
          "optional": true
        },
        {
          "name": "speed",
          "type": "number",
          "optional": true
        },
        {
          "name": "fps",
          "type": "number",
          "optional": true
        },
        {
          "name": "loop",
          "type": "number",
          "optional": true
        },
        {
          "name": "delay",
          "type": "number",
          "optional": true
        },
        {
          "name": "quality",
          "type": "number",
          "optional": true
        },
        {
          "name": "colors",
          "type": "number",
          "optional": true
        },
        {
          "name": "ffmpegPath",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ScreenshotClip",
      "type": "ScreenshotClip",
      "properties": [
        {
          "name": "scale",
          "type": "number",
          "optional": true
        },
        {
          "name": "width",
          "type": "number",
          "optional": false
        },
        {
          "name": "height",
          "type": "number",
          "optional": false
        },
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "extends": [
        "BoundingBox"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ScreenshotOptions",
      "type": "ScreenshotOptions",
      "properties": [
        {
          "name": "optimizeForSpeed",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "type",
          "type": "\"png\" | \"jpeg\" | \"webp\"",
          "optional": true
        },
        {
          "name": "quality",
          "type": "number",
          "optional": true
        },
        {
          "name": "fromSurface",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "fullPage",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "omitBackground",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "path",
          "type": "string",
          "optional": true
        },
        {
          "name": "clip",
          "type": "ScreenshotClip",
          "optional": true
        },
        {
          "name": "encoding",
          "type": "\"base64\" | \"binary\"",
          "optional": true
        },
        {
          "name": "captureBeyondViewport",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "SerializedAXNode",
      "type": "SerializedAXNode",
      "properties": [
        {
          "name": "role",
          "type": "string",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": true
        },
        {
          "name": "value",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "description",
          "type": "string",
          "optional": true
        },
        {
          "name": "keyshortcuts",
          "type": "string",
          "optional": true
        },
        {
          "name": "roledescription",
          "type": "string",
          "optional": true
        },
        {
          "name": "valuetext",
          "type": "string",
          "optional": true
        },
        {
          "name": "disabled",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "expanded",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "focused",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "modal",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "multiline",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "multiselectable",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "readonly",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "required",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "selected",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "checked",
          "type": "boolean | \"mixed\"",
          "optional": true
        },
        {
          "name": "pressed",
          "type": "boolean | \"mixed\"",
          "optional": true
        },
        {
          "name": "level",
          "type": "number",
          "optional": true
        },
        {
          "name": "valuemin",
          "type": "number",
          "optional": true
        },
        {
          "name": "valuemax",
          "type": "number",
          "optional": true
        },
        {
          "name": "autocomplete",
          "type": "string",
          "optional": true
        },
        {
          "name": "haspopup",
          "type": "string",
          "optional": true
        },
        {
          "name": "invalid",
          "type": "string",
          "optional": true
        },
        {
          "name": "orientation",
          "type": "string",
          "optional": true
        },
        {
          "name": "children",
          "type": "SerializedAXNode[]",
          "optional": true
        },
        {
          "name": "elementHandle",
          "type": "() => Promise<ElementHandle<Element>>",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Represents a Node and the properties of it that are relevant to Accessibility.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "SnapshotOptions",
      "type": "SnapshotOptions",
      "properties": [
        {
          "name": "interestingOnly",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "includeIframes",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "root",
          "type": "ElementHandle<Node>",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "SupportedBrowser",
      "type": "SupportedBrowser",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "SupportedWebDriverCapabilities",
      "type": "SupportedWebDriverCapabilities",
      "properties": [
        {
          "name": "firstMatch",
          "type": "CapabilityRequest[]",
          "optional": true
        },
        {
          "name": "alwaysMatch",
          "type": "CapabilityRequest",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "WebDriver BiDi capabilities that are not set by Puppeteer itself.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "SupportedWebDriverCapability",
      "type": "CapabilityRequest",
      "properties": [
        {
          "name": "acceptInsecureCerts",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "browserName",
          "type": "string",
          "optional": true
        },
        {
          "name": "browserVersion",
          "type": "string",
          "optional": true
        },
        {
          "name": "platformName",
          "type": "string",
          "optional": true
        },
        {
          "name": "proxy",
          "type": "ProxyConfiguration",
          "optional": true
        },
        {
          "name": "unhandledPromptBehavior",
          "type": "UserPromptHandler",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "TargetFilterCallback",
      "type": "TargetFilterCallback",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "TouchHandle",
      "type": "TouchHandle",
      "properties": [
        {
          "name": "move",
          "type": "(x: number, y: number) => Promise<void>",
          "optional": false
        },
        {
          "name": "end",
          "type": "() => Promise<void>",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "The TouchHandle interface exposes methods to manipulate touches that have been started",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "TracingOptions",
      "type": "TracingOptions",
      "properties": [
        {
          "name": "path",
          "type": "string",
          "optional": true
        },
        {
          "name": "screenshots",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "categories",
          "type": "string[]",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Viewport",
      "type": "Viewport",
      "properties": [
        {
          "name": "width",
          "type": "number",
          "optional": false
        },
        {
          "name": "height",
          "type": "number",
          "optional": false
        },
        {
          "name": "deviceScaleFactor",
          "type": "number",
          "optional": true
        },
        {
          "name": "isMobile",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "isLandscape",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "hasTouch",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "VisibilityOption",
      "type": "VisibilityOption",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@54430",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Whether to wait for the element to be\r\n | visible  or\r\n | hidden .\r\n`null` to disable visibility checks.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "WaitForNetworkIdleOptions",
      "type": "WaitForNetworkIdleOptions",
      "properties": [
        {
          "name": "idleTime",
          "type": "number",
          "optional": true
        },
        {
          "name": "concurrency",
          "type": "number",
          "optional": true
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        }
      ],
      "extends": [
        "WaitTimeoutOptions"
      ],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "WaitForOptions",
      "type": "WaitForOptions",
      "properties": [
        {
          "name": "timeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "waitUntil",
          "type": "PuppeteerLifeCycleEvent | PuppeteerLifeCycleEvent[]",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "WaitForSelectorOptions",
      "type": "WaitForSelectorOptions",
      "properties": [
        {
          "name": "visible",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "hidden",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "WaitForTargetOptions",
      "type": "WaitForTargetOptions",
      "properties": [
        {
          "name": "timeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "WaitTimeoutOptions",
      "type": "WaitTimeoutOptions",
      "properties": [
        {
          "name": "timeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    }
  ],
  "classes": [
    {
      "name": "Accessibility",
      "constructors": [],
      "methods": [
        {
          "name": "Accessibility.snapshot",
          "parameters": [
            {
              "name": "options",
              "type": "SnapshotOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<SerializedAXNode>",
          "jsdoc": {
            "description": "Captures the current state of the accessibility tree.\r\nThe returned object represents the root accessible node of the page.",
            "params": [],
            "returns": "An AXNode object representing the snapshot.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "serializeTree",
          "type": "any",
          "optional": false
        },
        {
          "name": "collectInterestingNodes",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "The Accessibility class provides methods for inspecting the browser's\r\naccessibility tree. The accessibility tree is used by assistive technology\r\nsuch as  ://en.wikipedia.org/wiki/Screen_reader | screen readers  or\r\n ://en.wikipedia.org/wiki/Switch_access | switches .",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Browser",
      "constructors": [],
      "methods": [
        {
          "name": "Browser.process",
          "parameters": [],
          "returnType": "ChildProcess",
          "jsdoc": {
            "description": "Gets the associated\r\n ://nodejs.org/api/child_process.html#class-childprocess | ChildProcess .",
            "params": [],
            "returns": "`null` if this instance was connected to via\r\n  .",
            "deprecated": false
          }
        },
        {
          "name": "Browser.createBrowserContext",
          "parameters": [
            {
              "name": "options",
              "type": "BrowserContextOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<BrowserContext>",
          "jsdoc": {
            "description": "Creates a new  | browser context .\r\n\r\nThis won't share cookies/cache with other  | browser contexts .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Browser.browserContexts",
          "parameters": [],
          "returnType": "BrowserContext[]",
          "jsdoc": {
            "description": "Gets a list of open  | browser contexts .\r\n\r\nIn a newly-created  | browser , this will return a single\r\ninstance of   .",
            "deprecated": false
          }
        },
        {
          "name": "Browser.defaultBrowserContext",
          "parameters": [],
          "returnType": "BrowserContext",
          "jsdoc": {
            "description": "Gets the default  | browser context .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Browser.wsEndpoint",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "Gets the WebSocket URL to connect to this  | browser .\r\n\r\nThis is usually used with   .\r\n\r\nYou can find the debugger URL (`webSocketDebuggerUrl`) from\r\n`http://HOST:PORT/json/version`.\r\n\r\nSee  ://chromedevtools.github.io/devtools-protocol/#how-do-i-access-the-browser-target | browser endpoint \r\nfor more information.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Browser.newPage",
          "parameters": [],
          "returnType": "Promise<Page>",
          "jsdoc": {
            "description": "Creates a new  | page  in the\r\n | default browser context .",
            "deprecated": false
          }
        },
        {
          "name": "Browser.targets",
          "parameters": [],
          "returnType": "Target[]",
          "jsdoc": {
            "description": "Gets all active  | targets .\r\n\r\nIn case of multiple  | browser contexts , this returns\r\nall  | targets  in all\r\n | browser contexts .",
            "deprecated": false
          }
        },
        {
          "name": "Browser.target",
          "parameters": [],
          "returnType": "Target",
          "jsdoc": {
            "description": "Gets the  | target  associated with the\r\n | default browser context ).",
            "deprecated": false
          }
        },
        {
          "name": "Browser.waitForTarget",
          "parameters": [
            {
              "name": "predicate",
              "type": "(x: Target) => boolean | Promise<boolean>",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitForTargetOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<Target>",
          "jsdoc": {
            "description": "Waits until a  | target  matching the given `predicate`\r\nappears and returns it.\r\n\r\nThis will look all open  | browser contexts .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Browser.pages",
          "parameters": [],
          "returnType": "Promise<Page[]>",
          "jsdoc": {
            "description": "Gets a list of all open  | pages  inside this   .\r\n\r\nIf there are multiple  | browser contexts , this\r\nreturns all  | pages  in all\r\n | browser contexts .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Browser.version",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": {
            "description": "Gets a string representing this  | browser's  name and\r\nversion.\r\n\r\nFor headless browser, this is similar to `\"HeadlessChrome/61.0.3153.0\"`. For\r\nnon-headless or new-headless, this is similar to `\"Chrome/61.0.3153.0\"`. For\r\nFirefox, it is similar to `\"Firefox/116.0a1\"`.\r\n\r\nThe format of    might change with future releases of\r\nbrowsers.",
            "deprecated": false
          }
        },
        {
          "name": "Browser.userAgent",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": {
            "description": "Gets this  | browser's  original user agent.\r\n\r\n | Pages  can override the user agent with\r\n  .",
            "deprecated": false
          }
        },
        {
          "name": "Browser.close",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Closes this  | browser  and all associated\r\n | pages .",
            "deprecated": false
          }
        },
        {
          "name": "Browser.disconnect",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Disconnects Puppeteer from this  | browser , but leaves the\r\nprocess running.",
            "deprecated": false
          }
        },
        {
          "name": "Browser.cookies",
          "parameters": [],
          "returnType": "Promise<Cookie[]>",
          "jsdoc": {
            "description": "Returns all cookies in the default   .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Browser.setCookie",
          "parameters": [
            {
              "name": "cookies",
              "type": "CookieData[]",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Sets cookies in the default   .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Browser.deleteCookie",
          "parameters": [
            {
              "name": "cookies",
              "type": "Cookie[]",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Removes cookies from the default   .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Browser.isConnected",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Whether Puppeteer is connected to this  | browser .",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "Browser.on",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<BrowserEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "Browser",
          "jsdoc": {
            "description": "Bind an event listener to fire when an event occurs.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to listen to. Can be a string or symbol."
              },
              {
                "name": "handler",
                "description": "- the function to be called when the event occurs."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Browser.off",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<BrowserEvents>[Key]>",
              "optional": true
            }
          ],
          "returnType": "Browser",
          "jsdoc": {
            "description": "Remove an event listener from firing.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to stop listening to."
              },
              {
                "name": "handler",
                "description": "- the function that should be removed."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Browser.emit",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "event",
              "type": "EventsWithWildcard<BrowserEvents>[Key]",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Emit an event and call any associated listeners.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to emit"
              },
              {
                "name": "eventData",
                "description": "- any data you'd like to emit with the event"
              }
            ],
            "returns": "`true` if there are any listeners, `false` if there are not.",
            "deprecated": false
          }
        },
        {
          "name": "Browser.once",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<BrowserEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "Browser",
          "jsdoc": {
            "description": "Like `on` but the listener will only be fired once and then it will be removed.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to listen to"
              },
              {
                "name": "handler",
                "description": "- the handler function to run when the event occurs"
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Browser.listenerCount",
          "parameters": [
            {
              "name": "type",
              "type": "keyof BrowserEvents",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Gets the number of listeners for a given event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to get the listener count for"
              }
            ],
            "returns": "the number of listeners bound to the given event",
            "deprecated": false
          }
        },
        {
          "name": "Browser.removeAllListeners",
          "parameters": [
            {
              "name": "type",
              "type": "keyof BrowserEvents",
              "optional": true
            }
          ],
          "returnType": "Browser",
          "jsdoc": {
            "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to remove listeners for."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "connected",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "debugInfo",
          "type": "DebugInfo",
          "optional": false
        },
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "EventEmitter<BrowserEvents>",
      "implements": [],
      "jsdoc": {
        "description": "   represents a browser instance that is either:\r\n\r\n- connected to via    or\r\n- launched by   .\r\n\r\n    | emits  various events which are\r\ndocumented in the    enum.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserContext",
      "constructors": [],
      "methods": [
        {
          "name": "BrowserContext.targets",
          "parameters": [],
          "returnType": "Target[]",
          "jsdoc": {
            "description": "Gets all active  | targets  inside this\r\n | browser context .",
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.waitForTarget",
          "parameters": [
            {
              "name": "predicate",
              "type": "(x: Target) => boolean | Promise<boolean>",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitForTargetOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<Target>",
          "jsdoc": {
            "description": "Waits until a  | target  matching the given `predicate`\r\nappears and returns it.\r\n\r\nThis will look all open  | browser contexts .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.pages",
          "parameters": [],
          "returnType": "Promise<Page[]>",
          "jsdoc": {
            "description": "Gets a list of all open  | pages  inside this\r\n | browser context .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.overridePermissions",
          "parameters": [
            {
              "name": "origin",
              "type": "string",
              "optional": false
            },
            {
              "name": "permissions",
              "type": "Permission[]",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Grants this  | browser context  the given\r\n`permissions` within the given `origin`.",
            "params": [
              {
                "name": "origin",
                "description": "- The origin to grant permissions to, e.g.\r\n\"https://example.com\"."
              },
              {
                "name": "permissions",
                "description": "- An array of permissions to grant. All permissions that\r\nare not listed here will be automatically denied."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.clearPermissionOverrides",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Clears all permission overrides for this\r\n | browser context .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.newPage",
          "parameters": [],
          "returnType": "Promise<Page>",
          "jsdoc": {
            "description": "Creates a new  | page  in this\r\n | browser context .",
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.browser",
          "parameters": [],
          "returnType": "Browser",
          "jsdoc": {
            "description": "Gets the  | browser  associated with this\r\n | browser context .",
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.close",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Closes this  | browser context  and all associated\r\n | pages .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.cookies",
          "parameters": [],
          "returnType": "Promise<Cookie[]>",
          "jsdoc": {
            "description": "Gets all cookies in the browser context.",
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.setCookie",
          "parameters": [
            {
              "name": "cookies",
              "type": "CookieData[]",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Sets a cookie in the browser context.",
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.deleteCookie",
          "parameters": [
            {
              "name": "cookies",
              "type": "Cookie[]",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Removes cookie in the browser context",
            "params": [
              {
                "name": "cookies",
                "description": "-  | cookie  to remove"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.on",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<BrowserContextEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "BrowserContext",
          "jsdoc": {
            "description": "Bind an event listener to fire when an event occurs.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to listen to. Can be a string or symbol."
              },
              {
                "name": "handler",
                "description": "- the function to be called when the event occurs."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.off",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<BrowserContextEvents>[Key]>",
              "optional": true
            }
          ],
          "returnType": "BrowserContext",
          "jsdoc": {
            "description": "Remove an event listener from firing.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to stop listening to."
              },
              {
                "name": "handler",
                "description": "- the function that should be removed."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.emit",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "event",
              "type": "EventsWithWildcard<BrowserContextEvents>[Key]",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Emit an event and call any associated listeners.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to emit"
              },
              {
                "name": "eventData",
                "description": "- any data you'd like to emit with the event"
              }
            ],
            "returns": "`true` if there are any listeners, `false` if there are not.",
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.once",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<BrowserContextEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "BrowserContext",
          "jsdoc": {
            "description": "Like `on` but the listener will only be fired once and then it will be removed.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to listen to"
              },
              {
                "name": "handler",
                "description": "- the handler function to run when the event occurs"
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.listenerCount",
          "parameters": [
            {
              "name": "type",
              "type": "keyof BrowserContextEvents",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Gets the number of listeners for a given event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to get the listener count for"
              }
            ],
            "returns": "the number of listeners bound to the given event",
            "deprecated": false
          }
        },
        {
          "name": "BrowserContext.removeAllListeners",
          "parameters": [
            {
              "name": "type",
              "type": "keyof BrowserContextEvents",
              "optional": true
            }
          ],
          "returnType": "BrowserContext",
          "jsdoc": {
            "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to remove listeners for."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "closed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "id",
          "type": "string",
          "optional": false
        },
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "EventEmitter<BrowserContextEvents>",
      "implements": [],
      "jsdoc": {
        "description": "   represents individual user contexts within a\r\n | browser .\r\n\r\nWhen a  | browser  is launched, it has at least one default\r\n | browser context . Others can be created\r\nusing   . Each context has isolated storage\r\n(cookies/localStorage/etc.)\r\n\r\n    | emits  various events which are\r\ndocumented in the    enum.\r\n\r\nIf a  | page  opens another  | page , e.g. using\r\n`window.open`, the popup will belong to the parent  * | page's browser context .",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserLauncher",
      "constructors": [],
      "methods": [
        {
          "name": "BrowserLauncher.launch",
          "parameters": [
            {
              "name": "options",
              "type": "LaunchOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<Browser>",
          "jsdoc": null
        },
        {
          "name": "BrowserLauncher.executablePath",
          "parameters": [
            {
              "name": "channel",
              "type": "ChromeReleaseChannel",
              "optional": true
            },
            {
              "name": "validatePath",
              "type": "boolean",
              "optional": true
            }
          ],
          "returnType": "string",
          "jsdoc": null
        },
        {
          "name": "BrowserLauncher.defaultArgs",
          "parameters": [
            {
              "name": "object",
              "type": "LaunchOptions",
              "optional": false
            }
          ],
          "returnType": "string[]",
          "jsdoc": null
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "browser",
          "type": "SupportedBrowser",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "Describes a launcher - a class that is able to create and launch a browser instance.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CDPSession",
      "constructors": [],
      "methods": [
        {
          "name": "CDPSession.connection",
          "parameters": [],
          "returnType": "Connection",
          "jsdoc": {
            "description": "The underlying connection for this session, if any.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "CDPSession.send",
          "parameters": [
            {
              "name": "method",
              "type": "T",
              "optional": false
            },
            {
              "name": "params",
              "type": "Commands[T][\"paramsType\"][0]",
              "optional": true
            },
            {
              "name": "options",
              "type": "CommandOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<Commands[T][\"returnType\"]>",
          "jsdoc": null
        },
        {
          "name": "CDPSession.detach",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Detaches the cdpSession from the target. Once detached, the cdpSession object\r\nwon't emit any events and can't be used to send messages.",
            "deprecated": false
          }
        },
        {
          "name": "CDPSession.id",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "Returns the session's id.",
            "deprecated": false
          }
        },
        {
          "name": "CDPSession.on",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "CDPSession",
          "jsdoc": {
            "description": "Bind an event listener to fire when an event occurs.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to listen to. Can be a string or symbol."
              },
              {
                "name": "handler",
                "description": "- the function to be called when the event occurs."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "CDPSession.off",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
              "optional": true
            }
          ],
          "returnType": "CDPSession",
          "jsdoc": {
            "description": "Remove an event listener from firing.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to stop listening to."
              },
              {
                "name": "handler",
                "description": "- the function that should be removed."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "CDPSession.emit",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "event",
              "type": "EventsWithWildcard<CDPSessionEvents>[Key]",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Emit an event and call any associated listeners.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to emit"
              },
              {
                "name": "eventData",
                "description": "- any data you'd like to emit with the event"
              }
            ],
            "returns": "`true` if there are any listeners, `false` if there are not.",
            "deprecated": false
          }
        },
        {
          "name": "CDPSession.once",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "CDPSession",
          "jsdoc": {
            "description": "Like `on` but the listener will only be fired once and then it will be removed.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to listen to"
              },
              {
                "name": "handler",
                "description": "- the handler function to run when the event occurs"
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "CDPSession.listenerCount",
          "parameters": [
            {
              "name": "type",
              "type": "keyof CDPSessionEvents",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Gets the number of listeners for a given event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to get the listener count for"
              }
            ],
            "returns": "the number of listeners bound to the given event",
            "deprecated": false
          }
        },
        {
          "name": "CDPSession.removeAllListeners",
          "parameters": [
            {
              "name": "type",
              "type": "keyof CDPSessionEvents",
              "optional": true
            }
          ],
          "returnType": "CDPSession",
          "jsdoc": {
            "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to remove listeners for."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "detached",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "EventEmitter<CDPSessionEvents>",
      "implements": [],
      "jsdoc": {
        "description": "The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Connection",
      "constructors": [
        {
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "transport",
              "type": "ConnectionTransport",
              "optional": false
            },
            {
              "name": "delay",
              "type": "number",
              "optional": true
            },
            {
              "name": "timeout",
              "type": "number",
              "optional": true
            },
            {
              "name": "rawErrors",
              "type": "boolean",
              "optional": true
            }
          ],
          "returnType": "Connection"
        }
      ],
      "methods": [
        {
          "name": "Connection.session",
          "parameters": [
            {
              "name": "sessionId",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "CDPSession",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "sessionId",
                "description": "- The session id"
              }
            ],
            "returns": "The current CDP session if it exists",
            "deprecated": false
          }
        },
        {
          "name": "Connection.url",
          "parameters": [],
          "returnType": "string",
          "jsdoc": null
        },
        {
          "name": "Connection.send",
          "parameters": [
            {
              "name": "method",
              "type": "T",
              "optional": false
            },
            {
              "name": "params",
              "type": "Commands[T][\"paramsType\"][0]",
              "optional": true
            },
            {
              "name": "options",
              "type": "CommandOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<Commands[T][\"returnType\"]>",
          "jsdoc": null
        },
        {
          "name": "Connection.dispose",
          "parameters": [],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "Connection.createSession",
          "parameters": [
            {
              "name": "targetInfo",
              "type": "TargetInfo",
              "optional": false
            }
          ],
          "returnType": "Promise<CDPSession>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "targetInfo",
                "description": "- The target info"
              }
            ],
            "returns": "The CDP session that is created",
            "deprecated": false
          }
        },
        {
          "name": "Connection.on",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "Connection",
          "jsdoc": {
            "description": "Bind an event listener to fire when an event occurs.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to listen to. Can be a string or symbol."
              },
              {
                "name": "handler",
                "description": "- the function to be called when the event occurs."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Connection.off",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
              "optional": true
            }
          ],
          "returnType": "Connection",
          "jsdoc": {
            "description": "Remove an event listener from firing.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to stop listening to."
              },
              {
                "name": "handler",
                "description": "- the function that should be removed."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Connection.emit",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "event",
              "type": "EventsWithWildcard<CDPSessionEvents>[Key]",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Emit an event and call any associated listeners.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to emit"
              },
              {
                "name": "eventData",
                "description": "- any data you'd like to emit with the event"
              }
            ],
            "returns": "`true` if there are any listeners, `false` if there are not.",
            "deprecated": false
          }
        },
        {
          "name": "Connection.once",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<CDPSessionEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "Connection",
          "jsdoc": {
            "description": "Like `on` but the listener will only be fired once and then it will be removed.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to listen to"
              },
              {
                "name": "handler",
                "description": "- the handler function to run when the event occurs"
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Connection.listenerCount",
          "parameters": [
            {
              "name": "type",
              "type": "keyof CDPSessionEvents",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Gets the number of listeners for a given event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to get the listener count for"
              }
            ],
            "returns": "the number of listeners bound to the given event",
            "deprecated": false
          }
        },
        {
          "name": "Connection.removeAllListeners",
          "parameters": [
            {
              "name": "type",
              "type": "keyof CDPSessionEvents",
              "optional": true
            }
          ],
          "returnType": "Connection",
          "jsdoc": {
            "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to remove listeners for."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": false
        },
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "EventEmitter<CDPSessionEvents>",
      "implements": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ConsoleMessage",
      "constructors": [],
      "methods": [
        {
          "name": "ConsoleMessage.type",
          "parameters": [],
          "returnType": "ConsoleMessageType",
          "jsdoc": {
            "description": "The type of the console message.",
            "deprecated": false
          }
        },
        {
          "name": "ConsoleMessage.text",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The text of the console message.",
            "deprecated": false
          }
        },
        {
          "name": "ConsoleMessage.args",
          "parameters": [],
          "returnType": "JSHandle<unknown>[]",
          "jsdoc": {
            "description": "An array of arguments passed to the console.",
            "deprecated": false
          }
        },
        {
          "name": "ConsoleMessage.location",
          "parameters": [],
          "returnType": "ConsoleMessageLocation",
          "jsdoc": {
            "description": "The location of the console message.",
            "deprecated": false
          }
        },
        {
          "name": "ConsoleMessage.stackTrace",
          "parameters": [],
          "returnType": "ConsoleMessageLocation[]",
          "jsdoc": {
            "description": "The array of locations on the stack of the console message.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "ConsoleMessage objects are dispatched by page via the 'console' event.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Coverage",
      "constructors": [],
      "methods": [
        {
          "name": "Coverage.startJSCoverage",
          "parameters": [
            {
              "name": "options",
              "type": "JSCoverageOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "options",
                "description": "- Set of configurable options for coverage defaults to\r\n`resetOnNavigation : true, reportAnonymousScripts : false,`\r\n`includeRawScriptCoverage : false, useBlockCoverage : true`"
              }
            ],
            "returns": "Promise that resolves when coverage is started.",
            "deprecated": false
          }
        },
        {
          "name": "Coverage.stopJSCoverage",
          "parameters": [],
          "returnType": "Promise<JSCoverageEntry[]>",
          "jsdoc": {
            "description": "Promise that resolves to the array of coverage reports for\r\nall scripts.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Coverage.startCSSCoverage",
          "parameters": [
            {
              "name": "options",
              "type": "CSSCoverageOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "options",
                "description": "- Set of configurable options for coverage, defaults to\r\n`resetOnNavigation : true`"
              }
            ],
            "returns": "Promise that resolves when coverage is started.",
            "deprecated": false
          }
        },
        {
          "name": "Coverage.stopCSSCoverage",
          "parameters": [],
          "returnType": "Promise<CoverageEntry[]>",
          "jsdoc": {
            "description": "Promise that resolves to the array of coverage reports\r\nfor all stylesheets.",
            "params": [],
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "The Coverage class provides methods to gather information about parts of\r\nJavaScript and CSS that were used by the page.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CSSCoverage",
      "constructors": [
        {
          "parameters": [
            {
              "name": "client",
              "type": "CDPSession",
              "optional": false
            }
          ],
          "returnType": "CSSCoverage"
        }
      ],
      "methods": [
        {
          "name": "CSSCoverage.start",
          "parameters": [
            {
              "name": "options",
              "type": "{ resetOnNavigation?: boolean; }",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": null
        },
        {
          "name": "CSSCoverage.stop",
          "parameters": [],
          "returnType": "Promise<CoverageEntry[]>",
          "jsdoc": null
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CustomQuerySelectorRegistry",
      "constructors": [],
      "methods": [
        {
          "name": "CustomQuerySelectorRegistry.register",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "handler",
              "type": "CustomQueryHandler",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "CustomQuerySelectorRegistry.unregister",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "CustomQuerySelectorRegistry.get",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "CustomQuerySelector",
          "jsdoc": null
        },
        {
          "name": "CustomQuerySelectorRegistry.clear",
          "parameters": [],
          "returnType": "void",
          "jsdoc": null
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "This class mimics the injected   .",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "DeviceRequestPrompt",
      "constructors": [],
      "methods": [
        {
          "name": "DeviceRequestPrompt.waitForDevice",
          "parameters": [
            {
              "name": "filter",
              "type": "(device: DeviceRequestPromptDevice) => boolean",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitTimeoutOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<DeviceRequestPromptDevice>",
          "jsdoc": {
            "description": "Resolve to the first device in the prompt matching a filter.",
            "deprecated": false
          }
        },
        {
          "name": "DeviceRequestPrompt.select",
          "parameters": [
            {
              "name": "device",
              "type": "DeviceRequestPromptDevice",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Select a device in the prompt's list.",
            "deprecated": false
          }
        },
        {
          "name": "DeviceRequestPrompt.cancel",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Cancel the prompt.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "devices",
          "type": "DeviceRequestPromptDevice[]",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "Device request prompts let you respond to the page requesting for a device\r\nthrough an API like WebBluetooth.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "DeviceRequestPromptDevice",
      "constructors": [],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "Device in a request prompt.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Dialog",
      "constructors": [],
      "methods": [
        {
          "name": "Dialog.type",
          "parameters": [],
          "returnType": "DialogType",
          "jsdoc": {
            "description": "The type of the dialog.",
            "deprecated": false
          }
        },
        {
          "name": "Dialog.message",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The message displayed in the dialog.",
            "deprecated": false
          }
        },
        {
          "name": "Dialog.defaultValue",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The default value of the prompt, or an empty string if the dialog\r\nis not a `prompt`.",
            "deprecated": false
          }
        },
        {
          "name": "Dialog.accept",
          "parameters": [
            {
              "name": "promptText",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "A promise that resolves when the dialog has been accepted.",
            "params": [
              {
                "name": "promptText",
                "description": "- optional text that will be entered in the dialog\r\nprompt. Has no effect if the dialog's type is not `prompt`."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Dialog.dismiss",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "A promise which will resolve once the dialog has been dismissed",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "Dialog instances are dispatched by the    via the `dialog` event.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ElementHandle",
      "constructors": [],
      "methods": [
        {
          "name": "ElementHandle.$",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            }
          ],
          "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
          "jsdoc": {
            "description": "Queries the current element for an element matching the given selector.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              }
            ],
            "returns": "A  | element handle  to the first element\r\nmatching the given selector. Otherwise, `null`.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.$$",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "options",
              "type": "QueryOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>[]>",
          "jsdoc": {
            "description": "Queries the current element for all elements matching the given selector.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              }
            ],
            "returns": "An array of  | element handles  that point to\r\nelements matching the given selector.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.$eval",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "Runs the given function on the first element matching the given selector in\r\nthe current element.\r\n\r\nIf the given function returns a promise, then this method will wait till\r\nthe promise resolves.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              },
              {
                "name": "pageFunction",
                "description": "- The function to be evaluated in this element's page's\r\ncontext. The first element matching the selector will be passed in as the\r\nfirst argument."
              },
              {
                "name": "args",
                "description": "- Additional arguments to pass to `pageFunction`."
              }
            ],
            "returns": "A promise to the result of the function.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.$$eval",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "Runs the given function on an array of elements matching the given selector\r\nin the current element.\r\n\r\nIf the given function returns a promise, then this method will wait till\r\nthe promise resolves.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              },
              {
                "name": "pageFunction",
                "description": "- The function to be evaluated in the element's page's\r\ncontext. An array of elements matching the given selector will be passed to\r\nthe function as its first argument."
              },
              {
                "name": "args",
                "description": "- Additional arguments to pass to `pageFunction`."
              }
            ],
            "returns": "A promise to the result of the function.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.waitForSelector",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitForSelectorOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
          "jsdoc": {
            "description": "Wait for an element matching the given selector to appear in the current\r\nelement.\r\n\r\nUnlike   , this method does not work across\r\nnavigations or if the element is detached from DOM.",
            "params": [
              {
                "name": "selector",
                "description": "- The selector to query and wait for."
              },
              {
                "name": "options",
                "description": "- Options for customizing waiting behavior."
              }
            ],
            "returns": "An element matching the given selector.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.isVisible",
          "parameters": [],
          "returnType": "Promise<boolean>",
          "jsdoc": {
            "description": "An element is considered to be visible if all of the following is\r\ntrue:\r\n\r\n- the element has\r\n   ://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle | computed styles .\r\n\r\n- the element has a non-empty\r\n   ://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect | bounding client rect .\r\n\r\n- the element's  ://developer.mozilla.org/en-US/docs/Web/CSS/visibility | visibility \r\n  is not `hidden` or `collapse`.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.isHidden",
          "parameters": [],
          "returnType": "Promise<boolean>",
          "jsdoc": {
            "description": "An element is considered to be hidden if at least one of the following is true:\r\n\r\n- the element has no\r\n   ://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle | computed styles .\r\n\r\n- the element has an empty\r\n   ://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect | bounding client rect .\r\n\r\n- the element's  ://developer.mozilla.org/en-US/docs/Web/CSS/visibility | visibility \r\n  is `hidden` or `collapse`.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.toElement",
          "parameters": [
            {
              "name": "tagName",
              "type": "K",
              "optional": false
            }
          ],
          "returnType": "Promise<HandleFor<ElementFor<K>>>",
          "jsdoc": {
            "description": "Converts the current handle to the given element type.",
            "params": [
              {
                "name": "tagName",
                "description": "- The tag name of the desired element type."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.contentFrame",
          "parameters": [],
          "returnType": "Promise<Frame>",
          "jsdoc": {
            "description": "Resolves the frame associated with the element, if any. Always exists for\r\nHTMLIFrameElements.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.contentFrame",
          "parameters": [],
          "returnType": "Promise<Frame>",
          "jsdoc": {
            "description": "Resolves the frame associated with the element, if any. Always exists for\r\nHTMLIFrameElements.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.clickablePoint",
          "parameters": [
            {
              "name": "offset",
              "type": "Offset",
              "optional": true
            }
          ],
          "returnType": "Promise<Point>",
          "jsdoc": {
            "description": "Returns the middle point within an element unless a specific offset is provided.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.hover",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "This method scrolls element into view if needed, and then\r\nuses    to hover over the center of the element.\r\nIf the element is detached from DOM, the method throws an error.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.click",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<ClickOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "This method scrolls element into view if needed, and then\r\nuses    to click in the center of the element.\r\nIf the element is detached from DOM, the method throws an error.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.drag",
          "parameters": [
            {
              "name": "target",
              "type": "Point | ElementHandle<Element>",
              "optional": false
            }
          ],
          "returnType": "Promise<void | DragData>",
          "jsdoc": {
            "description": "Drags an element over the given element or point.",
            "params": [],
            "returns": "DEPRECATED. When drag interception is enabled, the drag payload is\r\nreturned.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.dragEnter",
          "parameters": [
            {
              "name": "data",
              "type": "DragData",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "ElementHandle.dragOver",
          "parameters": [
            {
              "name": "data",
              "type": "DragData",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "ElementHandle.drop",
          "parameters": [
            {
              "name": "element",
              "type": "ElementHandle<Element>",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Drops the given element onto the current one.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.drop",
          "parameters": [
            {
              "name": "data",
              "type": "DragData",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Drops the given element onto the current one.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.dragAndDrop",
          "parameters": [
            {
              "name": "target",
              "type": "ElementHandle<Node>",
              "optional": false
            },
            {
              "name": "options",
              "type": "{ delay: number; }",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "ElementHandle.select",
          "parameters": [
            {
              "name": "values",
              "type": "string[]",
              "optional": false
            }
          ],
          "returnType": "Promise<string[]>",
          "jsdoc": {
            "description": "Triggers a `change` and `input` event once all the provided options have been\r\nselected. If there's no `<select>` element matching `selector`, the method\r\nthrows an error.",
            "params": [
              {
                "name": "values",
                "description": "- Values of options to select. If the `<select>` has the\r\n`multiple` attribute, all values are considered, otherwise only the first\r\none is taken into account."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.uploadFile",
          "parameters": [
            {
              "name": "paths",
              "type": "string[]",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Sets the value of an\r\n ://developer.mozilla.org/en-US/docs/Web/HTML/Element/input | input element \r\nto the given file paths.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.tap",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "This method scrolls element into view if needed, and then uses\r\n   to tap in the center of the element.\r\nIf the element is detached from DOM, the method throws an error.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.touchStart",
          "parameters": [],
          "returnType": "Promise<TouchHandle>",
          "jsdoc": {
            "description": "This method scrolls the element into view if needed, and then\r\nstarts a touch in the center of the element.",
            "params": [],
            "returns": "A    representing the touch that was started",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.touchMove",
          "parameters": [
            {
              "name": "touch",
              "type": "TouchHandle",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "This method scrolls the element into view if needed, and then\r\nmoves the touch to the center of the element.",
            "params": [
              {
                "name": "touch",
                "description": "- An optional   . If provided, this touch\r\nwill be moved. If not provided, the first active touch will be moved."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.touchEnd",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": null
        },
        {
          "name": "ElementHandle.focus",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Calls  ://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus | focus  on the element.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.type",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<KeyboardTypeOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Focuses the element, and then sends a `keydown`, `keypress`/`input`, and\r\n`keyup` event for each character in the text.\r\n\r\nTo press a special key, like `Control` or `ArrowDown`,\r\nuse   .",
            "params": [
              {
                "name": "options",
                "description": "- Delay in milliseconds. Defaults to 0."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.press",
          "parameters": [
            {
              "name": "key",
              "type": "KeyInput",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<KeyPressOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Focuses the element, and then uses    and   .",
            "params": [
              {
                "name": "key",
                "description": "- Name of key to press, such as `ArrowLeft`.\r\nSee    for a list of all key names."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.boundingBox",
          "parameters": [],
          "returnType": "Promise<BoundingBox>",
          "jsdoc": {
            "description": "This method returns the bounding box of the element (relative to the main frame),\r\nor `null` if the element is  ://drafts.csswg.org/css-display-4/#box-generation | not part of the layout \r\n(example: `display: none`).",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.boxModel",
          "parameters": [],
          "returnType": "Promise<BoxModel>",
          "jsdoc": {
            "description": "This method returns boxes of the element,\r\nor `null` if the element is  ://drafts.csswg.org/css-display-4/#box-generation | not part of the layout \r\n(example: `display: none`).",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.screenshot",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<ScreenshotOptions> & { encoding: \"base64\"; }",
              "optional": false
            }
          ],
          "returnType": "Promise<string>",
          "jsdoc": {
            "description": "This method scrolls element into view if needed, and then uses\r\n (screenshot:2)   to take a screenshot of the element.\r\nIf the element is detached from DOM, the method throws an error.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.screenshot",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<ScreenshotOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
          "jsdoc": {
            "description": "This method scrolls element into view if needed, and then uses\r\n (screenshot:2)   to take a screenshot of the element.\r\nIf the element is detached from DOM, the method throws an error.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.isIntersectingViewport",
          "parameters": [
            {
              "name": "options",
              "type": "{ threshold?: number; }",
              "optional": true
            }
          ],
          "returnType": "Promise<boolean>",
          "jsdoc": {
            "description": "Resolves to true if the element is visible in the current viewport. If an\r\nelement is an SVG, we check if the svg owner element is in the viewport\r\ninstead. See https://crbug.com/963246.",
            "params": [
              {
                "name": "options",
                "description": "- Threshold for the intersection between 0 (no intersection) and 1\r\n(full intersection). Defaults to 1."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.scrollIntoView",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Scrolls the element into view using either the automation protocol client\r\nor by calling element.scrollIntoView.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.autofill",
          "parameters": [
            {
              "name": "data",
              "type": "AutofillData",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "If the element is a form input, you can use   \r\nto test if the form is compatible with the browser's autofill\r\nimplementation. Throws an error if the form cannot be autofilled.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.backendNodeId",
          "parameters": [],
          "returnType": "Promise<number>",
          "jsdoc": {
            "description": "When connected using Chrome DevTools Protocol, it returns a\r\nDOM.BackendNodeId for the element.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.evaluate",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "Evaluates the given function with the current handle as its first argument.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.evaluateHandle",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
          "jsdoc": {
            "description": "Evaluates the given function with the current handle as its first argument.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.getProperty",
          "parameters": [
            {
              "name": "propertyName",
              "type": "HandleOr<K>",
              "optional": false
            }
          ],
          "returnType": "Promise<HandleFor<ElementType[K]>>",
          "jsdoc": {
            "description": "Fetches a single property from the referenced object.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.getProperty",
          "parameters": [
            {
              "name": "propertyName",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<JSHandle<unknown>>",
          "jsdoc": {
            "description": "Fetches a single property from the referenced object.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.getProperties",
          "parameters": [],
          "returnType": "Promise<Map<string, JSHandle<unknown>>>",
          "jsdoc": {
            "description": "Gets a map of handles representing the properties of the current handle.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.jsonValue",
          "parameters": [],
          "returnType": "Promise<ElementType>",
          "jsdoc": {
            "description": "A vanilla object representing the serializable portions of the\r\nreferenced object.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.asElement",
          "parameters": [],
          "returnType": "ElementHandle<Node>",
          "jsdoc": {
            "description": "Either `null` or the handle itself if the handle is an\r\ninstance of   .",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.dispose",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Releases the object referenced by the handle for garbage collection.",
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.toString",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "Returns a string representation of the JSHandle.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ElementHandle.remoteObject",
          "parameters": [],
          "returnType": "RemoteObject",
          "jsdoc": {
            "description": "Provides access to the\r\n ://chromedevtools.github.io/devtools-protocol/tot/Runtime/#type-RemoteObject | Protocol.Runtime.RemoteObject \r\nbacking this handle.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "frame",
          "type": "Frame",
          "optional": false
        },
        {
          "name": "move",
          "type": "() => ElementHandle<ElementType>",
          "optional": false
        },
        {
          "name": "_",
          "type": "ElementType",
          "optional": true
        }
      ],
      "extends": "JSHandle<ElementType>",
      "implements": [],
      "jsdoc": {
        "description": "ElementHandle represents an in-page DOM element.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "EventEmitter",
      "constructors": [],
      "methods": [
        {
          "name": "EventEmitter.on",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<Events>[Key]>",
              "optional": false
            }
          ],
          "returnType": "EventEmitter<Events>",
          "jsdoc": {
            "description": "Bind an event listener to fire when an event occurs.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to listen to. Can be a string or symbol."
              },
              {
                "name": "handler",
                "description": "- the function to be called when the event occurs."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "EventEmitter.off",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<Events>[Key]>",
              "optional": true
            }
          ],
          "returnType": "EventEmitter<Events>",
          "jsdoc": {
            "description": "Remove an event listener from firing.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to stop listening to."
              },
              {
                "name": "handler",
                "description": "- the function that should be removed."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "EventEmitter.emit",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "event",
              "type": "EventsWithWildcard<Events>[Key]",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Emit an event and call any associated listeners.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to emit"
              },
              {
                "name": "eventData",
                "description": "- any data you'd like to emit with the event"
              }
            ],
            "returns": "`true` if there are any listeners, `false` if there are not.",
            "deprecated": false
          }
        },
        {
          "name": "EventEmitter.once",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<Events>[Key]>",
              "optional": false
            }
          ],
          "returnType": "EventEmitter<Events>",
          "jsdoc": {
            "description": "Like `on` but the listener will only be fired once and then it will be removed.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to listen to"
              },
              {
                "name": "handler",
                "description": "- the handler function to run when the event occurs"
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "EventEmitter.listenerCount",
          "parameters": [
            {
              "name": "type",
              "type": "keyof Events | \"*\"",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Gets the number of listeners for a given event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to get the listener count for"
              }
            ],
            "returns": "the number of listeners bound to the given event",
            "deprecated": false
          }
        },
        {
          "name": "EventEmitter.removeAllListeners",
          "parameters": [
            {
              "name": "type",
              "type": "keyof Events | \"*\"",
              "optional": true
            }
          ],
          "returnType": "EventEmitter<Events>",
          "jsdoc": {
            "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to remove listeners for."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [
        "CommonEventEmitter<EventsWithWildcard<Events>>"
      ],
      "jsdoc": {
        "description": "The EventEmitter class that many Puppeteer classes extend.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ExtensionTransport",
      "constructors": [],
      "methods": [
        {
          "name": "ExtensionTransport.send",
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "ExtensionTransport.close",
          "parameters": [],
          "returnType": "void",
          "jsdoc": null
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "onmessage",
          "type": "(message: string) => void",
          "optional": true
        },
        {
          "name": "onclose",
          "type": "() => void",
          "optional": true
        }
      ],
      "implements": [
        "ConnectionTransport"
      ],
      "jsdoc": {
        "description": "Experimental ExtensionTransport allows establishing a connection via\r\nchrome.debugger API if Puppeteer runs in an extension. Since Chrome\r\nDevTools Protocol is restricted for extensions, the transport\r\nimplements missing commands and events.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "FileChooser",
      "constructors": [],
      "methods": [
        {
          "name": "FileChooser.isMultiple",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Whether file chooser allow for\r\n ://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple | multiple \r\nfile selection.",
            "deprecated": false
          }
        },
        {
          "name": "FileChooser.accept",
          "parameters": [
            {
              "name": "paths",
              "type": "string[]",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Accept the file chooser request with the given file paths.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "FileChooser.cancel",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Closes the file chooser without selecting any files.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "File choosers let you react to the page requesting for a file.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Frame",
      "constructors": [],
      "methods": [
        {
          "name": "Frame.page",
          "parameters": [],
          "returnType": "Page",
          "jsdoc": {
            "description": "The page associated with the frame.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.goto",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "GoToOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<HTTPResponse>",
          "jsdoc": {
            "description": "Navigates the frame or page to the given `url`.",
            "params": [
              {
                "name": "url",
                "description": "- URL to navigate the frame to. The URL should include scheme,\r\ne.g. `https://`"
              },
              {
                "name": "options",
                "description": "- Options to configure waiting behavior."
              }
            ],
            "returns": "A promise which resolves to the main resource response. In case of\r\nmultiple redirects, the navigation will resolve with the response of the\r\nlast redirect.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.waitForNavigation",
          "parameters": [
            {
              "name": "options",
              "type": "WaitForOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<HTTPResponse>",
          "jsdoc": {
            "description": "Waits for the frame to navigate. It is useful for when you run code which\r\nwill indirectly cause the frame to navigate.\r\n\r\nUsage of the\r\n ://developer.mozilla.org/en-US/docs/Web/API/History_API | History API \r\nto change the URL is considered a navigation.",
            "params": [
              {
                "name": "options",
                "description": "- Options to configure waiting behavior."
              }
            ],
            "returns": "A promise which resolves to the main resource response.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.frameElement",
          "parameters": [],
          "returnType": "Promise<ElementHandle<HTMLIFrameElement>>",
          "jsdoc": {
            "description": "",
            "params": [],
            "returns": "The frame element associated with this frame (if any).",
            "deprecated": false
          }
        },
        {
          "name": "Frame.evaluateHandle",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
          "jsdoc": {
            "description": "Behaves identically to    except it's run within\r\nthe context of this frame.\r\n\r\nSee    for details.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.evaluate",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "Behaves identically to    except it's run within\r\nthe context of this frame.\r\n\r\nSee    for details.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.locator",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            }
          ],
          "returnType": "Locator<ParseSelector<Selector, Element>>",
          "jsdoc": {
            "description": "Creates a locator for the provided selector. See    for\r\ndetails and supported actions.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Frame.locator",
          "parameters": [
            {
              "name": "func",
              "type": "() => Awaitable<Ret>",
              "optional": false
            }
          ],
          "returnType": "Locator<Ret>",
          "jsdoc": {
            "description": "Creates a locator for the provided selector. See    for\r\ndetails and supported actions.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Frame.$",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            }
          ],
          "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
          "jsdoc": {
            "description": "Queries the frame for an element matching the given selector.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              }
            ],
            "returns": "A  | element handle  to the first element\r\nmatching the given selector. Otherwise, `null`.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.$$",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "options",
              "type": "QueryOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>[]>",
          "jsdoc": {
            "description": "Queries the frame for all elements matching the given selector.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              }
            ],
            "returns": "An array of  | element handles  that point to\r\nelements matching the given selector.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.$eval",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "Runs the given function on the first element matching the given selector in\r\nthe frame.\r\n\r\nIf the given function returns a promise, then this method will wait till\r\nthe promise resolves.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              },
              {
                "name": "pageFunction",
                "description": "- The function to be evaluated in the frame's context.\r\nThe first element matching the selector will be passed to the function as\r\nits first argument."
              },
              {
                "name": "args",
                "description": "- Additional arguments to pass to `pageFunction`."
              }
            ],
            "returns": "A promise to the result of the function.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.$$eval",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "Runs the given function on an array of elements matching the given selector\r\nin the frame.\r\n\r\nIf the given function returns a promise, then this method will wait till\r\nthe promise resolves.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              },
              {
                "name": "pageFunction",
                "description": "- The function to be evaluated in the frame's context.\r\nAn array of elements matching the given selector will be passed to the\r\nfunction as its first argument."
              },
              {
                "name": "args",
                "description": "- Additional arguments to pass to `pageFunction`."
              }
            ],
            "returns": "A promise to the result of the function.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.waitForSelector",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitForSelectorOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
          "jsdoc": {
            "description": "Waits for an element matching the given selector to appear in the frame.\r\n\r\nThis method works across navigations.",
            "params": [
              {
                "name": "selector",
                "description": "- The selector to query and wait for."
              },
              {
                "name": "options",
                "description": "- Options for customizing waiting behavior."
              }
            ],
            "returns": "An element matching the given selector.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.waitForFunction",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "options",
              "type": "FrameWaitForFunctionOptions",
              "optional": true
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "pageFunction",
                "description": "- the function to evaluate in the frame context."
              },
              {
                "name": "options",
                "description": "- options to configure the polling method and timeout."
              },
              {
                "name": "args",
                "description": "- arguments to pass to the `pageFunction`."
              }
            ],
            "returns": "the promise which resolve when the `pageFunction` returns a truthy value.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.content",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": {
            "description": "The full HTML contents of the frame, including the DOCTYPE.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.setContent",
          "parameters": [
            {
              "name": "html",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitForOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Set the content of the frame.",
            "params": [
              {
                "name": "html",
                "description": "- HTML markup to assign to the page."
              },
              {
                "name": "options",
                "description": "- Options to configure how long before timing out and at\r\nwhat point to consider the content setting successful."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Frame.name",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The frame's `name` attribute as specified in the tag.",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "Frame.url",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The frame's URL.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.parentFrame",
          "parameters": [],
          "returnType": "Frame",
          "jsdoc": {
            "description": "The parent frame, if any. Detached and main frames return `null`.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.childFrames",
          "parameters": [],
          "returnType": "Frame[]",
          "jsdoc": {
            "description": "An array of child frames.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.isDetached",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Is`true` if the frame has been detached. Otherwise, `false`.",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "Frame.addScriptTag",
          "parameters": [
            {
              "name": "options",
              "type": "FrameAddScriptTagOptions",
              "optional": false
            }
          ],
          "returnType": "Promise<ElementHandle<HTMLScriptElement>>",
          "jsdoc": {
            "description": "Adds a `<script>` tag into the page with the desired url or content.",
            "params": [
              {
                "name": "options",
                "description": "- Options for the script."
              }
            ],
            "returns": "An  | element handle  to the injected\r\n`<script>` element.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.addStyleTag",
          "parameters": [
            {
              "name": "options",
              "type": "Omit<FrameAddStyleTagOptions, \"url\">",
              "optional": false
            }
          ],
          "returnType": "Promise<ElementHandle<HTMLStyleElement>>",
          "jsdoc": {
            "description": "Adds a `HTMLStyleElement` into the frame with the desired URL",
            "params": [],
            "returns": "An  | element handle  to the loaded `<style>`\r\nelement.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.addStyleTag",
          "parameters": [
            {
              "name": "options",
              "type": "FrameAddStyleTagOptions",
              "optional": false
            }
          ],
          "returnType": "Promise<ElementHandle<HTMLLinkElement>>",
          "jsdoc": {
            "description": "Adds a `HTMLStyleElement` into the frame with the desired URL",
            "params": [],
            "returns": "An  | element handle  to the loaded `<style>`\r\nelement.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.click",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<ClickOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Clicks the first element found that matches `selector`.",
            "params": [
              {
                "name": "selector",
                "description": "- The selector to query for."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Frame.focus",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Focuses the first element that matches the `selector`.",
            "params": [
              {
                "name": "selector",
                "description": "- The selector to query for."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Frame.hover",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Hovers the pointer over the center of the first element that matches the\r\n`selector`.",
            "params": [
              {
                "name": "selector",
                "description": "- The selector to query for."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Frame.select",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            },
            {
              "name": "values",
              "type": "string[]",
              "optional": false
            }
          ],
          "returnType": "Promise<string[]>",
          "jsdoc": {
            "description": "Selects a set of value on the first `<select>` element that matches the\r\n`selector`.",
            "params": [
              {
                "name": "selector",
                "description": "- The selector to query for."
              },
              {
                "name": "values",
                "description": "- The array of values to select. If the `<select>` has the\r\n`multiple` attribute, all values are considered, otherwise only the first\r\none is taken into account."
              }
            ],
            "returns": "the list of values that were successfully selected.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.tap",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Taps the first element that matches the `selector`.",
            "params": [
              {
                "name": "selector",
                "description": "- The selector to query for."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Frame.type",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            },
            {
              "name": "text",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<KeyboardTypeOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Sends a `keydown`, `keypress`/`input`, and `keyup` event for each character\r\nin the text.",
            "params": [
              {
                "name": "selector",
                "description": "- the selector for the element to type into. If there are\r\nmultiple the first will be used."
              },
              {
                "name": "text",
                "description": "- text to type into the element"
              },
              {
                "name": "options",
                "description": "- takes one option, `delay`, which sets the time to wait\r\nbetween key presses in milliseconds. Defaults to `0`."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Frame.title",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": {
            "description": "The frame's title.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.on",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<FrameEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "Frame",
          "jsdoc": {
            "description": "Bind an event listener to fire when an event occurs.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to listen to. Can be a string or symbol."
              },
              {
                "name": "handler",
                "description": "- the function to be called when the event occurs."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.off",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<FrameEvents>[Key]>",
              "optional": true
            }
          ],
          "returnType": "Frame",
          "jsdoc": {
            "description": "Remove an event listener from firing.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to stop listening to."
              },
              {
                "name": "handler",
                "description": "- the function that should be removed."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.emit",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "event",
              "type": "EventsWithWildcard<FrameEvents>[Key]",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Emit an event and call any associated listeners.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to emit"
              },
              {
                "name": "eventData",
                "description": "- any data you'd like to emit with the event"
              }
            ],
            "returns": "`true` if there are any listeners, `false` if there are not.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.once",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<FrameEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "Frame",
          "jsdoc": {
            "description": "Like `on` but the listener will only be fired once and then it will be removed.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to listen to"
              },
              {
                "name": "handler",
                "description": "- the handler function to run when the event occurs"
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Frame.listenerCount",
          "parameters": [
            {
              "name": "type",
              "type": "keyof FrameEvents",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Gets the number of listeners for a given event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to get the listener count for"
              }
            ],
            "returns": "the number of listeners bound to the given event",
            "deprecated": false
          }
        },
        {
          "name": "Frame.removeAllListeners",
          "parameters": [
            {
              "name": "type",
              "type": "keyof FrameEvents",
              "optional": true
            }
          ],
          "returnType": "Frame",
          "jsdoc": {
            "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to remove listeners for."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "detached",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "EventEmitter<FrameEvents>",
      "implements": [],
      "jsdoc": {
        "description": "Represents a DOM frame.\r\n\r\nTo understand frames, you can think of frames as `<iframe>` elements. Just\r\nlike iframes, frames can be nested, and when JavaScript is executed in a\r\nframe, the JavaScript does not effect frames inside the ambient frame the\r\nJavaScript executes in.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "HTTPRequest",
      "constructors": [],
      "methods": [
        {
          "name": "HTTPRequest.url",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The URL of the request",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.continueRequestOverrides",
          "parameters": [],
          "returnType": "ContinueRequestOverrides",
          "jsdoc": {
            "description": "The `ContinueRequestOverrides` that will be used\r\nif the interception is allowed to continue (ie, `abort()` and\r\n`respond()` aren't called).",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.responseForRequest",
          "parameters": [],
          "returnType": "Partial<ResponseForRequest>",
          "jsdoc": {
            "description": "The `ResponseForRequest` that gets used if the\r\ninterception is allowed to respond (ie, `abort()` is not called).",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.abortErrorReason",
          "parameters": [],
          "returnType": "ErrorReason",
          "jsdoc": {
            "description": "The most recent reason for aborting the request",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.interceptResolutionState",
          "parameters": [],
          "returnType": "InterceptResolutionState",
          "jsdoc": {
            "description": "An InterceptResolutionState object describing the current resolution\r\naction and priority.\r\n\r\nInterceptResolutionState contains:\r\naction: InterceptResolutionAction\r\npriority?: number\r\n\r\nInterceptResolutionAction is one of: `abort`, `respond`, `continue`,\r\n`disabled`, `none`, or `already-handled`.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.isInterceptResolutionHandled",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Is `true` if the intercept resolution has already been handled,\r\n`false` otherwise.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.enqueueInterceptAction",
          "parameters": [
            {
              "name": "pendingHandler",
              "type": "() => void | PromiseLike<unknown>",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Adds an async request handler to the processing queue.\r\nDeferred handlers are not guaranteed to execute in any particular order,\r\nbut they are guaranteed to resolve before the request interception\r\nis finalized.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.finalizeInterceptions",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Awaits pending interception handlers and then decides how to fulfill\r\nthe request interception.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.resourceType",
          "parameters": [],
          "returnType": "\"script\" | \"image\" | \"font\" | \"document\" | \"stylesheet\" | \"media\" | \"texttrack\" | \"xhr\" | \"fetch\" | \"prefetch\" | \"eventsource\" | \"websocket\" | \"manifest\" | \"signedexchange\" | \"ping\" | \"cspviolationreport\" | \"preflight\" | \"other\"",
          "jsdoc": {
            "description": "Contains the request's resource type as it was perceived by the rendering\r\nengine.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.method",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The method used (`GET`, `POST`, etc.)",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.postData",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The request's post body, if any.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.hasPostData",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "True when the request has POST data. Note that   \r\nmight still be undefined when this flag is true when the data is too long\r\nor not readily available in the decoded form. In that case, use\r\n  .",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.fetchPostData",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": {
            "description": "Fetches the POST data for the request from the browser.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.headers",
          "parameters": [],
          "returnType": "Record<string, string>",
          "jsdoc": {
            "description": "An object with HTTP headers associated with the request. All\r\nheader names are lower-case.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.response",
          "parameters": [],
          "returnType": "HTTPResponse",
          "jsdoc": {
            "description": "A matching `HTTPResponse` object, or null if the response has not\r\nbeen received yet.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.frame",
          "parameters": [],
          "returnType": "Frame",
          "jsdoc": {
            "description": "The frame that initiated the request, or null if navigating to\r\nerror pages.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.isNavigationRequest",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "True if the request is the driver of the current frame's navigation.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.initiator",
          "parameters": [],
          "returnType": "Initiator",
          "jsdoc": {
            "description": "The initiator of the request.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.redirectChain",
          "parameters": [],
          "returnType": "HTTPRequest[]",
          "jsdoc": {
            "description": "A `redirectChain` is a chain of requests initiated to fetch a resource.",
            "params": [],
            "returns": "the chain of requests - if a server responds with at least a\r\nsingle redirect, this chain will contain all requests that were redirected.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.failure",
          "parameters": [],
          "returnType": "{ errorText: string; }",
          "jsdoc": {
            "description": "Access information about the request's failure.",
            "params": [],
            "returns": "`null` unless the request failed. If the request fails this can\r\nreturn an object with `errorText` containing a human-readable error\r\nmessage, e.g. `net::ERR_FAILED`. It is not guaranteed that there will be\r\nfailure text if the request fails.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.continue",
          "parameters": [
            {
              "name": "overrides",
              "type": "ContinueRequestOverrides",
              "optional": true
            },
            {
              "name": "priority",
              "type": "number",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Continues request with optional request overrides.",
            "params": [
              {
                "name": "overrides",
                "description": "- optional overrides to apply to the request."
              },
              {
                "name": "priority",
                "description": "- If provided, intercept is resolved using cooperative\r\nhandling rules. Otherwise, intercept is resolved immediately."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.respond",
          "parameters": [
            {
              "name": "response",
              "type": "Partial<ResponseForRequest>",
              "optional": false
            },
            {
              "name": "priority",
              "type": "number",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Fulfills a request with the given response.",
            "params": [
              {
                "name": "response",
                "description": "- the response to fulfill the request with."
              },
              {
                "name": "priority",
                "description": "- If provided, intercept is resolved using\r\ncooperative handling rules. Otherwise, intercept is resolved\r\nimmediately."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "HTTPRequest.abort",
          "parameters": [
            {
              "name": "errorCode",
              "type": "ErrorCode",
              "optional": true
            },
            {
              "name": "priority",
              "type": "number",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Aborts a request.",
            "params": [
              {
                "name": "errorCode",
                "description": "- optional error code to provide."
              },
              {
                "name": "priority",
                "description": "- If provided, intercept is resolved using\r\ncooperative handling rules. Otherwise, intercept is resolved\r\nimmediately."
              }
            ],
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "client",
          "type": "CDPSession",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "Represents an HTTP request sent by a page.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "HTTPResponse",
      "constructors": [],
      "methods": [
        {
          "name": "HTTPResponse.remoteAddress",
          "parameters": [],
          "returnType": "RemoteAddress",
          "jsdoc": {
            "description": "The IP address and port number used to connect to the remote\r\nserver.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.url",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The URL of the response.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.ok",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "True if the response was successful (status in the range 200-299).",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.status",
          "parameters": [],
          "returnType": "number",
          "jsdoc": {
            "description": "The status code of the response (e.g., 200 for a success).",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.statusText",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The status text of the response (e.g. usually an \"OK\" for a\r\nsuccess).",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.headers",
          "parameters": [],
          "returnType": "Record<string, string>",
          "jsdoc": {
            "description": "An object with HTTP headers associated with the response. All\r\nheader names are lower-case.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.securityDetails",
          "parameters": [],
          "returnType": "SecurityDetails",
          "jsdoc": {
            "description": "   if the response was received over the\r\nsecure connection, or `null` otherwise.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.timing",
          "parameters": [],
          "returnType": "ResourceTiming",
          "jsdoc": {
            "description": "Timing information related to the response.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.content",
          "parameters": [],
          "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
          "jsdoc": {
            "description": "Promise which resolves to a buffer with response body.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.buffer",
          "parameters": [],
          "returnType": "Promise<Buffer<ArrayBufferLike>>",
          "jsdoc": {
            "description": "{@inheritDoc HTTPResponse.content}",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.text",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": {
            "description": "Promise which resolves to a text (utf8) representation of response body.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.json",
          "parameters": [],
          "returnType": "Promise<any>",
          "jsdoc": {
            "description": "Promise which resolves to a JSON representation of response body.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.request",
          "parameters": [],
          "returnType": "HTTPRequest",
          "jsdoc": {
            "description": "A matching    object.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.fromCache",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "True if the response was served from either the browser's disk\r\ncache or memory cache.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.fromServiceWorker",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "True if the response was served by a service worker.",
            "deprecated": false
          }
        },
        {
          "name": "HTTPResponse.frame",
          "parameters": [],
          "returnType": "Frame",
          "jsdoc": {
            "description": "A    that initiated this response, or `null` if\r\nnavigating to error pages.",
            "deprecated": false
          }
        }
      ],
      "properties": [],
      "implements": [],
      "jsdoc": {
        "description": "The HTTPResponse class represents responses which are received by the\r\n   class.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "JSCoverage",
      "constructors": [],
      "methods": [
        {
          "name": "JSCoverage.start",
          "parameters": [
            {
              "name": "options",
              "type": "{ resetOnNavigation?: boolean; reportAnonymousScripts?: boolean; includeRawScriptCoverage?: boolean; useBlockCoverage?: boolean; }",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": null
        },
        {
          "name": "JSCoverage.stop",
          "parameters": [],
          "returnType": "Promise<JSCoverageEntry[]>",
          "jsdoc": null
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "JSHandle",
      "constructors": [],
      "methods": [
        {
          "name": "JSHandle.evaluate",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "Evaluates the given function with the current handle as its first argument.",
            "deprecated": false
          }
        },
        {
          "name": "JSHandle.evaluateHandle",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
          "jsdoc": {
            "description": "Evaluates the given function with the current handle as its first argument.",
            "deprecated": false
          }
        },
        {
          "name": "JSHandle.getProperty",
          "parameters": [
            {
              "name": "propertyName",
              "type": "HandleOr<K>",
              "optional": false
            }
          ],
          "returnType": "Promise<HandleFor<T[K]>>",
          "jsdoc": {
            "description": "Fetches a single property from the referenced object.",
            "deprecated": false
          }
        },
        {
          "name": "JSHandle.getProperty",
          "parameters": [
            {
              "name": "propertyName",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<JSHandle<unknown>>",
          "jsdoc": {
            "description": "Fetches a single property from the referenced object.",
            "deprecated": false
          }
        },
        {
          "name": "JSHandle.getProperties",
          "parameters": [],
          "returnType": "Promise<Map<string, JSHandle<unknown>>>",
          "jsdoc": {
            "description": "Gets a map of handles representing the properties of the current handle.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "JSHandle.jsonValue",
          "parameters": [],
          "returnType": "Promise<T>",
          "jsdoc": {
            "description": "A vanilla object representing the serializable portions of the\r\nreferenced object.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "JSHandle.asElement",
          "parameters": [],
          "returnType": "ElementHandle<Node>",
          "jsdoc": {
            "description": "Either `null` or the handle itself if the handle is an\r\ninstance of   .",
            "deprecated": false
          }
        },
        {
          "name": "JSHandle.dispose",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Releases the object referenced by the handle for garbage collection.",
            "deprecated": false
          }
        },
        {
          "name": "JSHandle.toString",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "Returns a string representation of the JSHandle.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "JSHandle.remoteObject",
          "parameters": [],
          "returnType": "RemoteObject",
          "jsdoc": {
            "description": "Provides access to the\r\n ://chromedevtools.github.io/devtools-protocol/tot/Runtime/#type-RemoteObject | Protocol.Runtime.RemoteObject \r\nbacking this handle.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "move",
          "type": "() => JSHandle<T>",
          "optional": false
        },
        {
          "name": "_",
          "type": "T",
          "optional": true
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "Represents a reference to a JavaScript object. Instances can be created using\r\n  .\r\n\r\nHandles prevent the referenced JavaScript object from being garbage-collected\r\nunless the handle is purposely  | disposed . JSHandles\r\nare auto-disposed when their associated frame is navigated away or the parent\r\ncontext gets destroyed.\r\n\r\nHandles can be used as arguments for any evaluation function such as\r\n  ,   , and   .\r\nThey are resolved to their referenced object.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Keyboard",
      "constructors": [],
      "methods": [
        {
          "name": "Keyboard.down",
          "parameters": [
            {
              "name": "key",
              "type": "KeyInput",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<KeyDownOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Dispatches a `keydown` event.",
            "params": [
              {
                "name": "key",
                "description": "- Name of key to press, such as `ArrowLeft`.\r\nSee    for a list of all key names."
              },
              {
                "name": "options",
                "description": "- An object of options. Accepts text which, if specified,\r\ngenerates an input event with this text. Accepts commands which, if specified,\r\nis the commands of keyboard shortcuts,\r\nsee  ://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code  for valid command names."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Keyboard.up",
          "parameters": [
            {
              "name": "key",
              "type": "KeyInput",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Dispatches a `keyup` event.",
            "params": [
              {
                "name": "key",
                "description": "- Name of key to release, such as `ArrowLeft`.\r\nSee  | KeyInput \r\nfor a list of all key names."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Keyboard.sendCharacter",
          "parameters": [
            {
              "name": "char",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Dispatches a `keypress` and `input` event.\r\nThis does not send a `keydown` or `keyup` event.",
            "params": [
              {
                "name": "char",
                "description": "- Character to send into the page."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Keyboard.type",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<KeyboardTypeOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Sends a `keydown`, `keypress`/`input`,\r\nand `keyup` event for each character in the text.",
            "params": [
              {
                "name": "text",
                "description": "- A text to type into a focused element."
              },
              {
                "name": "options",
                "description": "- An object of options. Accepts delay which,\r\nif specified, is the time to wait between `keydown` and `keyup` in milliseconds.\r\nDefaults to 0."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Keyboard.press",
          "parameters": [
            {
              "name": "key",
              "type": "KeyInput",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<KeyPressOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Shortcut for   \r\nand   .",
            "params": [
              {
                "name": "key",
                "description": "- Name of key to press, such as `ArrowLeft`.\r\nSee    for a list of all key names."
              },
              {
                "name": "options",
                "description": "- An object of options. Accepts text which, if specified,\r\ngenerates an input event with this text. Accepts delay which,\r\nif specified, is the time to wait between `keydown` and `keyup` in milliseconds.\r\nDefaults to 0. Accepts commands which, if specified,\r\nis the commands of keyboard shortcuts,\r\nsee  ://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h | Chromium Source Code  for valid command names."
              }
            ],
            "deprecated": false
          }
        }
      ],
      "properties": [],
      "implements": [],
      "jsdoc": {
        "description": "Keyboard provides an api for managing a virtual keyboard.\r\nThe high level api is  \"type\" ,\r\nwhich takes raw characters and generates proper keydown, keypress/input,\r\nand keyup events on your page.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Locator",
      "constructors": [],
      "methods": [
        {
          "name": "Locator.setTimeout",
          "parameters": [
            {
              "name": "timeout",
              "type": "number",
              "optional": false
            }
          ],
          "returnType": "Locator<T>",
          "jsdoc": {
            "description": "Creates a new locator instance by cloning the current locator and setting\r\nthe total timeout for the locator actions.\r\n\r\nPass `0` to disable timeout.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Locator.setVisibility",
          "parameters": [
            {
              "name": "visibility",
              "type": "VisibilityOption",
              "optional": false
            }
          ],
          "returnType": "Locator<NodeType>",
          "jsdoc": {
            "description": "Creates a new locator instance by cloning the current locator with the\r\nvisibility property changed to the specified value.",
            "deprecated": false
          }
        },
        {
          "name": "Locator.setWaitForEnabled",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "optional": false
            }
          ],
          "returnType": "Locator<NodeType>",
          "jsdoc": {
            "description": "Creates a new locator instance by cloning the current locator and\r\nspecifying whether to wait for input elements to become enabled before the\r\naction. Applicable to `click` and `fill` actions.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Locator.setEnsureElementIsInTheViewport",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "optional": false
            }
          ],
          "returnType": "Locator<ElementType>",
          "jsdoc": {
            "description": "Creates a new locator instance by cloning the current locator and\r\nspecifying whether the locator should scroll the element into viewport if\r\nit is not in the viewport already.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Locator.setWaitForStableBoundingBox",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "optional": false
            }
          ],
          "returnType": "Locator<ElementType>",
          "jsdoc": {
            "description": "Creates a new locator instance by cloning the current locator and\r\nspecifying whether the locator has to wait for the element's bounding box\r\nto be same between two consecutive animation frames.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Locator.clone",
          "parameters": [],
          "returnType": "Locator<T>",
          "jsdoc": {
            "description": "Clones the locator.",
            "deprecated": false
          }
        },
        {
          "name": "Locator.waitHandle",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<ActionOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<HandleFor<T>>",
          "jsdoc": {
            "description": "Waits for the locator to get a handle from the page.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Locator.wait",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<ActionOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<T>",
          "jsdoc": {
            "description": "Waits for the locator to get the serialized value from the page.\r\n\r\nNote this requires the value to be JSON-serializable.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Locator.map",
          "parameters": [
            {
              "name": "mapper",
              "type": "Mapper<T, To>",
              "optional": false
            }
          ],
          "returnType": "Locator<To>",
          "jsdoc": {
            "description": "Maps the locator using the provided mapper.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Locator.filter",
          "parameters": [
            {
              "name": "predicate",
              "type": "Predicate<T, S>",
              "optional": false
            }
          ],
          "returnType": "Locator<S>",
          "jsdoc": {
            "description": "Creates an expectation that is evaluated against located values.\r\n\r\nIf the expectations do not match, then the locator will retry.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Locator.click",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<LocatorClickOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Clicks the located element.",
            "deprecated": false
          }
        },
        {
          "name": "Locator.fill",
          "parameters": [
            {
              "name": "value",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<ActionOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Fills out the input identified by the locator using the provided value. The\r\ntype of the input is determined at runtime and the appropriate fill-out\r\nmethod is chosen based on the type. `contenteditable`, select, textarea and\r\ninput elements are supported.",
            "deprecated": false
          }
        },
        {
          "name": "Locator.hover",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<ActionOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Hovers over the located element.",
            "deprecated": false
          }
        },
        {
          "name": "Locator.scroll",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<LocatorScrollOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Scrolls the located element.",
            "deprecated": false
          }
        },
        {
          "name": "Locator.on",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<LocatorEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "Locator<T>",
          "jsdoc": {
            "description": "Bind an event listener to fire when an event occurs.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to listen to. Can be a string or symbol."
              },
              {
                "name": "handler",
                "description": "- the function to be called when the event occurs."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Locator.off",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<LocatorEvents>[Key]>",
              "optional": true
            }
          ],
          "returnType": "Locator<T>",
          "jsdoc": {
            "description": "Remove an event listener from firing.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to stop listening to."
              },
              {
                "name": "handler",
                "description": "- the function that should be removed."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Locator.emit",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "event",
              "type": "EventsWithWildcard<LocatorEvents>[Key]",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Emit an event and call any associated listeners.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to emit"
              },
              {
                "name": "eventData",
                "description": "- any data you'd like to emit with the event"
              }
            ],
            "returns": "`true` if there are any listeners, `false` if there are not.",
            "deprecated": false
          }
        },
        {
          "name": "Locator.once",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<LocatorEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "Locator<T>",
          "jsdoc": {
            "description": "Like `on` but the listener will only be fired once and then it will be removed.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to listen to"
              },
              {
                "name": "handler",
                "description": "- the handler function to run when the event occurs"
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Locator.listenerCount",
          "parameters": [
            {
              "name": "type",
              "type": "keyof LocatorEvents",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Gets the number of listeners for a given event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to get the listener count for"
              }
            ],
            "returns": "the number of listeners bound to the given event",
            "deprecated": false
          }
        },
        {
          "name": "Locator.removeAllListeners",
          "parameters": [
            {
              "name": "type",
              "type": "keyof LocatorEvents",
              "optional": true
            }
          ],
          "returnType": "Locator<T>",
          "jsdoc": {
            "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to remove listeners for."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "_",
          "type": "T",
          "optional": true
        },
        {
          "name": "timeout",
          "type": "number",
          "optional": false
        },
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "EventEmitter<LocatorEvents>",
      "implements": [],
      "jsdoc": {
        "description": "Locators describe a strategy of locating objects and performing an action on\r\nthem. If the action fails because the object is not ready for the action, the\r\nwhole operation is retried. Various preconditions for a successful action are\r\nchecked automatically.\r\n\r\nSee  ://pptr.dev/guides/page-interactions#locators  for details.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Mouse",
      "constructors": [],
      "methods": [
        {
          "name": "Mouse.reset",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Resets the mouse to the default state: No buttons pressed; position at\r\n(0,0).",
            "deprecated": false
          }
        },
        {
          "name": "Mouse.move",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "optional": false
            },
            {
              "name": "y",
              "type": "number",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<MouseMoveOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Moves the mouse to the given coordinate.",
            "params": [
              {
                "name": "x",
                "description": "- Horizontal position of the mouse."
              },
              {
                "name": "y",
                "description": "- Vertical position of the mouse."
              },
              {
                "name": "options",
                "description": "- Options to configure behavior."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Mouse.down",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<MouseOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Presses the mouse.",
            "params": [
              {
                "name": "options",
                "description": "- Options to configure behavior."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Mouse.up",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<MouseOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Releases the mouse.",
            "params": [
              {
                "name": "options",
                "description": "- Options to configure behavior."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Mouse.click",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "optional": false
            },
            {
              "name": "y",
              "type": "number",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<MouseClickOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.",
            "params": [
              {
                "name": "x",
                "description": "- Horizontal position of the mouse."
              },
              {
                "name": "y",
                "description": "- Vertical position of the mouse."
              },
              {
                "name": "options",
                "description": "- Options to configure behavior."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Mouse.wheel",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<MouseWheelOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Dispatches a `mousewheel` event.",
            "params": [
              {
                "name": "options",
                "description": "- Optional: `MouseWheelOptions`."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Mouse.drag",
          "parameters": [
            {
              "name": "start",
              "type": "Point",
              "optional": false
            },
            {
              "name": "target",
              "type": "Point",
              "optional": false
            }
          ],
          "returnType": "Promise<DragData>",
          "jsdoc": {
            "description": "Dispatches a `drag` event.",
            "params": [
              {
                "name": "start",
                "description": "- starting point for drag"
              },
              {
                "name": "target",
                "description": "- point to drag to"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Mouse.dragEnter",
          "parameters": [
            {
              "name": "target",
              "type": "Point",
              "optional": false
            },
            {
              "name": "data",
              "type": "DragData",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Dispatches a `dragenter` event.",
            "params": [
              {
                "name": "target",
                "description": "- point for emitting `dragenter` event"
              },
              {
                "name": "data",
                "description": "- drag data containing items and operations mask"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Mouse.dragOver",
          "parameters": [
            {
              "name": "target",
              "type": "Point",
              "optional": false
            },
            {
              "name": "data",
              "type": "DragData",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Dispatches a `dragover` event.",
            "params": [
              {
                "name": "target",
                "description": "- point for emitting `dragover` event"
              },
              {
                "name": "data",
                "description": "- drag data containing items and operations mask"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Mouse.drop",
          "parameters": [
            {
              "name": "target",
              "type": "Point",
              "optional": false
            },
            {
              "name": "data",
              "type": "DragData",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Performs a dragenter, dragover, and drop in sequence.",
            "params": [
              {
                "name": "target",
                "description": "- point to drop on"
              },
              {
                "name": "data",
                "description": "- drag data containing items and operations mask"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Mouse.dragAndDrop",
          "parameters": [
            {
              "name": "start",
              "type": "Point",
              "optional": false
            },
            {
              "name": "target",
              "type": "Point",
              "optional": false
            },
            {
              "name": "options",
              "type": "{ delay?: number; }",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Performs a drag, dragenter, dragover, and drop in sequence.",
            "params": [
              {
                "name": "start",
                "description": "- point to drag from"
              },
              {
                "name": "target",
                "description": "- point to drop on"
              },
              {
                "name": "options",
                "description": "- An object of options. Accepts delay which,\r\nif specified, is the time to wait between `dragover` and `drop` in milliseconds.\r\nDefaults to 0."
              }
            ],
            "deprecated": false
          }
        }
      ],
      "properties": [],
      "implements": [],
      "jsdoc": {
        "description": "The Mouse class operates in main-frame CSS pixels\r\nrelative to the top-left corner of the viewport.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Page",
      "constructors": [],
      "methods": [
        {
          "name": "Page.isServiceWorkerBypassed",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "`true` if the service worker are being bypassed, `false` otherwise.",
            "deprecated": false
          }
        },
        {
          "name": "Page.isDragInterceptionEnabled",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "`true` if drag events are being intercepted, `false` otherwise.",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "Page.isJavaScriptEnabled",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "`true` if the page has JavaScript enabled, `false` otherwise.",
            "deprecated": false
          }
        },
        {
          "name": "Page.waitForFileChooser",
          "parameters": [
            {
              "name": "options",
              "type": "WaitTimeoutOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<FileChooser>",
          "jsdoc": {
            "description": "This method is typically coupled with an action that triggers file\r\nchoosing.\r\n\r\n:::caution\r\n\r\nThis must be called before the file chooser is launched. It will not return\r\na currently active file chooser.\r\n\r\n:::\r\n\r\n:::caution\r\n\r\nInterception of file dialogs triggered via DOM APIs such as\r\nwindow.showOpenFilePicker is currently not supported.\r\n\r\n:::",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Page.setGeolocation",
          "parameters": [
            {
              "name": "options",
              "type": "GeolocationOptions",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Sets the page's geolocation.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Page.target",
          "parameters": [],
          "returnType": "Target",
          "jsdoc": {
            "description": "A target this page was created from.",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "Page.browser",
          "parameters": [],
          "returnType": "Browser",
          "jsdoc": {
            "description": "Get the browser the page belongs to.",
            "deprecated": false
          }
        },
        {
          "name": "Page.browserContext",
          "parameters": [],
          "returnType": "BrowserContext",
          "jsdoc": {
            "description": "Get the browser context that the page belongs to.",
            "deprecated": false
          }
        },
        {
          "name": "Page.mainFrame",
          "parameters": [],
          "returnType": "Frame",
          "jsdoc": {
            "description": "The page's main frame.",
            "deprecated": false
          }
        },
        {
          "name": "Page.createCDPSession",
          "parameters": [],
          "returnType": "Promise<CDPSession>",
          "jsdoc": {
            "description": "Creates a Chrome Devtools Protocol session attached to the page.",
            "deprecated": false
          }
        },
        {
          "name": "Page.frames",
          "parameters": [],
          "returnType": "Frame[]",
          "jsdoc": {
            "description": "An array of all frames attached to the page.",
            "deprecated": false
          }
        },
        {
          "name": "Page.workers",
          "parameters": [],
          "returnType": "WebWorker[]",
          "jsdoc": {
            "description": "All of the dedicated  * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API |      * WebWorkers} associated with the page.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Page.setRequestInterception",
          "parameters": [
            {
              "name": "value",
              "type": "boolean",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Activating request interception enables   ,\r\n   and    methods. This\r\nprovides the capability to modify network requests that are made by a page.\r\n\r\nOnce request interception is enabled, every request will stall unless it's\r\ncontinued, responded or aborted; or completed using the browser cache.\r\n\r\nSee the\r\n ://pptr.dev/guides/network-interception|Request interception guide \r\nfor more details.",
            "params": [
              {
                "name": "value",
                "description": "- Whether to enable request interception."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.setBypassServiceWorker",
          "parameters": [
            {
              "name": "bypass",
              "type": "boolean",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Toggles ignoring of service worker for each request.",
            "params": [
              {
                "name": "bypass",
                "description": "- Whether to bypass service worker and load from network."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.setDragInterception",
          "parameters": [
            {
              "name": "enabled",
              "type": "boolean",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "enabled",
                "description": "- Whether to enable drag interception."
              }
            ],
            "deprecated": true
          }
        },
        {
          "name": "Page.setOfflineMode",
          "parameters": [
            {
              "name": "enabled",
              "type": "boolean",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Sets the network connection to offline.\r\n\r\nIt does not change the parameters used in  ",
            "params": [
              {
                "name": "enabled",
                "description": "- When `true`, enables offline mode for the page."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.emulateNetworkConditions",
          "parameters": [
            {
              "name": "networkConditions",
              "type": "NetworkConditions",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "This does not affect WebSockets and WebRTC PeerConnections (see\r\nhttps://crbug.com/563644). To set the page offline, you can use\r\n  .\r\n\r\nA list of predefined network conditions can be used by importing\r\n  .",
            "params": [
              {
                "name": "networkConditions",
                "description": "- Passing `null` disables network condition\r\nemulation."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.setDefaultNavigationTimeout",
          "parameters": [
            {
              "name": "timeout",
              "type": "number",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "This setting will change the default maximum navigation time for the\r\nfollowing methods and related shortcuts:\r\n\r\n-  | page.goBack(options) \r\n\r\n-  | page.goForward(options) \r\n\r\n-  | page.goto(url,options) \r\n\r\n-  | page.reload(options) \r\n\r\n-  | page.setContent(html,options) \r\n\r\n-  | page.waitForNavigation(options)",
            "params": [
              {
                "name": "timeout",
                "description": "- Maximum navigation time in milliseconds."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.setDefaultTimeout",
          "parameters": [
            {
              "name": "timeout",
              "type": "number",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "timeout",
                "description": "- Maximum time in milliseconds."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.getDefaultTimeout",
          "parameters": [],
          "returnType": "number",
          "jsdoc": {
            "description": "Maximum time in milliseconds.",
            "deprecated": false
          }
        },
        {
          "name": "Page.getDefaultNavigationTimeout",
          "parameters": [],
          "returnType": "number",
          "jsdoc": {
            "description": "Maximum navigation time in milliseconds.",
            "deprecated": false
          }
        },
        {
          "name": "Page.locator",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            }
          ],
          "returnType": "Locator<ParseSelector<Selector, Element>>",
          "jsdoc": {
            "description": "Creates a locator for the provided selector. See    for\r\ndetails and supported actions.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.locator",
          "parameters": [
            {
              "name": "func",
              "type": "() => Awaitable<Ret>",
              "optional": false
            }
          ],
          "returnType": "Locator<Ret>",
          "jsdoc": {
            "description": "Creates a locator for the provided selector. See    for\r\ndetails and supported actions.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.$",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            }
          ],
          "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
          "jsdoc": {
            "description": "Finds the first element that matches the selector. If no element matches\r\nthe selector, the return value resolves to `null`.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.$$",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "options",
              "type": "QueryOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>[]>",
          "jsdoc": {
            "description": "Finds elements on the page that match the selector. If no elements\r\nmatch the selector, the return value resolves to `[]`.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.evaluateHandle",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "pageFunction",
                "description": "- a function that is run within the page"
              },
              {
                "name": "args",
                "description": "- arguments to be passed to the pageFunction"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.queryObjects",
          "parameters": [
            {
              "name": "prototypeHandle",
              "type": "JSHandle<Prototype>",
              "optional": false
            }
          ],
          "returnType": "Promise<JSHandle<Prototype[]>>",
          "jsdoc": {
            "description": "This method iterates the JavaScript heap and finds all objects with the\r\ngiven prototype.",
            "params": [
              {
                "name": "prototypeHandle",
                "description": "- a handle to the object prototype."
              }
            ],
            "returns": "Promise which resolves to a handle to an array of objects with\r\nthis prototype.",
            "deprecated": false
          }
        },
        {
          "name": "Page.$eval",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "This method finds the first element within the page that matches the selector\r\nand passes the result as the first argument to the `pageFunction`.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              },
              {
                "name": "pageFunction",
                "description": "- the function to be evaluated in the page context.\r\nWill be passed the result of the element matching the selector as its\r\nfirst argument."
              },
              {
                "name": "args",
                "description": "- any additional arguments to pass through to `pageFunction`."
              }
            ],
            "returns": "The result of calling `pageFunction`. If it returns an element it\r\nis wrapped in an   , else the raw value itself is\r\nreturned.",
            "deprecated": false
          }
        },
        {
          "name": "Page.$$eval",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "This method returns all elements matching the selector and passes the\r\nresulting array as the first argument to the `pageFunction`.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              },
              {
                "name": "pageFunction",
                "description": "- the function to be evaluated in the page context.\r\nWill be passed an array of matching elements as its first argument."
              },
              {
                "name": "args",
                "description": "- any additional arguments to pass through to `pageFunction`."
              }
            ],
            "returns": "The result of calling `pageFunction`. If it returns an element it\r\nis wrapped in an   , else the raw value itself is\r\nreturned.",
            "deprecated": false
          }
        },
        {
          "name": "Page.cookies",
          "parameters": [
            {
              "name": "urls",
              "type": "string[]",
              "optional": false
            }
          ],
          "returnType": "Promise<Cookie[]>",
          "jsdoc": {
            "description": "If no URLs are specified, this method returns cookies for the\r\ncurrent page URL. If URLs are specified, only cookies for those\r\nURLs are returned.",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "Page.deleteCookie",
          "parameters": [
            {
              "name": "cookies",
              "type": "DeleteCookiesRequest[]",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "Page.setCookie",
          "parameters": [
            {
              "name": "cookies",
              "type": "CookieParam[]",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "Page.addScriptTag",
          "parameters": [
            {
              "name": "options",
              "type": "FrameAddScriptTagOptions",
              "optional": false
            }
          ],
          "returnType": "Promise<ElementHandle<HTMLScriptElement>>",
          "jsdoc": {
            "description": "Adds a `<script>` tag into the page with the desired URL or content.",
            "params": [
              {
                "name": "options",
                "description": "- Options for the script."
              }
            ],
            "returns": "An  | element handle  to the injected\r\n`<script>` element.",
            "deprecated": false
          }
        },
        {
          "name": "Page.addStyleTag",
          "parameters": [
            {
              "name": "options",
              "type": "Omit<FrameAddStyleTagOptions, \"url\">",
              "optional": false
            }
          ],
          "returnType": "Promise<ElementHandle<HTMLStyleElement>>",
          "jsdoc": {
            "description": "Adds a `<link rel=\"stylesheet\">` tag into the page with the desired URL or\r\na `<style type=\"text/css\">` tag with the content.\r\n\r\nShortcut for\r\n (addStyleTag:2) | page.mainFrame().addStyleTag(options) .",
            "params": [],
            "returns": "An  | element handle  to the injected `<link>`\r\nor `<style>` element.",
            "deprecated": false
          }
        },
        {
          "name": "Page.addStyleTag",
          "parameters": [
            {
              "name": "options",
              "type": "FrameAddStyleTagOptions",
              "optional": false
            }
          ],
          "returnType": "Promise<ElementHandle<HTMLLinkElement>>",
          "jsdoc": {
            "description": "Adds a `<link rel=\"stylesheet\">` tag into the page with the desired URL or\r\na `<style type=\"text/css\">` tag with the content.\r\n\r\nShortcut for\r\n (addStyleTag:2) | page.mainFrame().addStyleTag(options) .",
            "params": [],
            "returns": "An  | element handle  to the injected `<link>`\r\nor `<style>` element.",
            "deprecated": false
          }
        },
        {
          "name": "Page.exposeFunction",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "pptrFunction",
              "type": "Function | { default: Function; }",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "The method adds a function called `name` on the page's `window` object.\r\nWhen called, the function executes `puppeteerFunction` in node.js and\r\nreturns a `Promise` which resolves to the return value of\r\n`puppeteerFunction`.\r\n\r\nIf the puppeteerFunction returns a `Promise`, it will be awaited.\r\n\r\n:::note\r\n\r\nFunctions installed via `page.exposeFunction` survive navigations.\r\n\r\n:::",
            "params": [
              {
                "name": "name",
                "description": "- Name of the function on the window object"
              },
              {
                "name": "pptrFunction",
                "description": "- Callback function which will be called in Puppeteer's\r\ncontext."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.removeExposedFunction",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "The method removes a previously added function via $  \r\ncalled `name` from the page's `window` object.",
            "deprecated": false
          }
        },
        {
          "name": "Page.authenticate",
          "parameters": [
            {
              "name": "credentials",
              "type": "Credentials",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Provide credentials for `HTTP authentication`.\r\n\r\n:::note\r\n\r\nRequest interception will be turned on behind the scenes to\r\nimplement authentication. This might affect performance.\r\n\r\n:::",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Page.setExtraHTTPHeaders",
          "parameters": [
            {
              "name": "headers",
              "type": "Record<string, string>",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "The extra HTTP headers will be sent with every request the page initiates.\r\n\r\n:::tip\r\n\r\nAll HTTP header names are lowercased. (HTTP headers are\r\ncase-insensitive, so this shouldn’t impact your server code.)\r\n\r\n:::\r\n\r\n:::note\r\n\r\npage.setExtraHTTPHeaders does not guarantee the order of headers in\r\nthe outgoing requests.\r\n\r\n:::",
            "params": [
              {
                "name": "headers",
                "description": "- An object containing additional HTTP headers to be sent\r\nwith every request. All header values must be strings."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.setUserAgent",
          "parameters": [
            {
              "name": "userAgent",
              "type": "string",
              "optional": false
            },
            {
              "name": "userAgentMetadata",
              "type": "UserAgentMetadata",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "userAgent",
                "description": "- Specific user agent to use in this page"
              },
              {
                "name": "userAgentData",
                "description": "- Specific user agent client hint data to use in this\r\npage"
              }
            ],
            "returns": "Promise which resolves when the user agent is set.",
            "deprecated": false
          }
        },
        {
          "name": "Page.metrics",
          "parameters": [],
          "returnType": "Promise<Metrics>",
          "jsdoc": {
            "description": "Object containing metrics as key/value pairs.",
            "params": [],
            "returns": "- `Timestamp` : The timestamp when the metrics sample was taken.\r\n\r\n- `Documents` : Number of documents in the page.\r\n\r\n- `Frames` : Number of frames in the page.\r\n\r\n- `JSEventListeners` : Number of events in the page.\r\n\r\n- `Nodes` : Number of DOM nodes in the page.\r\n\r\n- `LayoutCount` : Total number of full or partial page layout.\r\n\r\n- `RecalcStyleCount` : Total number of page style recalculations.\r\n\r\n- `LayoutDuration` : Combined durations of all page layouts.\r\n\r\n- `RecalcStyleDuration` : Combined duration of all page style\r\n  recalculations.\r\n\r\n- `ScriptDuration` : Combined duration of JavaScript execution.\r\n\r\n- `TaskDuration` : Combined duration of all tasks performed by the browser.\r\n\r\n- `JSHeapUsedSize` : Used JavaScript heap size.\r\n\r\n- `JSHeapTotalSize` : Total JavaScript heap size.",
            "deprecated": false
          }
        },
        {
          "name": "Page.url",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The page's URL.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Page.content",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": {
            "description": "The full HTML contents of the page, including the DOCTYPE.",
            "deprecated": false
          }
        },
        {
          "name": "Page.setContent",
          "parameters": [
            {
              "name": "html",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitForOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Set the content of the page.",
            "params": [
              {
                "name": "html",
                "description": "- HTML markup to assign to the page."
              },
              {
                "name": "options",
                "description": "- Parameters that has some properties."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.goto",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "GoToOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<HTTPResponse>",
          "jsdoc": {
            "description": "{@inheritDoc Frame.goto}",
            "deprecated": false
          }
        },
        {
          "name": "Page.reload",
          "parameters": [
            {
              "name": "options",
              "type": "WaitForOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<HTTPResponse>",
          "jsdoc": {
            "description": "Reloads the page.",
            "params": [
              {
                "name": "options",
                "description": "- Options to configure waiting behavior."
              }
            ],
            "returns": "A promise which resolves to the main resource response. In case of\r\nmultiple redirects, the navigation will resolve with the response of the\r\nlast redirect.",
            "deprecated": false
          }
        },
        {
          "name": "Page.waitForNavigation",
          "parameters": [
            {
              "name": "options",
              "type": "WaitForOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<HTTPResponse>",
          "jsdoc": {
            "description": "Waits for the page to navigate to a new URL or to reload. It is useful when\r\nyou run code that will indirectly cause the page to navigate.",
            "params": [
              {
                "name": "options",
                "description": "- Navigation parameters which might have the following\r\nproperties:"
              }
            ],
            "returns": "A `Promise` which resolves to the main resource response.\r\n\r\n- In case of multiple redirects, the navigation will resolve with the\r\nresponse of the last redirect.\r\n- In case of navigation to a different anchor or navigation due to History\r\nAPI usage, the navigation will resolve with `null`.",
            "deprecated": false
          }
        },
        {
          "name": "Page.waitForRequest",
          "parameters": [
            {
              "name": "urlOrPredicate",
              "type": "string | AwaitablePredicate<HTTPRequest>",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitTimeoutOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<HTTPRequest>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "urlOrPredicate",
                "description": "- A URL or predicate to wait for"
              },
              {
                "name": "options",
                "description": "- Optional waiting parameters"
              }
            ],
            "returns": "Promise which resolves to the matched request",
            "deprecated": false
          }
        },
        {
          "name": "Page.waitForResponse",
          "parameters": [
            {
              "name": "urlOrPredicate",
              "type": "string | AwaitablePredicate<HTTPResponse>",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitTimeoutOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<HTTPResponse>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "urlOrPredicate",
                "description": "- A URL or predicate to wait for."
              },
              {
                "name": "options",
                "description": "- Optional waiting parameters"
              }
            ],
            "returns": "Promise which resolves to the matched response.",
            "deprecated": false
          }
        },
        {
          "name": "Page.waitForNetworkIdle",
          "parameters": [
            {
              "name": "options",
              "type": "WaitForNetworkIdleOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Waits for the network to be idle.",
            "params": [
              {
                "name": "options",
                "description": "- Options to configure waiting behavior."
              }
            ],
            "returns": "A promise which resolves once the network is idle.",
            "deprecated": false
          }
        },
        {
          "name": "Page.waitForFrame",
          "parameters": [
            {
              "name": "urlOrPredicate",
              "type": "string | ((frame: Frame) => Awaitable<boolean>)",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitTimeoutOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<Frame>",
          "jsdoc": {
            "description": "Waits for a frame matching the given conditions to appear.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Page.goBack",
          "parameters": [
            {
              "name": "options",
              "type": "WaitForOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<HTTPResponse>",
          "jsdoc": {
            "description": "This method navigate to the previous page in history.",
            "params": [
              {
                "name": "options",
                "description": "- Navigation parameters"
              }
            ],
            "returns": "Promise which resolves to the main resource response. In case of\r\nmultiple redirects, the navigation will resolve with the response of the\r\nlast redirect. If can not go back, resolves to `null`.",
            "deprecated": false
          }
        },
        {
          "name": "Page.goForward",
          "parameters": [
            {
              "name": "options",
              "type": "WaitForOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<HTTPResponse>",
          "jsdoc": {
            "description": "This method navigate to the next page in history.",
            "params": [
              {
                "name": "options",
                "description": "- Navigation Parameter"
              }
            ],
            "returns": "Promise which resolves to the main resource response. In case of\r\nmultiple redirects, the navigation will resolve with the response of the\r\nlast redirect. If can not go forward, resolves to `null`.",
            "deprecated": false
          }
        },
        {
          "name": "Page.bringToFront",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Brings page to front (activates tab).",
            "deprecated": false
          }
        },
        {
          "name": "Page.emulate",
          "parameters": [
            {
              "name": "device",
              "type": "Device",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Emulates a given device's metrics and user agent.\r\n\r\nTo aid emulation, Puppeteer provides a list of known devices that can be\r\nvia   .",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Page.setJavaScriptEnabled",
          "parameters": [
            {
              "name": "enabled",
              "type": "boolean",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "enabled",
                "description": "- Whether or not to enable JavaScript on the page."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.setBypassCSP",
          "parameters": [
            {
              "name": "enabled",
              "type": "boolean",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Toggles bypassing page's Content-Security-Policy.",
            "params": [
              {
                "name": "enabled",
                "description": "- sets bypassing of page's Content-Security-Policy."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.emulateMediaType",
          "parameters": [
            {
              "name": "type",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "type",
                "description": "- Changes the CSS media type of the page. The only allowed\r\nvalues are `screen`, `print` and `null`. Passing `null` disables CSS media\r\nemulation."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.emulateCPUThrottling",
          "parameters": [
            {
              "name": "factor",
              "type": "number",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Enables CPU throttling to emulate slow CPUs.",
            "params": [
              {
                "name": "factor",
                "description": "- slowdown factor (1 is no throttle, 2 is 2x slowdown, etc)."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.emulateMediaFeatures",
          "parameters": [
            {
              "name": "features",
              "type": "MediaFeature[]",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "features",
                "description": "- `<?Array<Object>>` Given an array of media feature\r\nobjects, emulates CSS media features on the page. Each media feature object\r\nmust have the following properties:"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.emulateTimezone",
          "parameters": [
            {
              "name": "timezoneId",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "timezoneId",
                "description": "- Changes the timezone of the page. See\r\n ://source.chromium.org/chromium/chromium/deps/icu.git/+/faee8bc70570192d82d2978a71e2a615788597d1:source/data/misc/metaZones.txt | ICU’s metaZones.txt \r\nfor a list of supported timezone IDs. Passing\r\n`null` disables timezone emulation."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.emulateIdleState",
          "parameters": [
            {
              "name": "overrides",
              "type": "{ isUserActive: boolean; isScreenUnlocked: boolean; }",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Emulates the idle state.\r\nIf no arguments set, clears idle state emulation.",
            "params": [
              {
                "name": "overrides",
                "description": "- Mock idle state. If not set, clears idle overrides"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.emulateVisionDeficiency",
          "parameters": [
            {
              "name": "type",
              "type": "\"none\" | \"blurredVision\" | \"reducedContrast\" | \"achromatopsia\" | \"deuteranopia\" | \"protanopia\" | \"tritanopia\"",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Simulates the given vision deficiency on the page.",
            "params": [
              {
                "name": "type",
                "description": "- the type of deficiency to simulate, or `'none'` to reset."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.setViewport",
          "parameters": [
            {
              "name": "viewport",
              "type": "Viewport",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "`page.setViewport` will resize the page. A lot of websites don't expect\r\nphones to change size, so you should set the viewport before navigating to\r\nthe page.\r\n\r\nIn the case of multiple pages in a single browser, each page can have its\r\nown viewport size. Setting the viewport to `null` resets the viewport to\r\nits default value.",
            "params": [
              {
                "name": "viewport",
                "description": "-"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.viewport",
          "parameters": [],
          "returnType": "Viewport",
          "jsdoc": {
            "description": "Returns the current page viewport settings without checking the actual page\r\nviewport.\r\n\r\nThis is either the viewport set with the previous   \r\ncall or the default viewport set via\r\n |      * ConnectOptions.defaultViewport}.",
            "deprecated": false
          }
        },
        {
          "name": "Page.evaluate",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "Evaluates a function in the page's context and returns the result.\r\n\r\nIf the function passed to `page.evaluate` returns a Promise, the\r\nfunction will wait for the promise to resolve and return its value.",
            "params": [
              {
                "name": "pageFunction",
                "description": "- a function that is run within the page"
              },
              {
                "name": "args",
                "description": "- arguments to be passed to the pageFunction"
              }
            ],
            "returns": "the return value of `pageFunction`.",
            "deprecated": false
          }
        },
        {
          "name": "Page.evaluateOnNewDocument",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<NewDocumentScriptEvaluation>",
          "jsdoc": {
            "description": "Adds a function which would be invoked in one of the following scenarios:\r\n\r\n- whenever the page is navigated\r\n\r\n- whenever the child frame is attached or navigated. In this case, the\r\n  function is invoked in the context of the newly attached frame.\r\n\r\nThe function is invoked after the document was created but before any of\r\nits scripts were run. This is useful to amend the JavaScript environment,\r\ne.g. to seed `Math.random`.",
            "params": [
              {
                "name": "pageFunction",
                "description": "- Function to be evaluated in browser context"
              },
              {
                "name": "args",
                "description": "- Arguments to pass to `pageFunction`"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.removeScriptToEvaluateOnNewDocument",
          "parameters": [
            {
              "name": "identifier",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Removes script that injected into page by Page.evaluateOnNewDocument.",
            "params": [
              {
                "name": "identifier",
                "description": "- script identifier"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.setCacheEnabled",
          "parameters": [
            {
              "name": "enabled",
              "type": "boolean",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Toggles ignoring cache for each request based on the enabled state. By\r\ndefault, caching is enabled.",
            "params": [
              {
                "name": "enabled",
                "description": "- sets the `enabled` state of cache"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.screencast",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<ScreencastOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<ScreenRecorder>",
          "jsdoc": {
            "description": "Captures a screencast of this  | page .",
            "params": [
              {
                "name": "options",
                "description": "- Configures screencast behavior."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.screenshot",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<ScreenshotOptions> & { encoding: \"base64\"; }",
              "optional": false
            }
          ],
          "returnType": "Promise<string>",
          "jsdoc": {
            "description": "Captures a screenshot of this  | page .",
            "params": [
              {
                "name": "options",
                "description": "- Configures screenshot behavior."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.screenshot",
          "parameters": [
            {
              "name": "options",
              "type": "Readonly<ScreenshotOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
          "jsdoc": {
            "description": "Captures a screenshot of this  | page .",
            "params": [
              {
                "name": "options",
                "description": "- Configures screenshot behavior."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.createPDFStream",
          "parameters": [
            {
              "name": "options",
              "type": "PDFOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<ReadableStream<Uint8Array<ArrayBufferLike>>>",
          "jsdoc": {
            "description": "Generates a PDF of the page with the `print` CSS media type.",
            "params": [
              {
                "name": "options",
                "description": "- options for generating the PDF."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.pdf",
          "parameters": [
            {
              "name": "options",
              "type": "PDFOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
          "jsdoc": {
            "description": "{@inheritDoc Page.createPDFStream}",
            "deprecated": false
          }
        },
        {
          "name": "Page.title",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": {
            "description": "The page's title",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Page.close",
          "parameters": [
            {
              "name": "options",
              "type": "{ runBeforeUnload?: boolean; }",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": null
        },
        {
          "name": "Page.isClosed",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Indicates that the page has been closed.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Page.click",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<ClickOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "This method fetches an element with `selector`, scrolls it into view if\r\nneeded, and then uses    to click in the center of the\r\nelement. If there's no element matching `selector`, the method throws an\r\nerror.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix . If there are\r\nmultiple elements satisfying the `selector`, the first will be clicked"
              },
              {
                "name": "options",
                "description": "- `Object`"
              }
            ],
            "returns": "Promise which resolves when the element matching `selector` is\r\nsuccessfully clicked. The Promise will be rejected if there is no element\r\nmatching `selector`.",
            "deprecated": false
          }
        },
        {
          "name": "Page.focus",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "This method fetches an element with `selector` and focuses it. If\r\nthere's no element matching `selector`, the method throws an error.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix .\r\nIf there are multiple elements satisfying the selector, the first\r\nwill be focused."
              }
            ],
            "returns": "Promise which resolves when the element matching selector\r\nis successfully focused. The promise will be rejected if there is\r\nno element matching selector.",
            "deprecated": false
          }
        },
        {
          "name": "Page.hover",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "This method fetches an element with `selector`, scrolls it into view if\r\nneeded, and then uses   \r\nto hover over the center of the element.\r\nIf there's no element matching `selector`, the method throws an error.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix . If there are\r\nmultiple elements satisfying the `selector`, the first will be hovered."
              }
            ],
            "returns": "Promise which resolves when the element matching `selector` is\r\nsuccessfully hovered. Promise gets rejected if there's no element matching\r\n`selector`.",
            "deprecated": false
          }
        },
        {
          "name": "Page.select",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            },
            {
              "name": "values",
              "type": "string[]",
              "optional": false
            }
          ],
          "returnType": "Promise<string[]>",
          "jsdoc": {
            "description": "Triggers a `change` and `input` event once all the provided options have been\r\nselected. If there's no `<select>` element matching `selector`, the method\r\nthrows an error.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              },
              {
                "name": "values",
                "description": "- Values of options to select. If the `<select>` has the\r\n`multiple` attribute, all values are considered, otherwise only the first one\r\nis taken into account."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.tap",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "This method fetches an element with `selector`, scrolls it into view if\r\nneeded, and then uses   \r\nto tap in the center of the element.\r\nIf there's no element matching `selector`, the method throws an error.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix . If there are multiple elements satisfying the\r\nselector, the first will be tapped."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.type",
          "parameters": [
            {
              "name": "selector",
              "type": "string",
              "optional": false
            },
            {
              "name": "text",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "Readonly<KeyboardTypeOptions>",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Sends a `keydown`, `keypress/input`, and `keyup` event for each character\r\nin the text.\r\n\r\nTo press a special key, like `Control` or `ArrowDown`, use   .",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              },
              {
                "name": "text",
                "description": "- A text to type into a focused element."
              },
              {
                "name": "options",
                "description": "- have property `delay` which is the Time to wait between\r\nkey presses in milliseconds. Defaults to `0`."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.waitForSelector",
          "parameters": [
            {
              "name": "selector",
              "type": "Selector",
              "optional": false
            },
            {
              "name": "options",
              "type": "WaitForSelectorOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<ElementHandle<ParseSelector<Selector, Element>>>",
          "jsdoc": {
            "description": "Wait for the `selector` to appear in page. If at the moment of calling the\r\nmethod the `selector` already exists, the method will return immediately. If\r\nthe `selector` doesn't appear after the `timeout` milliseconds of waiting, the\r\nfunction will throw.",
            "params": [
              {
                "name": "selector",
                "description": "-\r\n ://pptr.dev/guides/page-interactions#selectors | selector \r\nto query the page for.\r\n ://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | CSS selectors \r\ncan be passed as-is and a\r\n ://pptr.dev/guides/page-interactions#non-css-selectors | Puppeteer-specific selector syntax \r\nallows querying by\r\n ://pptr.dev/guides/page-interactions#text-selectors--p-text | text ,\r\n ://pptr.dev/guides/page-interactions#aria-selectors--p-aria | a11y role and name ,\r\nand\r\n ://pptr.dev/guides/page-interactions#xpath-selectors--p-xpath | xpath \r\nand\r\n ://pptr.dev/guides/page-interactions#querying-elements-in-shadow-dom | combining these queries across shadow roots .\r\nAlternatively, you can specify the selector type using a\r\n ://pptr.dev/guides/page-interactions#prefixed-selector-syntax | prefix ."
              },
              {
                "name": "options",
                "description": "- Optional waiting parameters"
              }
            ],
            "returns": "Promise which resolves when element specified by selector string\r\nis added to DOM. Resolves to `null` if waiting for hidden: `true` and\r\nselector is not found in DOM.",
            "deprecated": false
          }
        },
        {
          "name": "Page.waitForFunction",
          "parameters": [
            {
              "name": "pageFunction",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "options",
              "type": "FrameWaitForFunctionOptions",
              "optional": true
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
          "jsdoc": {
            "description": "Waits for the provided function, `pageFunction`, to return a truthy value when\r\nevaluated in the page's context.",
            "params": [
              {
                "name": "pageFunction",
                "description": "- Function to be evaluated in browser context until it returns a\r\ntruthy value."
              },
              {
                "name": "options",
                "description": "- Options for configuring waiting behavior."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Page.waitForDevicePrompt",
          "parameters": [
            {
              "name": "options",
              "type": "WaitTimeoutOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<DeviceRequestPrompt>",
          "jsdoc": {
            "description": "This method is typically coupled with an action that triggers a device\r\nrequest from an api such as WebBluetooth.\r\n\r\n:::caution\r\n\r\nThis must be called before the device request is made. It will not return a\r\ncurrently active device prompt.\r\n\r\n:::",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Page.on",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<PageEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "Page",
          "jsdoc": {
            "description": "Bind an event listener to fire when an event occurs.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to listen to. Can be a string or symbol."
              },
              {
                "name": "handler",
                "description": "- the function to be called when the event occurs."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Page.off",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<PageEvents>[Key]>",
              "optional": true
            }
          ],
          "returnType": "Page",
          "jsdoc": {
            "description": "Remove an event listener from firing.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to stop listening to."
              },
              {
                "name": "handler",
                "description": "- the function that should be removed."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Page.emit",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "event",
              "type": "EventsWithWildcard<PageEvents>[Key]",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Emit an event and call any associated listeners.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to emit"
              },
              {
                "name": "eventData",
                "description": "- any data you'd like to emit with the event"
              }
            ],
            "returns": "`true` if there are any listeners, `false` if there are not.",
            "deprecated": false
          }
        },
        {
          "name": "Page.once",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<PageEvents>[Key]>",
              "optional": false
            }
          ],
          "returnType": "Page",
          "jsdoc": {
            "description": "Like `on` but the listener will only be fired once and then it will be removed.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to listen to"
              },
              {
                "name": "handler",
                "description": "- the handler function to run when the event occurs"
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "Page.listenerCount",
          "parameters": [
            {
              "name": "type",
              "type": "keyof PageEvents",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Gets the number of listeners for a given event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to get the listener count for"
              }
            ],
            "returns": "the number of listeners bound to the given event",
            "deprecated": false
          }
        },
        {
          "name": "Page.removeAllListeners",
          "parameters": [
            {
              "name": "type",
              "type": "keyof PageEvents",
              "optional": true
            }
          ],
          "returnType": "Page",
          "jsdoc": {
            "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to remove listeners for."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "keyboard",
          "type": "Keyboard",
          "optional": false
        },
        {
          "name": "touchscreen",
          "type": "Touchscreen",
          "optional": false
        },
        {
          "name": "coverage",
          "type": "Coverage",
          "optional": false
        },
        {
          "name": "tracing",
          "type": "Tracing",
          "optional": false
        },
        {
          "name": "accessibility",
          "type": "Accessibility",
          "optional": false
        },
        {
          "name": "mouse",
          "type": "Mouse",
          "optional": false
        },
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "EventEmitter<PageEvents>",
      "implements": [],
      "jsdoc": {
        "description": "Page provides methods to interact with a single tab or\r\n ://developer.chrome.com/extensions/background_pages | extension background page \r\nin the browser.\r\n\r\n:::note\r\n\r\nOne Browser instance might have multiple Page instances.\r\n\r\n:::",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ProtocolError",
      "constructors": [],
      "methods": [],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "code",
          "type": "number",
          "optional": false
        },
        {
          "name": "originalMessage",
          "type": "string",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": false
        },
        {
          "name": "stack",
          "type": "string",
          "optional": true
        }
      ],
      "extends": "PuppeteerError",
      "implements": [],
      "jsdoc": {
        "description": "ProtocolError is emitted whenever there is an error from the protocol.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Puppeteer",
      "constructors": [],
      "methods": [
        {
          "name": "Puppeteer.connect",
          "parameters": [
            {
              "name": "options",
              "type": "ConnectOptions",
              "optional": false
            }
          ],
          "returnType": "Promise<Browser>",
          "jsdoc": {
            "description": "This method attaches Puppeteer to an existing browser instance.",
            "params": [
              {
                "name": "options",
                "description": "- Set of configurable options to set on the browser."
              }
            ],
            "returns": "Promise which resolves to browser instance.",
            "deprecated": false
          }
        }
      ],
      "properties": [],
      "implements": [],
      "jsdoc": {
        "description": "The main Puppeteer class.\r\n\r\nIMPORTANT: if you are using Puppeteer in a Node environment, you will get an\r\ninstance of    when you import or require `puppeteer`.\r\nThat class extends `Puppeteer`, so has all the methods documented below as\r\nwell as all that are defined on   .",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PuppeteerError",
      "constructors": [],
      "methods": [],
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": false
        },
        {
          "name": "stack",
          "type": "string",
          "optional": true
        }
      ],
      "extends": "Error",
      "implements": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PuppeteerNode",
      "constructors": [],
      "methods": [
        {
          "name": "PuppeteerNode.connect",
          "parameters": [
            {
              "name": "options",
              "type": "ConnectOptions",
              "optional": false
            }
          ],
          "returnType": "Promise<Browser>",
          "jsdoc": {
            "description": "This method attaches Puppeteer to an existing browser instance.",
            "params": [
              {
                "name": "options",
                "description": "- Set of configurable options to set on the browser."
              }
            ],
            "returns": "Promise which resolves to browser instance.",
            "deprecated": false
          }
        },
        {
          "name": "PuppeteerNode.launch",
          "parameters": [
            {
              "name": "options",
              "type": "LaunchOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<Browser>",
          "jsdoc": {
            "description": "Launches a browser instance with given arguments and options when\r\nspecified.\r\n\r\nWhen using with `puppeteer-core`,\r\n | options.executablePath  or\r\n | options.channel  must be provided.",
            "params": [
              {
                "name": "options",
                "description": "- Options to configure launching behavior."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "PuppeteerNode.executablePath",
          "parameters": [
            {
              "name": "channel",
              "type": "ChromeReleaseChannel",
              "optional": false
            }
          ],
          "returnType": "string",
          "jsdoc": {
            "description": "The default executable path for a given ChromeReleaseChannel.",
            "deprecated": false
          }
        },
        {
          "name": "PuppeteerNode.executablePath",
          "parameters": [
            {
              "name": "options",
              "type": "LaunchOptions",
              "optional": false
            }
          ],
          "returnType": "string",
          "jsdoc": {
            "description": "The default executable path for a given ChromeReleaseChannel.",
            "deprecated": false
          }
        },
        {
          "name": "PuppeteerNode.executablePath",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The default executable path for a given ChromeReleaseChannel.",
            "deprecated": false
          }
        },
        {
          "name": "PuppeteerNode.defaultArgs",
          "parameters": [
            {
              "name": "options",
              "type": "LaunchOptions",
              "optional": true
            }
          ],
          "returnType": "string[]",
          "jsdoc": {
            "description": "",
            "params": [
              {
                "name": "options",
                "description": "- Set of configurable options to set on the browser."
              }
            ],
            "returns": "The default arguments that the browser will be launched with.",
            "deprecated": false
          }
        },
        {
          "name": "PuppeteerNode.trimCache",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Removes all non-current Firefox and Chrome binaries in the cache directory\r\nidentified by the provided Puppeteer configuration. The current browser\r\nversion is determined by resolving PUPPETEER_REVISIONS from Puppeteer\r\nunless `configuration.browserRevision` is provided.",
            "params": [],
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "lastLaunchedBrowser",
          "type": "SupportedBrowser",
          "optional": false
        },
        {
          "name": "defaultBrowser",
          "type": "SupportedBrowser",
          "optional": false
        },
        {
          "name": "product",
          "type": "string",
          "optional": false
        }
      ],
      "extends": "Puppeteer",
      "implements": [],
      "jsdoc": {
        "description": "Extends the main    class with Node specific behaviour for\r\nfetching and downloading browsers.\r\n\r\nIf you're using Puppeteer in a Node environment, this is the class you'll get\r\nwhen you run `require('puppeteer')` (or the equivalent ES `import`).",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "ScreenRecorder",
      "constructors": [],
      "methods": [
        {
          "name": "ScreenRecorder.stop",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Stops the recorder.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder._transform",
          "parameters": [
            {
              "name": "chunk",
              "type": "any",
              "optional": false
            },
            {
              "name": "encoding",
              "type": "BufferEncoding",
              "optional": false
            },
            {
              "name": "callback",
              "type": "TransformCallback",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder._flush",
          "parameters": [
            {
              "name": "callback",
              "type": "TransformCallback",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"close\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"data\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(chunk: any) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"drain\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"end\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"error\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(err: Error) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"finish\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"pause\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"pipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"readable\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"resume\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"unpipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.addListener",
          "parameters": [
            {
              "name": "event",
              "type": "string | symbol",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(...args: any[]) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Event emitter\nThe defined events on documents including:\n1.  close\n2.  data\n3.  drain\n4.  end\n5.  error\n6.  finish\n7.  pause\n8.  pipe\n9.  readable\n10. resume\n11. unpipe",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"close\"",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"data\"",
              "optional": false
            },
            {
              "name": "chunk",
              "type": "any",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"drain\"",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"end\"",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"error\"",
              "optional": false
            },
            {
              "name": "err",
              "type": "Error",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"finish\"",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"pause\"",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"pipe\"",
              "optional": false
            },
            {
              "name": "src",
              "type": "Readable",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"readable\"",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"resume\"",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "\"unpipe\"",
              "optional": false
            },
            {
              "name": "src",
              "type": "Readable",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.emit",
          "parameters": [
            {
              "name": "event",
              "type": "string | symbol",
              "optional": false
            },
            {
              "name": "args",
              "type": "any[]",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"close\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"data\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(chunk: any) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"drain\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"end\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"error\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(err: Error) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"finish\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"pause\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"pipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"readable\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"resume\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "\"unpipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.on",
          "parameters": [
            {
              "name": "event",
              "type": "string | symbol",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(...args: any[]) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"close\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"data\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(chunk: any) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"drain\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"end\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"error\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(err: Error) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"finish\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"pause\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"pipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"readable\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"resume\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "\"unpipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.once",
          "parameters": [
            {
              "name": "event",
              "type": "string | symbol",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(...args: any[]) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"close\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"data\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(chunk: any) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"drain\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"end\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"error\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(err: Error) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"finish\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"pause\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"pipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"readable\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"resume\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"unpipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependListener",
          "parameters": [
            {
              "name": "event",
              "type": "string | symbol",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(...args: any[]) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"close\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"data\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(chunk: any) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"drain\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"end\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"error\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(err: Error) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"finish\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"pause\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"pipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"readable\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"resume\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"unpipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.prependOnceListener",
          "parameters": [
            {
              "name": "event",
              "type": "string | symbol",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(...args: any[]) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"close\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"data\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(chunk: any) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"drain\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"end\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"error\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(err: Error) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"finish\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"pause\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"pipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"readable\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"resume\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"unpipe\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(src: Readable) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.removeListener",
          "parameters": [
            {
              "name": "event",
              "type": "string | symbol",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(...args: any[]) => void",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.pipe",
          "parameters": [
            {
              "name": "destination",
              "type": "T",
              "optional": false
            },
            {
              "name": "options",
              "type": "{ end?: boolean; }",
              "optional": true
            }
          ],
          "returnType": "T",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.compose",
          "parameters": [
            {
              "name": "stream",
              "type": "T | ComposeFnParam | Iterable<T> | AsyncIterable<T>",
              "optional": false
            },
            {
              "name": "options",
              "type": "{ signal: AbortSignal; }",
              "optional": true
            }
          ],
          "returnType": "T",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.__@captureRejectionSymbol@55364",
          "parameters": [
            {
              "name": "error",
              "type": "Error",
              "optional": false
            },
            {
              "name": "event",
              "type": "string | symbol",
              "optional": false
            },
            {
              "name": "args",
              "type": "AnyRest",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder._construct",
          "parameters": [
            {
              "name": "callback",
              "type": "(error?: Error) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder._read",
          "parameters": [
            {
              "name": "size",
              "type": "number",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.read",
          "parameters": [
            {
              "name": "size",
              "type": "number",
              "optional": true
            }
          ],
          "returnType": "any",
          "jsdoc": {
            "description": "The `readable.read()` method reads data out of the internal buffer and\nreturns it. If no data is available to be read, `null` is returned. By default,\nthe data is returned as a `Buffer` object unless an encoding has been\nspecified using the `readable.setEncoding()` method or the stream is operating\nin object mode.\n\nThe optional `size` argument specifies a specific number of bytes to read. If\n`size` bytes are not available to be read, `null` will be returned _unless_ the\nstream has ended, in which case all of the data remaining in the internal buffer\nwill be returned.\n\nIf the `size` argument is not specified, all of the data contained in the\ninternal buffer will be returned.\n\nThe `size` argument must be less than or equal to 1 GiB.\n\nThe `readable.read()` method should only be called on `Readable` streams\noperating in paused mode. In flowing mode, `readable.read()` is called\nautomatically until the internal buffer is fully drained.\n\n```js\nconst readable = getReadableStreamSomehow();\n\n// 'readable' may be triggered multiple times as data is buffered in\nreadable.on('readable', () => {\n  let chunk;\n  console.log('Stream is readable (new data received in buffer)');\n  // Use a loop to make sure we read all currently available data\n  while (null !== (chunk = readable.read())) {\n    console.log(`Read ${chunk.length} bytes of data...`);\n  }\n});\n\n// 'end' will be triggered once when there is no more data available\nreadable.on('end', () => {\n  console.log('Reached end of stream.');\n});\n```\n\nEach call to `readable.read()` returns a chunk of data, or `null`. The chunks\nare not concatenated. A `while` loop is necessary to consume all data\ncurrently in the buffer. When reading a large file `.read()` may return `null`,\nhaving consumed all buffered content so far, but there is still more data to\ncome not yet buffered. In this case a new `'readable'` event will be emitted\nwhen there is more data in the buffer. Finally the `'end'` event will be\nemitted when there is no more data to come.\n\nTherefore to read a file's whole contents from a `readable`, it is necessary\nto collect chunks across multiple `'readable'` events:\n\n```js\nconst chunks = [];\n\nreadable.on('readable', () => {\n  let chunk;\n  while (null !== (chunk = readable.read())) {\n    chunks.push(chunk);\n  }\n});\n\nreadable.on('end', () => {\n  const content = chunks.join('');\n});\n```\n\nA `Readable` stream in object mode will always return a single item from\na call to `readable.read(size)`, regardless of the value of the `size` argument.\n\nIf the `readable.read()` method returns a chunk of data, a `'data'` event will\nalso be emitted.\n\nCalling    after the `'end'` event has\nbeen emitted will return `null`. No runtime error will be raised.",
            "params": [
              {
                "name": "size",
                "description": "Optional argument to specify how much data to read."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.setEncoding",
          "parameters": [
            {
              "name": "encoding",
              "type": "BufferEncoding",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "The `readable.setEncoding()` method sets the character encoding for\ndata read from the `Readable` stream.\n\nBy default, no encoding is assigned and stream data will be returned as `Buffer` objects. Setting an encoding causes the stream data\nto be returned as strings of the specified encoding rather than as `Buffer` objects. For instance, calling `readable.setEncoding('utf8')` will cause the\noutput data to be interpreted as UTF-8 data, and passed as strings. Calling `readable.setEncoding('hex')` will cause the data to be encoded in hexadecimal\nstring format.\n\nThe `Readable` stream will properly handle multi-byte characters delivered\nthrough the stream that would otherwise become improperly decoded if simply\npulled from the stream as `Buffer` objects.\n\n```js\nconst readable = getReadableStreamSomehow();\nreadable.setEncoding('utf8');\nreadable.on('data', (chunk) => {\n  assert.equal(typeof chunk, 'string');\n  console.log('Got %d characters of string data:', chunk.length);\n});\n```",
            "params": [
              {
                "name": "encoding",
                "description": "The encoding to use."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.pause",
          "parameters": [],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "The `readable.pause()` method will cause a stream in flowing mode to stop\nemitting `'data'` events, switching out of flowing mode. Any data that\nbecomes available will remain in the internal buffer.\n\n```js\nconst readable = getReadableStreamSomehow();\nreadable.on('data', (chunk) => {\n  console.log(`Received ${chunk.length} bytes of data.`);\n  readable.pause();\n  console.log('There will be no additional data for 1 second.');\n  setTimeout(() => {\n    console.log('Now data will start flowing again.');\n    readable.resume();\n  }, 1000);\n});\n```\n\nThe `readable.pause()` method has no effect if there is a `'readable'` event listener.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.resume",
          "parameters": [],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "The `readable.resume()` method causes an explicitly paused `Readable` stream to\nresume emitting `'data'` events, switching the stream into flowing mode.\n\nThe `readable.resume()` method can be used to fully consume the data from a\nstream without actually processing any of that data:\n\n```js\ngetReadableStreamSomehow()\n  .resume()\n  .on('end', () => {\n    console.log('Reached the end, but did not read anything.');\n  });\n```\n\nThe `readable.resume()` method has no effect if there is a `'readable'` event listener.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.isPaused",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "The `readable.isPaused()` method returns the current operating state of the `Readable`.\nThis is used primarily by the mechanism that underlies the `readable.pipe()` method.\nIn most typical cases, there will be no reason to use this method directly.\n\n```js\nconst readable = new stream.Readable();\n\nreadable.isPaused(); // === false\nreadable.pause();\nreadable.isPaused(); // === true\nreadable.resume();\nreadable.isPaused(); // === false\n```",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.unpipe",
          "parameters": [
            {
              "name": "destination",
              "type": "WritableStream",
              "optional": true
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "The `readable.unpipe()` method detaches a `Writable` stream previously attached\nusing the    method.\n\nIf the `destination` is not specified, then _all_ pipes are detached.\n\nIf the `destination` is specified, but no pipe is set up for it, then\nthe method does nothing.\n\n```js\nimport fs from 'node:fs';\nconst readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream('file.txt');\n// All the data from readable goes into 'file.txt',\n// but only for the first second.\nreadable.pipe(writable);\nsetTimeout(() => {\n  console.log('Stop writing to file.txt.');\n  readable.unpipe(writable);\n  console.log('Manually close the file stream.');\n  writable.end();\n}, 1000);\n```",
            "params": [
              {
                "name": "destination",
                "description": "Optional specific stream to unpipe"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.unshift",
          "parameters": [
            {
              "name": "chunk",
              "type": "any",
              "optional": false
            },
            {
              "name": "encoding",
              "type": "BufferEncoding",
              "optional": true
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Passing `chunk` as `null` signals the end of the stream (EOF) and behaves the\nsame as `readable.push(null)`, after which no more data can be written. The EOF\nsignal is put at the end of the buffer and any buffered data will still be\nflushed.\n\nThe `readable.unshift()` method pushes a chunk of data back into the internal\nbuffer. This is useful in certain situations where a stream is being consumed by\ncode that needs to \"un-consume\" some amount of data that it has optimistically\npulled out of the source, so that the data can be passed on to some other party.\n\nThe `stream.unshift(chunk)` method cannot be called after the `'end'` event\nhas been emitted or a runtime error will be thrown.\n\nDevelopers using `stream.unshift()` often should consider switching to\nuse of a `Transform` stream instead. See the `API for stream implementers` section for more information.\n\n```js\n// Pull off a header delimited by \\n\\n.\n// Use unshift() if we get too much.\n// Call the callback with (error, header, stream).\nimport { StringDecoder } from 'node:string_decoder';\nfunction parseHeader(stream, callback) {\n  stream.on('error', callback);\n  stream.on('readable', onReadable);\n  const decoder = new StringDecoder('utf8');\n  let header = '';\n  function onReadable() {\n    let chunk;\n    while (null !== (chunk = stream.read())) {\n      const str = decoder.write(chunk);\n      if (str.includes('\\n\\n')) {\n        // Found the header boundary.\n        const split = str.split(/\\n\\n/);\n        header += split.shift();\n        const remaining = split.join('\\n\\n');\n        const buf = Buffer.from(remaining, 'utf8');\n        stream.removeListener('error', callback);\n        // Remove the 'readable' listener before unshifting.\n        stream.removeListener('readable', onReadable);\n        if (buf.length)\n          stream.unshift(buf);\n        // Now the body of the message can be read from the stream.\n        callback(null, header, stream);\n        return;\n      }\n      // Still reading the header.\n      header += str;\n    }\n  }\n}\n```\n\nUnlike   , `stream.unshift(chunk)` will not\nend the reading process by resetting the internal reading state of the stream.\nThis can cause unexpected results if `readable.unshift()` is called during a\nread (i.e. from within a    implementation on a\ncustom stream). Following the call to `readable.unshift()` with an immediate    will reset the reading state appropriately,\nhowever it is best to simply avoid calling `readable.unshift()` while in the\nprocess of performing a read.",
            "params": [
              {
                "name": "chunk",
                "description": "Chunk of data to unshift onto the read queue. For streams not operating in object mode, `chunk` must\nbe a {string}, {Buffer}, {TypedArray}, {DataView} or `null`. For object mode streams, `chunk` may be any JavaScript value."
              },
              {
                "name": "encoding",
                "description": "Encoding of string chunks. Must be a valid `Buffer` encoding, such as `'utf8'` or `'ascii'`."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.wrap",
          "parameters": [
            {
              "name": "stream",
              "type": "ReadableStream",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Prior to Node.js 0.10, streams did not implement the entire `node:stream` module API as it is currently defined. (See `Compatibility` for more\ninformation.)\n\nWhen using an older Node.js library that emits `'data'` events and has a    method that is advisory only, the `readable.wrap()` method can be used to create a `Readable`\nstream that uses\nthe old stream as its data source.\n\nIt will rarely be necessary to use `readable.wrap()` but the method has been\nprovided as a convenience for interacting with older Node.js applications and\nlibraries.\n\n```js\nimport { OldReader } from './old-api-module.js';\nimport { Readable } from 'node:stream';\nconst oreader = new OldReader();\nconst myReader = new Readable().wrap(oreader);\n\nmyReader.on('readable', () => {\n  myReader.read(); // etc.\n});\n```",
            "params": [
              {
                "name": "stream",
                "description": "An \"old style\" readable stream"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.push",
          "parameters": [
            {
              "name": "chunk",
              "type": "any",
              "optional": false
            },
            {
              "name": "encoding",
              "type": "BufferEncoding",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.iterator",
          "parameters": [
            {
              "name": "options",
              "type": "{ destroyOnReturn?: boolean; }",
              "optional": true
            }
          ],
          "returnType": "AsyncIterator<any, any, any>",
          "jsdoc": {
            "description": "The iterator created by this method gives users the option to cancel the destruction\nof the stream if the `for await...of` loop is exited by `return`, `break`, or `throw`,\nor if the iterator should destroy the stream if the stream emitted an error during iteration.",
            "params": [
              {
                "description": "When set to `false`, calling `return` on the async iterator,\nor exiting a `for await...of` iteration using a `break`, `return`, or `throw` will not destroy the stream.\n**Default: `true`**."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.map",
          "parameters": [
            {
              "name": "fn",
              "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => any",
              "optional": false
            },
            {
              "name": "options",
              "type": "ArrayOptions",
              "optional": true
            }
          ],
          "returnType": "Readable",
          "jsdoc": {
            "description": "This method allows mapping over the stream. The *fn* function will be called for every chunk in the stream.\nIf the *fn* function returns a promise - that promise will be `await`ed before being passed to the result stream.",
            "params": [
              {
                "name": "fn",
                "description": "a function to map over every chunk in the stream. Async or not."
              }
            ],
            "returns": "a stream mapped with the function *fn*.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.filter",
          "parameters": [
            {
              "name": "fn",
              "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => boolean | Promise<boolean>",
              "optional": false
            },
            {
              "name": "options",
              "type": "ArrayOptions",
              "optional": true
            }
          ],
          "returnType": "Readable",
          "jsdoc": {
            "description": "This method allows filtering the stream. For each chunk in the stream the *fn* function will be called\nand if it returns a truthy value, the chunk will be passed to the result stream.\nIf the *fn* function returns a promise - that promise will be `await`ed.",
            "params": [
              {
                "name": "fn",
                "description": "a function to filter chunks from the stream. Async or not."
              }
            ],
            "returns": "a stream filtered with the predicate *fn*.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.forEach",
          "parameters": [
            {
              "name": "fn",
              "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => void | Promise<void>",
              "optional": false
            },
            {
              "name": "options",
              "type": "ArrayOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "This method allows iterating a stream. For each chunk in the stream the *fn* function will be called.\nIf the *fn* function returns a promise - that promise will be `await`ed.\n\nThis method is different from `for await...of` loops in that it can optionally process chunks concurrently.\nIn addition, a `forEach` iteration can only be stopped by having passed a `signal` option\nand aborting the related AbortController while `for await...of` can be stopped with `break` or `return`.\nIn either case the stream will be destroyed.\n\nThis method is different from listening to the `'data'` event in that it uses the `readable` event\nin the underlying machinary and can limit the number of concurrent *fn* calls.",
            "params": [
              {
                "name": "fn",
                "description": "a function to call on each chunk of the stream. Async or not."
              }
            ],
            "returns": "a promise for when the stream has finished.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.toArray",
          "parameters": [
            {
              "name": "options",
              "type": "Pick<ArrayOptions, \"signal\">",
              "optional": true
            }
          ],
          "returnType": "Promise<any[]>",
          "jsdoc": {
            "description": "This method allows easily obtaining the contents of a stream.\n\nAs this method reads the entire stream into memory, it negates the benefits of streams. It's intended\nfor interoperability and convenience, not as the primary way to consume streams.",
            "params": [],
            "returns": "a promise containing an array with the contents of the stream.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.some",
          "parameters": [
            {
              "name": "fn",
              "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => boolean | Promise<boolean>",
              "optional": false
            },
            {
              "name": "options",
              "type": "ArrayOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<boolean>",
          "jsdoc": {
            "description": "This method is similar to `Array.prototype.some` and calls *fn* on each chunk in the stream\nuntil the awaited return value is `true` (or any truthy value). Once an *fn* call on a chunk\n`await`ed return value is truthy, the stream is destroyed and the promise is fulfilled with `true`.\nIf none of the *fn* calls on the chunks return a truthy value, the promise is fulfilled with `false`.",
            "params": [
              {
                "name": "fn",
                "description": "a function to call on each chunk of the stream. Async or not."
              }
            ],
            "returns": "a promise evaluating to `true` if *fn* returned a truthy value for at least one of the chunks.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.find",
          "parameters": [
            {
              "name": "fn",
              "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => data is T",
              "optional": false
            },
            {
              "name": "options",
              "type": "ArrayOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<T>",
          "jsdoc": {
            "description": "This method is similar to `Array.prototype.find` and calls *fn* on each chunk in the stream\nto find a chunk with a truthy value for *fn*. Once an *fn* call's awaited return value is truthy,\nthe stream is destroyed and the promise is fulfilled with value for which *fn* returned a truthy value.\nIf all of the *fn* calls on the chunks return a falsy value, the promise is fulfilled with `undefined`.",
            "params": [
              {
                "name": "fn",
                "description": "a function to call on each chunk of the stream. Async or not."
              }
            ],
            "returns": "a promise evaluating to the first chunk for which *fn* evaluated with a truthy value,\nor `undefined` if no element was found.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.find",
          "parameters": [
            {
              "name": "fn",
              "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => boolean | Promise<boolean>",
              "optional": false
            },
            {
              "name": "options",
              "type": "ArrayOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<any>",
          "jsdoc": {
            "description": "This method is similar to `Array.prototype.find` and calls *fn* on each chunk in the stream\nto find a chunk with a truthy value for *fn*. Once an *fn* call's awaited return value is truthy,\nthe stream is destroyed and the promise is fulfilled with value for which *fn* returned a truthy value.\nIf all of the *fn* calls on the chunks return a falsy value, the promise is fulfilled with `undefined`.",
            "params": [
              {
                "name": "fn",
                "description": "a function to call on each chunk of the stream. Async or not."
              }
            ],
            "returns": "a promise evaluating to the first chunk for which *fn* evaluated with a truthy value,\nor `undefined` if no element was found.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.every",
          "parameters": [
            {
              "name": "fn",
              "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => boolean | Promise<boolean>",
              "optional": false
            },
            {
              "name": "options",
              "type": "ArrayOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<boolean>",
          "jsdoc": {
            "description": "This method is similar to `Array.prototype.every` and calls *fn* on each chunk in the stream\nto check if all awaited return values are truthy value for *fn*. Once an *fn* call on a chunk\n`await`ed return value is falsy, the stream is destroyed and the promise is fulfilled with `false`.\nIf all of the *fn* calls on the chunks return a truthy value, the promise is fulfilled with `true`.",
            "params": [
              {
                "name": "fn",
                "description": "a function to call on each chunk of the stream. Async or not."
              }
            ],
            "returns": "a promise evaluating to `true` if *fn* returned a truthy value for every one of the chunks.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.flatMap",
          "parameters": [
            {
              "name": "fn",
              "type": "(data: any, options?: Pick<ArrayOptions, \"signal\">) => any",
              "optional": false
            },
            {
              "name": "options",
              "type": "ArrayOptions",
              "optional": true
            }
          ],
          "returnType": "Readable",
          "jsdoc": {
            "description": "This method returns a new stream by applying the given callback to each chunk of the stream\nand then flattening the result.\n\nIt is possible to return a stream or another iterable or async iterable from *fn* and the result streams\nwill be merged (flattened) into the returned stream.",
            "params": [
              {
                "name": "fn",
                "description": "a function to map over every chunk in the stream. May be async. May be a stream or generator."
              }
            ],
            "returns": "a stream flat-mapped with the function *fn*.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.drop",
          "parameters": [
            {
              "name": "limit",
              "type": "number",
              "optional": false
            },
            {
              "name": "options",
              "type": "Pick<ArrayOptions, \"signal\">",
              "optional": true
            }
          ],
          "returnType": "Readable",
          "jsdoc": {
            "description": "This method returns a new stream with the first *limit* chunks dropped from the start.",
            "params": [
              {
                "name": "limit",
                "description": "the number of chunks to drop from the readable."
              }
            ],
            "returns": "a stream with *limit* chunks dropped from the start.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.take",
          "parameters": [
            {
              "name": "limit",
              "type": "number",
              "optional": false
            },
            {
              "name": "options",
              "type": "Pick<ArrayOptions, \"signal\">",
              "optional": true
            }
          ],
          "returnType": "Readable",
          "jsdoc": {
            "description": "This method returns a new stream with the first *limit* chunks.",
            "params": [
              {
                "name": "limit",
                "description": "the number of chunks to take from the readable."
              }
            ],
            "returns": "a stream with *limit* chunks taken.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.asIndexedPairs",
          "parameters": [
            {
              "name": "options",
              "type": "Pick<ArrayOptions, \"signal\">",
              "optional": true
            }
          ],
          "returnType": "Readable",
          "jsdoc": {
            "description": "This method returns a new stream with chunks of the underlying stream paired with a counter\nin the form `[index, chunk]`. The first index value is `0` and it increases by 1 for each chunk produced.",
            "params": [],
            "returns": "a stream of indexed pairs.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.reduce",
          "parameters": [
            {
              "name": "fn",
              "type": "(previous: any, data: any, options?: Pick<ArrayOptions, \"signal\">) => T",
              "optional": false
            },
            {
              "name": "initial",
              "type": "undefined",
              "optional": true
            },
            {
              "name": "options",
              "type": "Pick<ArrayOptions, \"signal\">",
              "optional": true
            }
          ],
          "returnType": "Promise<T>",
          "jsdoc": {
            "description": "This method calls *fn* on each chunk of the stream in order, passing it the result from the calculation\non the previous element. It returns a promise for the final value of the reduction.\n\nIf no *initial* value is supplied the first chunk of the stream is used as the initial value.\nIf the stream is empty, the promise is rejected with a `TypeError` with the `ERR_INVALID_ARGS` code property.\n\nThe reducer function iterates the stream element-by-element which means that there is no *concurrency* parameter\nor parallelism. To perform a reduce concurrently, you can extract the async function to `readable.map` method.",
            "params": [
              {
                "name": "fn",
                "description": "a reducer function to call over every chunk in the stream. Async or not."
              },
              {
                "name": "initial",
                "description": "the initial value to use in the reduction."
              }
            ],
            "returns": "a promise for the final value of the reduction.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.reduce",
          "parameters": [
            {
              "name": "fn",
              "type": "(previous: T, data: any, options?: Pick<ArrayOptions, \"signal\">) => T",
              "optional": false
            },
            {
              "name": "initial",
              "type": "T",
              "optional": false
            },
            {
              "name": "options",
              "type": "Pick<ArrayOptions, \"signal\">",
              "optional": true
            }
          ],
          "returnType": "Promise<T>",
          "jsdoc": {
            "description": "This method calls *fn* on each chunk of the stream in order, passing it the result from the calculation\non the previous element. It returns a promise for the final value of the reduction.\n\nIf no *initial* value is supplied the first chunk of the stream is used as the initial value.\nIf the stream is empty, the promise is rejected with a `TypeError` with the `ERR_INVALID_ARGS` code property.\n\nThe reducer function iterates the stream element-by-element which means that there is no *concurrency* parameter\nor parallelism. To perform a reduce concurrently, you can extract the async function to `readable.map` method.",
            "params": [
              {
                "name": "fn",
                "description": "a reducer function to call over every chunk in the stream. Async or not."
              },
              {
                "name": "initial",
                "description": "the initial value to use in the reduction."
              }
            ],
            "returns": "a promise for the final value of the reduction.",
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder._destroy",
          "parameters": [
            {
              "name": "error",
              "type": "Error",
              "optional": false
            },
            {
              "name": "callback",
              "type": "(error?: Error) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.destroy",
          "parameters": [
            {
              "name": "error",
              "type": "Error",
              "optional": true
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Destroy the stream. Optionally emit an `'error'` event, and emit a `'close'` event (unless `emitClose` is set to `false`). After this call, the readable\nstream will release any internal resources and subsequent calls to `push()` will be ignored.\n\nOnce `destroy()` has been called any further calls will be a no-op and no\nfurther errors except from `_destroy()` may be emitted as `'error'`.\n\nImplementors should not override this method, but instead implement `readable._destroy()`.",
            "params": [
              {
                "name": "error",
                "description": "Error which will be passed as payload in `'error'` event"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.__@asyncIterator@55382",
          "parameters": [],
          "returnType": "AsyncIterator<any, any, any>",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.__@asyncDispose@55384",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Calls `readable.destroy()` with an `AbortError` and returns a promise that fulfills when the stream is finished.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder._write",
          "parameters": [
            {
              "name": "chunk",
              "type": "any",
              "optional": false
            },
            {
              "name": "encoding",
              "type": "BufferEncoding",
              "optional": false
            },
            {
              "name": "callback",
              "type": "(error?: Error) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder._writev",
          "parameters": [
            {
              "name": "chunks",
              "type": "{ chunk: any; encoding: BufferEncoding; }[]",
              "optional": false
            },
            {
              "name": "callback",
              "type": "(error?: Error) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder._final",
          "parameters": [
            {
              "name": "callback",
              "type": "(error?: Error) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "ScreenRecorder.write",
          "parameters": [
            {
              "name": "chunk",
              "type": "any",
              "optional": false
            },
            {
              "name": "callback",
              "type": "(error: Error) => void",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "The `writable.write()` method writes some data to the stream, and calls the\nsupplied `callback` once the data has been fully handled. If an error\noccurs, the `callback` will be called with the error as its\nfirst argument. The `callback` is called asynchronously and before `'error'` is\nemitted.\n\nThe return value is `true` if the internal buffer is less than the `highWaterMark` configured when the stream was created after admitting `chunk`.\nIf `false` is returned, further attempts to write data to the stream should\nstop until the `'drain'` event is emitted.\n\nWhile a stream is not draining, calls to `write()` will buffer `chunk`, and\nreturn false. Once all currently buffered chunks are drained (accepted for\ndelivery by the operating system), the `'drain'` event will be emitted.\nOnce `write()` returns false, do not write more chunks\nuntil the `'drain'` event is emitted. While calling `write()` on a stream that\nis not draining is allowed, Node.js will buffer all written chunks until\nmaximum memory usage occurs, at which point it will abort unconditionally.\nEven before it aborts, high memory usage will cause poor garbage collector\nperformance and high RSS (which is not typically released back to the system,\neven after the memory is no longer required). Since TCP sockets may never\ndrain if the remote peer does not read the data, writing a socket that is\nnot draining may lead to a remotely exploitable vulnerability.\n\nWriting data while the stream is not draining is particularly\nproblematic for a `Transform`, because the `Transform` streams are paused\nby default until they are piped or a `'data'` or `'readable'` event handler\nis added.\n\nIf the data to be written can be generated or fetched on demand, it is\nrecommended to encapsulate the logic into a `Readable` and use   . However, if calling `write()` is preferred, it is\npossible to respect backpressure and avoid memory issues using the `'drain'` event:\n\n```js\nfunction write(data, cb) {\n  if (!stream.write(data)) {\n    stream.once('drain', cb);\n  } else {\n    process.nextTick(cb);\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite('hello', () => {\n  console.log('Write completed, do more writes now.');\n});\n```\n\nA `Writable` stream in object mode will always ignore the `encoding` argument.",
            "params": [
              {
                "name": "chunk",
                "description": "Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n{TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`."
              },
              {
                "name": "encoding",
                "description": "The encoding, if `chunk` is a string."
              },
              {
                "name": "callback",
                "description": "Callback for when this chunk of data is flushed."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.write",
          "parameters": [
            {
              "name": "chunk",
              "type": "any",
              "optional": false
            },
            {
              "name": "encoding",
              "type": "BufferEncoding",
              "optional": false
            },
            {
              "name": "callback",
              "type": "(error: Error) => void",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "The `writable.write()` method writes some data to the stream, and calls the\nsupplied `callback` once the data has been fully handled. If an error\noccurs, the `callback` will be called with the error as its\nfirst argument. The `callback` is called asynchronously and before `'error'` is\nemitted.\n\nThe return value is `true` if the internal buffer is less than the `highWaterMark` configured when the stream was created after admitting `chunk`.\nIf `false` is returned, further attempts to write data to the stream should\nstop until the `'drain'` event is emitted.\n\nWhile a stream is not draining, calls to `write()` will buffer `chunk`, and\nreturn false. Once all currently buffered chunks are drained (accepted for\ndelivery by the operating system), the `'drain'` event will be emitted.\nOnce `write()` returns false, do not write more chunks\nuntil the `'drain'` event is emitted. While calling `write()` on a stream that\nis not draining is allowed, Node.js will buffer all written chunks until\nmaximum memory usage occurs, at which point it will abort unconditionally.\nEven before it aborts, high memory usage will cause poor garbage collector\nperformance and high RSS (which is not typically released back to the system,\neven after the memory is no longer required). Since TCP sockets may never\ndrain if the remote peer does not read the data, writing a socket that is\nnot draining may lead to a remotely exploitable vulnerability.\n\nWriting data while the stream is not draining is particularly\nproblematic for a `Transform`, because the `Transform` streams are paused\nby default until they are piped or a `'data'` or `'readable'` event handler\nis added.\n\nIf the data to be written can be generated or fetched on demand, it is\nrecommended to encapsulate the logic into a `Readable` and use   . However, if calling `write()` is preferred, it is\npossible to respect backpressure and avoid memory issues using the `'drain'` event:\n\n```js\nfunction write(data, cb) {\n  if (!stream.write(data)) {\n    stream.once('drain', cb);\n  } else {\n    process.nextTick(cb);\n  }\n}\n\n// Wait for cb to be called before doing any other write.\nwrite('hello', () => {\n  console.log('Write completed, do more writes now.');\n});\n```\n\nA `Writable` stream in object mode will always ignore the `encoding` argument.",
            "params": [
              {
                "name": "chunk",
                "description": "Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n{TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`."
              },
              {
                "name": "encoding",
                "description": "The encoding, if `chunk` is a string."
              },
              {
                "name": "callback",
                "description": "Callback for when this chunk of data is flushed."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.setDefaultEncoding",
          "parameters": [
            {
              "name": "encoding",
              "type": "BufferEncoding",
              "optional": false
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "The `writable.setDefaultEncoding()` method sets the default `encoding` for a `Writable` stream.",
            "params": [
              {
                "name": "encoding",
                "description": "The new default encoding"
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.end",
          "parameters": [
            {
              "name": "cb",
              "type": "() => void",
              "optional": true
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Calling the `writable.end()` method signals that no more data will be written\nto the `Writable`. The optional `chunk` and `encoding` arguments allow one\nfinal additional chunk of data to be written immediately before closing the\nstream.\n\nCalling the    method after calling    will raise an error.\n\n```js\n// Write 'hello, ' and then end with 'world!'.\nimport fs from 'node:fs';\nconst file = fs.createWriteStream('example.txt');\nfile.write('hello, ');\nfile.end('world!');\n// Writing more now is not allowed!\n```",
            "params": [
              {
                "name": "chunk",
                "description": "Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n{TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`."
              },
              {
                "name": "encoding",
                "description": "The encoding if `chunk` is a string"
              },
              {
                "name": "callback",
                "description": "Callback for when the stream is finished."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.end",
          "parameters": [
            {
              "name": "chunk",
              "type": "any",
              "optional": false
            },
            {
              "name": "cb",
              "type": "() => void",
              "optional": true
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Calling the `writable.end()` method signals that no more data will be written\nto the `Writable`. The optional `chunk` and `encoding` arguments allow one\nfinal additional chunk of data to be written immediately before closing the\nstream.\n\nCalling the    method after calling    will raise an error.\n\n```js\n// Write 'hello, ' and then end with 'world!'.\nimport fs from 'node:fs';\nconst file = fs.createWriteStream('example.txt');\nfile.write('hello, ');\nfile.end('world!');\n// Writing more now is not allowed!\n```",
            "params": [
              {
                "name": "chunk",
                "description": "Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n{TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`."
              },
              {
                "name": "encoding",
                "description": "The encoding if `chunk` is a string"
              },
              {
                "name": "callback",
                "description": "Callback for when the stream is finished."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.end",
          "parameters": [
            {
              "name": "chunk",
              "type": "any",
              "optional": false
            },
            {
              "name": "encoding",
              "type": "BufferEncoding",
              "optional": false
            },
            {
              "name": "cb",
              "type": "() => void",
              "optional": true
            }
          ],
          "returnType": "ScreenRecorder",
          "jsdoc": {
            "description": "Calling the `writable.end()` method signals that no more data will be written\nto the `Writable`. The optional `chunk` and `encoding` arguments allow one\nfinal additional chunk of data to be written immediately before closing the\nstream.\n\nCalling the    method after calling    will raise an error.\n\n```js\n// Write 'hello, ' and then end with 'world!'.\nimport fs from 'node:fs';\nconst file = fs.createWriteStream('example.txt');\nfile.write('hello, ');\nfile.end('world!');\n// Writing more now is not allowed!\n```",
            "params": [
              {
                "name": "chunk",
                "description": "Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n{TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`."
              },
              {
                "name": "encoding",
                "description": "The encoding if `chunk` is a string"
              },
              {
                "name": "callback",
                "description": "Callback for when the stream is finished."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.cork",
          "parameters": [],
          "returnType": "void",
          "jsdoc": {
            "description": "The `writable.cork()` method forces all written data to be buffered in memory.\nThe buffered data will be flushed when either the    or    methods are called.\n\nThe primary intent of `writable.cork()` is to accommodate a situation in which\nseveral small chunks are written to the stream in rapid succession. Instead of\nimmediately forwarding them to the underlying destination, `writable.cork()` buffers all the chunks until `writable.uncork()` is called, which will pass them\nall to `writable._writev()`, if present. This prevents a head-of-line blocking\nsituation where data is being buffered while waiting for the first small chunk\nto be processed. However, use of `writable.cork()` without implementing `writable._writev()` may have an adverse effect on throughput.\n\nSee also: `writable.uncork()`, `writable._writev()`.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "ScreenRecorder.uncork",
          "parameters": [],
          "returnType": "void",
          "jsdoc": {
            "description": "The `writable.uncork()` method flushes all data buffered since    was called.\n\nWhen using `writable.cork()` and `writable.uncork()` to manage the buffering\nof writes to a stream, defer calls to `writable.uncork()` using `process.nextTick()`. Doing so allows batching of all `writable.write()` calls that occur within a given Node.js event\nloop phase.\n\n```js\nstream.cork();\nstream.write('some ');\nstream.write('data ');\nprocess.nextTick(() => stream.uncork());\n```\n\nIf the `writable.cork()` method is called multiple times on a stream, the\nsame number of calls to `writable.uncork()` must be called to flush the buffered\ndata.\n\n```js\nstream.cork();\nstream.write('some ');\nstream.cork();\nstream.write('data ');\nprocess.nextTick(() => {\n  stream.uncork();\n  // The data will not be flushed until uncork() is called a second time.\n  stream.uncork();\n});\n```\n\nSee also: `writable.cork()`.",
            "params": [],
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "allowHalfOpen",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "off",
          "type": "<K>(eventName: string | symbol, listener: (...args: any[]) => void) => ScreenRecorder",
          "optional": false
        },
        {
          "name": "removeAllListeners",
          "type": "(eventName?: string | symbol) => ScreenRecorder",
          "optional": false
        },
        {
          "name": "setMaxListeners",
          "type": "(n: number) => ScreenRecorder",
          "optional": false
        },
        {
          "name": "getMaxListeners",
          "type": "() => number",
          "optional": false
        },
        {
          "name": "listeners",
          "type": "<K>(eventName: string | symbol) => Function[]",
          "optional": false
        },
        {
          "name": "rawListeners",
          "type": "<K>(eventName: string | symbol) => Function[]",
          "optional": false
        },
        {
          "name": "listenerCount",
          "type": "<K>(eventName: string | symbol, listener?: Function) => number",
          "optional": false
        },
        {
          "name": "eventNames",
          "type": "() => (string | symbol)[]",
          "optional": false
        },
        {
          "name": "readableAborted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "readable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "readableDidRead",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "readableEncoding",
          "type": "BufferEncoding",
          "optional": false
        },
        {
          "name": "readableEnded",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "readableFlowing",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "readableHighWaterMark",
          "type": "number",
          "optional": false
        },
        {
          "name": "readableLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "readableObjectMode",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "destroyed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "closed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "errored",
          "type": "Error",
          "optional": false
        },
        {
          "name": "writable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "writableEnded",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "writableFinished",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "writableHighWaterMark",
          "type": "number",
          "optional": false
        },
        {
          "name": "writableLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "writableObjectMode",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "writableCorked",
          "type": "number",
          "optional": false
        },
        {
          "name": "writableNeedDrain",
          "type": "boolean",
          "optional": false
        }
      ],
      "extends": "PassThrough",
      "implements": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "SecurityDetails",
      "constructors": [],
      "methods": [
        {
          "name": "SecurityDetails.issuer",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The name of the issuer of the certificate.",
            "deprecated": false
          }
        },
        {
          "name": "SecurityDetails.validFrom",
          "parameters": [],
          "returnType": "number",
          "jsdoc": {
            "description": " ://en.wikipedia.org/wiki/Unix_time | Unix timestamp \r\nmarking the start of the certificate's validity.",
            "deprecated": false
          }
        },
        {
          "name": "SecurityDetails.validTo",
          "parameters": [],
          "returnType": "number",
          "jsdoc": {
            "description": " ://en.wikipedia.org/wiki/Unix_time | Unix timestamp \r\nmarking the end of the certificate's validity.",
            "deprecated": false
          }
        },
        {
          "name": "SecurityDetails.protocol",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The security protocol being used, e.g. \"TLS 1.2\".",
            "deprecated": false
          }
        },
        {
          "name": "SecurityDetails.subjectName",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The name of the subject to which the certificate was issued.",
            "deprecated": false
          }
        },
        {
          "name": "SecurityDetails.subjectAlternativeNames",
          "parameters": [],
          "returnType": "string[]",
          "jsdoc": {
            "description": "The list of  ://en.wikipedia.org/wiki/Subject_Alternative_Name | subject alternative names (SANs)  of the certificate.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "The SecurityDetails class represents the security details of a\r\nresponse that was received over a secure connection.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Target",
      "constructors": [],
      "methods": [
        {
          "name": "Target.worker",
          "parameters": [],
          "returnType": "Promise<WebWorker>",
          "jsdoc": {
            "description": "If the target is not of type `\"service_worker\"` or `\"shared_worker\"`, returns `null`.",
            "deprecated": false
          }
        },
        {
          "name": "Target.page",
          "parameters": [],
          "returnType": "Promise<Page>",
          "jsdoc": {
            "description": "If the target is not of type `\"page\"`, `\"webview\"` or `\"background_page\"`,\r\nreturns `null`.",
            "deprecated": false
          }
        },
        {
          "name": "Target.asPage",
          "parameters": [],
          "returnType": "Promise<Page>",
          "jsdoc": {
            "description": "Forcefully creates a page for a target of any type. It is useful if you\r\nwant to handle a CDP target of type `other` as a page. If you deal with a\r\nregular page target, use   .",
            "deprecated": false
          }
        },
        {
          "name": "Target.url",
          "parameters": [],
          "returnType": "string",
          "jsdoc": null
        },
        {
          "name": "Target.createCDPSession",
          "parameters": [],
          "returnType": "Promise<CDPSession>",
          "jsdoc": {
            "description": "Creates a Chrome Devtools Protocol session attached to the target.",
            "deprecated": false
          }
        },
        {
          "name": "Target.type",
          "parameters": [],
          "returnType": "TargetType",
          "jsdoc": {
            "description": "Identifies what kind of target this is.",
            "params": [],
            "deprecated": false
          }
        },
        {
          "name": "Target.browser",
          "parameters": [],
          "returnType": "Browser",
          "jsdoc": {
            "description": "Get the browser the target belongs to.",
            "deprecated": false
          }
        },
        {
          "name": "Target.browserContext",
          "parameters": [],
          "returnType": "BrowserContext",
          "jsdoc": {
            "description": "Get the browser context the target belongs to.",
            "deprecated": false
          }
        },
        {
          "name": "Target.opener",
          "parameters": [],
          "returnType": "Target",
          "jsdoc": {
            "description": "Get the target that opened this target. Top-level targets return `null`.",
            "deprecated": false
          }
        }
      ],
      "properties": [],
      "implements": [],
      "jsdoc": {
        "description": "Target represents a\r\n ://chromedevtools.github.io/devtools-protocol/tot/Target/ | CDP target .\r\nIn CDP a target is something that can be debugged such a frame, a page or a\r\nworker.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "TimeoutError",
      "constructors": [],
      "methods": [],
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": false
        },
        {
          "name": "stack",
          "type": "string",
          "optional": true
        }
      ],
      "extends": "PuppeteerError",
      "implements": [],
      "jsdoc": {
        "description": "TimeoutError is emitted whenever certain operations are terminated due to\r\ntimeout.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "TouchError",
      "constructors": [],
      "methods": [],
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": false
        },
        {
          "name": "stack",
          "type": "string",
          "optional": true
        }
      ],
      "extends": "PuppeteerError",
      "implements": [],
      "jsdoc": {
        "description": "TouchError is thrown when an attempt is made to move or end a touch that does\r\nnot exist.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Touchscreen",
      "constructors": [],
      "methods": [
        {
          "name": "Touchscreen.tap",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "optional": false
            },
            {
              "name": "y",
              "type": "number",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Dispatches a `touchstart` and `touchend` event.",
            "params": [
              {
                "name": "x",
                "description": "- Horizontal position of the tap."
              },
              {
                "name": "y",
                "description": "- Vertical position of the tap."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Touchscreen.touchStart",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "optional": false
            },
            {
              "name": "y",
              "type": "number",
              "optional": false
            }
          ],
          "returnType": "Promise<TouchHandle>",
          "jsdoc": {
            "description": "Dispatches a `touchstart` event.",
            "params": [
              {
                "name": "x",
                "description": "- Horizontal position of the tap."
              },
              {
                "name": "y",
                "description": "- Vertical position of the tap."
              }
            ],
            "returns": "A handle for the touch that was started.",
            "deprecated": false
          }
        },
        {
          "name": "Touchscreen.touchMove",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "optional": false
            },
            {
              "name": "y",
              "type": "number",
              "optional": false
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Dispatches a `touchMove` event on the first touch that is active.",
            "params": [
              {
                "name": "x",
                "description": "- Horizontal position of the move."
              },
              {
                "name": "y",
                "description": "- Vertical position of the move."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Touchscreen.touchEnd",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Dispatches a `touchend` event on the first touch that is active.",
            "deprecated": false
          }
        }
      ],
      "properties": [],
      "implements": [],
      "jsdoc": {
        "description": "The Touchscreen class exposes touchscreen events.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "Tracing",
      "constructors": [],
      "methods": [
        {
          "name": "Tracing.start",
          "parameters": [
            {
              "name": "options",
              "type": "TracingOptions",
              "optional": true
            }
          ],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Starts a trace for the current page.",
            "params": [
              {
                "name": "options",
                "description": "- Optional `TracingOptions`."
              }
            ],
            "deprecated": false
          }
        },
        {
          "name": "Tracing.stop",
          "parameters": [],
          "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
          "jsdoc": {
            "description": "Stops a trace started with the `start` method.",
            "params": [],
            "returns": "Promise which resolves to buffer with trace data.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "The Tracing class exposes the tracing audit interface.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "UnsupportedOperation",
      "constructors": [],
      "methods": [],
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": false
        },
        {
          "name": "stack",
          "type": "string",
          "optional": true
        }
      ],
      "extends": "PuppeteerError",
      "implements": [],
      "jsdoc": {
        "description": "Puppeteer will throw this error if a method is not\r\nsupported by the currently used protocol",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "WebWorker",
      "constructors": [],
      "methods": [
        {
          "name": "WebWorker.url",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "The URL of this web worker.",
            "deprecated": false
          }
        },
        {
          "name": "WebWorker.evaluate",
          "parameters": [
            {
              "name": "func",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<Awaited<ReturnType<Func>>>",
          "jsdoc": {
            "description": "Evaluates a given function in the  | worker .",
            "params": [
              {
                "name": "func",
                "description": "- Function to be evaluated."
              },
              {
                "name": "args",
                "description": "- Arguments to pass into `func`."
              }
            ],
            "returns": "The result of `func`.",
            "deprecated": false
          }
        },
        {
          "name": "WebWorker.evaluateHandle",
          "parameters": [
            {
              "name": "func",
              "type": "string | Func",
              "optional": false
            },
            {
              "name": "args",
              "type": "Params",
              "optional": false
            }
          ],
          "returnType": "Promise<HandleFor<Awaited<ReturnType<Func>>>>",
          "jsdoc": {
            "description": "Evaluates a given function in the  | worker .",
            "params": [
              {
                "name": "func",
                "description": "- Function to be evaluated."
              },
              {
                "name": "args",
                "description": "- Arguments to pass into `func`."
              }
            ],
            "returns": "A  | handle  to the return value of `func`.",
            "deprecated": false
          }
        },
        {
          "name": "WebWorker.close",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": null
        },
        {
          "name": "WebWorker.on",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<Record<EventType, unknown>>[Key]>",
              "optional": false
            }
          ],
          "returnType": "WebWorker",
          "jsdoc": {
            "description": "Bind an event listener to fire when an event occurs.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to listen to. Can be a string or symbol."
              },
              {
                "name": "handler",
                "description": "- the function to be called when the event occurs."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "WebWorker.off",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<Record<EventType, unknown>>[Key]>",
              "optional": true
            }
          ],
          "returnType": "WebWorker",
          "jsdoc": {
            "description": "Remove an event listener from firing.",
            "params": [
              {
                "name": "type",
                "description": "- the event type you'd like to stop listening to."
              },
              {
                "name": "handler",
                "description": "- the function that should be removed."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "WebWorker.emit",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "event",
              "type": "EventsWithWildcard<Record<EventType, unknown>>[Key]",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Emit an event and call any associated listeners.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to emit"
              },
              {
                "name": "eventData",
                "description": "- any data you'd like to emit with the event"
              }
            ],
            "returns": "`true` if there are any listeners, `false` if there are not.",
            "deprecated": false
          }
        },
        {
          "name": "WebWorker.once",
          "parameters": [
            {
              "name": "type",
              "type": "Key",
              "optional": false
            },
            {
              "name": "handler",
              "type": "Handler<EventsWithWildcard<Record<EventType, unknown>>[Key]>",
              "optional": false
            }
          ],
          "returnType": "WebWorker",
          "jsdoc": {
            "description": "Like `on` but the listener will only be fired once and then it will be removed.",
            "params": [
              {
                "name": "type",
                "description": "- the event you'd like to listen to"
              },
              {
                "name": "handler",
                "description": "- the handler function to run when the event occurs"
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        },
        {
          "name": "WebWorker.listenerCount",
          "parameters": [
            {
              "name": "type",
              "type": "EventType",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Gets the number of listeners for a given event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to get the listener count for"
              }
            ],
            "returns": "the number of listeners bound to the given event",
            "deprecated": false
          }
        },
        {
          "name": "WebWorker.removeAllListeners",
          "parameters": [
            {
              "name": "type",
              "type": "EventType",
              "optional": true
            }
          ],
          "returnType": "WebWorker",
          "jsdoc": {
            "description": "Removes all listeners. If given an event argument, it will remove only\r\nlisteners for that event.",
            "params": [
              {
                "name": "type",
                "description": "- the event to remove listeners for."
              }
            ],
            "returns": "`this` to enable you to chain method calls.",
            "deprecated": false
          }
        }
      ],
      "properties": [
        {
          "name": "#private",
          "type": "any",
          "optional": false
        },
        {
          "name": "client",
          "type": "CDPSession",
          "optional": false
        },
        {
          "name": "#private",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "EventEmitter<Record<EventType, unknown>>",
      "implements": [],
      "jsdoc": {
        "description": "This class represents a\r\n ://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker .",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    }
  ],
  "constants": [
    {
      "name": "BrowserContextEvent.TargetChanged",
      "type": "BrowserContextEvent.TargetChanged",
      "value": "targetchanged",
      "jsdoc": {
        "description": "Emitted when the url of a target inside the browser context changes.\r\nContains a    instance.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserContextEvent.TargetCreated",
      "type": "BrowserContextEvent.TargetCreated",
      "value": "targetcreated",
      "jsdoc": {
        "description": "Emitted when a target is created within the browser context, for example\r\nwhen a new page is opened by\r\n ://developer.mozilla.org/en-US/docs/Web/API/Window/open | window.open \r\nor by  | browserContext.newPage \r\n\r\nContains a    instance.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserContextEvent.TargetDestroyed",
      "type": "BrowserContextEvent.TargetDestroyed",
      "value": "targetdestroyed",
      "jsdoc": {
        "description": "Emitted when a target is destroyed within the browser context, for example\r\nwhen a page is closed. Contains a    instance.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserEvent.Disconnected",
      "type": "BrowserEvent.Disconnected",
      "value": "disconnected",
      "jsdoc": {
        "description": "Emitted when Puppeteer gets disconnected from the browser instance. This\r\nmight happen because either:\r\n\r\n- The browser closes/crashes or\r\n-    was called.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserEvent.TargetChanged",
      "type": "BrowserEvent.TargetChanged",
      "value": "targetchanged",
      "jsdoc": {
        "description": "Emitted when the URL of a target changes. Contains a   \r\ninstance.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserEvent.TargetCreated",
      "type": "BrowserEvent.TargetCreated",
      "value": "targetcreated",
      "jsdoc": {
        "description": "Emitted when a target is created, for example when a new page is opened by\r\n ://developer.mozilla.org/en-US/docs/Web/API/Window/open | window.open \r\nor by  | browser.newPage \r\n\r\nContains a    instance.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BrowserEvent.TargetDestroyed",
      "type": "BrowserEvent.TargetDestroyed",
      "value": "targetdestroyed",
      "jsdoc": {
        "description": "Emitted when a target is destroyed, for example when a page is closed.\r\nContains a    instance.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CDPSessionEvent.SessionAttached",
      "type": "\"sessionattached\"",
      "value": "sessionattached",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "CDPSessionEvent.SessionDetached",
      "type": "\"sessiondetached\"",
      "value": "sessiondetached",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "InterceptResolutionAction.Abort",
      "type": "InterceptResolutionAction.Abort",
      "value": "abort",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "InterceptResolutionAction.Respond",
      "type": "InterceptResolutionAction.Respond",
      "value": "respond",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "InterceptResolutionAction.Continue",
      "type": "InterceptResolutionAction.Continue",
      "value": "continue",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "InterceptResolutionAction.Disabled",
      "type": "InterceptResolutionAction.Disabled",
      "value": "disabled",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "InterceptResolutionAction.None",
      "type": "InterceptResolutionAction.None",
      "value": "none",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "InterceptResolutionAction.AlreadyHandled",
      "type": "InterceptResolutionAction.AlreadyHandled",
      "value": "already-handled",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "LocatorEvent.Action",
      "type": "LocatorEvent.Action",
      "value": "action",
      "jsdoc": {
        "description": "Emitted every time before the locator performs an action on the located element(s).",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "MouseButton.Left",
      "type": "\"left\"",
      "value": "left",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "MouseButton.Right",
      "type": "\"right\"",
      "value": "right",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "MouseButton.Middle",
      "type": "\"middle\"",
      "value": "middle",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "MouseButton.Back",
      "type": "\"back\"",
      "value": "back",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "MouseButton.Forward",
      "type": "\"forward\"",
      "value": "forward",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "PageEvent.Close",
      "type": "PageEvent.Close",
      "value": "close",
      "jsdoc": {
        "description": "Emitted when the page closes.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.Console",
      "type": "PageEvent.Console",
      "value": "console",
      "jsdoc": {
        "description": "Emitted when JavaScript within the page calls one of console API methods,\r\ne.g. `console.log` or `console.dir`. Also emitted if the page throws an\r\nerror or a warning.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.Dialog",
      "type": "PageEvent.Dialog",
      "value": "dialog",
      "jsdoc": {
        "description": "Emitted when a JavaScript dialog appears, such as `alert`, `prompt`,\r\n`confirm` or `beforeunload`. Puppeteer can respond to the dialog via\r\n   or   .",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.DOMContentLoaded",
      "type": "PageEvent.DOMContentLoaded",
      "value": "domcontentloaded",
      "jsdoc": {
        "description": "Emitted when the JavaScript\r\n ://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded | DOMContentLoaded  \r\nevent is dispatched.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.Error",
      "type": "PageEvent.Error",
      "value": "error",
      "jsdoc": {
        "description": "Emitted when the page crashes. Will contain an `Error`.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.FrameAttached",
      "type": "PageEvent.FrameAttached",
      "value": "frameattached",
      "jsdoc": {
        "description": "Emitted when a frame is attached. Will contain a   .",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.FrameDetached",
      "type": "PageEvent.FrameDetached",
      "value": "framedetached",
      "jsdoc": {
        "description": "Emitted when a frame is detached. Will contain a   .",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.FrameNavigated",
      "type": "PageEvent.FrameNavigated",
      "value": "framenavigated",
      "jsdoc": {
        "description": "Emitted when a frame is navigated to a new URL. Will contain a\r\n  .",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.Load",
      "type": "PageEvent.Load",
      "value": "load",
      "jsdoc": {
        "description": "Emitted when the JavaScript\r\n ://developer.mozilla.org/en-US/docs/Web/Events/load | load \r\nevent is dispatched.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.Metrics",
      "type": "PageEvent.Metrics",
      "value": "metrics",
      "jsdoc": {
        "description": "Emitted when the JavaScript code makes a call to `console.timeStamp`. For\r\nthe list of metrics see  | page.metrics .",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.PageError",
      "type": "PageEvent.PageError",
      "value": "pageerror",
      "jsdoc": {
        "description": "Emitted when an uncaught exception happens within the page. Contains an\r\n`Error`.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.Popup",
      "type": "PageEvent.Popup",
      "value": "popup",
      "jsdoc": {
        "description": "Emitted when the page opens a new tab or window.\r\n\r\nContains a    corresponding to the popup window.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.Request",
      "type": "PageEvent.Request",
      "value": "request",
      "jsdoc": {
        "description": "Emitted when a page issues a request and contains a   .",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.RequestServedFromCache",
      "type": "PageEvent.RequestServedFromCache",
      "value": "requestservedfromcache",
      "jsdoc": {
        "description": "Emitted when a request ended up loading from cache. Contains a\r\n  .",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.RequestFailed",
      "type": "PageEvent.RequestFailed",
      "value": "requestfailed",
      "jsdoc": {
        "description": "Emitted when a request fails, for example by timing out.\r\n\r\nContains a   .",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.RequestFinished",
      "type": "PageEvent.RequestFinished",
      "value": "requestfinished",
      "jsdoc": {
        "description": "Emitted when a request finishes successfully. Contains a\r\n  .",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.Response",
      "type": "PageEvent.Response",
      "value": "response",
      "jsdoc": {
        "description": "Emitted when a response is received. Contains a   .",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.WorkerCreated",
      "type": "PageEvent.WorkerCreated",
      "value": "workercreated",
      "jsdoc": {
        "description": "Emitted when a dedicated\r\n ://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker \r\nis spawned by the page.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PageEvent.WorkerDestroyed",
      "type": "PageEvent.WorkerDestroyed",
      "value": "workerdestroyed",
      "jsdoc": {
        "description": "Emitted when a dedicated\r\n ://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker \r\nis destroyed by the page.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "TargetType.PAGE",
      "type": "TargetType.PAGE",
      "value": "page",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "TargetType.BACKGROUND_PAGE",
      "type": "TargetType.BACKGROUND_PAGE",
      "value": "background_page",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "TargetType.SERVICE_WORKER",
      "type": "TargetType.SERVICE_WORKER",
      "value": "service_worker",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "TargetType.SHARED_WORKER",
      "type": "TargetType.SHARED_WORKER",
      "value": "shared_worker",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "TargetType.BROWSER",
      "type": "TargetType.BROWSER",
      "value": "browser",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "TargetType.WEBVIEW",
      "type": "TargetType.WEBVIEW",
      "value": "webview",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "TargetType.OTHER",
      "type": "TargetType.OTHER",
      "value": "other",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "SessionAttached",
      "type": "\"sessionattached\"",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "SessionDetached",
      "type": "\"sessiondetached\"",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "connect",
      "type": "(options: ConnectOptions) => Promise<Browser>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "connect_2",
      "type": "(options: ConnectOptions) => Promise<Browser>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "customQuerySelectors",
      "type": "CustomQuerySelectorRegistry",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY",
      "type": "0",
      "value": "0",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "defaultArgs",
      "type": "(options?: LaunchOptions) => string[]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "defaultArgs_2",
      "type": "(options?: LaunchOptions) => string[]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "executablePath",
      "type": "{ (channel: ChromeReleaseChannel): string; (options: LaunchOptions): string; (): string; }",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "executablePath_2",
      "type": "{ (channel: ChromeReleaseChannel): string; (options: LaunchOptions): string; (): string; }",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "KnownDevices",
      "type": "Readonly<Record<\"Blackberry PlayBook\" | \"Blackberry PlayBook landscape\" | \"BlackBerry Z30\" | \"BlackBerry Z30 landscape\" | \"Galaxy Note 3\" | \"Galaxy Note 3 landscape\" | \"Galaxy Note II\" | ... 123 more ... | \"Moto G4 landscape\", Device>>",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "launch",
      "type": "(options?: LaunchOptions) => Promise<Browser>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "launch_3",
      "type": "(options?: LaunchOptions) => Promise<Browser>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "MouseButton",
      "type": "Readonly<{ Left: \"left\"; Right: \"right\"; Middle: \"middle\"; Back: \"back\"; Forward: \"forward\"; }>",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "PredefinedNetworkConditions",
      "type": "Readonly<{ 'Slow 3G': NetworkConditions; 'Fast 3G': NetworkConditions; 'Slow 4G': NetworkConditions; 'Fast 4G': NetworkConditions; }>",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "puppeteer",
      "type": "PuppeteerNode",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "puppeteer_2",
      "type": "PuppeteerNode",
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "trimCache",
      "type": "() => Promise<void>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    }
  ],
  "namespaces": [
    {
      "name": "puppeteer",
      "contents": {
        "functions": [
          {
            "name": "convertCookiesPartitionKeyFromPuppeteerToCdp",
            "parameters": [
              {
                "name": "partitionKey",
                "type": "string | CookiePartitionKey",
                "optional": false
              }
            ],
            "returnType": "CookiePartitionKey",
            "jsdoc": null
          },
          {
            "name": "BrowserContextEvent.toString",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of a string.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the character at the specified index.",
              "params": [
                {
                  "name": "pos",
                  "description": "The zero-based index of the desired character."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the Unicode value of the character at the specified location.",
              "params": [
                {
                  "name": "index",
                  "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string that contains the concatenation of two or more strings.",
              "params": [
                {
                  "name": "strings",
                  "description": "The strings to append to the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the position of the first occurrence of a substring.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for in the string"
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the last occurrence of a substring in the string.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for."
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Determines whether two strings are equivalent in the current locale.",
              "params": [
                {
                  "name": "that",
                  "description": "String to compare to target string"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpMatchArray",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "replaceValue",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Replaces text in a string, using a regular expression or search string.",
              "params": [
                {
                  "name": "searchValue",
                  "description": "A string or regular expression to search for."
                },
                {
                  "name": "replaceValue",
                  "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Finds the first substring match in a regular expression search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "The regular expression pattern and applicable flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a section of a string.",
              "params": [
                {
                  "name": "start",
                  "description": "The index to the beginning of the specified portion of stringObj."
                },
                {
                  "name": "end",
                  "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "limit",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Split a string into substrings using the specified separator and return them as an array.",
              "params": [
                {
                  "name": "separator",
                  "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
                },
                {
                  "name": "limit",
                  "description": "A value used to limit the number of elements returned in the array."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": false
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the substring at the specified location within a String object.",
              "params": [
                {
                  "name": "start",
                  "description": "The zero-based index number indicating the beginning of the substring."
                },
                {
                  "name": "end",
                  "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.toLowerCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.toUpperCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.trim",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Gets a substring beginning at the specified location and having the specified length.",
              "params": [
                {
                  "name": "from",
                  "description": "The starting position of the desired substring. The index of the first character in the string is zero."
                },
                {
                  "name": "length",
                  "description": "The number of characters to include in the returned substring."
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.valueOf",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
              "params": [
                {
                  "name": "searchString",
                  "description": "search string"
                },
                {
                  "name": "position",
                  "description": "If position is undefined, 0 is assumed, so as to search all of the String."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "endPosition",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
              "params": [
                {
                  "name": "form",
                  "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
              "params": [
                {
                  "name": "count",
                  "description": "number of copies to append"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
              "params": [
                {
                  "name": "name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.big",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<big>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.blink",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<blink>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.bold",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<b>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.fixed",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<tt>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the color attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the size attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.italics",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<i>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.link",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML element and sets the href attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.small",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<small>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.strike",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<strike>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.sub",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sub>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.sup",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sup>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.trimEnd",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.trimStart",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.trimLeft",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.trimRight",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserContextEvent.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.__@iterator@54430",
            "parameters": [],
            "returnType": "StringIterator<string>",
            "jsdoc": {
              "description": "Iterator",
              "deprecated": false
            }
          },
          {
            "name": "BrowserContextEvent.at",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": null
          },
          {
            "name": "BrowserEvent.toString",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of a string.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the character at the specified index.",
              "params": [
                {
                  "name": "pos",
                  "description": "The zero-based index of the desired character."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the Unicode value of the character at the specified location.",
              "params": [
                {
                  "name": "index",
                  "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string that contains the concatenation of two or more strings.",
              "params": [
                {
                  "name": "strings",
                  "description": "The strings to append to the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the position of the first occurrence of a substring.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for in the string"
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the last occurrence of a substring in the string.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for."
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Determines whether two strings are equivalent in the current locale.",
              "params": [
                {
                  "name": "that",
                  "description": "String to compare to target string"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpMatchArray",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "replaceValue",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Replaces text in a string, using a regular expression or search string.",
              "params": [
                {
                  "name": "searchValue",
                  "description": "A string or regular expression to search for."
                },
                {
                  "name": "replaceValue",
                  "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Finds the first substring match in a regular expression search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "The regular expression pattern and applicable flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a section of a string.",
              "params": [
                {
                  "name": "start",
                  "description": "The index to the beginning of the specified portion of stringObj."
                },
                {
                  "name": "end",
                  "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "limit",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Split a string into substrings using the specified separator and return them as an array.",
              "params": [
                {
                  "name": "separator",
                  "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
                },
                {
                  "name": "limit",
                  "description": "A value used to limit the number of elements returned in the array."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": false
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the substring at the specified location within a String object.",
              "params": [
                {
                  "name": "start",
                  "description": "The zero-based index number indicating the beginning of the substring."
                },
                {
                  "name": "end",
                  "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.toLowerCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.toUpperCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.trim",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Gets a substring beginning at the specified location and having the specified length.",
              "params": [
                {
                  "name": "from",
                  "description": "The starting position of the desired substring. The index of the first character in the string is zero."
                },
                {
                  "name": "length",
                  "description": "The number of characters to include in the returned substring."
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.valueOf",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
              "params": [
                {
                  "name": "searchString",
                  "description": "search string"
                },
                {
                  "name": "position",
                  "description": "If position is undefined, 0 is assumed, so as to search all of the String."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "endPosition",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
              "params": [
                {
                  "name": "form",
                  "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
              "params": [
                {
                  "name": "count",
                  "description": "number of copies to append"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
              "params": [
                {
                  "name": "name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.big",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<big>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.blink",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<blink>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.bold",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<b>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.fixed",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<tt>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the color attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the size attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.italics",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<i>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.link",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML element and sets the href attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.small",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<small>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.strike",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<strike>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.sub",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sub>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.sup",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sup>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.trimEnd",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.trimStart",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.trimLeft",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.trimRight",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "BrowserEvent.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.__@iterator@54430",
            "parameters": [],
            "returnType": "StringIterator<string>",
            "jsdoc": {
              "description": "Iterator",
              "deprecated": false
            }
          },
          {
            "name": "BrowserEvent.at",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": null
          },
          {
            "name": "CDPSessionEvent.toString",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of a string.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the character at the specified index.",
              "params": [
                {
                  "name": "pos",
                  "description": "The zero-based index of the desired character."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the Unicode value of the character at the specified location.",
              "params": [
                {
                  "name": "index",
                  "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string that contains the concatenation of two or more strings.",
              "params": [
                {
                  "name": "strings",
                  "description": "The strings to append to the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the position of the first occurrence of a substring.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for in the string"
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the last occurrence of a substring in the string.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for."
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Determines whether two strings are equivalent in the current locale.",
              "params": [
                {
                  "name": "that",
                  "description": "String to compare to target string"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpMatchArray",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "replaceValue",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Replaces text in a string, using a regular expression or search string.",
              "params": [
                {
                  "name": "searchValue",
                  "description": "A string or regular expression to search for."
                },
                {
                  "name": "replaceValue",
                  "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Finds the first substring match in a regular expression search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "The regular expression pattern and applicable flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a section of a string.",
              "params": [
                {
                  "name": "start",
                  "description": "The index to the beginning of the specified portion of stringObj."
                },
                {
                  "name": "end",
                  "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "limit",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Split a string into substrings using the specified separator and return them as an array.",
              "params": [
                {
                  "name": "separator",
                  "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
                },
                {
                  "name": "limit",
                  "description": "A value used to limit the number of elements returned in the array."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": false
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the substring at the specified location within a String object.",
              "params": [
                {
                  "name": "start",
                  "description": "The zero-based index number indicating the beginning of the substring."
                },
                {
                  "name": "end",
                  "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.toLowerCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.toUpperCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.trim",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Gets a substring beginning at the specified location and having the specified length.",
              "params": [
                {
                  "name": "from",
                  "description": "The starting position of the desired substring. The index of the first character in the string is zero."
                },
                {
                  "name": "length",
                  "description": "The number of characters to include in the returned substring."
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.valueOf",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
              "params": [
                {
                  "name": "searchString",
                  "description": "search string"
                },
                {
                  "name": "position",
                  "description": "If position is undefined, 0 is assumed, so as to search all of the String."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "endPosition",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
              "params": [
                {
                  "name": "form",
                  "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
              "params": [
                {
                  "name": "count",
                  "description": "number of copies to append"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
              "params": [
                {
                  "name": "name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.big",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<big>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.blink",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<blink>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.bold",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<b>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.fixed",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<tt>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the color attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the size attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.italics",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<i>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.link",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML element and sets the href attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.small",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<small>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.strike",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<strike>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.sub",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sub>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.sup",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sup>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.trimEnd",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.trimStart",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.trimLeft",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.trimRight",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "CDPSessionEvent.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.__@iterator@54430",
            "parameters": [],
            "returnType": "StringIterator<string>",
            "jsdoc": {
              "description": "Iterator",
              "deprecated": false
            }
          },
          {
            "name": "CDPSessionEvent.at",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": null
          },
          {
            "name": "connect",
            "parameters": [
              {
                "name": "options",
                "type": "ConnectOptions",
                "optional": false
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "fromSession",
            "parameters": [
              {
                "name": "session",
                "type": "CDPSession",
                "optional": false
              }
            ],
            "returnType": "Connection",
            "jsdoc": null
          },
          {
            "name": "Connection.fromSession",
            "parameters": [
              {
                "name": "session",
                "type": "CDPSession",
                "optional": false
              }
            ],
            "returnType": "Connection",
            "jsdoc": null
          },
          {
            "name": "toString",
            "parameters": [
              {
                "name": "radix",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of an object.",
              "params": [
                {
                  "name": "radix",
                  "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representing a number in fixed-point notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented in exponential notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
              "params": [
                {
                  "name": "precision",
                  "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "valueOf",
            "parameters": [],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              },
              {
                "name": "options",
                "type": "NumberFormatOptions",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts a number to a string by using the current or specified locale.",
              "params": [
                {
                  "name": "locales",
                  "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
                },
                {
                  "name": "options",
                  "description": "An object that contains one or more properties that specify comparison options."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.toString",
            "parameters": [
              {
                "name": "radix",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of an object.",
              "params": [
                {
                  "name": "radix",
                  "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representing a number in fixed-point notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented in exponential notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
              "params": [
                {
                  "name": "precision",
                  "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.valueOf",
            "parameters": [],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "DEFAULT_INTERCEPT_RESOLUTION_PRIORITY.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              },
              {
                "name": "options",
                "type": "NumberFormatOptions",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts a number to a string by using the current or specified locale.",
              "params": [
                {
                  "name": "locales",
                  "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
                },
                {
                  "name": "options",
                  "description": "An object that contains one or more properties that specify comparison options."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "defaultArgs",
            "parameters": [
              {
                "name": "options",
                "type": "LaunchOptions",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "executablePath",
            "parameters": [
              {
                "name": "channel",
                "type": "ChromeReleaseChannel",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "connectTab",
            "parameters": [
              {
                "name": "tabId",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "Promise<ExtensionTransport>",
            "jsdoc": null
          },
          {
            "name": "ExtensionTransport.connectTab",
            "parameters": [
              {
                "name": "tabId",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "Promise<ExtensionTransport>",
            "jsdoc": null
          },
          {
            "name": "InterceptResolutionAction.toString",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of a string.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the character at the specified index.",
              "params": [
                {
                  "name": "pos",
                  "description": "The zero-based index of the desired character."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the Unicode value of the character at the specified location.",
              "params": [
                {
                  "name": "index",
                  "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string that contains the concatenation of two or more strings.",
              "params": [
                {
                  "name": "strings",
                  "description": "The strings to append to the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the position of the first occurrence of a substring.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for in the string"
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the last occurrence of a substring in the string.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for."
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Determines whether two strings are equivalent in the current locale.",
              "params": [
                {
                  "name": "that",
                  "description": "String to compare to target string"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpMatchArray",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "replaceValue",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Replaces text in a string, using a regular expression or search string.",
              "params": [
                {
                  "name": "searchValue",
                  "description": "A string or regular expression to search for."
                },
                {
                  "name": "replaceValue",
                  "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Finds the first substring match in a regular expression search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "The regular expression pattern and applicable flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a section of a string.",
              "params": [
                {
                  "name": "start",
                  "description": "The index to the beginning of the specified portion of stringObj."
                },
                {
                  "name": "end",
                  "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "limit",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Split a string into substrings using the specified separator and return them as an array.",
              "params": [
                {
                  "name": "separator",
                  "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
                },
                {
                  "name": "limit",
                  "description": "A value used to limit the number of elements returned in the array."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": false
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the substring at the specified location within a String object.",
              "params": [
                {
                  "name": "start",
                  "description": "The zero-based index number indicating the beginning of the substring."
                },
                {
                  "name": "end",
                  "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.toLowerCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.toUpperCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.trim",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Gets a substring beginning at the specified location and having the specified length.",
              "params": [
                {
                  "name": "from",
                  "description": "The starting position of the desired substring. The index of the first character in the string is zero."
                },
                {
                  "name": "length",
                  "description": "The number of characters to include in the returned substring."
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.valueOf",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
              "params": [
                {
                  "name": "searchString",
                  "description": "search string"
                },
                {
                  "name": "position",
                  "description": "If position is undefined, 0 is assumed, so as to search all of the String."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "endPosition",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
              "params": [
                {
                  "name": "form",
                  "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
              "params": [
                {
                  "name": "count",
                  "description": "number of copies to append"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
              "params": [
                {
                  "name": "name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.big",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<big>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.blink",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<blink>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.bold",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<b>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.fixed",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<tt>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the color attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the size attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.italics",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<i>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.link",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML element and sets the href attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.small",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<small>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.strike",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<strike>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.sub",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sub>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.sup",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sup>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.trimEnd",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.trimStart",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.trimLeft",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.trimRight",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "InterceptResolutionAction.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.__@iterator@54430",
            "parameters": [],
            "returnType": "StringIterator<string>",
            "jsdoc": {
              "description": "Iterator",
              "deprecated": false
            }
          },
          {
            "name": "InterceptResolutionAction.at",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": null
          },
          {
            "name": "launch",
            "parameters": [
              {
                "name": "options",
                "type": "LaunchOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "race",
            "parameters": [
              {
                "name": "locators",
                "type": "Locators",
                "optional": false
              }
            ],
            "returnType": "Locator<AwaitedLocator<Locators[number]>>",
            "jsdoc": {
              "description": "Creates a race between multiple locators trying to locate elements in\r\nparallel but ensures that only a single element receives the action.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "Locator.race",
            "parameters": [
              {
                "name": "locators",
                "type": "Locators",
                "optional": false
              }
            ],
            "returnType": "Locator<AwaitedLocator<Locators[number]>>",
            "jsdoc": {
              "description": "Creates a race between multiple locators trying to locate elements in\r\nparallel but ensures that only a single element receives the action.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.toString",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of a string.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the character at the specified index.",
              "params": [
                {
                  "name": "pos",
                  "description": "The zero-based index of the desired character."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the Unicode value of the character at the specified location.",
              "params": [
                {
                  "name": "index",
                  "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string that contains the concatenation of two or more strings.",
              "params": [
                {
                  "name": "strings",
                  "description": "The strings to append to the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the position of the first occurrence of a substring.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for in the string"
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the last occurrence of a substring in the string.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for."
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Determines whether two strings are equivalent in the current locale.",
              "params": [
                {
                  "name": "that",
                  "description": "String to compare to target string"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpMatchArray",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "replaceValue",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Replaces text in a string, using a regular expression or search string.",
              "params": [
                {
                  "name": "searchValue",
                  "description": "A string or regular expression to search for."
                },
                {
                  "name": "replaceValue",
                  "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Finds the first substring match in a regular expression search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "The regular expression pattern and applicable flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a section of a string.",
              "params": [
                {
                  "name": "start",
                  "description": "The index to the beginning of the specified portion of stringObj."
                },
                {
                  "name": "end",
                  "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "limit",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Split a string into substrings using the specified separator and return them as an array.",
              "params": [
                {
                  "name": "separator",
                  "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
                },
                {
                  "name": "limit",
                  "description": "A value used to limit the number of elements returned in the array."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": false
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the substring at the specified location within a String object.",
              "params": [
                {
                  "name": "start",
                  "description": "The zero-based index number indicating the beginning of the substring."
                },
                {
                  "name": "end",
                  "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.toLowerCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.toUpperCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.trim",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Gets a substring beginning at the specified location and having the specified length.",
              "params": [
                {
                  "name": "from",
                  "description": "The starting position of the desired substring. The index of the first character in the string is zero."
                },
                {
                  "name": "length",
                  "description": "The number of characters to include in the returned substring."
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.valueOf",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
              "params": [
                {
                  "name": "searchString",
                  "description": "search string"
                },
                {
                  "name": "position",
                  "description": "If position is undefined, 0 is assumed, so as to search all of the String."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "endPosition",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
              "params": [
                {
                  "name": "form",
                  "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
              "params": [
                {
                  "name": "count",
                  "description": "number of copies to append"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
              "params": [
                {
                  "name": "name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.big",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<big>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.blink",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<blink>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.bold",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<b>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.fixed",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<tt>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the color attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the size attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.italics",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<i>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.link",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML element and sets the href attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.small",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<small>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.strike",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<strike>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.sub",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sub>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.sup",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sup>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.trimEnd",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.trimStart",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.trimLeft",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.trimRight",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "LocatorEvent.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.__@iterator@54430",
            "parameters": [],
            "returnType": "StringIterator<string>",
            "jsdoc": {
              "description": "Iterator",
              "deprecated": false
            }
          },
          {
            "name": "LocatorEvent.at",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": null
          },
          {
            "name": "MouseButton.toString",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of a string.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the character at the specified index.",
              "params": [
                {
                  "name": "pos",
                  "description": "The zero-based index of the desired character."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the Unicode value of the character at the specified location.",
              "params": [
                {
                  "name": "index",
                  "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string that contains the concatenation of two or more strings.",
              "params": [
                {
                  "name": "strings",
                  "description": "The strings to append to the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the position of the first occurrence of a substring.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for in the string"
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the last occurrence of a substring in the string.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for."
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Determines whether two strings are equivalent in the current locale.",
              "params": [
                {
                  "name": "that",
                  "description": "String to compare to target string"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpMatchArray",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "replaceValue",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Replaces text in a string, using a regular expression or search string.",
              "params": [
                {
                  "name": "searchValue",
                  "description": "A string or regular expression to search for."
                },
                {
                  "name": "replaceValue",
                  "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Finds the first substring match in a regular expression search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "The regular expression pattern and applicable flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a section of a string.",
              "params": [
                {
                  "name": "start",
                  "description": "The index to the beginning of the specified portion of stringObj."
                },
                {
                  "name": "end",
                  "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "limit",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Split a string into substrings using the specified separator and return them as an array.",
              "params": [
                {
                  "name": "separator",
                  "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
                },
                {
                  "name": "limit",
                  "description": "A value used to limit the number of elements returned in the array."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": false
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the substring at the specified location within a String object.",
              "params": [
                {
                  "name": "start",
                  "description": "The zero-based index number indicating the beginning of the substring."
                },
                {
                  "name": "end",
                  "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.toLowerCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.toUpperCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.trim",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Gets a substring beginning at the specified location and having the specified length.",
              "params": [
                {
                  "name": "from",
                  "description": "The starting position of the desired substring. The index of the first character in the string is zero."
                },
                {
                  "name": "length",
                  "description": "The number of characters to include in the returned substring."
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.valueOf",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
              "params": [
                {
                  "name": "searchString",
                  "description": "search string"
                },
                {
                  "name": "position",
                  "description": "If position is undefined, 0 is assumed, so as to search all of the String."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "endPosition",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
              "params": [
                {
                  "name": "form",
                  "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
              "params": [
                {
                  "name": "count",
                  "description": "number of copies to append"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
              "params": [
                {
                  "name": "name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.big",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<big>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.blink",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<blink>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.bold",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<b>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.fixed",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<tt>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the color attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the size attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.italics",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<i>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.link",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML element and sets the href attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.small",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<small>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.strike",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<strike>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.sub",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sub>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.sup",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sup>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.trimEnd",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.trimStart",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.trimLeft",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.trimRight",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "MouseButton.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.__@iterator@54430",
            "parameters": [],
            "returnType": "StringIterator<string>",
            "jsdoc": {
              "description": "Iterator",
              "deprecated": false
            }
          },
          {
            "name": "MouseButton.at",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": null
          },
          {
            "name": "PageEvent.toString",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of a string.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the character at the specified index.",
              "params": [
                {
                  "name": "pos",
                  "description": "The zero-based index of the desired character."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the Unicode value of the character at the specified location.",
              "params": [
                {
                  "name": "index",
                  "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string that contains the concatenation of two or more strings.",
              "params": [
                {
                  "name": "strings",
                  "description": "The strings to append to the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the position of the first occurrence of a substring.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for in the string"
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the last occurrence of a substring in the string.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for."
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Determines whether two strings are equivalent in the current locale.",
              "params": [
                {
                  "name": "that",
                  "description": "String to compare to target string"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpMatchArray",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "replaceValue",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Replaces text in a string, using a regular expression or search string.",
              "params": [
                {
                  "name": "searchValue",
                  "description": "A string or regular expression to search for."
                },
                {
                  "name": "replaceValue",
                  "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Finds the first substring match in a regular expression search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "The regular expression pattern and applicable flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a section of a string.",
              "params": [
                {
                  "name": "start",
                  "description": "The index to the beginning of the specified portion of stringObj."
                },
                {
                  "name": "end",
                  "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "limit",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Split a string into substrings using the specified separator and return them as an array.",
              "params": [
                {
                  "name": "separator",
                  "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
                },
                {
                  "name": "limit",
                  "description": "A value used to limit the number of elements returned in the array."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": false
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the substring at the specified location within a String object.",
              "params": [
                {
                  "name": "start",
                  "description": "The zero-based index number indicating the beginning of the substring."
                },
                {
                  "name": "end",
                  "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.toLowerCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.toUpperCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.trim",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Gets a substring beginning at the specified location and having the specified length.",
              "params": [
                {
                  "name": "from",
                  "description": "The starting position of the desired substring. The index of the first character in the string is zero."
                },
                {
                  "name": "length",
                  "description": "The number of characters to include in the returned substring."
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.valueOf",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
              "params": [
                {
                  "name": "searchString",
                  "description": "search string"
                },
                {
                  "name": "position",
                  "description": "If position is undefined, 0 is assumed, so as to search all of the String."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "endPosition",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
              "params": [
                {
                  "name": "form",
                  "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
              "params": [
                {
                  "name": "count",
                  "description": "number of copies to append"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
              "params": [
                {
                  "name": "name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.big",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<big>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.blink",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<blink>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.bold",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<b>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.fixed",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<tt>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the color attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the size attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.italics",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<i>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.link",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML element and sets the href attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.small",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<small>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.strike",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<strike>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.sub",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sub>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.sup",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sup>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.trimEnd",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.trimStart",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.trimLeft",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.trimRight",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "PageEvent.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.__@iterator@54430",
            "parameters": [],
            "returnType": "StringIterator<string>",
            "jsdoc": {
              "description": "Iterator",
              "deprecated": false
            }
          },
          {
            "name": "PageEvent.at",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": null
          },
          {
            "name": "captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            }
          },
          {
            "name": "prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ProtocolError.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            }
          },
          {
            "name": "ProtocolError.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ProtocolError.toString",
            "parameters": [
              {
                "name": "radix",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of an object.",
              "params": [
                {
                  "name": "radix",
                  "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ProtocolError.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representing a number in fixed-point notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ProtocolError.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented in exponential notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ProtocolError.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
              "params": [
                {
                  "name": "precision",
                  "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ProtocolError.valueOf",
            "parameters": [],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "ProtocolError.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              },
              {
                "name": "options",
                "type": "NumberFormatOptions",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts a number to a string by using the current or specified locale.",
              "params": [
                {
                  "name": "locales",
                  "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
                },
                {
                  "name": "options",
                  "description": "An object that contains one or more properties that specify comparison options."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "registerCustomQueryHandler",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              },
              {
                "name": "queryHandler",
                "type": "CustomQueryHandler",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Registers a  | custom query handler .",
              "params": [
                {
                  "name": "name",
                  "description": "- The name that the custom query handler will be registered\r\nunder."
                },
                {
                  "name": "queryHandler",
                  "description": "- The  | custom query handler \r\nto register."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "unregisterCustomQueryHandler",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Unregisters a custom query handler for a given name.",
              "deprecated": false
            }
          },
          {
            "name": "customQueryHandlerNames",
            "parameters": [],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Gets the names of all custom query handlers.",
              "deprecated": false
            }
          },
          {
            "name": "clearCustomQueryHandlers",
            "parameters": [],
            "returnType": "void",
            "jsdoc": {
              "description": "Unregisters all custom query handlers.",
              "deprecated": false
            }
          },
          {
            "name": "Puppeteer.registerCustomQueryHandler",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              },
              {
                "name": "queryHandler",
                "type": "CustomQueryHandler",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Registers a  | custom query handler .",
              "params": [
                {
                  "name": "name",
                  "description": "- The name that the custom query handler will be registered\r\nunder."
                },
                {
                  "name": "queryHandler",
                  "description": "- The  | custom query handler \r\nto register."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "Puppeteer.unregisterCustomQueryHandler",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Unregisters a custom query handler for a given name.",
              "deprecated": false
            }
          },
          {
            "name": "Puppeteer.customQueryHandlerNames",
            "parameters": [],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Gets the names of all custom query handlers.",
              "deprecated": false
            }
          },
          {
            "name": "Puppeteer.clearCustomQueryHandlers",
            "parameters": [],
            "returnType": "void",
            "jsdoc": {
              "description": "Unregisters all custom query handlers.",
              "deprecated": false
            }
          },
          {
            "name": "trimCache",
            "parameters": [],
            "returnType": "Promise<void>",
            "jsdoc": {
              "description": "Removes all non-current Firefox and Chrome binaries in the cache directory\r\nidentified by the provided Puppeteer configuration. The current browser\r\nversion is determined by resolving PUPPETEER_REVISIONS from Puppeteer\r\nunless `configuration.browserRevision` is provided.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "default.connect",
            "parameters": [
              {
                "name": "options",
                "type": "ConnectOptions",
                "optional": false
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Puppeteer to an existing browser instance.",
              "params": [
                {
                  "name": "options",
                  "description": "- Set of configurable options to set on the browser."
                }
              ],
              "returns": "Promise which resolves to browser instance.",
              "deprecated": false
            }
          },
          {
            "name": "default.launch",
            "parameters": [
              {
                "name": "options",
                "type": "LaunchOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "Launches a browser instance with given arguments and options when\r\nspecified.\r\n\r\nWhen using with `puppeteer-core`,\r\n | options.executablePath  or\r\n | options.channel  must be provided.",
              "params": [
                {
                  "name": "options",
                  "description": "- Options to configure launching behavior."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.executablePath",
            "parameters": [
              {
                "name": "channel",
                "type": "ChromeReleaseChannel",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "The default executable path for a given ChromeReleaseChannel.",
              "deprecated": false
            }
          },
          {
            "name": "default.toString",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of a string.",
              "deprecated": false
            }
          },
          {
            "name": "default.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the character at the specified index.",
              "params": [
                {
                  "name": "pos",
                  "description": "The zero-based index of the desired character."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the Unicode value of the character at the specified location.",
              "params": [
                {
                  "name": "index",
                  "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string that contains the concatenation of two or more strings.",
              "params": [
                {
                  "name": "strings",
                  "description": "The strings to append to the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the position of the first occurrence of a substring.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for in the string"
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the last occurrence of a substring in the string.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for."
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Determines whether two strings are equivalent in the current locale.",
              "params": [
                {
                  "name": "that",
                  "description": "String to compare to target string"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpMatchArray",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "replaceValue",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Replaces text in a string, using a regular expression or search string.",
              "params": [
                {
                  "name": "searchValue",
                  "description": "A string or regular expression to search for."
                },
                {
                  "name": "replaceValue",
                  "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Finds the first substring match in a regular expression search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "The regular expression pattern and applicable flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a section of a string.",
              "params": [
                {
                  "name": "start",
                  "description": "The index to the beginning of the specified portion of stringObj."
                },
                {
                  "name": "end",
                  "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "limit",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Split a string into substrings using the specified separator and return them as an array.",
              "params": [
                {
                  "name": "separator",
                  "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
                },
                {
                  "name": "limit",
                  "description": "A value used to limit the number of elements returned in the array."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": false
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the substring at the specified location within a String object.",
              "params": [
                {
                  "name": "start",
                  "description": "The zero-based index number indicating the beginning of the substring."
                },
                {
                  "name": "end",
                  "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.toLowerCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "deprecated": false
            }
          },
          {
            "name": "default.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "default.toUpperCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "deprecated": false
            }
          },
          {
            "name": "default.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "default.trim",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "default.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Gets a substring beginning at the specified location and having the specified length.",
              "params": [
                {
                  "name": "from",
                  "description": "The starting position of the desired substring. The index of the first character in the string is zero."
                },
                {
                  "name": "length",
                  "description": "The number of characters to include in the returned substring."
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "default.valueOf",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "default.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "deprecated": false
            }
          },
          {
            "name": "default.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
              "params": [
                {
                  "name": "searchString",
                  "description": "search string"
                },
                {
                  "name": "position",
                  "description": "If position is undefined, 0 is assumed, so as to search all of the String."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "endPosition",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "default.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
              "params": [
                {
                  "name": "form",
                  "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
              "params": [
                {
                  "name": "count",
                  "description": "number of copies to append"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "default.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
              "params": [
                {
                  "name": "name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "default.big",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<big>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.blink",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<blink>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.bold",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<b>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.fixed",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<tt>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the color attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the size attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.italics",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<i>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.link",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML element and sets the href attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.small",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<small>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.strike",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<strike>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.sub",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sub>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.sup",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sup>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.trimEnd",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "default.trimStart",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "default.trimLeft",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.trimRight",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "default.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "default.__@iterator@54430",
            "parameters": [],
            "returnType": "StringIterator<string>",
            "jsdoc": {
              "description": "Iterator",
              "deprecated": false
            }
          },
          {
            "name": "default.at",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": null
          },
          {
            "name": "default.defaultArgs",
            "parameters": [
              {
                "name": "options",
                "type": "LaunchOptions",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "",
              "params": [
                {
                  "name": "options",
                  "description": "- Set of configurable options to set on the browser."
                }
              ],
              "returns": "The default arguments that the browser will be launched with.",
              "deprecated": false
            }
          },
          {
            "name": "default.trimCache",
            "parameters": [],
            "returnType": "Promise<void>",
            "jsdoc": {
              "description": "Removes all non-current Firefox and Chrome binaries in the cache directory\r\nidentified by the provided Puppeteer configuration. The current browser\r\nversion is determined by resolving PUPPETEER_REVISIONS from Puppeteer\r\nunless `configuration.browserRevision` is provided.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerError.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerError.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerError.toString",
            "parameters": [
              {
                "name": "radix",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of an object.",
              "params": [
                {
                  "name": "radix",
                  "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerError.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representing a number in fixed-point notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerError.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented in exponential notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerError.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
              "params": [
                {
                  "name": "precision",
                  "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerError.valueOf",
            "parameters": [],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerError.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              },
              {
                "name": "options",
                "type": "NumberFormatOptions",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts a number to a string by using the current or specified locale.",
              "params": [
                {
                  "name": "locales",
                  "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
                },
                {
                  "name": "options",
                  "description": "An object that contains one or more properties that specify comparison options."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerNode.registerCustomQueryHandler",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              },
              {
                "name": "queryHandler",
                "type": "CustomQueryHandler",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Registers a  | custom query handler .",
              "params": [
                {
                  "name": "name",
                  "description": "- The name that the custom query handler will be registered\r\nunder."
                },
                {
                  "name": "queryHandler",
                  "description": "- The  | custom query handler \r\nto register."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerNode.unregisterCustomQueryHandler",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Unregisters a custom query handler for a given name.",
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerNode.customQueryHandlerNames",
            "parameters": [],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Gets the names of all custom query handlers.",
              "deprecated": false
            }
          },
          {
            "name": "PuppeteerNode.clearCustomQueryHandlers",
            "parameters": [],
            "returnType": "void",
            "jsdoc": {
              "description": "Unregisters all custom query handlers.",
              "deprecated": false
            }
          },
          {
            "name": "from",
            "parameters": [
              {
                "name": "src",
                "type": "string | Object | Stream | Blob | ArrayBuffer | Iterable<any> | AsyncIterable<any> | AsyncGeneratorFunction | Promise<...>",
                "optional": false
              }
            ],
            "returnType": "Duplex",
            "jsdoc": {
              "description": "A utility method for creating duplex streams.\n\n- `Stream` converts writable stream into writable `Duplex` and readable stream\n  to `Duplex`.\n- `Blob` converts into readable `Duplex`.\n- `string` converts into readable `Duplex`.\n- `ArrayBuffer` converts into readable `Duplex`.\n- `AsyncIterable` converts into a readable `Duplex`. Cannot yield `null`.\n- `AsyncGeneratorFunction` converts into a readable/writable transform\n  `Duplex`. Must take a source `AsyncIterable` as first parameter. Cannot yield\n  `null`.\n- `AsyncFunction` converts into a writable `Duplex`. Must return\n  either `null` or `undefined`\n- `Object ({ writable, readable })` converts `readable` and\n  `writable` into `Stream` and then combines them into `Duplex` where the\n  `Duplex` will write to the `writable` and read from the `readable`.\n- `Promise` converts into readable `Duplex`. Value `null` is ignored.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "toWeb",
            "parameters": [
              {
                "name": "streamDuplex",
                "type": "Duplex",
                "optional": false
              }
            ],
            "returnType": "{ readable: ReadableStream<any>; writable: WritableStream<any>; }",
            "jsdoc": {
              "description": "A utility method for creating a web `ReadableStream` and `WritableStream` from a `Duplex`.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "fromWeb",
            "parameters": [
              {
                "name": "duplexStream",
                "type": "{ readable: ReadableStream<any>; writable: WritableStream<any>; }",
                "optional": false
              },
              {
                "name": "options",
                "type": "Pick<DuplexOptions<Duplex>, \"allowHalfOpen\" | \"decodeStrings\" | \"encoding\" | \"highWaterMark\" | \"objectMode\" | \"signal\">",
                "optional": true
              }
            ],
            "returnType": "Duplex",
            "jsdoc": {
              "description": "A utility method for creating a `Duplex` from a web `ReadableStream` and `WritableStream`.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "duplexPair",
            "parameters": [
              {
                "name": "options",
                "type": "DuplexOptions<Duplex>",
                "optional": true
              }
            ],
            "returnType": "[Duplex, Duplex]",
            "jsdoc": {
              "description": "The utility function `duplexPair` returns an Array with two items,\neach being a `Duplex` stream connected to the other side:\n\n```js\nconst [ sideA, sideB ] = duplexPair();\n```\n\nWhatever is written to one stream is made readable on the other. It provides\nbehavior analogous to a network connection, where the data written by the client\nbecomes readable by the server, and vice-versa.\n\nThe Duplex streams are symmetrical; one or the other may be used without any\ndifference in behavior.",
              "params": [
                {
                  "name": "options",
                  "description": "A value to pass to both    constructors,\nto set options such as buffering."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "addAbortSignal",
            "parameters": [
              {
                "name": "signal",
                "type": "AbortSignal",
                "optional": false
              },
              {
                "name": "stream",
                "type": "T",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "A stream to attach a signal to.\n\nAttaches an AbortSignal to a readable or writeable stream. This lets code\ncontrol stream destruction using an `AbortController`.\n\nCalling `abort` on the `AbortController` corresponding to the passed `AbortSignal` will behave the same way as calling `.destroy(new AbortError())` on the\nstream, and `controller.error(new AbortError())` for webstreams.\n\n```js\nimport fs from 'node:fs';\n\nconst controller = new AbortController();\nconst read = addAbortSignal(\n  controller.signal,\n  fs.createReadStream(('object.json')),\n);\n// Later, abort the operation closing the stream\ncontroller.abort();\n```\n\nOr using an `AbortSignal` with a readable stream as an async iterable:\n\n```js\nconst controller = new AbortController();\nsetTimeout(() => controller.abort(), 10_000); // set a timeout\nconst stream = addAbortSignal(\n  controller.signal,\n  fs.createReadStream(('object.json')),\n);\n(async () => {\n  try {\n    for await (const chunk of stream) {\n      await process(chunk);\n    }\n  } catch (e) {\n    if (e.name === 'AbortError') {\n      // The operation was cancelled\n    } else {\n      throw e;\n    }\n  }\n})();\n```\n\nOr using an `AbortSignal` with a ReadableStream:\n\n```js\nconst controller = new AbortController();\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue('hello');\n    controller.enqueue('world');\n    controller.close();\n  },\n});\n\naddAbortSignal(controller.signal, rs);\n\nfinished(rs, (err) => {\n  if (err) {\n    if (err.name === 'AbortError') {\n      // The operation was cancelled\n    }\n  }\n});\n\nconst reader = rs.getReader();\n\nreader.read().then(({ value, done }) => {\n  console.log(value); // hello\n  console.log(done); // false\n  controller.abort();\n});\n```",
              "params": [
                {
                  "name": "signal",
                  "description": "A signal representing possible cancellation"
                },
                {
                  "name": "stream",
                  "description": "A stream to attach a signal to."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "getDefaultHighWaterMark",
            "parameters": [
              {
                "name": "objectMode",
                "type": "boolean",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the default highWaterMark used by streams.\nDefaults to `65536` (64 KiB), or `16` for `objectMode`.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "setDefaultHighWaterMark",
            "parameters": [
              {
                "name": "objectMode",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "value",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Sets the default highWaterMark used by streams.",
              "params": [
                {
                  "name": "value",
                  "description": "highWaterMark value"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "finished",
            "parameters": [
              {
                "name": "stream",
                "type": "ReadableStream | WritableStream | ReadWriteStream",
                "optional": false
              },
              {
                "name": "options",
                "type": "FinishedOptions",
                "optional": false
              },
              {
                "name": "callback",
                "type": "(err?: ErrnoException) => void",
                "optional": false
              }
            ],
            "returnType": "() => void",
            "jsdoc": {
              "description": "A readable and/or writable stream/webstream.\n\nA function to get notified when a stream is no longer readable, writable\nor has experienced an error or a premature close event.\n\n```js\nimport { finished } from 'node:stream';\nimport fs from 'node:fs';\n\nconst rs = fs.createReadStream('archive.tar');\n\nfinished(rs, (err) => {\n  if (err) {\n    console.error('Stream failed.', err);\n  } else {\n    console.log('Stream is done reading.');\n  }\n});\n\nrs.resume(); // Drain the stream.\n```\n\nEspecially useful in error handling scenarios where a stream is destroyed\nprematurely (like an aborted HTTP request), and will not emit `'end'` or `'finish'`.\n\nThe `finished` API provides [`promise version`](https://nodejs.org/docs/latest-v22.x/api/stream.html#streamfinishedstream-options).\n\n`stream.finished()` leaves dangling event listeners (in particular `'error'`, `'end'`, `'finish'` and `'close'`) after `callback` has been\ninvoked. The reason for this is so that unexpected `'error'` events (due to\nincorrect stream implementations) do not cause unexpected crashes.\nIf this is unwanted behavior then the returned cleanup function needs to be\ninvoked in the callback:\n\n```js\nconst cleanup = finished(rs, (err) => {\n  cleanup();\n  // ...\n});\n```",
              "params": [
                {
                  "name": "stream",
                  "description": "A readable and/or writable stream."
                },
                {
                  "name": "callback",
                  "description": "A callback function that takes an optional error argument."
                }
              ],
              "returns": "A cleanup function which removes all registered listeners.",
              "deprecated": false
            }
          },
          {
            "name": "pipeline",
            "parameters": [
              {
                "name": "source",
                "type": "A",
                "optional": false
              },
              {
                "name": "destination",
                "type": "B",
                "optional": false
              },
              {
                "name": "callback",
                "type": "PipelineCallback<B>",
                "optional": false
              }
            ],
            "returnType": "B extends WritableStream ? B : WritableStream",
            "jsdoc": {
              "description": "A module method to pipe between streams and generators forwarding errors and\nproperly cleaning up and provide a callback when the pipeline is complete.\n\n```js\nimport { pipeline } from 'node:stream';\nimport fs from 'node:fs';\nimport zlib from 'node:zlib';\n\n// Use the pipeline API to easily pipe a series of streams\n// together and get notified when the pipeline is fully done.\n\n// A pipeline to gzip a potentially huge tar file efficiently:\n\npipeline(\n  fs.createReadStream('archive.tar'),\n  zlib.createGzip(),\n  fs.createWriteStream('archive.tar.gz'),\n  (err) => {\n    if (err) {\n      console.error('Pipeline failed.', err);\n    } else {\n      console.log('Pipeline succeeded.');\n    }\n  },\n);\n```\n\nThe `pipeline` API provides a [`promise version`](https://nodejs.org/docs/latest-v22.x/api/stream.html#streampipelinesource-transforms-destination-options).\n\n`stream.pipeline()` will call `stream.destroy(err)` on all streams except:\n\n* `Readable` streams which have emitted `'end'` or `'close'`.\n* `Writable` streams which have emitted `'finish'` or `'close'`.\n\n`stream.pipeline()` leaves dangling event listeners on the streams\nafter the `callback` has been invoked. In the case of reuse of streams after\nfailure, this can cause event listener leaks and swallowed errors. If the last\nstream is readable, dangling event listeners will be removed so that the last\nstream can be consumed later.\n\n`stream.pipeline()` closes all the streams when an error is raised.\nThe `IncomingRequest` usage with `pipeline` could lead to an unexpected behavior\nonce it would destroy the socket without sending the expected response.\nSee the example below:\n\n```js\nimport fs from 'node:fs';\nimport http from 'node:http';\nimport { pipeline } from 'node:stream';\n\nconst server = http.createServer((req, res) => {\n  const fileStream = fs.createReadStream('./fileNotExist.txt');\n  pipeline(fileStream, res, (err) => {\n    if (err) {\n      console.log(err); // No such file\n      // this message can't be sent once `pipeline` already destroyed the socket\n      return res.end('error!!!');\n    }\n  });\n});\n```",
              "params": [
                {
                  "name": "callback",
                  "description": "Called when the pipeline is fully done."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "isErrored",
            "parameters": [
              {
                "name": "stream",
                "type": "Readable | Writable | ReadableStream | WritableStream",
                "optional": false
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns whether the stream has encountered an error.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "isReadable",
            "parameters": [
              {
                "name": "stream",
                "type": "Readable | ReadableStream",
                "optional": false
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns whether the stream is readable.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "once",
            "parameters": [
              {
                "name": "emitter",
                "type": "EventEmitter<DefaultEventMap>",
                "optional": false
              },
              {
                "name": "eventName",
                "type": "string | symbol",
                "optional": false
              },
              {
                "name": "options",
                "type": "StaticEventEmitterOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<any[]>",
            "jsdoc": {
              "description": "Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\nsemantics and does not listen to the `'error'` event.\n\n```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```\n\nThe special handling of the `'error'` event is only used when `events.once()` is used to wait for another event. If `events.once()` is used to wait for the\n'`error'` event itself, then it is treated as any other kind of event without\nspecial handling:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```\n\nAn `AbortSignal` can be used to cancel waiting for the event:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "on",
            "parameters": [
              {
                "name": "emitter",
                "type": "EventEmitter<DefaultEventMap>",
                "optional": false
              },
              {
                "name": "eventName",
                "type": "string | symbol",
                "optional": false
              },
              {
                "name": "options",
                "type": "StaticEventEmitterIteratorOptions",
                "optional": true
              }
            ],
            "returnType": "AsyncIterator<any[], any, any>",
            "jsdoc": {
              "description": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```\n\nReturns an `AsyncIterator` that iterates `eventName` events. It will throw\nif the `EventEmitter` emits `'error'`. It removes all listeners when\nexiting the loop. The `value` returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn `AbortSignal` can be used to cancel waiting on events:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```\n\nUse the `close` option to specify an array of event names that will end the iteration:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "listenerCount",
            "parameters": [
              {
                "name": "emitter",
                "type": "EventEmitter<DefaultEventMap>",
                "optional": false
              },
              {
                "name": "eventName",
                "type": "string | symbol",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "A class method that returns the number of listeners for the given `eventName` registered on the given `emitter`.\n\n```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```",
              "params": [
                {
                  "name": "emitter",
                  "description": "The emitter to query"
                },
                {
                  "name": "eventName",
                  "description": "The event name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "getEventListeners",
            "parameters": [
              {
                "name": "emitter",
                "type": "EventEmitter<DefaultEventMap> | EventTarget",
                "optional": false
              },
              {
                "name": "name",
                "type": "string | symbol",
                "optional": false
              }
            ],
            "returnType": "Function[]",
            "jsdoc": {
              "description": "Returns a copy of the array of listeners for the event named `eventName`.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.listeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "getMaxListeners",
            "parameters": [
              {
                "name": "emitter",
                "type": "EventEmitter<DefaultEventMap> | EventTarget",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the currently set max amount of listeners.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.getMaxListeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "setMaxListeners",
            "parameters": [
              {
                "name": "n",
                "type": "number",
                "optional": true
              },
              {
                "name": "eventTargets",
                "type": "(EventEmitter<DefaultEventMap> | EventTarget)[]",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```",
              "params": [
                {
                  "name": "n",
                  "description": "A non-negative number. The maximum number of listeners per `EventTarget` event."
                },
                {
                  "name": "eventTargets",
                  "description": "Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, `n` is set as the default max for all newly created {EventTarget} and {EventEmitter}\nobjects."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "addAbortListener",
            "parameters": [
              {
                "name": "signal",
                "type": "AbortSignal",
                "optional": false
              },
              {
                "name": "resource",
                "type": "(event: Event) => void",
                "optional": false
              }
            ],
            "returnType": "Disposable",
            "jsdoc": {
              "description": "Listens once to the `abort` event on the provided `signal`.\n\nListening to the `abort` event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using `AbortSignal`s in Node.js APIs by solving these\ntwo issues by listening to the event such that `stopImmediatePropagation` does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.from",
            "parameters": [
              {
                "name": "src",
                "type": "string | Object | Stream | Blob | ArrayBuffer | Iterable<any> | AsyncIterable<any> | AsyncGeneratorFunction | Promise<...>",
                "optional": false
              }
            ],
            "returnType": "Duplex",
            "jsdoc": {
              "description": "A utility method for creating duplex streams.\n\n- `Stream` converts writable stream into writable `Duplex` and readable stream\n  to `Duplex`.\n- `Blob` converts into readable `Duplex`.\n- `string` converts into readable `Duplex`.\n- `ArrayBuffer` converts into readable `Duplex`.\n- `AsyncIterable` converts into a readable `Duplex`. Cannot yield `null`.\n- `AsyncGeneratorFunction` converts into a readable/writable transform\n  `Duplex`. Must take a source `AsyncIterable` as first parameter. Cannot yield\n  `null`.\n- `AsyncFunction` converts into a writable `Duplex`. Must return\n  either `null` or `undefined`\n- `Object ({ writable, readable })` converts `readable` and\n  `writable` into `Stream` and then combines them into `Duplex` where the\n  `Duplex` will write to the `writable` and read from the `readable`.\n- `Promise` converts into readable `Duplex`. Value `null` is ignored.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.toWeb",
            "parameters": [
              {
                "name": "streamDuplex",
                "type": "Duplex",
                "optional": false
              }
            ],
            "returnType": "{ readable: ReadableStream<any>; writable: WritableStream<any>; }",
            "jsdoc": {
              "description": "A utility method for creating a web `ReadableStream` and `WritableStream` from a `Duplex`.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.fromWeb",
            "parameters": [
              {
                "name": "duplexStream",
                "type": "{ readable: ReadableStream<any>; writable: WritableStream<any>; }",
                "optional": false
              },
              {
                "name": "options",
                "type": "Pick<DuplexOptions<Duplex>, \"allowHalfOpen\" | \"decodeStrings\" | \"encoding\" | \"highWaterMark\" | \"objectMode\" | \"signal\">",
                "optional": true
              }
            ],
            "returnType": "Duplex",
            "jsdoc": {
              "description": "A utility method for creating a `Duplex` from a web `ReadableStream` and `WritableStream`.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.duplexPair",
            "parameters": [
              {
                "name": "options",
                "type": "DuplexOptions<Duplex>",
                "optional": true
              }
            ],
            "returnType": "[Duplex, Duplex]",
            "jsdoc": {
              "description": "The utility function `duplexPair` returns an Array with two items,\neach being a `Duplex` stream connected to the other side:\n\n```js\nconst [ sideA, sideB ] = duplexPair();\n```\n\nWhatever is written to one stream is made readable on the other. It provides\nbehavior analogous to a network connection, where the data written by the client\nbecomes readable by the server, and vice-versa.\n\nThe Duplex streams are symmetrical; one or the other may be used without any\ndifference in behavior.",
              "params": [
                {
                  "name": "options",
                  "description": "A value to pass to both    constructors,\nto set options such as buffering."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.addAbortSignal",
            "parameters": [
              {
                "name": "signal",
                "type": "AbortSignal",
                "optional": false
              },
              {
                "name": "stream",
                "type": "T",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "A stream to attach a signal to.\n\nAttaches an AbortSignal to a readable or writeable stream. This lets code\ncontrol stream destruction using an `AbortController`.\n\nCalling `abort` on the `AbortController` corresponding to the passed `AbortSignal` will behave the same way as calling `.destroy(new AbortError())` on the\nstream, and `controller.error(new AbortError())` for webstreams.\n\n```js\nimport fs from 'node:fs';\n\nconst controller = new AbortController();\nconst read = addAbortSignal(\n  controller.signal,\n  fs.createReadStream(('object.json')),\n);\n// Later, abort the operation closing the stream\ncontroller.abort();\n```\n\nOr using an `AbortSignal` with a readable stream as an async iterable:\n\n```js\nconst controller = new AbortController();\nsetTimeout(() => controller.abort(), 10_000); // set a timeout\nconst stream = addAbortSignal(\n  controller.signal,\n  fs.createReadStream(('object.json')),\n);\n(async () => {\n  try {\n    for await (const chunk of stream) {\n      await process(chunk);\n    }\n  } catch (e) {\n    if (e.name === 'AbortError') {\n      // The operation was cancelled\n    } else {\n      throw e;\n    }\n  }\n})();\n```\n\nOr using an `AbortSignal` with a ReadableStream:\n\n```js\nconst controller = new AbortController();\nconst rs = new ReadableStream({\n  start(controller) {\n    controller.enqueue('hello');\n    controller.enqueue('world');\n    controller.close();\n  },\n});\n\naddAbortSignal(controller.signal, rs);\n\nfinished(rs, (err) => {\n  if (err) {\n    if (err.name === 'AbortError') {\n      // The operation was cancelled\n    }\n  }\n});\n\nconst reader = rs.getReader();\n\nreader.read().then(({ value, done }) => {\n  console.log(value); // hello\n  console.log(done); // false\n  controller.abort();\n});\n```",
              "params": [
                {
                  "name": "signal",
                  "description": "A signal representing possible cancellation"
                },
                {
                  "name": "stream",
                  "description": "A stream to attach a signal to."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.getDefaultHighWaterMark",
            "parameters": [
              {
                "name": "objectMode",
                "type": "boolean",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the default highWaterMark used by streams.\nDefaults to `65536` (64 KiB), or `16` for `objectMode`.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.setDefaultHighWaterMark",
            "parameters": [
              {
                "name": "objectMode",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "value",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Sets the default highWaterMark used by streams.",
              "params": [
                {
                  "name": "value",
                  "description": "highWaterMark value"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.finished",
            "parameters": [
              {
                "name": "stream",
                "type": "ReadableStream | WritableStream | ReadWriteStream",
                "optional": false
              },
              {
                "name": "options",
                "type": "FinishedOptions",
                "optional": false
              },
              {
                "name": "callback",
                "type": "(err?: ErrnoException) => void",
                "optional": false
              }
            ],
            "returnType": "() => void",
            "jsdoc": {
              "description": "A readable and/or writable stream/webstream.\n\nA function to get notified when a stream is no longer readable, writable\nor has experienced an error or a premature close event.\n\n```js\nimport { finished } from 'node:stream';\nimport fs from 'node:fs';\n\nconst rs = fs.createReadStream('archive.tar');\n\nfinished(rs, (err) => {\n  if (err) {\n    console.error('Stream failed.', err);\n  } else {\n    console.log('Stream is done reading.');\n  }\n});\n\nrs.resume(); // Drain the stream.\n```\n\nEspecially useful in error handling scenarios where a stream is destroyed\nprematurely (like an aborted HTTP request), and will not emit `'end'` or `'finish'`.\n\nThe `finished` API provides [`promise version`](https://nodejs.org/docs/latest-v22.x/api/stream.html#streamfinishedstream-options).\n\n`stream.finished()` leaves dangling event listeners (in particular `'error'`, `'end'`, `'finish'` and `'close'`) after `callback` has been\ninvoked. The reason for this is so that unexpected `'error'` events (due to\nincorrect stream implementations) do not cause unexpected crashes.\nIf this is unwanted behavior then the returned cleanup function needs to be\ninvoked in the callback:\n\n```js\nconst cleanup = finished(rs, (err) => {\n  cleanup();\n  // ...\n});\n```",
              "params": [
                {
                  "name": "stream",
                  "description": "A readable and/or writable stream."
                },
                {
                  "name": "callback",
                  "description": "A callback function that takes an optional error argument."
                }
              ],
              "returns": "A cleanup function which removes all registered listeners.",
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.pipeline",
            "parameters": [
              {
                "name": "source",
                "type": "A",
                "optional": false
              },
              {
                "name": "destination",
                "type": "B",
                "optional": false
              },
              {
                "name": "callback",
                "type": "PipelineCallback<B>",
                "optional": false
              }
            ],
            "returnType": "B extends WritableStream ? B : WritableStream",
            "jsdoc": {
              "description": "A module method to pipe between streams and generators forwarding errors and\nproperly cleaning up and provide a callback when the pipeline is complete.\n\n```js\nimport { pipeline } from 'node:stream';\nimport fs from 'node:fs';\nimport zlib from 'node:zlib';\n\n// Use the pipeline API to easily pipe a series of streams\n// together and get notified when the pipeline is fully done.\n\n// A pipeline to gzip a potentially huge tar file efficiently:\n\npipeline(\n  fs.createReadStream('archive.tar'),\n  zlib.createGzip(),\n  fs.createWriteStream('archive.tar.gz'),\n  (err) => {\n    if (err) {\n      console.error('Pipeline failed.', err);\n    } else {\n      console.log('Pipeline succeeded.');\n    }\n  },\n);\n```\n\nThe `pipeline` API provides a [`promise version`](https://nodejs.org/docs/latest-v22.x/api/stream.html#streampipelinesource-transforms-destination-options).\n\n`stream.pipeline()` will call `stream.destroy(err)` on all streams except:\n\n* `Readable` streams which have emitted `'end'` or `'close'`.\n* `Writable` streams which have emitted `'finish'` or `'close'`.\n\n`stream.pipeline()` leaves dangling event listeners on the streams\nafter the `callback` has been invoked. In the case of reuse of streams after\nfailure, this can cause event listener leaks and swallowed errors. If the last\nstream is readable, dangling event listeners will be removed so that the last\nstream can be consumed later.\n\n`stream.pipeline()` closes all the streams when an error is raised.\nThe `IncomingRequest` usage with `pipeline` could lead to an unexpected behavior\nonce it would destroy the socket without sending the expected response.\nSee the example below:\n\n```js\nimport fs from 'node:fs';\nimport http from 'node:http';\nimport { pipeline } from 'node:stream';\n\nconst server = http.createServer((req, res) => {\n  const fileStream = fs.createReadStream('./fileNotExist.txt');\n  pipeline(fileStream, res, (err) => {\n    if (err) {\n      console.log(err); // No such file\n      // this message can't be sent once `pipeline` already destroyed the socket\n      return res.end('error!!!');\n    }\n  });\n});\n```",
              "params": [
                {
                  "name": "callback",
                  "description": "Called when the pipeline is fully done."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.isErrored",
            "parameters": [
              {
                "name": "stream",
                "type": "Readable | Writable | ReadableStream | WritableStream",
                "optional": false
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns whether the stream has encountered an error.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.isReadable",
            "parameters": [
              {
                "name": "stream",
                "type": "Readable | ReadableStream",
                "optional": false
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns whether the stream is readable.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.once",
            "parameters": [
              {
                "name": "emitter",
                "type": "EventEmitter<DefaultEventMap>",
                "optional": false
              },
              {
                "name": "eventName",
                "type": "string | symbol",
                "optional": false
              },
              {
                "name": "options",
                "type": "StaticEventEmitterOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<any[]>",
            "jsdoc": {
              "description": "Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\nevent or that is rejected if the `EventEmitter` emits `'error'` while waiting.\nThe `Promise` will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\nsemantics and does not listen to the `'error'` event.\n\n```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```\n\nThe special handling of the `'error'` event is only used when `events.once()` is used to wait for another event. If `events.once()` is used to wait for the\n'`error'` event itself, then it is treated as any other kind of event without\nspecial handling:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```\n\nAn `AbortSignal` can be used to cancel waiting for the event:\n\n```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.on",
            "parameters": [
              {
                "name": "emitter",
                "type": "EventEmitter<DefaultEventMap>",
                "optional": false
              },
              {
                "name": "eventName",
                "type": "string | symbol",
                "optional": false
              },
              {
                "name": "options",
                "type": "StaticEventEmitterIteratorOptions",
                "optional": true
              }
            ],
            "returnType": "AsyncIterator<any[], any, any>",
            "jsdoc": {
              "description": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```\n\nReturns an `AsyncIterator` that iterates `eventName` events. It will throw\nif the `EventEmitter` emits `'error'`. It removes all listeners when\nexiting the loop. The `value` returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn `AbortSignal` can be used to cancel waiting on events:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```\n\nUse the `close` option to specify an array of event names that will end the iteration:\n\n```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n  ee.emit('close');\n});\n\nfor await (const event of on(ee, 'foo', { close: ['close'] })) {\n  console.log(event); // prints ['bar'] [42]\n}\n// the loop will exit after 'close' is emitted\nconsole.log('done'); // prints 'done'\n```",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.listenerCount",
            "parameters": [
              {
                "name": "emitter",
                "type": "EventEmitter<DefaultEventMap>",
                "optional": false
              },
              {
                "name": "eventName",
                "type": "string | symbol",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "A class method that returns the number of listeners for the given `eventName` registered on the given `emitter`.\n\n```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```",
              "params": [
                {
                  "name": "emitter",
                  "description": "The emitter to query"
                },
                {
                  "name": "eventName",
                  "description": "The event name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "ScreenRecorder.getEventListeners",
            "parameters": [
              {
                "name": "emitter",
                "type": "EventEmitter<DefaultEventMap> | EventTarget",
                "optional": false
              },
              {
                "name": "name",
                "type": "string | symbol",
                "optional": false
              }
            ],
            "returnType": "Function[]",
            "jsdoc": {
              "description": "Returns a copy of the array of listeners for the event named `eventName`.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.listeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.getMaxListeners",
            "parameters": [
              {
                "name": "emitter",
                "type": "EventEmitter<DefaultEventMap> | EventTarget",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the currently set max amount of listeners.\n\nFor `EventEmitter`s this behaves exactly the same as calling `.getMaxListeners` on\nthe emitter.\n\nFor `EventTarget`s this is the only way to get the max event listeners for the\nevent target. If the number of event handlers on a single EventTarget exceeds\nthe max set, the EventTarget will print a warning.\n\n```js\nimport { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  console.log(getMaxListeners(ee)); // 10\n  setMaxListeners(11, ee);\n  console.log(getMaxListeners(ee)); // 11\n}\n{\n  const et = new EventTarget();\n  console.log(getMaxListeners(et)); // 10\n  setMaxListeners(11, et);\n  console.log(getMaxListeners(et)); // 11\n}\n```",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.setMaxListeners",
            "parameters": [
              {
                "name": "n",
                "type": "number",
                "optional": true
              },
              {
                "name": "eventTargets",
                "type": "(EventEmitter<DefaultEventMap> | EventTarget)[]",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```",
              "params": [
                {
                  "name": "n",
                  "description": "A non-negative number. The maximum number of listeners per `EventTarget` event."
                },
                {
                  "name": "eventTargets",
                  "description": "Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, `n` is set as the default max for all newly created {EventTarget} and {EventEmitter}\nobjects."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.addAbortListener",
            "parameters": [
              {
                "name": "signal",
                "type": "AbortSignal",
                "optional": false
              },
              {
                "name": "resource",
                "type": "(event: Event) => void",
                "optional": false
              }
            ],
            "returnType": "Disposable",
            "jsdoc": {
              "description": "Listens once to the `abort` event on the provided `signal`.\n\nListening to the `abort` event on abort signals is unsafe and may\nlead to resource leaks since another third party with the signal can\ncall `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change\nthis since it would violate the web standard. Additionally, the original\nAPI makes it easy to forget to remove listeners.\n\nThis API allows safely using `AbortSignal`s in Node.js APIs by solving these\ntwo issues by listening to the event such that `stopImmediatePropagation` does\nnot prevent the listener from running.\n\nReturns a disposable so that it may be unsubscribed from more easily.\n\n```js\nimport { addAbortListener } from 'node:events';\n\nfunction example(signal) {\n  let disposable;\n  try {\n    signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n    disposable = addAbortListener(signal, (e) => {\n      // Do something when signal is aborted.\n    });\n  } finally {\n    disposable?.[Symbol.dispose]();\n  }\n}\n```",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.__promisify__",
            "parameters": [
              {
                "name": "stream",
                "type": "ReadableStream | WritableStream | ReadWriteStream",
                "optional": false
              },
              {
                "name": "options",
                "type": "FinishedOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<void>",
            "jsdoc": null
          },
          {
            "name": "ScreenRecorder.isDisturbed",
            "parameters": [
              {
                "name": "stream",
                "type": "Readable | ReadableStream",
                "optional": false
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns whether the stream has been read from or cancelled.",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.toString",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of an object.",
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.valueOf",
            "parameters": [],
            "returnType": "symbol",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.__@toPrimitive@55547",
            "parameters": [
              {
                "name": "hint",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "symbol",
            "jsdoc": {
              "description": "Converts a Symbol object to a symbol.",
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representing a number in fixed-point notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented in exponential notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
              "params": [
                {
                  "name": "precision",
                  "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "ScreenRecorder.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              },
              {
                "name": "options",
                "type": "NumberFormatOptions",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts a number to a string by using the current or specified locale.",
              "params": [
                {
                  "name": "locales",
                  "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
                },
                {
                  "name": "options",
                  "description": "An object that contains one or more properties that specify comparison options."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.toString",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of a string.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the character at the specified index.",
              "params": [
                {
                  "name": "pos",
                  "description": "The zero-based index of the desired character."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the Unicode value of the character at the specified location.",
              "params": [
                {
                  "name": "index",
                  "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string that contains the concatenation of two or more strings.",
              "params": [
                {
                  "name": "strings",
                  "description": "The strings to append to the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the position of the first occurrence of a substring.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for in the string"
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the last occurrence of a substring in the string.",
              "params": [
                {
                  "name": "searchString",
                  "description": "The substring to search for."
                },
                {
                  "name": "position",
                  "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Determines whether two strings are equivalent in the current locale.",
              "params": [
                {
                  "name": "that",
                  "description": "String to compare to target string"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpMatchArray",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "replaceValue",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Replaces text in a string, using a regular expression or search string.",
              "params": [
                {
                  "name": "searchValue",
                  "description": "A string or regular expression to search for."
                },
                {
                  "name": "replaceValue",
                  "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Finds the first substring match in a regular expression search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "The regular expression pattern and applicable flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a section of a string.",
              "params": [
                {
                  "name": "start",
                  "description": "The index to the beginning of the specified portion of stringObj."
                },
                {
                  "name": "end",
                  "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp",
                "optional": false
              },
              {
                "name": "limit",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string[]",
            "jsdoc": {
              "description": "Split a string into substrings using the specified separator and return them as an array.",
              "params": [
                {
                  "name": "separator",
                  "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
                },
                {
                  "name": "limit",
                  "description": "A value used to limit the number of elements returned in the array."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": false
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the substring at the specified location within a String object.",
              "params": [
                {
                  "name": "start",
                  "description": "The zero-based index number indicating the beginning of the substring."
                },
                {
                  "name": "end",
                  "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.toLowerCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to lowercase.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.toUpperCase",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts all the alphabetic characters in a string to uppercase.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.trim",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading and trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Gets a substring beginning at the specified location and having the specified length.",
              "params": [
                {
                  "name": "from",
                  "description": "The starting position of the desired substring. The index of the first character in the string is zero."
                },
                {
                  "name": "length",
                  "description": "The number of characters to include in the returned substring."
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.valueOf",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
              "params": [
                {
                  "name": "searchString",
                  "description": "search string"
                },
                {
                  "name": "position",
                  "description": "If position is undefined, 0 is assumed, so as to search all of the String."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "endPosition",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
              "params": [
                {
                  "name": "form",
                  "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
              "params": [
                {
                  "name": "count",
                  "description": "number of copies to append"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string",
                "optional": false
              },
              {
                "name": "position",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
              "params": [
                {
                  "name": "name"
                }
              ],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.big",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<big>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.blink",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<blink>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.bold",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<b>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.fixed",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<tt>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the color attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<font>` HTML element and sets the size attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.italics",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<i>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.link",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns an `<a>` HTML element and sets the href attribute value",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.small",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<small>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.strike",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<strike>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.sub",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sub>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.sup",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a `<sup>` HTML element",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number",
                "optional": false
              },
              {
                "name": "fillString",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
              "params": [
                {
                  "name": "maxLength",
                  "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
                },
                {
                  "name": "fillString",
                  "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.trimEnd",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.trimStart",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.trimLeft",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the leading white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.trimRight",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Removes the trailing white space and line terminator characters from a string.",
              "params": [],
              "deprecated": true
            }
          },
          {
            "name": "TargetType.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp",
                "optional": false
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>",
            "jsdoc": {
              "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
              "params": [
                {
                  "name": "regexp",
                  "description": "A variable name or string literal containing the regular expression pattern and flags."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TargetType.__@iterator@54430",
            "parameters": [],
            "returnType": "StringIterator<string>",
            "jsdoc": {
              "description": "Iterator",
              "deprecated": false
            }
          },
          {
            "name": "TargetType.at",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "string",
            "jsdoc": null
          },
          {
            "name": "TimeoutError.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            }
          },
          {
            "name": "TimeoutError.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "TimeoutError.toString",
            "parameters": [
              {
                "name": "radix",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of an object.",
              "params": [
                {
                  "name": "radix",
                  "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TimeoutError.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representing a number in fixed-point notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TimeoutError.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented in exponential notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TimeoutError.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
              "params": [
                {
                  "name": "precision",
                  "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TimeoutError.valueOf",
            "parameters": [],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "TimeoutError.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              },
              {
                "name": "options",
                "type": "NumberFormatOptions",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts a number to a string by using the current or specified locale.",
              "params": [
                {
                  "name": "locales",
                  "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
                },
                {
                  "name": "options",
                  "description": "An object that contains one or more properties that specify comparison options."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TouchError.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            }
          },
          {
            "name": "TouchError.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "TouchError.toString",
            "parameters": [
              {
                "name": "radix",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of an object.",
              "params": [
                {
                  "name": "radix",
                  "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TouchError.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representing a number in fixed-point notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TouchError.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented in exponential notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TouchError.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
              "params": [
                {
                  "name": "precision",
                  "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "TouchError.valueOf",
            "parameters": [],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "TouchError.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              },
              {
                "name": "options",
                "type": "NumberFormatOptions",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts a number to a string by using the current or specified locale.",
              "params": [
                {
                  "name": "locales",
                  "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
                },
                {
                  "name": "options",
                  "description": "An object that contains one or more properties that specify comparison options."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "UnsupportedOperation.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            }
          },
          {
            "name": "UnsupportedOperation.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "UnsupportedOperation.toString",
            "parameters": [
              {
                "name": "radix",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of an object.",
              "params": [
                {
                  "name": "radix",
                  "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "UnsupportedOperation.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representing a number in fixed-point notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "UnsupportedOperation.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented in exponential notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "UnsupportedOperation.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
              "params": [
                {
                  "name": "precision",
                  "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "UnsupportedOperation.valueOf",
            "parameters": [],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "UnsupportedOperation.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              },
              {
                "name": "options",
                "type": "NumberFormatOptions",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts a number to a string by using the current or specified locale.",
              "params": [
                {
                  "name": "locales",
                  "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
                },
                {
                  "name": "options",
                  "description": "An object that contains one or more properties that specify comparison options."
                }
              ],
              "deprecated": false
            }
          }
        ],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": [
          {
            "name": "BrowserContextEvent.TargetChanged",
            "type": "BrowserContextEvent.TargetChanged",
            "value": "targetchanged",
            "jsdoc": {
              "description": "Emitted when the url of a target inside the browser context changes.\r\nContains a    instance.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "BrowserContextEvent.TargetCreated",
            "type": "BrowserContextEvent.TargetCreated",
            "value": "targetcreated",
            "jsdoc": {
              "description": "Emitted when a target is created within the browser context, for example\r\nwhen a new page is opened by\r\n ://developer.mozilla.org/en-US/docs/Web/API/Window/open | window.open \r\nor by  | browserContext.newPage \r\n\r\nContains a    instance.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "BrowserContextEvent.TargetDestroyed",
            "type": "BrowserContextEvent.TargetDestroyed",
            "value": "targetdestroyed",
            "jsdoc": {
              "description": "Emitted when a target is destroyed within the browser context, for example\r\nwhen a page is closed. Contains a    instance.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "BrowserEvent.Disconnected",
            "type": "BrowserEvent.Disconnected",
            "value": "disconnected",
            "jsdoc": {
              "description": "Emitted when Puppeteer gets disconnected from the browser instance. This\r\nmight happen because either:\r\n\r\n- The browser closes/crashes or\r\n-    was called.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "BrowserEvent.TargetChanged",
            "type": "BrowserEvent.TargetChanged",
            "value": "targetchanged",
            "jsdoc": {
              "description": "Emitted when the URL of a target changes. Contains a   \r\ninstance.",
              "params": [],
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "BrowserEvent.TargetCreated",
            "type": "BrowserEvent.TargetCreated",
            "value": "targetcreated",
            "jsdoc": {
              "description": "Emitted when a target is created, for example when a new page is opened by\r\n ://developer.mozilla.org/en-US/docs/Web/API/Window/open | window.open \r\nor by  | browser.newPage \r\n\r\nContains a    instance.",
              "params": [],
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "BrowserEvent.TargetDestroyed",
            "type": "BrowserEvent.TargetDestroyed",
            "value": "targetdestroyed",
            "jsdoc": {
              "description": "Emitted when a target is destroyed, for example when a page is closed.\r\nContains a    instance.",
              "params": [],
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "CDPSessionEvent.SessionAttached",
            "type": "\"sessionattached\"",
            "value": "sessionattached",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "CDPSessionEvent.SessionDetached",
            "type": "\"sessiondetached\"",
            "value": "sessiondetached",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "InterceptResolutionAction.Abort",
            "type": "InterceptResolutionAction.Abort",
            "value": "abort",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "InterceptResolutionAction.Respond",
            "type": "InterceptResolutionAction.Respond",
            "value": "respond",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "InterceptResolutionAction.Continue",
            "type": "InterceptResolutionAction.Continue",
            "value": "continue",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "InterceptResolutionAction.Disabled",
            "type": "InterceptResolutionAction.Disabled",
            "value": "disabled",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "InterceptResolutionAction.None",
            "type": "InterceptResolutionAction.None",
            "value": "none",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "InterceptResolutionAction.AlreadyHandled",
            "type": "InterceptResolutionAction.AlreadyHandled",
            "value": "already-handled",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "LocatorEvent.Action",
            "type": "LocatorEvent.Action",
            "value": "action",
            "jsdoc": {
              "description": "Emitted every time before the locator performs an action on the located element(s).",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "MouseButton.Left",
            "type": "\"left\"",
            "value": "left",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "MouseButton.Right",
            "type": "\"right\"",
            "value": "right",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "MouseButton.Middle",
            "type": "\"middle\"",
            "value": "middle",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "MouseButton.Back",
            "type": "\"back\"",
            "value": "back",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "MouseButton.Forward",
            "type": "\"forward\"",
            "value": "forward",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "PageEvent.Close",
            "type": "PageEvent.Close",
            "value": "close",
            "jsdoc": {
              "description": "Emitted when the page closes.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.Console",
            "type": "PageEvent.Console",
            "value": "console",
            "jsdoc": {
              "description": "Emitted when JavaScript within the page calls one of console API methods,\r\ne.g. `console.log` or `console.dir`. Also emitted if the page throws an\r\nerror or a warning.",
              "params": [],
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.Dialog",
            "type": "PageEvent.Dialog",
            "value": "dialog",
            "jsdoc": {
              "description": "Emitted when a JavaScript dialog appears, such as `alert`, `prompt`,\r\n`confirm` or `beforeunload`. Puppeteer can respond to the dialog via\r\n   or   .",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.DOMContentLoaded",
            "type": "PageEvent.DOMContentLoaded",
            "value": "domcontentloaded",
            "jsdoc": {
              "description": "Emitted when the JavaScript\r\n ://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded | DOMContentLoaded  \r\nevent is dispatched.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.Error",
            "type": "PageEvent.Error",
            "value": "error",
            "jsdoc": {
              "description": "Emitted when the page crashes. Will contain an `Error`.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.FrameAttached",
            "type": "PageEvent.FrameAttached",
            "value": "frameattached",
            "jsdoc": {
              "description": "Emitted when a frame is attached. Will contain a   .",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.FrameDetached",
            "type": "PageEvent.FrameDetached",
            "value": "framedetached",
            "jsdoc": {
              "description": "Emitted when a frame is detached. Will contain a   .",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.FrameNavigated",
            "type": "PageEvent.FrameNavigated",
            "value": "framenavigated",
            "jsdoc": {
              "description": "Emitted when a frame is navigated to a new URL. Will contain a\r\n  .",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.Load",
            "type": "PageEvent.Load",
            "value": "load",
            "jsdoc": {
              "description": "Emitted when the JavaScript\r\n ://developer.mozilla.org/en-US/docs/Web/Events/load | load \r\nevent is dispatched.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.Metrics",
            "type": "PageEvent.Metrics",
            "value": "metrics",
            "jsdoc": {
              "description": "Emitted when the JavaScript code makes a call to `console.timeStamp`. For\r\nthe list of metrics see  | page.metrics .",
              "params": [],
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.PageError",
            "type": "PageEvent.PageError",
            "value": "pageerror",
            "jsdoc": {
              "description": "Emitted when an uncaught exception happens within the page. Contains an\r\n`Error`.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.Popup",
            "type": "PageEvent.Popup",
            "value": "popup",
            "jsdoc": {
              "description": "Emitted when the page opens a new tab or window.\r\n\r\nContains a    corresponding to the popup window.",
              "params": [],
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.Request",
            "type": "PageEvent.Request",
            "value": "request",
            "jsdoc": {
              "description": "Emitted when a page issues a request and contains a   .",
              "params": [],
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.RequestServedFromCache",
            "type": "PageEvent.RequestServedFromCache",
            "value": "requestservedfromcache",
            "jsdoc": {
              "description": "Emitted when a request ended up loading from cache. Contains a\r\n  .",
              "params": [],
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.RequestFailed",
            "type": "PageEvent.RequestFailed",
            "value": "requestfailed",
            "jsdoc": {
              "description": "Emitted when a request fails, for example by timing out.\r\n\r\nContains a   .",
              "params": [],
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.RequestFinished",
            "type": "PageEvent.RequestFinished",
            "value": "requestfinished",
            "jsdoc": {
              "description": "Emitted when a request finishes successfully. Contains a\r\n  .",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.Response",
            "type": "PageEvent.Response",
            "value": "response",
            "jsdoc": {
              "description": "Emitted when a response is received. Contains a   .",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.WorkerCreated",
            "type": "PageEvent.WorkerCreated",
            "value": "workercreated",
            "jsdoc": {
              "description": "Emitted when a dedicated\r\n ://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker \r\nis spawned by the page.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "PageEvent.WorkerDestroyed",
            "type": "PageEvent.WorkerDestroyed",
            "value": "workerdestroyed",
            "jsdoc": {
              "description": "Emitted when a dedicated\r\n ://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API | WebWorker \r\nis destroyed by the page.",
              "deprecated": false
            },
            "isExported": false
          },
          {
            "name": "TargetType.PAGE",
            "type": "TargetType.PAGE",
            "value": "page",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "TargetType.BACKGROUND_PAGE",
            "type": "TargetType.BACKGROUND_PAGE",
            "value": "background_page",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "TargetType.SERVICE_WORKER",
            "type": "TargetType.SERVICE_WORKER",
            "value": "service_worker",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "TargetType.SHARED_WORKER",
            "type": "TargetType.SHARED_WORKER",
            "value": "shared_worker",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "TargetType.BROWSER",
            "type": "TargetType.BROWSER",
            "value": "browser",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "TargetType.WEBVIEW",
            "type": "TargetType.WEBVIEW",
            "value": "webview",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "TargetType.OTHER",
            "type": "TargetType.OTHER",
            "value": "other",
            "jsdoc": null,
            "isExported": false
          }
        ]
      },
      "jsdoc": null,
      "isExported": true
    },
    {
      "name": "CDPSessionEvent",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": [
          {
            "name": "SessionAttached",
            "type": "\"sessionattached\"",
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "SessionDetached",
            "type": "\"sessiondetached\"",
            "jsdoc": null,
            "isExported": false
          }
        ]
      },
      "jsdoc": {
        "description": "Events that the CDPSession class emits.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "CustomQuerySelectors",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "PQuerySelector",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "Puppeteer_2",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "PuppeteerCore",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false
    }
  ],
  "version": "24.6.0"
}