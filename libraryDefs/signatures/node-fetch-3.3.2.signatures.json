{
  "functions": [
    {
      "name": "isRedirect",
      "parameters": [
        {
          "name": "code",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "default",
      "parameters": [
        {
          "name": "url",
          "type": "URL | RequestInfo",
          "optional": false
        },
        {
          "name": "init",
          "type": "RequestInit",
          "optional": true
        }
      ],
      "returnType": "Promise<Response>",
      "jsdoc": null
    },
    {
      "name": "FormData.append",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "value",
          "type": "string | Blob",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)",
        "deprecated": false
      }
    },
    {
      "name": "FormData.delete",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/delete)",
        "deprecated": false
      }
    },
    {
      "name": "FormData.get",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "FormDataEntryValue",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/get)",
        "deprecated": false
      }
    },
    {
      "name": "FormData.getAll",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "FormDataEntryValue[]",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/getAll)",
        "deprecated": false
      }
    },
    {
      "name": "FormData.has",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/has)",
        "deprecated": false
      }
    },
    {
      "name": "FormData.set",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "value",
          "type": "string | Blob",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set)",
        "deprecated": false
      }
    },
    {
      "name": "FormData.forEach",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(value: FormDataEntryValue, key: string, parent: FormData) => void",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "Blob.arrayBuffer",
      "parameters": [],
      "returnType": "Promise<ArrayBuffer>",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/arrayBuffer)",
        "deprecated": false
      }
    },
    {
      "name": "Blob.bytes",
      "parameters": [],
      "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/bytes)",
        "deprecated": false
      }
    },
    {
      "name": "Blob.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        },
        {
          "name": "contentType",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Blob",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice)",
        "deprecated": false
      }
    },
    {
      "name": "Blob.stream",
      "parameters": [],
      "returnType": "ReadableStream<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/stream)",
        "deprecated": false
      }
    },
    {
      "name": "Blob.text",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text)",
        "deprecated": false
      }
    },
    {
      "name": "blobFrom",
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Promise<Blob>",
      "jsdoc": null
    },
    {
      "name": "blobFromSync",
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Blob",
      "jsdoc": null
    },
    {
      "name": "File.arrayBuffer",
      "parameters": [],
      "returnType": "Promise<ArrayBuffer>",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/arrayBuffer)",
        "deprecated": false
      }
    },
    {
      "name": "File.bytes",
      "parameters": [],
      "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/bytes)",
        "deprecated": false
      }
    },
    {
      "name": "File.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        },
        {
          "name": "contentType",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Blob",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice)",
        "deprecated": false
      }
    },
    {
      "name": "File.stream",
      "parameters": [],
      "returnType": "ReadableStream<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/stream)",
        "deprecated": false
      }
    },
    {
      "name": "File.text",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text)",
        "deprecated": false
      }
    },
    {
      "name": "fileFrom",
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Promise<File>",
      "jsdoc": null
    },
    {
      "name": "fileFromSync",
      "parameters": [
        {
          "name": "path",
          "type": "string",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "File",
      "jsdoc": null
    },
    {
      "name": "error",
      "parameters": [],
      "returnType": "Response",
      "jsdoc": null
    },
    {
      "name": "redirect",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "status",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "Response",
      "jsdoc": null
    },
    {
      "name": "json",
      "parameters": [
        {
          "name": "data",
          "type": "any",
          "optional": false
        },
        {
          "name": "init",
          "type": "ResponseInit",
          "optional": true
        }
      ],
      "returnType": "Response",
      "jsdoc": null
    },
    {
      "name": "Response.error",
      "parameters": [],
      "returnType": "Response",
      "jsdoc": null
    },
    {
      "name": "Response.redirect",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "status",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "Response",
      "jsdoc": null
    },
    {
      "name": "Response.json",
      "parameters": [
        {
          "name": "data",
          "type": "any",
          "optional": false
        },
        {
          "name": "init",
          "type": "ResponseInit",
          "optional": true
        }
      ],
      "returnType": "Response",
      "jsdoc": null
    },
    {
      "name": "captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "FetchError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "FetchError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AbortError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "AbortError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "AbortError.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AbortError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AbortError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AbortError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AbortError.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "AbortError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Headers.append",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "value",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "Headers.delete",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "Headers.get",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "Headers.has",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "Headers.set",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "value",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "Headers.forEach",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(value: string, key: string, parent: Headers) => void",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "Headers.entries",
      "parameters": [],
      "returnType": "IterableIterator<[string, string]>",
      "jsdoc": {
        "description": "Returns an iterator allowing to go through all key/value pairs contained in this object.",
        "deprecated": false
      }
    },
    {
      "name": "Headers.keys",
      "parameters": [],
      "returnType": "IterableIterator<string>",
      "jsdoc": {
        "description": "Returns an iterator allowing to go through all keys of the key/value pairs contained in this object.",
        "deprecated": false
      }
    },
    {
      "name": "Headers.values",
      "parameters": [],
      "returnType": "IterableIterator<string>",
      "jsdoc": {
        "description": "Returns an iterator allowing to go through all values of the key/value pairs contained in this object.",
        "deprecated": false
      }
    },
    {
      "name": "Headers.raw",
      "parameters": [],
      "returnType": "Record<string, string[]>",
      "jsdoc": {
        "description": "Node-fetch extension",
        "deprecated": false
      }
    },
    {
      "name": "Headers.__@iterator@50415",
      "parameters": [],
      "returnType": "IterableIterator<[string, string]>",
      "jsdoc": null
    },
    {
      "name": "BodyMixin.buffer",
      "parameters": [],
      "returnType": "Promise<Buffer<ArrayBufferLike>>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "BodyMixin.arrayBuffer",
      "parameters": [],
      "returnType": "Promise<ArrayBuffer>",
      "jsdoc": null
    },
    {
      "name": "BodyMixin.formData",
      "parameters": [],
      "returnType": "Promise<FormData>",
      "jsdoc": null
    },
    {
      "name": "BodyMixin.blob",
      "parameters": [],
      "returnType": "Promise<Blob>",
      "jsdoc": null
    },
    {
      "name": "BodyMixin.json",
      "parameters": [],
      "returnType": "Promise<unknown>",
      "jsdoc": null
    },
    {
      "name": "BodyMixin.text",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": null
    },
    {
      "name": "Request.clone",
      "parameters": [],
      "returnType": "Request",
      "jsdoc": null
    },
    {
      "name": "Request.buffer",
      "parameters": [],
      "returnType": "Promise<Buffer<ArrayBufferLike>>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Request.arrayBuffer",
      "parameters": [],
      "returnType": "Promise<ArrayBuffer>",
      "jsdoc": null
    },
    {
      "name": "Request.formData",
      "parameters": [],
      "returnType": "Promise<FormData>",
      "jsdoc": null
    },
    {
      "name": "Request.blob",
      "parameters": [],
      "returnType": "Promise<Blob>",
      "jsdoc": null
    },
    {
      "name": "Request.json",
      "parameters": [],
      "returnType": "Promise<unknown>",
      "jsdoc": null
    },
    {
      "name": "Request.text",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": null
    },
    {
      "name": "Response.clone",
      "parameters": [],
      "returnType": "Response",
      "jsdoc": null
    },
    {
      "name": "Response.buffer",
      "parameters": [],
      "returnType": "Promise<Buffer<ArrayBufferLike>>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Response.arrayBuffer",
      "parameters": [],
      "returnType": "Promise<ArrayBuffer>",
      "jsdoc": null
    },
    {
      "name": "Response.formData",
      "parameters": [],
      "returnType": "Promise<FormData>",
      "jsdoc": null
    },
    {
      "name": "Response.blob",
      "parameters": [],
      "returnType": "Promise<Blob>",
      "jsdoc": null
    },
    {
      "name": "Response.json",
      "parameters": [],
      "returnType": "Promise<unknown>",
      "jsdoc": null
    },
    {
      "name": "Response.text",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": null
    }
  ],
  "enums": [],
  "types": [
    {
      "name": "AbortSignal",
      "type": "AbortSignal",
      "properties": [
        {
          "name": "aborted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "addEventListener",
          "type": "(type: \"abort\", listener: (this: AbortSignal) => void) => void",
          "optional": false
        },
        {
          "name": "removeEventListener",
          "type": "(type: \"abort\", listener: (this: AbortSignal) => void) => void",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "HeadersInit",
      "type": "HeadersInit",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "RequestInit",
      "type": "RequestInit",
      "properties": [
        {
          "name": "body",
          "type": "BodyInit",
          "optional": true
        },
        {
          "name": "headers",
          "type": "HeadersInit",
          "optional": true
        },
        {
          "name": "method",
          "type": "string",
          "optional": true
        },
        {
          "name": "redirect",
          "type": "RequestRedirect",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        },
        {
          "name": "referrer",
          "type": "string",
          "optional": true
        },
        {
          "name": "referrerPolicy",
          "type": "ReferrerPolicy",
          "optional": true
        },
        {
          "name": "agent",
          "type": "boolean | Agent | ((parsedUrl: URL) => boolean | Agent)",
          "optional": true
        },
        {
          "name": "compress",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "counter",
          "type": "number",
          "optional": true
        },
        {
          "name": "follow",
          "type": "number",
          "optional": true
        },
        {
          "name": "hostname",
          "type": "string",
          "optional": true
        },
        {
          "name": "port",
          "type": "number",
          "optional": true
        },
        {
          "name": "protocol",
          "type": "string",
          "optional": true
        },
        {
          "name": "size",
          "type": "number",
          "optional": true
        },
        {
          "name": "highWaterMark",
          "type": "number",
          "optional": true
        },
        {
          "name": "insecureHTTPParser",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "ResponseInit",
      "type": "ResponseInit",
      "properties": [
        {
          "name": "headers",
          "type": "HeadersInit",
          "optional": true
        },
        {
          "name": "status",
          "type": "number",
          "optional": true
        },
        {
          "name": "statusText",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "BodyInit",
      "type": "BodyInit",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string) | ((encoding?: BufferEncoding, start?: number, end?: number) => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object) | (() => Buffer<ArrayBufferLike>)",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "Body",
      "type": "Body",
      "properties": [
        {
          "name": "body",
          "type": "ReadableStream",
          "optional": false
        },
        {
          "name": "bodyUsed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "size",
          "type": "number",
          "optional": false
        },
        {
          "name": "buffer",
          "type": "() => Promise<Buffer<ArrayBufferLike>>",
          "optional": false
        },
        {
          "name": "arrayBuffer",
          "type": "() => Promise<ArrayBuffer>",
          "optional": false
        },
        {
          "name": "formData",
          "type": "() => Promise<FormData>",
          "optional": false
        },
        {
          "name": "blob",
          "type": "() => Promise<Blob>",
          "optional": false
        },
        {
          "name": "json",
          "type": "() => Promise<unknown>",
          "optional": false
        },
        {
          "name": "text",
          "type": "() => Promise<string>",
          "optional": false
        }
      ],
      "extends": [
        "Pick<BodyMixin, keyof BodyMixin>"
      ],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "RequestRedirect",
      "type": "RequestRedirect",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@50415",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "ReferrerPolicy",
      "type": "ReferrerPolicy",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@50415",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "RequestInfo",
      "type": "RequestInfo",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "ResponseType",
      "type": "ResponseType",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@50415",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    }
  ],
  "classes": [
    {
      "name": "Headers",
      "constructors": [
        {
          "parameters": [
            {
              "name": "init",
              "type": "HeadersInit",
              "optional": true
            }
          ],
          "returnType": "Headers"
        }
      ],
      "methods": [
        {
          "name": "Headers.append",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "Headers.delete",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "Headers.get",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "string",
          "jsdoc": null
        },
        {
          "name": "Headers.has",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "Headers.set",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "Headers.forEach",
          "parameters": [
            {
              "name": "callbackfn",
              "type": "(value: string, key: string, parent: Headers) => void",
              "optional": false
            },
            {
              "name": "thisArg",
              "type": "any",
              "optional": true
            }
          ],
          "returnType": "void",
          "jsdoc": null
        },
        {
          "name": "Headers.entries",
          "parameters": [],
          "returnType": "IterableIterator<[string, string]>",
          "jsdoc": {
            "description": "Returns an iterator allowing to go through all key/value pairs contained in this object.",
            "deprecated": false
          }
        },
        {
          "name": "Headers.keys",
          "parameters": [],
          "returnType": "IterableIterator<string>",
          "jsdoc": {
            "description": "Returns an iterator allowing to go through all keys of the key/value pairs contained in this object.",
            "deprecated": false
          }
        },
        {
          "name": "Headers.values",
          "parameters": [],
          "returnType": "IterableIterator<string>",
          "jsdoc": {
            "description": "Returns an iterator allowing to go through all values of the key/value pairs contained in this object.",
            "deprecated": false
          }
        },
        {
          "name": "Headers.raw",
          "parameters": [],
          "returnType": "Record<string, string[]>",
          "jsdoc": {
            "description": "Node-fetch extension",
            "deprecated": false
          }
        },
        {
          "name": "Headers.__@iterator@50415",
          "parameters": [],
          "returnType": "IterableIterator<[string, string]>",
          "jsdoc": null
        }
      ],
      "properties": [],
      "implements": [],
      "jsdoc": {
        "description": "This Fetch API interface allows you to perform various actions on HTTP request and response headers.\nThese actions include retrieving, setting, adding to, and removing.\nA Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\nYou can add to this using methods like append() (see Examples.)\nIn all methods of this interface, header names are matched by case-insensitive byte sequence.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "BodyMixin",
      "constructors": [
        {
          "parameters": [
            {
              "name": "body",
              "type": "BodyInit",
              "optional": true
            },
            {
              "name": "options",
              "type": "{ size?: number; }",
              "optional": true
            }
          ],
          "returnType": "BodyMixin"
        }
      ],
      "methods": [
        {
          "name": "BodyMixin.buffer",
          "parameters": [],
          "returnType": "Promise<Buffer<ArrayBufferLike>>",
          "jsdoc": {
            "description": "",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "BodyMixin.arrayBuffer",
          "parameters": [],
          "returnType": "Promise<ArrayBuffer>",
          "jsdoc": null
        },
        {
          "name": "BodyMixin.formData",
          "parameters": [],
          "returnType": "Promise<FormData>",
          "jsdoc": null
        },
        {
          "name": "BodyMixin.blob",
          "parameters": [],
          "returnType": "Promise<Blob>",
          "jsdoc": null
        },
        {
          "name": "BodyMixin.json",
          "parameters": [],
          "returnType": "Promise<unknown>",
          "jsdoc": null
        },
        {
          "name": "BodyMixin.text",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": null
        }
      ],
      "properties": [
        {
          "name": "body",
          "type": "ReadableStream",
          "optional": false
        },
        {
          "name": "bodyUsed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "Request",
      "constructors": [
        {
          "parameters": [
            {
              "name": "input",
              "type": "URL | RequestInfo",
              "optional": false
            },
            {
              "name": "init",
              "type": "RequestInit",
              "optional": true
            }
          ],
          "returnType": "Request"
        }
      ],
      "methods": [
        {
          "name": "Request.clone",
          "parameters": [],
          "returnType": "Request",
          "jsdoc": null
        },
        {
          "name": "Request.buffer",
          "parameters": [],
          "returnType": "Promise<Buffer<ArrayBufferLike>>",
          "jsdoc": {
            "description": "",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "Request.arrayBuffer",
          "parameters": [],
          "returnType": "Promise<ArrayBuffer>",
          "jsdoc": null
        },
        {
          "name": "Request.formData",
          "parameters": [],
          "returnType": "Promise<FormData>",
          "jsdoc": null
        },
        {
          "name": "Request.blob",
          "parameters": [],
          "returnType": "Promise<Blob>",
          "jsdoc": null
        },
        {
          "name": "Request.json",
          "parameters": [],
          "returnType": "Promise<unknown>",
          "jsdoc": null
        },
        {
          "name": "Request.text",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": null
        }
      ],
      "properties": [
        {
          "name": "headers",
          "type": "Headers",
          "optional": false
        },
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "redirect",
          "type": "RequestRedirect",
          "optional": false
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": false
        },
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "referrer",
          "type": "string",
          "optional": false
        },
        {
          "name": "referrerPolicy",
          "type": "ReferrerPolicy",
          "optional": false
        },
        {
          "name": "body",
          "type": "ReadableStream",
          "optional": false
        },
        {
          "name": "bodyUsed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "extends": "BodyMixin",
      "implements": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "Response",
      "constructors": [
        {
          "parameters": [
            {
              "name": "body",
              "type": "BodyInit",
              "optional": true
            },
            {
              "name": "init",
              "type": "ResponseInit",
              "optional": true
            }
          ],
          "returnType": "Response"
        }
      ],
      "methods": [
        {
          "name": "Response.clone",
          "parameters": [],
          "returnType": "Response",
          "jsdoc": null
        },
        {
          "name": "Response.buffer",
          "parameters": [],
          "returnType": "Promise<Buffer<ArrayBufferLike>>",
          "jsdoc": {
            "description": "",
            "params": [],
            "deprecated": true
          }
        },
        {
          "name": "Response.arrayBuffer",
          "parameters": [],
          "returnType": "Promise<ArrayBuffer>",
          "jsdoc": null
        },
        {
          "name": "Response.formData",
          "parameters": [],
          "returnType": "Promise<FormData>",
          "jsdoc": null
        },
        {
          "name": "Response.blob",
          "parameters": [],
          "returnType": "Promise<Blob>",
          "jsdoc": null
        },
        {
          "name": "Response.json",
          "parameters": [],
          "returnType": "Promise<unknown>",
          "jsdoc": null
        },
        {
          "name": "Response.text",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": null
        }
      ],
      "properties": [
        {
          "name": "headers",
          "type": "Headers",
          "optional": false
        },
        {
          "name": "ok",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "redirected",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "status",
          "type": "number",
          "optional": false
        },
        {
          "name": "statusText",
          "type": "string",
          "optional": false
        },
        {
          "name": "type",
          "type": "ResponseType",
          "optional": false
        },
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "body",
          "type": "ReadableStream",
          "optional": false
        },
        {
          "name": "bodyUsed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "extends": "BodyMixin",
      "implements": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "FetchError",
      "constructors": [
        {
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "optional": false
            },
            {
              "name": "type",
              "type": "string",
              "optional": false
            },
            {
              "name": "systemError",
              "type": "Record<string, unknown>",
              "optional": true
            }
          ],
          "returnType": "FetchError"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "name",
          "type": "\"FetchError\"",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "code",
          "type": "string",
          "optional": true
        },
        {
          "name": "errno",
          "type": "string",
          "optional": true
        },
        {
          "name": "__@toStringTag@50490",
          "type": "\"FetchError\"",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": false
        },
        {
          "name": "stack",
          "type": "string",
          "optional": true
        }
      ],
      "extends": "Error",
      "implements": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "AbortError",
      "constructors": [],
      "methods": [],
      "properties": [
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "name",
          "type": "\"AbortError\"",
          "optional": false
        },
        {
          "name": "__@toStringTag@50490",
          "type": "\"AbortError\"",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": false
        },
        {
          "name": "stack",
          "type": "string",
          "optional": true
        }
      ],
      "extends": "Error",
      "implements": [],
      "jsdoc": null,
      "isExported": false
    }
  ],
  "constants": [],
  "namespaces": [
    {
      "name": "node-fetch",
      "contents": {
        "functions": [
          {
            "name": "isRedirect",
            "parameters": [
              {
                "name": "code",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "boolean",
            "jsdoc": null
          },
          {
            "name": "default",
            "parameters": [
              {
                "name": "url",
                "type": "URL | RequestInfo",
                "optional": false
              },
              {
                "name": "init",
                "type": "RequestInit",
                "optional": true
              }
            ],
            "returnType": "Promise<Response>",
            "jsdoc": null
          },
          {
            "name": "FormData.append",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              },
              {
                "name": "value",
                "type": "string | Blob",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)",
              "deprecated": false
            }
          },
          {
            "name": "FormData.delete",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/delete)",
              "deprecated": false
            }
          },
          {
            "name": "FormData.get",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "FormDataEntryValue",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/get)",
              "deprecated": false
            }
          },
          {
            "name": "FormData.getAll",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "FormDataEntryValue[]",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/getAll)",
              "deprecated": false
            }
          },
          {
            "name": "FormData.has",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "boolean",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/has)",
              "deprecated": false
            }
          },
          {
            "name": "FormData.set",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              },
              {
                "name": "value",
                "type": "string | Blob",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set)",
              "deprecated": false
            }
          },
          {
            "name": "FormData.forEach",
            "parameters": [
              {
                "name": "callbackfn",
                "type": "(value: FormDataEntryValue, key: string, parent: FormData) => void",
                "optional": false
              },
              {
                "name": "thisArg",
                "type": "any",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": null
          },
          {
            "name": "Blob.arrayBuffer",
            "parameters": [],
            "returnType": "Promise<ArrayBuffer>",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/arrayBuffer)",
              "deprecated": false
            }
          },
          {
            "name": "Blob.bytes",
            "parameters": [],
            "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/bytes)",
              "deprecated": false
            }
          },
          {
            "name": "Blob.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              },
              {
                "name": "contentType",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "Blob",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice)",
              "deprecated": false
            }
          },
          {
            "name": "Blob.stream",
            "parameters": [],
            "returnType": "ReadableStream<Uint8Array<ArrayBufferLike>>",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/stream)",
              "deprecated": false
            }
          },
          {
            "name": "Blob.text",
            "parameters": [],
            "returnType": "Promise<string>",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text)",
              "deprecated": false
            }
          },
          {
            "name": "blobFrom",
            "parameters": [
              {
                "name": "path",
                "type": "string",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "Promise<Blob>",
            "jsdoc": null
          },
          {
            "name": "blobFromSync",
            "parameters": [
              {
                "name": "path",
                "type": "string",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "Blob",
            "jsdoc": null
          },
          {
            "name": "File.arrayBuffer",
            "parameters": [],
            "returnType": "Promise<ArrayBuffer>",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/arrayBuffer)",
              "deprecated": false
            }
          },
          {
            "name": "File.bytes",
            "parameters": [],
            "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/bytes)",
              "deprecated": false
            }
          },
          {
            "name": "File.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number",
                "optional": true
              },
              {
                "name": "end",
                "type": "number",
                "optional": true
              },
              {
                "name": "contentType",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "Blob",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice)",
              "deprecated": false
            }
          },
          {
            "name": "File.stream",
            "parameters": [],
            "returnType": "ReadableStream<Uint8Array<ArrayBufferLike>>",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/stream)",
              "deprecated": false
            }
          },
          {
            "name": "File.text",
            "parameters": [],
            "returnType": "Promise<string>",
            "jsdoc": {
              "description": "[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text)",
              "deprecated": false
            }
          },
          {
            "name": "fileFrom",
            "parameters": [
              {
                "name": "path",
                "type": "string",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "Promise<File>",
            "jsdoc": null
          },
          {
            "name": "fileFromSync",
            "parameters": [
              {
                "name": "path",
                "type": "string",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "File",
            "jsdoc": null
          },
          {
            "name": "error",
            "parameters": [],
            "returnType": "Response",
            "jsdoc": null
          },
          {
            "name": "redirect",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              },
              {
                "name": "status",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "Response",
            "jsdoc": null
          },
          {
            "name": "json",
            "parameters": [
              {
                "name": "data",
                "type": "any",
                "optional": false
              },
              {
                "name": "init",
                "type": "ResponseInit",
                "optional": true
              }
            ],
            "returnType": "Response",
            "jsdoc": null
          },
          {
            "name": "Response.error",
            "parameters": [],
            "returnType": "Response",
            "jsdoc": null
          },
          {
            "name": "Response.redirect",
            "parameters": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              },
              {
                "name": "status",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "Response",
            "jsdoc": null
          },
          {
            "name": "Response.json",
            "parameters": [
              {
                "name": "data",
                "type": "any",
                "optional": false
              },
              {
                "name": "init",
                "type": "ResponseInit",
                "optional": true
              }
            ],
            "returnType": "Response",
            "jsdoc": null
          },
          {
            "name": "captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            }
          },
          {
            "name": "prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "FetchError.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            }
          },
          {
            "name": "FetchError.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "FetchError.toString",
            "parameters": [
              {
                "name": "radix",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of an object.",
              "params": [
                {
                  "name": "radix",
                  "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "FetchError.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representing a number in fixed-point notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "FetchError.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented in exponential notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "FetchError.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
              "params": [
                {
                  "name": "precision",
                  "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "FetchError.valueOf",
            "parameters": [],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "FetchError.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              },
              {
                "name": "options",
                "type": "NumberFormatOptions",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts a number to a string by using the current or specified locale.",
              "params": [
                {
                  "name": "locales",
                  "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
                },
                {
                  "name": "options",
                  "description": "An object that contains one or more properties that specify comparison options."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "AbortError.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            }
          },
          {
            "name": "AbortError.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "AbortError.toString",
            "parameters": [
              {
                "name": "radix",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representation of an object.",
              "params": [
                {
                  "name": "radix",
                  "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "AbortError.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string representing a number in fixed-point notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "AbortError.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented in exponential notation.",
              "params": [
                {
                  "name": "fractionDigits",
                  "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "AbortError.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
              "params": [
                {
                  "name": "precision",
                  "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "AbortError.valueOf",
            "parameters": [],
            "returnType": "number",
            "jsdoc": {
              "description": "Returns the primitive value of the specified object.",
              "deprecated": false
            }
          },
          {
            "name": "AbortError.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]",
                "optional": true
              },
              {
                "name": "options",
                "type": "NumberFormatOptions",
                "optional": true
              }
            ],
            "returnType": "string",
            "jsdoc": {
              "description": "Converts a number to a string by using the current or specified locale.",
              "params": [
                {
                  "name": "locales",
                  "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
                },
                {
                  "name": "options",
                  "description": "An object that contains one or more properties that specify comparison options."
                }
              ],
              "deprecated": false
            }
          }
        ],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": true
    }
  ],
  "version": "3.3.2"
}