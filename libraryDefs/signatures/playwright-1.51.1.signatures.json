{
  "functions": [
    {
      "name": "errors.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "errors.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "launch",
      "parameters": [
        {
          "name": "options",
          "type": "{ acceptDownloads?: boolean; args?: string[]; bypassCSP?: boolean; colorScheme?: \"light\" | \"dark\" | \"no-preference\"; cwd?: string; env?: { [key: string]: string; }; executablePath?: string; extraHTTPHeaders?: { ...; }; ... 9 more ...; tracesDir?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<ElectronApplication>",
      "jsdoc": {
        "description": "Launches electron application specified with the\n[`executablePath`](https://playwright.dev/docs/api/class-electron#electron-launch-option-executable-path).",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_electron.launch",
      "parameters": [
        {
          "name": "options",
          "type": "{ acceptDownloads?: boolean; args?: string[]; bypassCSP?: boolean; colorScheme?: \"light\" | \"dark\" | \"no-preference\"; cwd?: string; env?: { [key: string]: string; }; executablePath?: string; extraHTTPHeaders?: { ...; }; ... 9 more ...; tracesDir?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<ElectronApplication>",
      "jsdoc": {
        "description": "Launches electron application specified with the\n[`executablePath`](https://playwright.dev/docs/api/class-electron#electron-launch-option-executable-path).",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "connect",
      "parameters": [
        {
          "name": "wsEndpoint",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ headers?: { [key: string]: string; }; slowMo?: number; timeout?: number; }",
          "optional": true
        }
      ],
      "returnType": "Promise<AndroidDevice>",
      "jsdoc": {
        "description": "This methods attaches Playwright to an existing Android device. Use\n[android.launchServer([options])](https://playwright.dev/docs/api/class-android#android-launch-server) to launch a\nnew Android server instance.",
        "params": [
          {
            "name": "wsEndpoint",
            "description": "A browser websocket endpoint to connect to."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "devices",
      "parameters": [
        {
          "name": "options",
          "type": "{ host?: string; omitDriverInstall?: boolean; port?: number; }",
          "optional": true
        }
      ],
      "returnType": "Promise<AndroidDevice[]>",
      "jsdoc": {
        "description": "Returns the list of detected Android devices.",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "launchServer",
      "parameters": [
        {
          "name": "options",
          "type": "{ adbHost?: string; adbPort?: number; deviceSerialNumber?: string; host?: string; omitDriverInstall?: boolean; port?: number; wsPath?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserServer>",
      "jsdoc": {
        "description": "Launches Playwright Android server that clients can connect to. See the following example:\n\n**Usage**\n\nServer Side:\n\n```js\nconst { _android } = require('playwright');\n\n(async () => {\n  const browserServer = await _android.launchServer({\n    // If you have multiple devices connected and want to use a specific one.\n    // deviceSerialNumber: '<deviceSerialNumber>',\n  });\n  const wsEndpoint = browserServer.wsEndpoint();\n  console.log(wsEndpoint);\n})();\n```\n\nClient Side:\n\n```js\nconst { _android } = require('playwright');\n\n(async () => {\n  const device = await _android.connect('<wsEndpoint>');\n\n  console.log(device.model());\n  console.log(device.serial());\n  await device.shell('am force-stop com.android.chrome');\n  const context = await device.launchBrowser();\n\n  const page = await context.newPage();\n  await page.goto('https://webkit.org/');\n  console.log(await page.evaluate(() => window.location.href));\n  await page.screenshot({ path: 'page-chrome-1.png' });\n\n  await context.close();\n})();\n```",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "setDefaultTimeout",
      "parameters": [
        {
          "name": "timeout",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "This setting will change the default maximum time for all the methods accepting\n[`timeout`](https://playwright.dev/docs/api/class-android#android-set-default-timeout-option-timeout) option.",
        "params": [
          {
            "name": "timeout",
            "description": "Maximum time in milliseconds"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_android.connect",
      "parameters": [
        {
          "name": "wsEndpoint",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ headers?: { [key: string]: string; }; slowMo?: number; timeout?: number; }",
          "optional": true
        }
      ],
      "returnType": "Promise<AndroidDevice>",
      "jsdoc": {
        "description": "This methods attaches Playwright to an existing Android device. Use\n[android.launchServer([options])](https://playwright.dev/docs/api/class-android#android-launch-server) to launch a\nnew Android server instance.",
        "params": [
          {
            "name": "wsEndpoint",
            "description": "A browser websocket endpoint to connect to."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_android.devices",
      "parameters": [
        {
          "name": "options",
          "type": "{ host?: string; omitDriverInstall?: boolean; port?: number; }",
          "optional": true
        }
      ],
      "returnType": "Promise<AndroidDevice[]>",
      "jsdoc": {
        "description": "Returns the list of detected Android devices.",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_android.launchServer",
      "parameters": [
        {
          "name": "options",
          "type": "{ adbHost?: string; adbPort?: number; deviceSerialNumber?: string; host?: string; omitDriverInstall?: boolean; port?: number; wsPath?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserServer>",
      "jsdoc": {
        "description": "Launches Playwright Android server that clients can connect to. See the following example:\n\n**Usage**\n\nServer Side:\n\n```js\nconst { _android } = require('playwright');\n\n(async () => {\n  const browserServer = await _android.launchServer({\n    // If you have multiple devices connected and want to use a specific one.\n    // deviceSerialNumber: '<deviceSerialNumber>',\n  });\n  const wsEndpoint = browserServer.wsEndpoint();\n  console.log(wsEndpoint);\n})();\n```\n\nClient Side:\n\n```js\nconst { _android } = require('playwright');\n\n(async () => {\n  const device = await _android.connect('<wsEndpoint>');\n\n  console.log(device.model());\n  console.log(device.serial());\n  await device.shell('am force-stop com.android.chrome');\n  const context = await device.launchBrowser();\n\n  const page = await context.newPage();\n  await page.goto('https://webkit.org/');\n  console.log(await page.evaluate(() => window.location.href));\n  await page.screenshot({ path: 'page-chrome-1.png' });\n\n  await context.close();\n})();\n```",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_android.setDefaultTimeout",
      "parameters": [
        {
          "name": "timeout",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "This setting will change the default maximum time for all the methods accepting\n[`timeout`](https://playwright.dev/docs/api/class-android#android-set-default-timeout-option-timeout) option.",
        "params": [
          {
            "name": "timeout",
            "description": "Maximum time in milliseconds"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "connectOverCDP",
      "parameters": [
        {
          "name": "endpointURL",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOverCDPOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
        "params": [
          {
            "name": "endpointURL",
            "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "executablePath",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "A path where Playwright expects to find a bundled browser executable.",
        "deprecated": false
      }
    },
    {
      "name": "launchPersistentContext",
      "parameters": [
        {
          "name": "userDataDir",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserContext>",
      "jsdoc": {
        "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
        "params": [
          {
            "name": "userDataDir",
            "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "name",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
        "deprecated": false
      }
    },
    {
      "name": "_bidiChromium.connectOverCDP",
      "parameters": [
        {
          "name": "endpointURL",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOverCDPOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
        "params": [
          {
            "name": "endpointURL",
            "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_bidiChromium.connect",
      "parameters": [
        {
          "name": "wsEndpoint",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.\n\n**NOTE** The major and minor version of the Playwright instance that connects needs to match the version of\nPlaywright that launches the browser (1.2.3 → is compatible with 1.2.x).",
        "params": [
          {
            "name": "wsEndpoint",
            "description": "A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_bidiChromium.executablePath",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "A path where Playwright expects to find a bundled browser executable.",
        "deprecated": false
      }
    },
    {
      "name": "_bidiChromium.launch",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "Returns the browser instance.\n\n**Usage**\n\nYou can use\n[`ignoreDefaultArgs`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)\nto filter out `--mute-audio` from default arguments:\n\n```js\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it\nworks best with the version of Chromium it is bundled with. There is no guarantee it will work with any other\nversion. Use\n[`executablePath`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-executable-path)\noption with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) or\n[Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs\nfor video playback. See\n[this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for\nother differences between Chromium and Chrome.\n[This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_bidiChromium.launchPersistentContext",
      "parameters": [
        {
          "name": "userDataDir",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserContext>",
      "jsdoc": {
        "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
        "params": [
          {
            "name": "userDataDir",
            "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_bidiChromium.launchServer",
      "parameters": [
        {
          "name": "options",
          "type": "{ args?: string[]; channel?: string; chromiumSandbox?: boolean; devtools?: boolean; downloadsPath?: string; env?: { [key: string]: string | number | boolean; }; executablePath?: string; firefoxUserPrefs?: { ...; }; ... 11 more ...; wsPath?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserServer>",
      "jsdoc": {
        "description": "Returns the browser app instance. You can connect to it via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),\nwhich requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to\nit later:\n\n```js\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_bidiChromium.name",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
        "deprecated": false
      }
    },
    {
      "name": "_bidiFirefox.connectOverCDP",
      "parameters": [
        {
          "name": "endpointURL",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOverCDPOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
        "params": [
          {
            "name": "endpointURL",
            "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_bidiFirefox.connect",
      "parameters": [
        {
          "name": "wsEndpoint",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.\n\n**NOTE** The major and minor version of the Playwright instance that connects needs to match the version of\nPlaywright that launches the browser (1.2.3 → is compatible with 1.2.x).",
        "params": [
          {
            "name": "wsEndpoint",
            "description": "A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_bidiFirefox.executablePath",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "A path where Playwright expects to find a bundled browser executable.",
        "deprecated": false
      }
    },
    {
      "name": "_bidiFirefox.launch",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "Returns the browser instance.\n\n**Usage**\n\nYou can use\n[`ignoreDefaultArgs`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)\nto filter out `--mute-audio` from default arguments:\n\n```js\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it\nworks best with the version of Chromium it is bundled with. There is no guarantee it will work with any other\nversion. Use\n[`executablePath`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-executable-path)\noption with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) or\n[Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs\nfor video playback. See\n[this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for\nother differences between Chromium and Chrome.\n[This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_bidiFirefox.launchPersistentContext",
      "parameters": [
        {
          "name": "userDataDir",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserContext>",
      "jsdoc": {
        "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
        "params": [
          {
            "name": "userDataDir",
            "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_bidiFirefox.launchServer",
      "parameters": [
        {
          "name": "options",
          "type": "{ args?: string[]; channel?: string; chromiumSandbox?: boolean; devtools?: boolean; downloadsPath?: string; env?: { [key: string]: string | number | boolean; }; executablePath?: string; firefoxUserPrefs?: { ...; }; ... 11 more ...; wsPath?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserServer>",
      "jsdoc": {
        "description": "Returns the browser app instance. You can connect to it via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),\nwhich requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to\nit later:\n\n```js\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_bidiFirefox.name",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
        "deprecated": false
      }
    },
    {
      "name": "chromium.connectOverCDP",
      "parameters": [
        {
          "name": "endpointURL",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOverCDPOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
        "params": [
          {
            "name": "endpointURL",
            "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "chromium.connect",
      "parameters": [
        {
          "name": "wsEndpoint",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.\n\n**NOTE** The major and minor version of the Playwright instance that connects needs to match the version of\nPlaywright that launches the browser (1.2.3 → is compatible with 1.2.x).",
        "params": [
          {
            "name": "wsEndpoint",
            "description": "A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "chromium.executablePath",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "A path where Playwright expects to find a bundled browser executable.",
        "deprecated": false
      }
    },
    {
      "name": "chromium.launch",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "Returns the browser instance.\n\n**Usage**\n\nYou can use\n[`ignoreDefaultArgs`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)\nto filter out `--mute-audio` from default arguments:\n\n```js\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it\nworks best with the version of Chromium it is bundled with. There is no guarantee it will work with any other\nversion. Use\n[`executablePath`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-executable-path)\noption with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) or\n[Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs\nfor video playback. See\n[this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for\nother differences between Chromium and Chrome.\n[This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "chromium.launchPersistentContext",
      "parameters": [
        {
          "name": "userDataDir",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserContext>",
      "jsdoc": {
        "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
        "params": [
          {
            "name": "userDataDir",
            "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "chromium.launchServer",
      "parameters": [
        {
          "name": "options",
          "type": "{ args?: string[]; channel?: string; chromiumSandbox?: boolean; devtools?: boolean; downloadsPath?: string; env?: { [key: string]: string | number | boolean; }; executablePath?: string; firefoxUserPrefs?: { ...; }; ... 11 more ...; wsPath?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserServer>",
      "jsdoc": {
        "description": "Returns the browser app instance. You can connect to it via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),\nwhich requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to\nit later:\n\n```js\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "chromium.name",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
        "deprecated": false
      }
    },
    {
      "name": "firefox.connectOverCDP",
      "parameters": [
        {
          "name": "endpointURL",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOverCDPOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
        "params": [
          {
            "name": "endpointURL",
            "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "firefox.connect",
      "parameters": [
        {
          "name": "wsEndpoint",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.\n\n**NOTE** The major and minor version of the Playwright instance that connects needs to match the version of\nPlaywright that launches the browser (1.2.3 → is compatible with 1.2.x).",
        "params": [
          {
            "name": "wsEndpoint",
            "description": "A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "firefox.executablePath",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "A path where Playwright expects to find a bundled browser executable.",
        "deprecated": false
      }
    },
    {
      "name": "firefox.launch",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "Returns the browser instance.\n\n**Usage**\n\nYou can use\n[`ignoreDefaultArgs`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)\nto filter out `--mute-audio` from default arguments:\n\n```js\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it\nworks best with the version of Chromium it is bundled with. There is no guarantee it will work with any other\nversion. Use\n[`executablePath`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-executable-path)\noption with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) or\n[Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs\nfor video playback. See\n[this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for\nother differences between Chromium and Chrome.\n[This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "firefox.launchPersistentContext",
      "parameters": [
        {
          "name": "userDataDir",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserContext>",
      "jsdoc": {
        "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
        "params": [
          {
            "name": "userDataDir",
            "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "firefox.launchServer",
      "parameters": [
        {
          "name": "options",
          "type": "{ args?: string[]; channel?: string; chromiumSandbox?: boolean; devtools?: boolean; downloadsPath?: string; env?: { [key: string]: string | number | boolean; }; executablePath?: string; firefoxUserPrefs?: { ...; }; ... 11 more ...; wsPath?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserServer>",
      "jsdoc": {
        "description": "Returns the browser app instance. You can connect to it via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),\nwhich requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to\nit later:\n\n```js\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "firefox.name",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
        "deprecated": false
      }
    },
    {
      "name": "newContext",
      "parameters": [
        {
          "name": "options",
          "type": "{ baseURL?: string; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; keyPath?: string; key?: Buffer<ArrayBufferLike>; pfxPath?: string; pfx?: Buffer<...>; passphrase?: string; }[]; ... 7 more ...; userAgent?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<APIRequestContext>",
      "jsdoc": {
        "description": "Creates new instances of [APIRequestContext](https://playwright.dev/docs/api/class-apirequestcontext).",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "request.newContext",
      "parameters": [
        {
          "name": "options",
          "type": "{ baseURL?: string; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; keyPath?: string; key?: Buffer<ArrayBufferLike>; pfxPath?: string; pfx?: Buffer<...>; passphrase?: string; }[]; ... 7 more ...; userAgent?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<APIRequestContext>",
      "jsdoc": {
        "description": "Creates new instances of [APIRequestContext](https://playwright.dev/docs/api/class-apirequestcontext).",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "register",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "script",
          "type": "string | Function | { path?: string; content?: string; }",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ contentScript?: boolean; }",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Selectors must be registered before creating the page.\n\n**Usage**\n\nAn example of registering selector engine that queries elements based on a tag name:\n\n```js\nconst { selectors, firefox } = require('@playwright/test');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  // Must be a function that evaluates to a selector engine instance.\n  const createTagNameEngine = () => ({\n    // Returns the first element matching given selector in the root's subtree.\n    query(root, selector) {\n      return root.querySelector(selector);\n    },\n\n    // Returns all elements matching given selector in the root's subtree.\n    queryAll(root, selector) {\n      return Array.from(root.querySelectorAll(selector));\n    }\n  });\n\n  // Register the engine. Selectors will be prefixed with \"tag=\".\n  await selectors.register('tag', createTagNameEngine);\n\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  await page.setContent(`<div><button>Click me</button></div>`);\n\n  // Use the selector prefixed with its name.\n  const button = page.locator('tag=button');\n  // We can combine it with built-in locators.\n  await page.locator('tag=div').getByText('Click me').click();\n  // Can use it in any methods supporting selectors.\n  const buttonCount = await page.locator('tag=button').count();\n\n  await browser.close();\n})();\n```",
        "params": [
          {
            "name": "name",
            "description": "Name that is used in selectors as a prefix, e.g. `{name: 'foo'}` enables `foo=myselectorbody` selectors. May only\ncontain `[a-zA-Z0-9_]` characters."
          },
          {
            "name": "script",
            "description": "Script that evaluates to a selector engine instance. The script is evaluated in the page context."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "setTestIdAttribute",
      "parameters": [
        {
          "name": "attributeName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Defines custom attribute name to be used in\n[page.getByTestId(testId)](https://playwright.dev/docs/api/class-page#page-get-by-test-id). `data-testid` is used\nby default.",
        "params": [
          {
            "name": "attributeName",
            "description": "Test id attribute name."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "selectors.register",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "script",
          "type": "string | Function | { path?: string; content?: string; }",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ contentScript?: boolean; }",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Selectors must be registered before creating the page.\n\n**Usage**\n\nAn example of registering selector engine that queries elements based on a tag name:\n\n```js\nconst { selectors, firefox } = require('@playwright/test');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  // Must be a function that evaluates to a selector engine instance.\n  const createTagNameEngine = () => ({\n    // Returns the first element matching given selector in the root's subtree.\n    query(root, selector) {\n      return root.querySelector(selector);\n    },\n\n    // Returns all elements matching given selector in the root's subtree.\n    queryAll(root, selector) {\n      return Array.from(root.querySelectorAll(selector));\n    }\n  });\n\n  // Register the engine. Selectors will be prefixed with \"tag=\".\n  await selectors.register('tag', createTagNameEngine);\n\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  await page.setContent(`<div><button>Click me</button></div>`);\n\n  // Use the selector prefixed with its name.\n  const button = page.locator('tag=button');\n  // We can combine it with built-in locators.\n  await page.locator('tag=div').getByText('Click me').click();\n  // Can use it in any methods supporting selectors.\n  const buttonCount = await page.locator('tag=button').count();\n\n  await browser.close();\n})();\n```",
        "params": [
          {
            "name": "name",
            "description": "Name that is used in selectors as a prefix, e.g. `{name: 'foo'}` enables `foo=myselectorbody` selectors. May only\ncontain `[a-zA-Z0-9_]` characters."
          },
          {
            "name": "script",
            "description": "Script that evaluates to a selector engine instance. The script is evaluated in the page context."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "selectors.setTestIdAttribute",
      "parameters": [
        {
          "name": "attributeName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Defines custom attribute name to be used in\n[page.getByTestId(testId)](https://playwright.dev/docs/api/class-page#page-get-by-test-id). `data-testid` is used\nby default.",
        "params": [
          {
            "name": "attributeName",
            "description": "Test id attribute name."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "webkit.connectOverCDP",
      "parameters": [
        {
          "name": "endpointURL",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOverCDPOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
        "params": [
          {
            "name": "endpointURL",
            "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "webkit.connect",
      "parameters": [
        {
          "name": "wsEndpoint",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "ConnectOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.\n\n**NOTE** The major and minor version of the Playwright instance that connects needs to match the version of\nPlaywright that launches the browser (1.2.3 → is compatible with 1.2.x).",
        "params": [
          {
            "name": "wsEndpoint",
            "description": "A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "webkit.executablePath",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "A path where Playwright expects to find a bundled browser executable.",
        "deprecated": false
      }
    },
    {
      "name": "webkit.launch",
      "parameters": [
        {
          "name": "options",
          "type": "LaunchOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<Browser>",
      "jsdoc": {
        "description": "Returns the browser instance.\n\n**Usage**\n\nYou can use\n[`ignoreDefaultArgs`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)\nto filter out `--mute-audio` from default arguments:\n\n```js\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it\nworks best with the version of Chromium it is bundled with. There is no guarantee it will work with any other\nversion. Use\n[`executablePath`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-executable-path)\noption with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) or\n[Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs\nfor video playback. See\n[this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for\nother differences between Chromium and Chrome.\n[This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "webkit.launchPersistentContext",
      "parameters": [
        {
          "name": "userDataDir",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserContext>",
      "jsdoc": {
        "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
        "params": [
          {
            "name": "userDataDir",
            "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
          },
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "webkit.launchServer",
      "parameters": [
        {
          "name": "options",
          "type": "{ args?: string[]; channel?: string; chromiumSandbox?: boolean; devtools?: boolean; downloadsPath?: string; env?: { [key: string]: string | number | boolean; }; executablePath?: string; firefoxUserPrefs?: { ...; }; ... 11 more ...; wsPath?: string; }",
          "optional": true
        }
      ],
      "returnType": "Promise<BrowserServer>",
      "jsdoc": {
        "description": "Returns the browser app instance. You can connect to it via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),\nwhich requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to\nit later:\n\n```js\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```",
        "params": [
          {
            "name": "options"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "webkit.name",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
        "deprecated": false
      }
    }
  ],
  "enums": [],
  "types": [],
  "classes": [],
  "constants": [],
  "namespaces": [
    {
      "name": "playwright",
      "contents": {
        "functions": [
          {
            "name": "errors.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            }
          },
          {
            "name": "errors.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            }
          },
          {
            "name": "launch",
            "parameters": [
              {
                "name": "options",
                "type": "{ acceptDownloads?: boolean; args?: string[]; bypassCSP?: boolean; colorScheme?: \"light\" | \"dark\" | \"no-preference\"; cwd?: string; env?: { [key: string]: string; }; executablePath?: string; extraHTTPHeaders?: { ...; }; ... 9 more ...; tracesDir?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<ElectronApplication>",
            "jsdoc": {
              "description": "Launches electron application specified with the\n[`executablePath`](https://playwright.dev/docs/api/class-electron#electron-launch-option-executable-path).",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_electron.launch",
            "parameters": [
              {
                "name": "options",
                "type": "{ acceptDownloads?: boolean; args?: string[]; bypassCSP?: boolean; colorScheme?: \"light\" | \"dark\" | \"no-preference\"; cwd?: string; env?: { [key: string]: string; }; executablePath?: string; extraHTTPHeaders?: { ...; }; ... 9 more ...; tracesDir?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<ElectronApplication>",
            "jsdoc": {
              "description": "Launches electron application specified with the\n[`executablePath`](https://playwright.dev/docs/api/class-electron#electron-launch-option-executable-path).",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "connect",
            "parameters": [
              {
                "name": "wsEndpoint",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "{ headers?: { [key: string]: string; }; slowMo?: number; timeout?: number; }",
                "optional": true
              }
            ],
            "returnType": "Promise<AndroidDevice>",
            "jsdoc": {
              "description": "This methods attaches Playwright to an existing Android device. Use\n[android.launchServer([options])](https://playwright.dev/docs/api/class-android#android-launch-server) to launch a\nnew Android server instance.",
              "params": [
                {
                  "name": "wsEndpoint",
                  "description": "A browser websocket endpoint to connect to."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "devices",
            "parameters": [
              {
                "name": "options",
                "type": "{ host?: string; omitDriverInstall?: boolean; port?: number; }",
                "optional": true
              }
            ],
            "returnType": "Promise<AndroidDevice[]>",
            "jsdoc": {
              "description": "Returns the list of detected Android devices.",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "launchServer",
            "parameters": [
              {
                "name": "options",
                "type": "{ adbHost?: string; adbPort?: number; deviceSerialNumber?: string; host?: string; omitDriverInstall?: boolean; port?: number; wsPath?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserServer>",
            "jsdoc": {
              "description": "Launches Playwright Android server that clients can connect to. See the following example:\n\n**Usage**\n\nServer Side:\n\n```js\nconst { _android } = require('playwright');\n\n(async () => {\n  const browserServer = await _android.launchServer({\n    // If you have multiple devices connected and want to use a specific one.\n    // deviceSerialNumber: '<deviceSerialNumber>',\n  });\n  const wsEndpoint = browserServer.wsEndpoint();\n  console.log(wsEndpoint);\n})();\n```\n\nClient Side:\n\n```js\nconst { _android } = require('playwright');\n\n(async () => {\n  const device = await _android.connect('<wsEndpoint>');\n\n  console.log(device.model());\n  console.log(device.serial());\n  await device.shell('am force-stop com.android.chrome');\n  const context = await device.launchBrowser();\n\n  const page = await context.newPage();\n  await page.goto('https://webkit.org/');\n  console.log(await page.evaluate(() => window.location.href));\n  await page.screenshot({ path: 'page-chrome-1.png' });\n\n  await context.close();\n})();\n```",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "setDefaultTimeout",
            "parameters": [
              {
                "name": "timeout",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "This setting will change the default maximum time for all the methods accepting\n[`timeout`](https://playwright.dev/docs/api/class-android#android-set-default-timeout-option-timeout) option.",
              "params": [
                {
                  "name": "timeout",
                  "description": "Maximum time in milliseconds"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_android.connect",
            "parameters": [
              {
                "name": "wsEndpoint",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "{ headers?: { [key: string]: string; }; slowMo?: number; timeout?: number; }",
                "optional": true
              }
            ],
            "returnType": "Promise<AndroidDevice>",
            "jsdoc": {
              "description": "This methods attaches Playwright to an existing Android device. Use\n[android.launchServer([options])](https://playwright.dev/docs/api/class-android#android-launch-server) to launch a\nnew Android server instance.",
              "params": [
                {
                  "name": "wsEndpoint",
                  "description": "A browser websocket endpoint to connect to."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_android.devices",
            "parameters": [
              {
                "name": "options",
                "type": "{ host?: string; omitDriverInstall?: boolean; port?: number; }",
                "optional": true
              }
            ],
            "returnType": "Promise<AndroidDevice[]>",
            "jsdoc": {
              "description": "Returns the list of detected Android devices.",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_android.launchServer",
            "parameters": [
              {
                "name": "options",
                "type": "{ adbHost?: string; adbPort?: number; deviceSerialNumber?: string; host?: string; omitDriverInstall?: boolean; port?: number; wsPath?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserServer>",
            "jsdoc": {
              "description": "Launches Playwright Android server that clients can connect to. See the following example:\n\n**Usage**\n\nServer Side:\n\n```js\nconst { _android } = require('playwright');\n\n(async () => {\n  const browserServer = await _android.launchServer({\n    // If you have multiple devices connected and want to use a specific one.\n    // deviceSerialNumber: '<deviceSerialNumber>',\n  });\n  const wsEndpoint = browserServer.wsEndpoint();\n  console.log(wsEndpoint);\n})();\n```\n\nClient Side:\n\n```js\nconst { _android } = require('playwright');\n\n(async () => {\n  const device = await _android.connect('<wsEndpoint>');\n\n  console.log(device.model());\n  console.log(device.serial());\n  await device.shell('am force-stop com.android.chrome');\n  const context = await device.launchBrowser();\n\n  const page = await context.newPage();\n  await page.goto('https://webkit.org/');\n  console.log(await page.evaluate(() => window.location.href));\n  await page.screenshot({ path: 'page-chrome-1.png' });\n\n  await context.close();\n})();\n```",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_android.setDefaultTimeout",
            "parameters": [
              {
                "name": "timeout",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "This setting will change the default maximum time for all the methods accepting\n[`timeout`](https://playwright.dev/docs/api/class-android#android-set-default-timeout-option-timeout) option.",
              "params": [
                {
                  "name": "timeout",
                  "description": "Maximum time in milliseconds"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "connectOverCDP",
            "parameters": [
              {
                "name": "endpointURL",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOverCDPOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
              "params": [
                {
                  "name": "endpointURL",
                  "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "executablePath",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "A path where Playwright expects to find a bundled browser executable.",
              "deprecated": false
            }
          },
          {
            "name": "launchPersistentContext",
            "parameters": [
              {
                "name": "userDataDir",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserContext>",
            "jsdoc": {
              "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
              "params": [
                {
                  "name": "userDataDir",
                  "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "name",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
              "deprecated": false
            }
          },
          {
            "name": "_bidiChromium.connectOverCDP",
            "parameters": [
              {
                "name": "endpointURL",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOverCDPOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
              "params": [
                {
                  "name": "endpointURL",
                  "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_bidiChromium.connect",
            "parameters": [
              {
                "name": "wsEndpoint",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.\n\n**NOTE** The major and minor version of the Playwright instance that connects needs to match the version of\nPlaywright that launches the browser (1.2.3 → is compatible with 1.2.x).",
              "params": [
                {
                  "name": "wsEndpoint",
                  "description": "A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_bidiChromium.executablePath",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "A path where Playwright expects to find a bundled browser executable.",
              "deprecated": false
            }
          },
          {
            "name": "_bidiChromium.launch",
            "parameters": [
              {
                "name": "options",
                "type": "LaunchOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "Returns the browser instance.\n\n**Usage**\n\nYou can use\n[`ignoreDefaultArgs`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)\nto filter out `--mute-audio` from default arguments:\n\n```js\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it\nworks best with the version of Chromium it is bundled with. There is no guarantee it will work with any other\nversion. Use\n[`executablePath`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-executable-path)\noption with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) or\n[Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs\nfor video playback. See\n[this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for\nother differences between Chromium and Chrome.\n[This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_bidiChromium.launchPersistentContext",
            "parameters": [
              {
                "name": "userDataDir",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserContext>",
            "jsdoc": {
              "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
              "params": [
                {
                  "name": "userDataDir",
                  "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_bidiChromium.launchServer",
            "parameters": [
              {
                "name": "options",
                "type": "{ args?: string[]; channel?: string; chromiumSandbox?: boolean; devtools?: boolean; downloadsPath?: string; env?: { [key: string]: string | number | boolean; }; executablePath?: string; firefoxUserPrefs?: { ...; }; ... 11 more ...; wsPath?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserServer>",
            "jsdoc": {
              "description": "Returns the browser app instance. You can connect to it via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),\nwhich requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to\nit later:\n\n```js\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_bidiChromium.name",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
              "deprecated": false
            }
          },
          {
            "name": "_bidiFirefox.connectOverCDP",
            "parameters": [
              {
                "name": "endpointURL",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOverCDPOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
              "params": [
                {
                  "name": "endpointURL",
                  "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_bidiFirefox.connect",
            "parameters": [
              {
                "name": "wsEndpoint",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.\n\n**NOTE** The major and minor version of the Playwright instance that connects needs to match the version of\nPlaywright that launches the browser (1.2.3 → is compatible with 1.2.x).",
              "params": [
                {
                  "name": "wsEndpoint",
                  "description": "A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_bidiFirefox.executablePath",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "A path where Playwright expects to find a bundled browser executable.",
              "deprecated": false
            }
          },
          {
            "name": "_bidiFirefox.launch",
            "parameters": [
              {
                "name": "options",
                "type": "LaunchOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "Returns the browser instance.\n\n**Usage**\n\nYou can use\n[`ignoreDefaultArgs`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)\nto filter out `--mute-audio` from default arguments:\n\n```js\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it\nworks best with the version of Chromium it is bundled with. There is no guarantee it will work with any other\nversion. Use\n[`executablePath`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-executable-path)\noption with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) or\n[Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs\nfor video playback. See\n[this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for\nother differences between Chromium and Chrome.\n[This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_bidiFirefox.launchPersistentContext",
            "parameters": [
              {
                "name": "userDataDir",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserContext>",
            "jsdoc": {
              "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
              "params": [
                {
                  "name": "userDataDir",
                  "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_bidiFirefox.launchServer",
            "parameters": [
              {
                "name": "options",
                "type": "{ args?: string[]; channel?: string; chromiumSandbox?: boolean; devtools?: boolean; downloadsPath?: string; env?: { [key: string]: string | number | boolean; }; executablePath?: string; firefoxUserPrefs?: { ...; }; ... 11 more ...; wsPath?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserServer>",
            "jsdoc": {
              "description": "Returns the browser app instance. You can connect to it via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),\nwhich requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to\nit later:\n\n```js\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "_bidiFirefox.name",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
              "deprecated": false
            }
          },
          {
            "name": "chromium.connectOverCDP",
            "parameters": [
              {
                "name": "endpointURL",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOverCDPOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
              "params": [
                {
                  "name": "endpointURL",
                  "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "chromium.connect",
            "parameters": [
              {
                "name": "wsEndpoint",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.\n\n**NOTE** The major and minor version of the Playwright instance that connects needs to match the version of\nPlaywright that launches the browser (1.2.3 → is compatible with 1.2.x).",
              "params": [
                {
                  "name": "wsEndpoint",
                  "description": "A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "chromium.executablePath",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "A path where Playwright expects to find a bundled browser executable.",
              "deprecated": false
            }
          },
          {
            "name": "chromium.launch",
            "parameters": [
              {
                "name": "options",
                "type": "LaunchOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "Returns the browser instance.\n\n**Usage**\n\nYou can use\n[`ignoreDefaultArgs`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)\nto filter out `--mute-audio` from default arguments:\n\n```js\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it\nworks best with the version of Chromium it is bundled with. There is no guarantee it will work with any other\nversion. Use\n[`executablePath`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-executable-path)\noption with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) or\n[Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs\nfor video playback. See\n[this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for\nother differences between Chromium and Chrome.\n[This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "chromium.launchPersistentContext",
            "parameters": [
              {
                "name": "userDataDir",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserContext>",
            "jsdoc": {
              "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
              "params": [
                {
                  "name": "userDataDir",
                  "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "chromium.launchServer",
            "parameters": [
              {
                "name": "options",
                "type": "{ args?: string[]; channel?: string; chromiumSandbox?: boolean; devtools?: boolean; downloadsPath?: string; env?: { [key: string]: string | number | boolean; }; executablePath?: string; firefoxUserPrefs?: { ...; }; ... 11 more ...; wsPath?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserServer>",
            "jsdoc": {
              "description": "Returns the browser app instance. You can connect to it via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),\nwhich requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to\nit later:\n\n```js\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "chromium.name",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
              "deprecated": false
            }
          },
          {
            "name": "firefox.connectOverCDP",
            "parameters": [
              {
                "name": "endpointURL",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOverCDPOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
              "params": [
                {
                  "name": "endpointURL",
                  "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "firefox.connect",
            "parameters": [
              {
                "name": "wsEndpoint",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.\n\n**NOTE** The major and minor version of the Playwright instance that connects needs to match the version of\nPlaywright that launches the browser (1.2.3 → is compatible with 1.2.x).",
              "params": [
                {
                  "name": "wsEndpoint",
                  "description": "A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "firefox.executablePath",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "A path where Playwright expects to find a bundled browser executable.",
              "deprecated": false
            }
          },
          {
            "name": "firefox.launch",
            "parameters": [
              {
                "name": "options",
                "type": "LaunchOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "Returns the browser instance.\n\n**Usage**\n\nYou can use\n[`ignoreDefaultArgs`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)\nto filter out `--mute-audio` from default arguments:\n\n```js\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it\nworks best with the version of Chromium it is bundled with. There is no guarantee it will work with any other\nversion. Use\n[`executablePath`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-executable-path)\noption with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) or\n[Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs\nfor video playback. See\n[this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for\nother differences between Chromium and Chrome.\n[This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "firefox.launchPersistentContext",
            "parameters": [
              {
                "name": "userDataDir",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserContext>",
            "jsdoc": {
              "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
              "params": [
                {
                  "name": "userDataDir",
                  "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "firefox.launchServer",
            "parameters": [
              {
                "name": "options",
                "type": "{ args?: string[]; channel?: string; chromiumSandbox?: boolean; devtools?: boolean; downloadsPath?: string; env?: { [key: string]: string | number | boolean; }; executablePath?: string; firefoxUserPrefs?: { ...; }; ... 11 more ...; wsPath?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserServer>",
            "jsdoc": {
              "description": "Returns the browser app instance. You can connect to it via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),\nwhich requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to\nit later:\n\n```js\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "firefox.name",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
              "deprecated": false
            }
          },
          {
            "name": "newContext",
            "parameters": [
              {
                "name": "options",
                "type": "{ baseURL?: string; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; keyPath?: string; key?: Buffer<ArrayBufferLike>; pfxPath?: string; pfx?: Buffer<...>; passphrase?: string; }[]; ... 7 more ...; userAgent?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<APIRequestContext>",
            "jsdoc": {
              "description": "Creates new instances of [APIRequestContext](https://playwright.dev/docs/api/class-apirequestcontext).",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "request.newContext",
            "parameters": [
              {
                "name": "options",
                "type": "{ baseURL?: string; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; keyPath?: string; key?: Buffer<ArrayBufferLike>; pfxPath?: string; pfx?: Buffer<...>; passphrase?: string; }[]; ... 7 more ...; userAgent?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<APIRequestContext>",
            "jsdoc": {
              "description": "Creates new instances of [APIRequestContext](https://playwright.dev/docs/api/class-apirequestcontext).",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "register",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              },
              {
                "name": "script",
                "type": "string | Function | { path?: string; content?: string; }",
                "optional": false
              },
              {
                "name": "options",
                "type": "{ contentScript?: boolean; }",
                "optional": true
              }
            ],
            "returnType": "Promise<void>",
            "jsdoc": {
              "description": "Selectors must be registered before creating the page.\n\n**Usage**\n\nAn example of registering selector engine that queries elements based on a tag name:\n\n```js\nconst { selectors, firefox } = require('@playwright/test');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  // Must be a function that evaluates to a selector engine instance.\n  const createTagNameEngine = () => ({\n    // Returns the first element matching given selector in the root's subtree.\n    query(root, selector) {\n      return root.querySelector(selector);\n    },\n\n    // Returns all elements matching given selector in the root's subtree.\n    queryAll(root, selector) {\n      return Array.from(root.querySelectorAll(selector));\n    }\n  });\n\n  // Register the engine. Selectors will be prefixed with \"tag=\".\n  await selectors.register('tag', createTagNameEngine);\n\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  await page.setContent(`<div><button>Click me</button></div>`);\n\n  // Use the selector prefixed with its name.\n  const button = page.locator('tag=button');\n  // We can combine it with built-in locators.\n  await page.locator('tag=div').getByText('Click me').click();\n  // Can use it in any methods supporting selectors.\n  const buttonCount = await page.locator('tag=button').count();\n\n  await browser.close();\n})();\n```",
              "params": [
                {
                  "name": "name",
                  "description": "Name that is used in selectors as a prefix, e.g. `{name: 'foo'}` enables `foo=myselectorbody` selectors. May only\ncontain `[a-zA-Z0-9_]` characters."
                },
                {
                  "name": "script",
                  "description": "Script that evaluates to a selector engine instance. The script is evaluated in the page context."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "setTestIdAttribute",
            "parameters": [
              {
                "name": "attributeName",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Defines custom attribute name to be used in\n[page.getByTestId(testId)](https://playwright.dev/docs/api/class-page#page-get-by-test-id). `data-testid` is used\nby default.",
              "params": [
                {
                  "name": "attributeName",
                  "description": "Test id attribute name."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "selectors.register",
            "parameters": [
              {
                "name": "name",
                "type": "string",
                "optional": false
              },
              {
                "name": "script",
                "type": "string | Function | { path?: string; content?: string; }",
                "optional": false
              },
              {
                "name": "options",
                "type": "{ contentScript?: boolean; }",
                "optional": true
              }
            ],
            "returnType": "Promise<void>",
            "jsdoc": {
              "description": "Selectors must be registered before creating the page.\n\n**Usage**\n\nAn example of registering selector engine that queries elements based on a tag name:\n\n```js\nconst { selectors, firefox } = require('@playwright/test');  // Or 'chromium' or 'webkit'.\n\n(async () => {\n  // Must be a function that evaluates to a selector engine instance.\n  const createTagNameEngine = () => ({\n    // Returns the first element matching given selector in the root's subtree.\n    query(root, selector) {\n      return root.querySelector(selector);\n    },\n\n    // Returns all elements matching given selector in the root's subtree.\n    queryAll(root, selector) {\n      return Array.from(root.querySelectorAll(selector));\n    }\n  });\n\n  // Register the engine. Selectors will be prefixed with \"tag=\".\n  await selectors.register('tag', createTagNameEngine);\n\n  const browser = await firefox.launch();\n  const page = await browser.newPage();\n  await page.setContent(`<div><button>Click me</button></div>`);\n\n  // Use the selector prefixed with its name.\n  const button = page.locator('tag=button');\n  // We can combine it with built-in locators.\n  await page.locator('tag=div').getByText('Click me').click();\n  // Can use it in any methods supporting selectors.\n  const buttonCount = await page.locator('tag=button').count();\n\n  await browser.close();\n})();\n```",
              "params": [
                {
                  "name": "name",
                  "description": "Name that is used in selectors as a prefix, e.g. `{name: 'foo'}` enables `foo=myselectorbody` selectors. May only\ncontain `[a-zA-Z0-9_]` characters."
                },
                {
                  "name": "script",
                  "description": "Script that evaluates to a selector engine instance. The script is evaluated in the page context."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "selectors.setTestIdAttribute",
            "parameters": [
              {
                "name": "attributeName",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Defines custom attribute name to be used in\n[page.getByTestId(testId)](https://playwright.dev/docs/api/class-page#page-get-by-test-id). `data-testid` is used\nby default.",
              "params": [
                {
                  "name": "attributeName",
                  "description": "Test id attribute name."
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "webkit.connectOverCDP",
            "parameters": [
              {
                "name": "endpointURL",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOverCDPOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance using the Chrome DevTools Protocol.\n\nThe default browser context is accessible via\n[browser.contexts()](https://playwright.dev/docs/api/class-browser#browser-contexts).\n\n**NOTE** Connecting over the Chrome DevTools Protocol is only supported for Chromium-based browsers.\n\n**NOTE** This connection is significantly lower fidelity than the Playwright protocol connection via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\nIf you are experiencing issues or attempting to use advanced functionality, you probably want to use\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect).\n\n**Usage**\n\n```js\nconst browser = await playwright.chromium.connectOverCDP('http://localhost:9222');\nconst defaultContext = browser.contexts()[0];\nconst page = defaultContext.pages()[0];\n```",
              "params": [
                {
                  "name": "endpointURL",
                  "description": "A CDP websocket endpoint or http url to connect to. For example `http://localhost:9222/` or\n`ws://127.0.0.1:9222/devtools/browser/387adf4c-243f-4051-a181-46798f4a46f4`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "webkit.connect",
            "parameters": [
              {
                "name": "wsEndpoint",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "ConnectOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "This method attaches Playwright to an existing browser instance created via `BrowserType.launchServer` in Node.js.\n\n**NOTE** The major and minor version of the Playwright instance that connects needs to match the version of\nPlaywright that launches the browser (1.2.3 → is compatible with 1.2.x).",
              "params": [
                {
                  "name": "wsEndpoint",
                  "description": "A Playwright browser websocket endpoint to connect to. You obtain this endpoint via `BrowserServer.wsEndpoint`."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "webkit.executablePath",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "A path where Playwright expects to find a bundled browser executable.",
              "deprecated": false
            }
          },
          {
            "name": "webkit.launch",
            "parameters": [
              {
                "name": "options",
                "type": "LaunchOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<Browser>",
            "jsdoc": {
              "description": "Returns the browser instance.\n\n**Usage**\n\nYou can use\n[`ignoreDefaultArgs`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-ignore-default-args)\nto filter out `--mute-audio` from default arguments:\n\n```js\nconst browser = await chromium.launch({  // Or 'firefox' or 'webkit'.\n  ignoreDefaultArgs: ['--mute-audio']\n});\n```\n\n> **Chromium-only** Playwright can also be used to control the Google Chrome or Microsoft Edge browsers, but it\nworks best with the version of Chromium it is bundled with. There is no guarantee it will work with any other\nversion. Use\n[`executablePath`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-option-executable-path)\noption with extreme caution.\n>\n> If Google Chrome (rather than Chromium) is preferred, a\n[Chrome Canary](https://www.google.com/chrome/browser/canary.html) or\n[Dev Channel](https://www.chromium.org/getting-involved/dev-channel) build is suggested.\n>\n> Stock browsers like Google Chrome and Microsoft Edge are suitable for tests that require proprietary media codecs\nfor video playback. See\n[this article](https://www.howtogeek.com/202825/what%E2%80%99s-the-difference-between-chromium-and-chrome/) for\nother differences between Chromium and Chrome.\n[This article](https://chromium.googlesource.com/chromium/src/+/lkgr/docs/chromium_browser_vs_google_chrome.md)\ndescribes some differences for Linux users.",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "webkit.launchPersistentContext",
            "parameters": [
              {
                "name": "userDataDir",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "{ acceptDownloads?: boolean; args?: string[]; baseURL?: string; bypassCSP?: boolean; channel?: string; chromiumSandbox?: boolean; clientCertificates?: { origin: string; certPath?: string; cert?: Buffer<ArrayBufferLike>; ... 4 more ...; passphrase?: string; }[]; ... 39 more ...; viewport?: { ...; }; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserContext>",
            "jsdoc": {
              "description": "Returns the persistent browser context instance.\n\nLaunches browser that uses persistent storage located at\n[`userDataDir`](https://playwright.dev/docs/api/class-browsertype#browser-type-launch-persistent-context-option-user-data-dir)\nand returns the only context. Closing this context will automatically close the browser.",
              "params": [
                {
                  "name": "userDataDir",
                  "description": "Path to a User Data Directory, which stores browser session data like cookies and local storage. More details for\n[Chromium](https://chromium.googlesource.com/chromium/src/+/master/docs/user_data_dir.md#introduction) and\n[Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Command_Line_Options#User_Profile). Note that Chromium's\nuser data directory is the **parent** directory of the \"Profile Path\" seen at `chrome://version`. Pass an empty\nstring to use a temporary directory instead."
                },
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "webkit.launchServer",
            "parameters": [
              {
                "name": "options",
                "type": "{ args?: string[]; channel?: string; chromiumSandbox?: boolean; devtools?: boolean; downloadsPath?: string; env?: { [key: string]: string | number | boolean; }; executablePath?: string; firefoxUserPrefs?: { ...; }; ... 11 more ...; wsPath?: string; }",
                "optional": true
              }
            ],
            "returnType": "Promise<BrowserServer>",
            "jsdoc": {
              "description": "Returns the browser app instance. You can connect to it via\n[browserType.connect(wsEndpoint[, options])](https://playwright.dev/docs/api/class-browsertype#browser-type-connect),\nwhich requires the major/minor client/server version to match (1.2.3 → is compatible with 1.2.x).\n\n**Usage**\n\nLaunches browser server that client can connect to. An example of launching a browser executable and connecting to\nit later:\n\n```js\nconst { chromium } = require('playwright');  // Or 'webkit' or 'firefox'.\n\n(async () => {\n  const browserServer = await chromium.launchServer();\n  const wsEndpoint = browserServer.wsEndpoint();\n  // Use web socket endpoint later to establish a connection.\n  const browser = await chromium.connect(wsEndpoint);\n  // Close browser instance.\n  await browserServer.close();\n})();\n```",
              "params": [
                {
                  "name": "options"
                }
              ],
              "deprecated": false
            }
          },
          {
            "name": "webkit.name",
            "parameters": [],
            "returnType": "string",
            "jsdoc": {
              "description": "Returns browser name. For example: `'chromium'`, `'webkit'` or `'firefox'`.",
              "deprecated": false
            }
          }
        ],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": true
    }
  ],
  "version": "1.51.1"
}