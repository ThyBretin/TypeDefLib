{
  "functions": [
    {
      "name": "loadBuffer",
      "parameters": [
        {
          "name": "buffer",
          "type": "Buffer<ArrayBufferLike>",
          "optional": false
        },
        {
          "name": "options",
          "type": "DecodeStreamOptions",
          "optional": true
        }
      ],
      "returnType": "CheerioAPI",
      "jsdoc": {
        "description": "Sniffs the encoding of a buffer, then creates a querying function bound to a\ndocument created from the buffer.",
        "params": [
          {
            "name": "buffer",
            "description": "- The buffer to sniff the encoding of."
          },
          {
            "name": "options",
            "description": "- The options to pass to Cheerio."
          }
        ],
        "returns": "The loaded document.",
        "deprecated": false
      }
    },
    {
      "name": "stringStream",
      "parameters": [
        {
          "name": "options",
          "type": "CheerioOptions",
          "optional": false
        },
        {
          "name": "cb",
          "type": "(err: Error, $: CheerioAPI) => void",
          "optional": false
        }
      ],
      "returnType": "Writable",
      "jsdoc": {
        "description": "Creates a stream that parses a sequence of strings into a document.\n\nThe stream is a `Writable` stream that accepts strings. When the stream is\nfinished, the callback is called with the loaded document.",
        "params": [
          {
            "name": "options",
            "description": "- The options to pass to Cheerio."
          },
          {
            "name": "cb",
            "description": "- The callback to call when the stream is finished."
          }
        ],
        "returns": "The writable stream.",
        "deprecated": false
      }
    },
    {
      "name": "decodeStream",
      "parameters": [
        {
          "name": "options",
          "type": "DecodeStreamOptions",
          "optional": false
        },
        {
          "name": "cb",
          "type": "(err: Error, $: CheerioAPI) => void",
          "optional": false
        }
      ],
      "returnType": "Writable",
      "jsdoc": {
        "description": "Parses a stream of buffers into a document.\n\nThe stream is a `Writable` stream that accepts buffers. When the stream is\nfinished, the callback is called with the loaded document.",
        "params": [
          {
            "name": "options",
            "description": "- The options to pass to Cheerio."
          },
          {
            "name": "cb",
            "description": "- The callback to call when the stream is finished."
          }
        ],
        "returns": "The writable stream.",
        "deprecated": false
      }
    },
    {
      "name": "fromURL",
      "parameters": [
        {
          "name": "url",
          "type": "string | URL",
          "optional": false
        },
        {
          "name": "options",
          "type": "CheerioRequestOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<CheerioAPI>",
      "jsdoc": {
        "description": "`fromURL` loads a document from a URL.\n\nBy default, redirects are allowed and non-2xx responses are rejected.",
        "params": [
          {
            "name": "url",
            "description": "- The URL to load the document from."
          },
          {
            "name": "options",
            "description": "- The options to pass to Cheerio."
          }
        ],
        "returns": "The loaded document.",
        "deprecated": false
      }
    },
    {
      "name": "contains",
      "parameters": [
        {
          "name": "container",
          "type": "AnyNode",
          "optional": false
        },
        {
          "name": "contained",
          "type": "AnyNode",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "merge",
      "parameters": [
        {
          "name": "arr1",
          "type": "Writable<ArrayLike<T>>",
          "optional": false
        },
        {
          "name": "arr2",
          "type": "ArrayLike<T>",
          "optional": false
        }
      ],
      "returnType": "ArrayLike<T>",
      "jsdoc": null
    },
    {
      "name": "load",
      "parameters": [
        {
          "name": "content",
          "type": "string | Buffer<ArrayBufferLike> | AnyNode | AnyNode[]",
          "optional": false
        },
        {
          "name": "options",
          "type": "CheerioOptions",
          "optional": true
        },
        {
          "name": "isDocument",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "CheerioAPI",
      "jsdoc": null
    }
  ],
  "enums": [],
  "types": [
    {
      "name": "DecodeStreamOptions",
      "type": "DecodeStreamOptions",
      "properties": [
        {
          "name": "encoding",
          "type": "SnifferOptions",
          "optional": true
        },
        {
          "name": "xml",
          "type": "boolean | HTMLParser2Options",
          "optional": true
        },
        {
          "name": "xmlMode",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "baseURI",
          "type": "string | URL",
          "optional": true
        },
        {
          "name": "quirksMode",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "pseudos",
          "type": "Record<string, string | ((elem: Element, value?: string) => boolean)>",
          "optional": true
        },
        {
          "name": "scriptingEnabled",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "sourceCodeLocationInfo",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "treeAdapter",
          "type": "TreeAdapter<Htmlparser2TreeAdapterMap>",
          "optional": true
        },
        {
          "name": "onParseError",
          "type": "ParserErrorHandler",
          "optional": true
        }
      ],
      "extends": [
        "CheerioOptions"
      ],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "UndiciStreamOptions",
      "type": "{ dispatcher?: Dispatcher; } & Omit<RequestOptions, \"origin\" | \"path\">",
      "properties": [
        {
          "name": "dispatcher",
          "type": "Dispatcher",
          "optional": true
        },
        {
          "name": "opaque",
          "type": "unknown",
          "optional": true
        },
        {
          "name": "signal",
          "type": "unknown",
          "optional": true
        },
        {
          "name": "maxRedirections",
          "type": "number",
          "optional": true
        },
        {
          "name": "redirectionLimitReached",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "onInfo",
          "type": "(info: { statusCode: number; headers: Record<string, string | string[]>; }) => void",
          "optional": true
        },
        {
          "name": "responseHeader",
          "type": "\"raw\"",
          "optional": true
        },
        {
          "name": "highWaterMark",
          "type": "number",
          "optional": true
        },
        {
          "name": "method",
          "type": "HttpMethod",
          "optional": false
        },
        {
          "name": "body",
          "type": "string | Buffer<ArrayBufferLike> | Uint8Array<ArrayBufferLike> | Readable | FormData",
          "optional": true
        },
        {
          "name": "headers",
          "type": "string[] | IncomingHttpHeaders | Iterable<[string, string | string[]]>",
          "optional": true
        },
        {
          "name": "query",
          "type": "Record<string, any>",
          "optional": true
        },
        {
          "name": "idempotent",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "blocking",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "upgrade",
          "type": "string | boolean",
          "optional": true
        },
        {
          "name": "headersTimeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "bodyTimeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "reset",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "throwOnError",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "expectContinue",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "CheerioRequestOptions",
      "type": "CheerioRequestOptions",
      "properties": [
        {
          "name": "requestOptions",
          "type": "{ dispatcher?: Dispatcher; } & Omit<RequestOptions, \"origin\" | \"path\">",
          "optional": true
        },
        {
          "name": "encoding",
          "type": "SnifferOptions",
          "optional": true
        },
        {
          "name": "xml",
          "type": "boolean | HTMLParser2Options",
          "optional": true
        },
        {
          "name": "xmlMode",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "baseURI",
          "type": "string | URL",
          "optional": true
        },
        {
          "name": "quirksMode",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "pseudos",
          "type": "Record<string, string | ((elem: Element, value?: string) => boolean)>",
          "optional": true
        },
        {
          "name": "scriptingEnabled",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "sourceCodeLocationInfo",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "treeAdapter",
          "type": "TreeAdapter<Htmlparser2TreeAdapterMap>",
          "optional": true
        },
        {
          "name": "onParseError",
          "type": "ParserErrorHandler",
          "optional": true
        }
      ],
      "extends": [
        "DecodeStreamOptions"
      ],
      "jsdoc": null,
      "isExported": false
    }
  ],
  "classes": [],
  "constants": [],
  "namespaces": [
    {
      "name": "cheerio",
      "contents": {
        "functions": [
          {
            "name": "loadBuffer",
            "parameters": [
              {
                "name": "buffer",
                "type": "Buffer<ArrayBufferLike>",
                "optional": false
              },
              {
                "name": "options",
                "type": "DecodeStreamOptions",
                "optional": true
              }
            ],
            "returnType": "CheerioAPI",
            "jsdoc": {
              "description": "Sniffs the encoding of a buffer, then creates a querying function bound to a\ndocument created from the buffer.",
              "params": [
                {
                  "name": "buffer",
                  "description": "- The buffer to sniff the encoding of."
                },
                {
                  "name": "options",
                  "description": "- The options to pass to Cheerio."
                }
              ],
              "returns": "The loaded document.",
              "deprecated": false
            }
          },
          {
            "name": "stringStream",
            "parameters": [
              {
                "name": "options",
                "type": "CheerioOptions",
                "optional": false
              },
              {
                "name": "cb",
                "type": "(err: Error, $: CheerioAPI) => void",
                "optional": false
              }
            ],
            "returnType": "Writable",
            "jsdoc": {
              "description": "Creates a stream that parses a sequence of strings into a document.\n\nThe stream is a `Writable` stream that accepts strings. When the stream is\nfinished, the callback is called with the loaded document.",
              "params": [
                {
                  "name": "options",
                  "description": "- The options to pass to Cheerio."
                },
                {
                  "name": "cb",
                  "description": "- The callback to call when the stream is finished."
                }
              ],
              "returns": "The writable stream.",
              "deprecated": false
            }
          },
          {
            "name": "decodeStream",
            "parameters": [
              {
                "name": "options",
                "type": "DecodeStreamOptions",
                "optional": false
              },
              {
                "name": "cb",
                "type": "(err: Error, $: CheerioAPI) => void",
                "optional": false
              }
            ],
            "returnType": "Writable",
            "jsdoc": {
              "description": "Parses a stream of buffers into a document.\n\nThe stream is a `Writable` stream that accepts buffers. When the stream is\nfinished, the callback is called with the loaded document.",
              "params": [
                {
                  "name": "options",
                  "description": "- The options to pass to Cheerio."
                },
                {
                  "name": "cb",
                  "description": "- The callback to call when the stream is finished."
                }
              ],
              "returns": "The writable stream.",
              "deprecated": false
            }
          },
          {
            "name": "fromURL",
            "parameters": [
              {
                "name": "url",
                "type": "string | URL",
                "optional": false
              },
              {
                "name": "options",
                "type": "CheerioRequestOptions",
                "optional": true
              }
            ],
            "returnType": "Promise<CheerioAPI>",
            "jsdoc": {
              "description": "`fromURL` loads a document from a URL.\n\nBy default, redirects are allowed and non-2xx responses are rejected.",
              "params": [
                {
                  "name": "url",
                  "description": "- The URL to load the document from."
                },
                {
                  "name": "options",
                  "description": "- The options to pass to Cheerio."
                }
              ],
              "returns": "The loaded document.",
              "deprecated": false
            }
          },
          {
            "name": "contains",
            "parameters": [
              {
                "name": "container",
                "type": "AnyNode",
                "optional": false
              },
              {
                "name": "contained",
                "type": "AnyNode",
                "optional": false
              }
            ],
            "returnType": "boolean",
            "jsdoc": null
          },
          {
            "name": "merge",
            "parameters": [
              {
                "name": "arr1",
                "type": "Writable<ArrayLike<T>>",
                "optional": false
              },
              {
                "name": "arr2",
                "type": "ArrayLike<T>",
                "optional": false
              }
            ],
            "returnType": "ArrayLike<T>",
            "jsdoc": null
          },
          {
            "name": "load",
            "parameters": [
              {
                "name": "content",
                "type": "string | Buffer<ArrayBufferLike> | AnyNode | AnyNode[]",
                "optional": false
              },
              {
                "name": "options",
                "type": "CheerioOptions",
                "optional": true
              },
              {
                "name": "isDocument",
                "type": "boolean",
                "optional": true
              }
            ],
            "returnType": "CheerioAPI",
            "jsdoc": null
          }
        ],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": true
    }
  ],
  "version": "1.0.0"
}