{
  "functions": [
    {
      "name": "getAdapter",
      "parameters": [
        {
          "name": "adapters",
          "type": "AxiosAdapterConfig | AxiosAdapterConfig[]",
          "optional": false
        }
      ],
      "returnType": "AxiosAdapter",
      "jsdoc": null
    },
    {
      "name": "toFormData",
      "parameters": [
        {
          "name": "sourceObj",
          "type": "object",
          "optional": false
        },
        {
          "name": "targetFormData",
          "type": "GenericFormData",
          "optional": true
        },
        {
          "name": "options",
          "type": "FormSerializerOptions",
          "optional": true
        }
      ],
      "returnType": "GenericFormData",
      "jsdoc": null
    },
    {
      "name": "formToJSON",
      "parameters": [
        {
          "name": "form",
          "type": "GenericFormData | GenericHTMLFormElement",
          "optional": false
        }
      ],
      "returnType": "object",
      "jsdoc": null
    },
    {
      "name": "isAxiosError",
      "parameters": [
        {
          "name": "payload",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "spread",
      "parameters": [
        {
          "name": "callback",
          "type": "(...args: T[]) => R",
          "optional": false
        }
      ],
      "returnType": "(array: T[]) => R",
      "jsdoc": null
    },
    {
      "name": "isCancel",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "all",
      "parameters": [
        {
          "name": "values",
          "type": "(T | Promise<T>)[]",
          "optional": false
        }
      ],
      "returnType": "Promise<T[]>",
      "jsdoc": null
    },
    {
      "name": "mergeConfig",
      "parameters": [
        {
          "name": "config1",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        },
        {
          "name": "config2",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        }
      ],
      "returnType": "AxiosRequestConfig<D>",
      "jsdoc": null
    },
    {
      "name": "from",
      "parameters": [
        {
          "name": "thing",
          "type": "string | AxiosHeaders | RawAxiosHeaders",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "accessor",
      "parameters": [
        {
          "name": "header",
          "type": "string | string[]",
          "optional": false
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "concat",
      "parameters": [
        {
          "name": "targets",
          "type": "(string | AxiosHeaders | RawAxiosHeaders)[]",
          "optional": false
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.from",
      "parameters": [
        {
          "name": "thing",
          "type": "string | AxiosHeaders | RawAxiosHeaders",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.accessor",
      "parameters": [
        {
          "name": "header",
          "type": "string | string[]",
          "optional": false
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.concat",
      "parameters": [
        {
          "name": "targets",
          "type": "(string | AxiosHeaders | RawAxiosHeaders)[]",
          "optional": false
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "HttpStatusCode.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HttpStatusCode.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HttpStatusCode.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HttpStatusCode.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HttpStatusCode.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "HttpStatusCode.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.from",
      "parameters": [
        {
          "name": "error",
          "type": "unknown",
          "optional": false
        },
        {
          "name": "code",
          "type": "string",
          "optional": true
        },
        {
          "name": "config",
          "type": "InternalAxiosRequestConfig<D>",
          "optional": true
        },
        {
          "name": "request",
          "type": "any",
          "optional": true
        },
        {
          "name": "response",
          "type": "AxiosResponse<T, D>",
          "optional": true
        },
        {
          "name": "customProps",
          "type": "object",
          "optional": true
        }
      ],
      "returnType": "AxiosError<T, D>",
      "jsdoc": null
    },
    {
      "name": "AxiosError.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "AxiosError.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.__@iterator@66",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "AxiosError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AxiosError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.from",
      "parameters": [
        {
          "name": "error",
          "type": "unknown",
          "optional": false
        },
        {
          "name": "code",
          "type": "string",
          "optional": true
        },
        {
          "name": "config",
          "type": "InternalAxiosRequestConfig<D>",
          "optional": true
        },
        {
          "name": "request",
          "type": "any",
          "optional": true
        },
        {
          "name": "response",
          "type": "AxiosResponse<T, D>",
          "optional": true
        },
        {
          "name": "customProps",
          "type": "object",
          "optional": true
        }
      ],
      "returnType": "AxiosError<T, D>",
      "jsdoc": null
    },
    {
      "name": "CanceledError.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CanceledError.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.__@iterator@66",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "CanceledError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CanceledError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "create",
      "parameters": [
        {
          "name": "config",
          "type": "CreateAxiosDefaults<any>",
          "optional": true
        }
      ],
      "returnType": "AxiosInstance",
      "jsdoc": null
    },
    {
      "name": "getUri",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<any>",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "request",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "get",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "delete",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "head",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "options",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "post",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "put",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "patch",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "postForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "putForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "patchForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.create",
      "parameters": [
        {
          "name": "config",
          "type": "CreateAxiosDefaults<any>",
          "optional": true
        }
      ],
      "returnType": "AxiosInstance",
      "jsdoc": null
    },
    {
      "name": "default.source",
      "parameters": [],
      "returnType": "CancelTokenSource",
      "jsdoc": null
    },
    {
      "name": "default.from",
      "parameters": [
        {
          "name": "error",
          "type": "unknown",
          "optional": false
        },
        {
          "name": "code",
          "type": "string",
          "optional": true
        },
        {
          "name": "config",
          "type": "InternalAxiosRequestConfig<D>",
          "optional": true
        },
        {
          "name": "request",
          "type": "any",
          "optional": true
        },
        {
          "name": "response",
          "type": "AxiosResponse<T, D>",
          "optional": true
        },
        {
          "name": "customProps",
          "type": "object",
          "optional": true
        }
      ],
      "returnType": "AxiosError<T, D>",
      "jsdoc": null
    },
    {
      "name": "default.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "default.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "default.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "default.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "default.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "default.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "default.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "default.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "default.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "default.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "default.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "default.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "default.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.__@iterator@66",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "default.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "default.isCancel",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "default.all",
      "parameters": [
        {
          "name": "values",
          "type": "(T | Promise<T>)[]",
          "optional": false
        }
      ],
      "returnType": "Promise<T[]>",
      "jsdoc": null
    },
    {
      "name": "default.spread",
      "parameters": [
        {
          "name": "callback",
          "type": "(...args: T[]) => R",
          "optional": false
        }
      ],
      "returnType": "(array: T[]) => R",
      "jsdoc": null
    },
    {
      "name": "default.isAxiosError",
      "parameters": [
        {
          "name": "payload",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "default.toFormData",
      "parameters": [
        {
          "name": "sourceObj",
          "type": "object",
          "optional": false
        },
        {
          "name": "targetFormData",
          "type": "GenericFormData",
          "optional": true
        },
        {
          "name": "options",
          "type": "FormSerializerOptions",
          "optional": true
        }
      ],
      "returnType": "GenericFormData",
      "jsdoc": null
    },
    {
      "name": "default.formToJSON",
      "parameters": [
        {
          "name": "form",
          "type": "GenericFormData | GenericHTMLFormElement",
          "optional": false
        }
      ],
      "returnType": "object",
      "jsdoc": null
    },
    {
      "name": "default.getAdapter",
      "parameters": [
        {
          "name": "adapters",
          "type": "AxiosAdapterConfig | AxiosAdapterConfig[]",
          "optional": false
        }
      ],
      "returnType": "AxiosAdapter",
      "jsdoc": null
    },
    {
      "name": "default.accessor",
      "parameters": [
        {
          "name": "header",
          "type": "string | string[]",
          "optional": false
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "default.mergeConfig",
      "parameters": [
        {
          "name": "config1",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        },
        {
          "name": "config2",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        }
      ],
      "returnType": "AxiosRequestConfig<D>",
      "jsdoc": null
    },
    {
      "name": "default.onUploadProgress",
      "parameters": [
        {
          "name": "progressEvent",
          "type": "AxiosProgressEvent",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "default.onDownloadProgress",
      "parameters": [
        {
          "name": "progressEvent",
          "type": "AxiosProgressEvent",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "default.validateStatus",
      "parameters": [
        {
          "name": "status",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "default.beforeRedirect",
      "parameters": [
        {
          "name": "options",
          "type": "Record<string, any>",
          "optional": false
        },
        {
          "name": "responseDetails",
          "type": "{ headers: Record<string, string>; statusCode: HttpStatusCode; }",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "default.lookup",
      "parameters": [
        {
          "name": "hostname",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "object",
          "optional": false
        },
        {
          "name": "cb",
          "type": "(err: Error, address: LookupAddress | LookupAddress[], family?: AddressFamily) => void",
          "optional": false
        }
      ],
      "returnType": "void | Promise<LookupAddress | [address: LookupAddressEntry | LookupAddressEntry[], family?: AddressFamily]>",
      "jsdoc": null
    },
    {
      "name": "default.getUri",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<any>",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "default.request",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.get",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.delete",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.head",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.options",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.post",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.put",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.patch",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.postForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.putForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "default.patchForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.set",
      "parameters": [
        {
          "name": "headerName",
          "type": "string",
          "optional": true
        },
        {
          "name": "value",
          "type": "AxiosHeaderValue",
          "optional": true
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.set",
      "parameters": [
        {
          "name": "headers",
          "type": "string | AxiosHeaders | RawAxiosHeaders",
          "optional": true
        },
        {
          "name": "rewrite",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.get",
      "parameters": [
        {
          "name": "headerName",
          "type": "string",
          "optional": false
        },
        {
          "name": "parser",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpExecArray",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.get",
      "parameters": [
        {
          "name": "headerName",
          "type": "string",
          "optional": false
        },
        {
          "name": "matcher",
          "type": "true | AxiosHeaderParser",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaderValue",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.has",
      "parameters": [
        {
          "name": "header",
          "type": "string",
          "optional": false
        },
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.delete",
      "parameters": [
        {
          "name": "header",
          "type": "string | string[]",
          "optional": false
        },
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.clear",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.normalize",
      "parameters": [
        {
          "name": "format",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.concat",
      "parameters": [
        {
          "name": "targets",
          "type": "(string | AxiosHeaders | RawAxiosHeaders)[]",
          "optional": false
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.toJSON",
      "parameters": [
        {
          "name": "asStrings",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "RawAxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.setContentType",
      "parameters": [
        {
          "name": "value",
          "type": "ContentType",
          "optional": false
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getContentType",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp",
          "optional": true
        }
      ],
      "returnType": "RegExpExecArray",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getContentType",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaderValue",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.hasContentType",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.setContentLength",
      "parameters": [
        {
          "name": "value",
          "type": "AxiosHeaderValue",
          "optional": false
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getContentLength",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp",
          "optional": true
        }
      ],
      "returnType": "RegExpExecArray",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getContentLength",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaderValue",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.hasContentLength",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.setAccept",
      "parameters": [
        {
          "name": "value",
          "type": "AxiosHeaderValue",
          "optional": false
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getAccept",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp",
          "optional": true
        }
      ],
      "returnType": "RegExpExecArray",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getAccept",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaderValue",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.hasAccept",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.setUserAgent",
      "parameters": [
        {
          "name": "value",
          "type": "AxiosHeaderValue",
          "optional": false
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getUserAgent",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp",
          "optional": true
        }
      ],
      "returnType": "RegExpExecArray",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getUserAgent",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaderValue",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.hasUserAgent",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.setContentEncoding",
      "parameters": [
        {
          "name": "value",
          "type": "AxiosHeaderValue",
          "optional": false
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getContentEncoding",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp",
          "optional": true
        }
      ],
      "returnType": "RegExpExecArray",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getContentEncoding",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaderValue",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.hasContentEncoding",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.setAuthorization",
      "parameters": [
        {
          "name": "value",
          "type": "AxiosHeaderValue",
          "optional": false
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getAuthorization",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp",
          "optional": true
        }
      ],
      "returnType": "RegExpExecArray",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.getAuthorization",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "AxiosHeaderValue",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.hasAuthorization",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaders.__@iterator@66",
      "parameters": [],
      "returnType": "IterableIterator<[string, AxiosHeaderValue]>",
      "jsdoc": null
    },
    {
      "name": "Axios.getUri",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<any>",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "Axios.request",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "Axios.get",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "Axios.delete",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "Axios.head",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "Axios.options",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "Axios.post",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "Axios.put",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "Axios.patch",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "Axios.postForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "Axios.putForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "Axios.patchForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.create",
      "parameters": [
        {
          "name": "config",
          "type": "CreateAxiosDefaults<any>",
          "optional": true
        }
      ],
      "returnType": "AxiosInstance",
      "jsdoc": null
    },
    {
      "name": "axios.source",
      "parameters": [],
      "returnType": "CancelTokenSource",
      "jsdoc": null
    },
    {
      "name": "axios.from",
      "parameters": [
        {
          "name": "error",
          "type": "unknown",
          "optional": false
        },
        {
          "name": "code",
          "type": "string",
          "optional": true
        },
        {
          "name": "config",
          "type": "InternalAxiosRequestConfig<D>",
          "optional": true
        },
        {
          "name": "request",
          "type": "any",
          "optional": true
        },
        {
          "name": "response",
          "type": "AxiosResponse<T, D>",
          "optional": true
        },
        {
          "name": "customProps",
          "type": "object",
          "optional": true
        }
      ],
      "returnType": "AxiosError<T, D>",
      "jsdoc": null
    },
    {
      "name": "axios.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "axios.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "axios.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "axios.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "axios.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "axios.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "axios.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "axios.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "axios.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "axios.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "axios.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "axios.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "axios.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "axios.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "axios.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "axios.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "axios.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "axios.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "axios.__@iterator@66",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "axios.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "axios.isCancel",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "axios.all",
      "parameters": [
        {
          "name": "values",
          "type": "(T | Promise<T>)[]",
          "optional": false
        }
      ],
      "returnType": "Promise<T[]>",
      "jsdoc": null
    },
    {
      "name": "axios.spread",
      "parameters": [
        {
          "name": "callback",
          "type": "(...args: T[]) => R",
          "optional": false
        }
      ],
      "returnType": "(array: T[]) => R",
      "jsdoc": null
    },
    {
      "name": "axios.isAxiosError",
      "parameters": [
        {
          "name": "payload",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "axios.toFormData",
      "parameters": [
        {
          "name": "sourceObj",
          "type": "object",
          "optional": false
        },
        {
          "name": "targetFormData",
          "type": "GenericFormData",
          "optional": true
        },
        {
          "name": "options",
          "type": "FormSerializerOptions",
          "optional": true
        }
      ],
      "returnType": "GenericFormData",
      "jsdoc": null
    },
    {
      "name": "axios.formToJSON",
      "parameters": [
        {
          "name": "form",
          "type": "GenericFormData | GenericHTMLFormElement",
          "optional": false
        }
      ],
      "returnType": "object",
      "jsdoc": null
    },
    {
      "name": "axios.getAdapter",
      "parameters": [
        {
          "name": "adapters",
          "type": "AxiosAdapterConfig | AxiosAdapterConfig[]",
          "optional": false
        }
      ],
      "returnType": "AxiosAdapter",
      "jsdoc": null
    },
    {
      "name": "axios.accessor",
      "parameters": [
        {
          "name": "header",
          "type": "string | string[]",
          "optional": false
        }
      ],
      "returnType": "AxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "axios.mergeConfig",
      "parameters": [
        {
          "name": "config1",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        },
        {
          "name": "config2",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        }
      ],
      "returnType": "AxiosRequestConfig<D>",
      "jsdoc": null
    },
    {
      "name": "axios.onUploadProgress",
      "parameters": [
        {
          "name": "progressEvent",
          "type": "AxiosProgressEvent",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "axios.onDownloadProgress",
      "parameters": [
        {
          "name": "progressEvent",
          "type": "AxiosProgressEvent",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "axios.validateStatus",
      "parameters": [
        {
          "name": "status",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null
    },
    {
      "name": "axios.beforeRedirect",
      "parameters": [
        {
          "name": "options",
          "type": "Record<string, any>",
          "optional": false
        },
        {
          "name": "responseDetails",
          "type": "{ headers: Record<string, string>; statusCode: HttpStatusCode; }",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null
    },
    {
      "name": "axios.lookup",
      "parameters": [
        {
          "name": "hostname",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "object",
          "optional": false
        },
        {
          "name": "cb",
          "type": "(err: Error, address: LookupAddress | LookupAddress[], family?: AddressFamily) => void",
          "optional": false
        }
      ],
      "returnType": "void | Promise<LookupAddress | [address: LookupAddressEntry | LookupAddressEntry[], family?: AddressFamily]>",
      "jsdoc": null
    },
    {
      "name": "axios.getUri",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<any>",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "axios.request",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": false
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.get",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.delete",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.head",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.options",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.post",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.put",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.patch",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.postForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.putForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    },
    {
      "name": "axios.patchForm",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "D",
          "optional": true
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "optional": true
        }
      ],
      "returnType": "Promise<R>",
      "jsdoc": null
    }
  ],
  "enums": [
    {
      "name": "HttpStatusCode",
      "members": [
        {
          "name": "Continue",
          "value": "100"
        },
        {
          "name": "SwitchingProtocols",
          "value": "101"
        },
        {
          "name": "Processing",
          "value": "102"
        },
        {
          "name": "EarlyHints",
          "value": "103"
        },
        {
          "name": "Ok",
          "value": "200"
        },
        {
          "name": "Created",
          "value": "201"
        },
        {
          "name": "Accepted",
          "value": "202"
        },
        {
          "name": "NonAuthoritativeInformation",
          "value": "203"
        },
        {
          "name": "NoContent",
          "value": "204"
        },
        {
          "name": "ResetContent",
          "value": "205"
        },
        {
          "name": "PartialContent",
          "value": "206"
        },
        {
          "name": "MultiStatus",
          "value": "207"
        },
        {
          "name": "AlreadyReported",
          "value": "208"
        },
        {
          "name": "ImUsed",
          "value": "226"
        },
        {
          "name": "MultipleChoices",
          "value": "300"
        },
        {
          "name": "MovedPermanently",
          "value": "301"
        },
        {
          "name": "Found",
          "value": "302"
        },
        {
          "name": "SeeOther",
          "value": "303"
        },
        {
          "name": "NotModified",
          "value": "304"
        },
        {
          "name": "UseProxy",
          "value": "305"
        },
        {
          "name": "Unused",
          "value": "306"
        },
        {
          "name": "TemporaryRedirect",
          "value": "307"
        },
        {
          "name": "PermanentRedirect",
          "value": "308"
        },
        {
          "name": "BadRequest",
          "value": "400"
        },
        {
          "name": "Unauthorized",
          "value": "401"
        },
        {
          "name": "PaymentRequired",
          "value": "402"
        },
        {
          "name": "Forbidden",
          "value": "403"
        },
        {
          "name": "NotFound",
          "value": "404"
        },
        {
          "name": "MethodNotAllowed",
          "value": "405"
        },
        {
          "name": "NotAcceptable",
          "value": "406"
        },
        {
          "name": "ProxyAuthenticationRequired",
          "value": "407"
        },
        {
          "name": "RequestTimeout",
          "value": "408"
        },
        {
          "name": "Conflict",
          "value": "409"
        },
        {
          "name": "Gone",
          "value": "410"
        },
        {
          "name": "LengthRequired",
          "value": "411"
        },
        {
          "name": "PreconditionFailed",
          "value": "412"
        },
        {
          "name": "PayloadTooLarge",
          "value": "413"
        },
        {
          "name": "UriTooLong",
          "value": "414"
        },
        {
          "name": "UnsupportedMediaType",
          "value": "415"
        },
        {
          "name": "RangeNotSatisfiable",
          "value": "416"
        },
        {
          "name": "ExpectationFailed",
          "value": "417"
        },
        {
          "name": "ImATeapot",
          "value": "418"
        },
        {
          "name": "MisdirectedRequest",
          "value": "421"
        },
        {
          "name": "UnprocessableEntity",
          "value": "422"
        },
        {
          "name": "Locked",
          "value": "423"
        },
        {
          "name": "FailedDependency",
          "value": "424"
        },
        {
          "name": "TooEarly",
          "value": "425"
        },
        {
          "name": "UpgradeRequired",
          "value": "426"
        },
        {
          "name": "PreconditionRequired",
          "value": "428"
        },
        {
          "name": "TooManyRequests",
          "value": "429"
        },
        {
          "name": "RequestHeaderFieldsTooLarge",
          "value": "431"
        },
        {
          "name": "UnavailableForLegalReasons",
          "value": "451"
        },
        {
          "name": "InternalServerError",
          "value": "500"
        },
        {
          "name": "NotImplemented",
          "value": "501"
        },
        {
          "name": "BadGateway",
          "value": "502"
        },
        {
          "name": "ServiceUnavailable",
          "value": "503"
        },
        {
          "name": "GatewayTimeout",
          "value": "504"
        },
        {
          "name": "HttpVersionNotSupported",
          "value": "505"
        },
        {
          "name": "VariantAlsoNegotiates",
          "value": "506"
        },
        {
          "name": "InsufficientStorage",
          "value": "507"
        },
        {
          "name": "LoopDetected",
          "value": "508"
        },
        {
          "name": "NotExtended",
          "value": "510"
        },
        {
          "name": "NetworkAuthenticationRequired",
          "value": "511"
        }
      ],
      "jsdoc": null
    }
  ],
  "types": [
    {
      "name": "AxiosHeaderValue",
      "type": "AxiosHeaderValue",
      "jsdoc": null
    },
    {
      "name": "RawAxiosHeaders",
      "type": "RawAxiosHeaders",
      "jsdoc": null
    },
    {
      "name": "MethodsHeaders",
      "type": "Partial<{ get: AxiosHeaders; delete: AxiosHeaders; head: AxiosHeaders; options: AxiosHeaders; post: AxiosHeaders; ... 4 more ...; unlink: AxiosHeaders; } & { ...; }>",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaderMatcher",
      "type": "AxiosHeaderMatcher",
      "jsdoc": null
    },
    {
      "name": "AxiosHeaderParser",
      "type": "AxiosHeaderParser",
      "jsdoc": null
    },
    {
      "name": "CommonRequestHeadersList",
      "type": "CommonRequestHeadersList",
      "jsdoc": null
    },
    {
      "name": "ContentType",
      "type": "ContentType",
      "jsdoc": null
    },
    {
      "name": "RawAxiosRequestHeaders",
      "type": "Partial<RawAxiosHeaders & { Accept: AxiosHeaderValue; \"Content-Length\": AxiosHeaderValue; \"User-Agent\": AxiosHeaderValue; \"Content-Encoding\": AxiosHeaderValue; Authorization: AxiosHeaderValue; } & { ...; }>",
      "jsdoc": null
    },
    {
      "name": "AxiosRequestHeaders",
      "type": "AxiosRequestHeaders",
      "jsdoc": null
    },
    {
      "name": "CommonResponseHeadersList",
      "type": "CommonResponseHeadersList",
      "jsdoc": null
    },
    {
      "name": "RawCommonResponseHeaders",
      "type": "RawCommonResponseHeaders",
      "jsdoc": null
    },
    {
      "name": "RawAxiosResponseHeaders",
      "type": "Partial<RawAxiosHeaders & { \"Content-Length\": AxiosHeaderValue; \"Content-Encoding\": AxiosHeaderValue; \"Content-Type\": AxiosHeaderValue; Server: AxiosHeaderValue; \"Cache-Control\": AxiosHeaderValue; } & { ...; }>",
      "jsdoc": null
    },
    {
      "name": "AxiosResponseHeaders",
      "type": "AxiosResponseHeaders",
      "jsdoc": null
    },
    {
      "name": "AxiosRequestTransformer",
      "type": "AxiosRequestTransformer",
      "jsdoc": null
    },
    {
      "name": "AxiosResponseTransformer",
      "type": "AxiosResponseTransformer",
      "jsdoc": null
    },
    {
      "name": "AxiosAdapter",
      "type": "AxiosAdapter",
      "jsdoc": null
    },
    {
      "name": "AxiosBasicCredentials",
      "type": "AxiosBasicCredentials",
      "jsdoc": null
    },
    {
      "name": "AxiosProxyConfig",
      "type": "AxiosProxyConfig",
      "jsdoc": null
    },
    {
      "name": "Method",
      "type": "Method",
      "jsdoc": null
    },
    {
      "name": "ResponseType",
      "type": "ResponseType",
      "jsdoc": null
    },
    {
      "name": "responseEncoding",
      "type": "responseEncoding",
      "jsdoc": null
    },
    {
      "name": "TransitionalOptions",
      "type": "TransitionalOptions",
      "jsdoc": null
    },
    {
      "name": "GenericAbortSignal",
      "type": "GenericAbortSignal",
      "jsdoc": null
    },
    {
      "name": "FormDataVisitorHelpers",
      "type": "FormDataVisitorHelpers",
      "jsdoc": null
    },
    {
      "name": "SerializerVisitor",
      "type": "SerializerVisitor",
      "jsdoc": null
    },
    {
      "name": "SerializerOptions",
      "type": "SerializerOptions",
      "jsdoc": null
    },
    {
      "name": "FormSerializerOptions",
      "type": "FormSerializerOptions",
      "jsdoc": null
    },
    {
      "name": "ParamEncoder",
      "type": "ParamEncoder",
      "jsdoc": null
    },
    {
      "name": "CustomParamsSerializer",
      "type": "CustomParamsSerializer",
      "jsdoc": null
    },
    {
      "name": "ParamsSerializerOptions",
      "type": "ParamsSerializerOptions",
      "jsdoc": null
    },
    {
      "name": "MaxUploadRate",
      "type": "number",
      "jsdoc": null
    },
    {
      "name": "MaxDownloadRate",
      "type": "number",
      "jsdoc": null
    },
    {
      "name": "BrowserProgressEvent",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "AxiosProgressEvent",
      "type": "AxiosProgressEvent",
      "jsdoc": null
    },
    {
      "name": "Milliseconds",
      "type": "number",
      "jsdoc": null
    },
    {
      "name": "AxiosAdapterName",
      "type": "string",
      "jsdoc": null
    },
    {
      "name": "AxiosAdapterConfig",
      "type": "AxiosAdapterConfig",
      "jsdoc": null
    },
    {
      "name": "AddressFamily",
      "type": "AddressFamily",
      "jsdoc": null
    },
    {
      "name": "LookupAddressEntry",
      "type": "LookupAddressEntry",
      "jsdoc": null
    },
    {
      "name": "LookupAddress",
      "type": "LookupAddress",
      "jsdoc": null
    },
    {
      "name": "AxiosRequestConfig",
      "type": "AxiosRequestConfig<D>",
      "jsdoc": null
    },
    {
      "name": "RawAxiosRequestConfig",
      "type": "RawAxiosRequestConfig<D>",
      "jsdoc": null
    },
    {
      "name": "InternalAxiosRequestConfig",
      "type": "InternalAxiosRequestConfig<D>",
      "jsdoc": null
    },
    {
      "name": "HeadersDefaults",
      "type": "HeadersDefaults",
      "jsdoc": null
    },
    {
      "name": "AxiosDefaults",
      "type": "AxiosDefaults<D>",
      "jsdoc": null
    },
    {
      "name": "CreateAxiosDefaults",
      "type": "CreateAxiosDefaults<D>",
      "jsdoc": null
    },
    {
      "name": "AxiosResponse",
      "type": "AxiosResponse<T, D>",
      "jsdoc": null
    },
    {
      "name": "AxiosPromise",
      "type": "AxiosPromise<T>",
      "jsdoc": null
    },
    {
      "name": "CancelStatic",
      "type": "CancelStatic",
      "jsdoc": null
    },
    {
      "name": "Cancel",
      "type": "Cancel",
      "jsdoc": null
    },
    {
      "name": "Canceler",
      "type": "Canceler",
      "jsdoc": null
    },
    {
      "name": "CancelTokenStatic",
      "type": "CancelTokenStatic",
      "jsdoc": null
    },
    {
      "name": "CancelToken",
      "type": "CancelToken",
      "jsdoc": null
    },
    {
      "name": "CancelTokenSource",
      "type": "CancelTokenSource",
      "jsdoc": null
    },
    {
      "name": "AxiosInterceptorOptions",
      "type": "AxiosInterceptorOptions",
      "jsdoc": null
    },
    {
      "name": "AxiosRequestInterceptorUse",
      "type": "AxiosRequestInterceptorUse<T>",
      "jsdoc": null
    },
    {
      "name": "AxiosResponseInterceptorUse",
      "type": "AxiosResponseInterceptorUse<T>",
      "jsdoc": null
    },
    {
      "name": "AxiosInterceptorManager",
      "type": "AxiosInterceptorManager<V>",
      "jsdoc": null
    },
    {
      "name": "AxiosInstance",
      "type": "AxiosInstance",
      "jsdoc": null
    },
    {
      "name": "GenericFormData",
      "type": "GenericFormData",
      "jsdoc": null
    },
    {
      "name": "GenericHTMLFormElement",
      "type": "GenericHTMLFormElement",
      "jsdoc": null
    },
    {
      "name": "AxiosStatic",
      "type": "AxiosStatic",
      "jsdoc": null
    }
  ],
  "classes": [
    {
      "name": "AxiosHeaders",
      "constructors": [],
      "methods": [
        {
          "name": "AxiosHeaders.set",
          "parameters": [
            {
              "name": "headerName",
              "type": "string",
              "optional": true
            },
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "optional": true
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.set",
          "parameters": [
            {
              "name": "headers",
              "type": "string | AxiosHeaders | RawAxiosHeaders",
              "optional": true
            },
            {
              "name": "rewrite",
              "type": "boolean",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.get",
          "parameters": [
            {
              "name": "headerName",
              "type": "string",
              "optional": false
            },
            {
              "name": "parser",
              "type": "RegExp",
              "optional": false
            }
          ],
          "returnType": "RegExpExecArray",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.get",
          "parameters": [
            {
              "name": "headerName",
              "type": "string",
              "optional": false
            },
            {
              "name": "matcher",
              "type": "true | AxiosHeaderParser",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaderValue",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.has",
          "parameters": [
            {
              "name": "header",
              "type": "string",
              "optional": false
            },
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.delete",
          "parameters": [
            {
              "name": "header",
              "type": "string | string[]",
              "optional": false
            },
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.clear",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.normalize",
          "parameters": [
            {
              "name": "format",
              "type": "boolean",
              "optional": false
            }
          ],
          "returnType": "AxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.concat",
          "parameters": [
            {
              "name": "targets",
              "type": "(string | AxiosHeaders | RawAxiosHeaders)[]",
              "optional": false
            }
          ],
          "returnType": "AxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.toJSON",
          "parameters": [
            {
              "name": "asStrings",
              "type": "boolean",
              "optional": true
            }
          ],
          "returnType": "RawAxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.setContentType",
          "parameters": [
            {
              "name": "value",
              "type": "ContentType",
              "optional": false
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getContentType",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "optional": true
            }
          ],
          "returnType": "RegExpExecArray",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getContentType",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaderValue",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.hasContentType",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.setContentLength",
          "parameters": [
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "optional": false
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getContentLength",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "optional": true
            }
          ],
          "returnType": "RegExpExecArray",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getContentLength",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaderValue",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.hasContentLength",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.setAccept",
          "parameters": [
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "optional": false
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getAccept",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "optional": true
            }
          ],
          "returnType": "RegExpExecArray",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getAccept",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaderValue",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.hasAccept",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.setUserAgent",
          "parameters": [
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "optional": false
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getUserAgent",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "optional": true
            }
          ],
          "returnType": "RegExpExecArray",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getUserAgent",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaderValue",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.hasUserAgent",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.setContentEncoding",
          "parameters": [
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "optional": false
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getContentEncoding",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "optional": true
            }
          ],
          "returnType": "RegExpExecArray",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getContentEncoding",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaderValue",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.hasContentEncoding",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.setAuthorization",
          "parameters": [
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "optional": false
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaders",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getAuthorization",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "optional": true
            }
          ],
          "returnType": "RegExpExecArray",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.getAuthorization",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "AxiosHeaderValue",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.hasAuthorization",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "optional": true
            }
          ],
          "returnType": "boolean",
          "jsdoc": null
        },
        {
          "name": "AxiosHeaders.__@iterator@66",
          "parameters": [],
          "returnType": "IterableIterator<[string, AxiosHeaderValue]>",
          "jsdoc": null
        }
      ],
      "jsdoc": null
    },
    {
      "name": "AxiosError",
      "constructors": [],
      "methods": [],
      "jsdoc": null
    },
    {
      "name": "CanceledError",
      "constructors": [],
      "methods": [],
      "jsdoc": null
    },
    {
      "name": "Axios",
      "constructors": [],
      "methods": [
        {
          "name": "Axios.getUri",
          "parameters": [
            {
              "name": "config",
              "type": "AxiosRequestConfig<any>",
              "optional": true
            }
          ],
          "returnType": "string",
          "jsdoc": null
        },
        {
          "name": "Axios.request",
          "parameters": [
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": false
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        },
        {
          "name": "Axios.get",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": true
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        },
        {
          "name": "Axios.delete",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": true
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        },
        {
          "name": "Axios.head",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": true
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        },
        {
          "name": "Axios.options",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": true
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        },
        {
          "name": "Axios.post",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "data",
              "type": "D",
              "optional": true
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": true
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        },
        {
          "name": "Axios.put",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "data",
              "type": "D",
              "optional": true
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": true
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        },
        {
          "name": "Axios.patch",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "data",
              "type": "D",
              "optional": true
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": true
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        },
        {
          "name": "Axios.postForm",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "data",
              "type": "D",
              "optional": true
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": true
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        },
        {
          "name": "Axios.putForm",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "data",
              "type": "D",
              "optional": true
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": true
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        },
        {
          "name": "Axios.patchForm",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "data",
              "type": "D",
              "optional": true
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "optional": true
            }
          ],
          "returnType": "Promise<R>",
          "jsdoc": null
        }
      ],
      "jsdoc": null
    }
  ],
  "version": "1.7.2"
}