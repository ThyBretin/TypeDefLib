{
  "functions": [
    {
      "name": "_",
      "parameters": [
        {
          "name": "value",
          "type": "TrapAny",
          "optional": false
        }
      ],
      "returnType": "Collection<any> & Function<any> & Object<any> & Primitive<any> & String<string>",
      "jsdoc": null
    },
    {
      "name": "chunk",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "size",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[][]",
      "jsdoc": {
        "description": "Creates an array of elements split into groups the length of size. If collection canâ€™t be split evenly, the\nfinal chunk will be the remaining elements.",
        "params": [
          {
            "name": "array",
            "description": "The array to process."
          },
          {
            "name": "size",
            "description": "The length of each chunk."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "compact",
      "parameters": [
        {
          "name": "array",
          "type": "List<T | Falsey>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array with all falsey values removed. The values false, null, 0, 0n, \"\", undefined, and NaN are\nfalsey.",
        "params": [
          {
            "name": "array",
            "description": "The array to compact."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "concat",
      "parameters": [
        {
          "name": "values",
          "type": "Many<T>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a new array concatenating `array` with any additional arrays\nand/or values.",
        "params": [
          {
            "name": "values",
            "description": "The array values to concatenate."
          }
        ],
        "returns": "Returns the new concatenated array.",
        "deprecated": false
      }
    },
    {
      "name": "difference",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of `array` values not included in the other provided arrays using SameValueZero for\nequality comparisons. The order and references of result values are determined by the first array.",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          },
          {
            "name": "values",
            "description": "The arrays of values to exclude."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "differenceBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T1>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T2>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T1 | T2>",
          "optional": false
        }
      ],
      "returnType": "T1[]",
      "jsdoc": {
        "description": "This method is like _.difference except that it accepts iteratee which is invoked for each element\nof array and values to generate the criterion by which they're compared. The order and references\nof result values are determined by the first array. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          },
          {
            "name": "values",
            "description": "The values to exclude."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the new array of filtered values.",
        "deprecated": false
      }
    },
    {
      "name": "differenceWith",
      "parameters": [
        {
          "name": "array",
          "type": "List<T1>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T2>",
          "optional": false
        },
        {
          "name": "comparator",
          "type": "Comparator2<T1, T2>",
          "optional": false
        }
      ],
      "returnType": "T1[]",
      "jsdoc": {
        "description": "This method is like _.difference except that it accepts comparator which is invoked to compare elements\nof array to values. The order and references of result values are determined by the first array. The\ncomparator is invoked with two arguments: (arrVal, othVal).",
        "params": [
          {
            "name": "values",
            "description": "The arrays to inspect."
          },
          {
            "name": "comparator",
            "description": "The comparator invoked per element."
          }
        ],
        "returns": "Returns the new array of filtered values.",
        "deprecated": false
      }
    },
    {
      "name": "drop",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with n elements dropped from the beginning.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "n",
            "description": "The number of elements to drop."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "dropRight",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with n elements dropped from the end.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "n",
            "description": "The number of elements to drop."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "dropRightWhile",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array excluding elements dropped from the end. Elements are dropped until predicate\nreturns falsey. The predicate is invoked with three arguments: (value, index, array).",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "dropWhile",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array excluding elements dropped from the beginning. Elements are dropped until predicate\nreturns falsey. The predicate is invoked with three arguments: (value, index, array).",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "fill",
      "parameters": [
        {
          "name": "array",
          "type": "any[]",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Fills elements of array with value from start up to, but not including, end.\n\nNote: This method mutates array.",
        "params": [
          {
            "name": "array",
            "description": "The array to fill."
          },
          {
            "name": "value",
            "description": "The value to fill array with."
          },
          {
            "name": "start",
            "description": "The start position."
          },
          {
            "name": "end",
            "description": "The end position."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "findIndex",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIterateeCustom<T, boolean>",
          "optional": true
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like _.find except that it returns the index of the first element predicate returns truthy\nfor instead of the element itself.",
        "params": [
          {
            "name": "array",
            "description": "The array to search."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "findLastIndex",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIterateeCustom<T, boolean>",
          "optional": true
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like _.findIndex except that it iterates over elements of collection from right to left.",
        "params": [
          {
            "name": "array",
            "description": "The array to search."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "first",
      "parameters": [
        {
          "name": "array",
          "type": "readonly [T, ...unknown[]]",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "flatten",
      "parameters": [
        {
          "name": "array",
          "type": "List<Many<T>>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Flattens `array` a single level deep.",
        "params": [
          {
            "name": "array",
            "description": "The array to flatten."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "flattenDeep",
      "parameters": [
        {
          "name": "array",
          "type": "ListOfRecursiveArraysOrValues<T>",
          "optional": false
        }
      ],
      "returnType": "Flat<T>[]",
      "jsdoc": {
        "description": "Recursively flattens a nested array.",
        "params": [
          {
            "name": "array",
            "description": "The array to recursively flatten."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "flattenDepth",
      "parameters": [
        {
          "name": "array",
          "type": "ListOfRecursiveArraysOrValues<T>",
          "optional": false
        },
        {
          "name": "depth",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Recursively flatten array up to depth times.",
        "params": [
          {
            "name": "array",
            "description": "The array to recursively flatten."
          },
          {
            "name": "number",
            "description": "The maximum recursion depth."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "fromPairs",
      "parameters": [
        {
          "name": "pairs",
          "type": "List<[PropertyName, T]>",
          "optional": false
        }
      ],
      "returnType": "Dictionary<T>",
      "jsdoc": {
        "description": "The inverse of `_.toPairs`; this method returns an object composed\nfrom key-value `pairs`.",
        "params": [
          {
            "name": "pairs",
            "description": "The key-value pairs."
          }
        ],
        "returns": "Returns the new object.",
        "deprecated": false
      }
    },
    {
      "name": "head",
      "parameters": [
        {
          "name": "array",
          "type": "readonly [T, ...unknown[]]",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Gets the first element of array.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "indexOf",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the index at which the first occurrence of `value` is found in `array`\nusing [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons. If `fromIndex` is negative, it's used as the offset\nfrom the end of `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to search."
          },
          {
            "name": "value",
            "description": "The value to search for."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from."
          }
        ],
        "returns": "Returns the index of the matched value, else `-1`.",
        "deprecated": false
      }
    },
    {
      "name": "initial",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Gets all but the last element of array.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "intersection",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of unique values that are included in all of the provided arrays using SameValueZero for\nequality comparisons.",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "intersectionBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T1>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T2>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T1 | T2>",
          "optional": false
        }
      ],
      "returnType": "T1[]",
      "jsdoc": {
        "description": "This method is like `_.intersection` except that it accepts `iteratee`\nwhich is invoked for each element of each `arrays` to generate the criterion\nby which uniqueness is computed. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the new array of shared values.",
        "deprecated": false
      }
    },
    {
      "name": "intersectionWith",
      "parameters": [
        {
          "name": "array",
          "type": "List<T1>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T2>",
          "optional": false
        },
        {
          "name": "comparator",
          "type": "Comparator2<T1, T2>",
          "optional": false
        }
      ],
      "returnType": "T1[]",
      "jsdoc": {
        "description": "Creates an array of unique `array` values not included in the other\nprovided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons.",
        "params": [
          {
            "name": "values",
            "description": "The arrays to inspect."
          },
          {
            "name": "comparator",
            "description": "The comparator invoked per element."
          }
        ],
        "returns": "Returns the new array of filtered values.",
        "deprecated": false
      }
    },
    {
      "name": "join",
      "parameters": [
        {
          "name": "array",
          "type": "List<any>",
          "optional": false
        },
        {
          "name": "separator",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all elements in `array` into a string separated by `separator`.",
        "params": [
          {
            "name": "array",
            "description": "The array to convert."
          },
          {
            "name": "separator",
            "description": "The element separator."
          }
        ],
        "returns": "Returns the joined string.",
        "deprecated": false
      }
    },
    {
      "name": "last",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Gets the last element of array.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "lastIndexOf",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "fromIndex",
          "type": "number | true",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like _.indexOf except that it iterates over elements of array from right to left.",
        "params": [
          {
            "name": "array",
            "description": "The array to search."
          },
          {
            "name": "value",
            "description": "The value to search for."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from or true to perform a binary search on a sorted array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "nth",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Gets the element at index `n` of `array`. If `n` is negative, the nth element from the end is returned.",
        "params": [
          {
            "name": "array",
            "description": "array The array to query."
          },
          {
            "name": "value",
            "description": "The index of the element to return."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "pull",
      "parameters": [
        {
          "name": "array",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "values",
          "type": "T[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Removes all provided values from array using SameValueZero for equality comparisons.\n\nNote: Unlike _.without, this method mutates array.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "values",
            "description": "The values to remove."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "pullAll",
      "parameters": [
        {
          "name": "array",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.pull` except that it accepts an array of values to remove.\n\n**Note:** Unlike `_.difference`, this method mutates `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "values",
            "description": "The values to remove."
          }
        ],
        "returns": "Returns `array`.",
        "deprecated": false
      }
    },
    {
      "name": "pullAllBy",
      "parameters": [
        {
          "name": "array",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T>",
          "optional": true
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.pullAll` except that it accepts `iteratee` which is\ninvoked for each element of `array` and `values` to to generate the criterion\nby which uniqueness is computed. The iteratee is invoked with one argument: (value).\n\n**Note:** Unlike `_.differenceBy`, this method mutates `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "values",
            "description": "The values to remove."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns `array`.",
        "deprecated": false
      }
    },
    {
      "name": "pullAllWith",
      "parameters": [
        {
          "name": "array",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T>",
          "optional": true
        },
        {
          "name": "comparator",
          "type": "Comparator<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.pullAll` except that it accepts `comparator` which is\ninvoked to compare elements of array to values. The comparator is invoked with\ntwo arguments: (arrVal, othVal).\n\n**Note:** Unlike `_.differenceWith`, this method mutates `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "values",
            "description": "The values to remove."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns `array`.",
        "deprecated": false
      }
    },
    {
      "name": "pullAt",
      "parameters": [
        {
          "name": "array",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "indexes",
          "type": "Many<number>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Removes elements from array corresponding to the given indexes and returns an array of the removed elements.\nIndexes may be specified as an array of indexes or as individual arguments.\n\nNote: Unlike _.at, this method mutates array.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "indexes",
            "description": "The indexes of elements to remove, specified as individual indexes or arrays of indexes."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "remove",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Removes all elements from array that predicate returns truthy for and returns an array of the removed\nelements. The predicate is invoked with three arguments: (value, index, array).\n\nNote: Unlike _.filter, this method mutates array.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "reverse",
      "parameters": [
        {
          "name": "array",
          "type": "TList",
          "optional": false
        }
      ],
      "returnType": "TList",
      "jsdoc": {
        "description": "Reverses `array` so that the first element becomes the last, the second\nelement becomes the second to last, and so on.\n\n**Note:** This method mutates `array` and is based on\n[`Array#reverse`](https://mdn.io/Array/reverse).",
        "params": [],
        "returns": "Returns `array`.",
        "deprecated": false
      }
    },
    {
      "name": "slice",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array from start up to, but not including, end.",
        "params": [
          {
            "name": "array",
            "description": "The array to slice."
          },
          {
            "name": "start",
            "description": "The start position."
          },
          {
            "name": "end",
            "description": "The end position."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "sortedIndex",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Uses a binary search to determine the lowest index at which `value` should\nbe inserted into `array` in order to maintain its sort order.",
        "params": [
          {
            "name": "array",
            "description": "The sorted array to inspect."
          },
          {
            "name": "value",
            "description": "The value to evaluate."
          }
        ],
        "returns": "Returns the index at which `value` should be inserted into `array`.",
        "deprecated": false
      }
    },
    {
      "name": "sortedIndexBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.sortedIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The sorted array to inspect."
          },
          {
            "name": "value",
            "description": "The value to evaluate."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the index at which `value` should be inserted into `array`.",
        "deprecated": false
      }
    },
    {
      "name": "sortedIndexOf",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.indexOf` except that it performs a binary\nsearch on a sorted `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to search."
          },
          {
            "name": "value",
            "description": "The value to search for."
          }
        ],
        "returns": "Returns the index of the matched value, else `-1`.",
        "deprecated": false
      }
    },
    {
      "name": "sortedLastIndex",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.sortedIndex` except that it returns the highest\nindex at which `value` should be inserted into `array` in order to\nmaintain its sort order.",
        "params": [
          {
            "name": "array",
            "description": "The sorted array to inspect."
          },
          {
            "name": "value",
            "description": "The value to evaluate."
          }
        ],
        "returns": "Returns the index at which `value` should be inserted into `array`.",
        "deprecated": false
      }
    },
    {
      "name": "sortedLastIndexBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.sortedLastIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The sorted array to inspect."
          },
          {
            "name": "value",
            "description": "The value to evaluate."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the index at which `value` should be inserted into `array`.",
        "deprecated": false
      }
    },
    {
      "name": "sortedLastIndexOf",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.lastIndexOf` except that it performs a binary\nsearch on a sorted `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to search."
          },
          {
            "name": "value",
            "description": "The value to search for."
          }
        ],
        "returns": "Returns the index of the matched value, else `-1`.",
        "deprecated": false
      }
    },
    {
      "name": "sortedUniq",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.uniq` except that it's designed and optimized\nfor sorted arrays.",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          }
        ],
        "returns": "Returns the new duplicate free array.",
        "deprecated": false
      }
    },
    {
      "name": "sortedUniqBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.uniqBy` except that it's designed and optimized\nfor sorted arrays.",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the new duplicate free array.",
        "deprecated": false
      }
    },
    {
      "name": "tail",
      "parameters": [
        {
          "name": "array",
          "type": "readonly [unknown, ...T]",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Gets all but the first element of array.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "take",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with n elements taken from the beginning.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "n",
            "description": "The number of elements to take."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "takeRight",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with n elements taken from the end.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "n",
            "description": "The number of elements to take."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "takeRightWhile",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with elements taken from the end. Elements are taken until predicate returns\nfalsey. The predicate is invoked with three arguments: (value, index, array).",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "takeWhile",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with elements taken from the beginning. Elements are taken until predicate returns\nfalsey. The predicate is invoked with three arguments: (value, index, array).",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "union",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of unique values, in order, from all of the provided arrays using SameValueZero for\nequality comparisons.",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "unionBy",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.union` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by which\nuniqueness is computed. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "unionWith",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "comparator",
          "type": "Comparator<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.union` except that it accepts `comparator` which\nis invoked to compare elements of `arrays`. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          },
          {
            "name": "comparator",
            "description": "The comparator invoked per element."
          }
        ],
        "returns": "Returns the new array of combined values.",
        "deprecated": false
      }
    },
    {
      "name": "uniq",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a duplicate-free version of an array, using\n[`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons, in which only the first occurrence of each element\nis kept.",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          }
        ],
        "returns": "Returns the new duplicate free array.",
        "deprecated": false
      }
    },
    {
      "name": "uniqBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.uniq` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nuniqueness is computed. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the new duplicate free array.",
        "deprecated": false
      }
    },
    {
      "name": "uniqWith",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "comparator",
          "type": "Comparator<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.uniq` except that it accepts `comparator` which\nis invoked to compare elements of `array`. The comparator is invoked with\ntwo arguments: (arrVal, othVal).",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          },
          {
            "name": "comparator",
            "description": "The comparator invoked per element."
          }
        ],
        "returns": "Returns the new duplicate free array.",
        "deprecated": false
      }
    },
    {
      "name": "unzip",
      "parameters": [
        {
          "name": "array",
          "type": "T[][] | List<List<T>>",
          "optional": false
        }
      ],
      "returnType": "T[][]",
      "jsdoc": {
        "description": "This method is like _.zip except that it accepts an array of grouped elements and creates an array\nregrouping the elements to their pre-zip configuration.",
        "params": [
          {
            "name": "array",
            "description": "The array of grouped elements to process."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "unzipWith",
      "parameters": [
        {
          "name": "array",
          "type": "List<List<T>>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "(...values: T[]) => TResult",
          "optional": false
        }
      ],
      "returnType": "TResult[]",
      "jsdoc": {
        "description": "This method is like _.unzip except that it accepts an iteratee to specify how regrouped values should be\ncombined. The iteratee is invoked with four arguments: (accumulator, value, index, group).",
        "params": [
          {
            "name": "array",
            "description": "The array of grouped elements to process."
          },
          {
            "name": "iteratee",
            "description": "The function to combine regrouped values."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "without",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "values",
          "type": "T[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array excluding all provided values using SameValueZero for equality comparisons.",
        "params": [
          {
            "name": "array",
            "description": "The array to filter."
          },
          {
            "name": "values",
            "description": "The values to exclude."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "xor",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of unique values that is the symmetric difference of the provided arrays.",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "xorBy",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.xor` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by which\nuniqueness is computed. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the new array of values.",
        "deprecated": false
      }
    },
    {
      "name": "xorWith",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "comparator",
          "type": "Comparator<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.xor` except that it accepts `comparator` which is\ninvoked to compare elements of `arrays`. The comparator is invoked with\ntwo arguments: (arrVal, othVal).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          },
          {
            "name": "comparator",
            "description": "The comparator invoked per element."
          }
        ],
        "returns": "Returns the new array of values.",
        "deprecated": false
      }
    },
    {
      "name": "zip",
      "parameters": [
        {
          "name": "arrays1",
          "type": "List<T1>",
          "optional": false
        },
        {
          "name": "arrays2",
          "type": "List<T2>",
          "optional": false
        }
      ],
      "returnType": "[T1, T2][]",
      "jsdoc": {
        "description": "Creates an array of grouped elements, the first of which contains the first elements of the given arrays,\nthe second of which contains the second elements of the given arrays, and so on.",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to process."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "zipObject",
      "parameters": [
        {
          "name": "props",
          "type": "List<PropertyName>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "Dictionary<T>",
      "jsdoc": {
        "description": "This method is like _.fromPairs except that it accepts two arrays, one of property\nidentifiers and one of corresponding values.",
        "params": [
          {
            "name": "props",
            "description": "The property names."
          },
          {
            "name": "values",
            "description": "The property values."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "zipObjectDeep",
      "parameters": [
        {
          "name": "paths",
          "type": "List<PropertyPath>",
          "optional": true
        },
        {
          "name": "values",
          "type": "List<any>",
          "optional": true
        }
      ],
      "returnType": "object",
      "jsdoc": {
        "description": "This method is like _.zipObject except that it supports property paths.",
        "params": [
          {
            "name": "paths",
            "description": "The property names."
          },
          {
            "name": "values",
            "description": "The property values."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "zipWith",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "(value1: T) => TResult",
          "optional": false
        }
      ],
      "returnType": "TResult[]",
      "jsdoc": {
        "description": "This method is like _.zip except that it accepts an iteratee to specify how grouped values should be\ncombined. The iteratee is invoked with four arguments: (accumulator, value, index,\ngroup).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to process."
          },
          {
            "name": "iteratee",
            "description": "The function to combine grouped values."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "countBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<number>",
      "jsdoc": {
        "description": "Creates an object composed of keys generated from the results of running each element of collection through\niteratee. The corresponding value of each key is the number of times the key was returned by iteratee. The\niteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "each",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ArrayIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "eachRight",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ArrayIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "every",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIterateeCustom<T, boolean>",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if predicate returns truthy for all elements of collection. Iteration is stopped once predicate\nreturns falsey. The predicate is invoked with three arguments: (value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "filter",
      "parameters": [
        {
          "name": "collection",
          "type": "string",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "StringIterator<boolean>",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Iterates over elements of collection, returning an array of all elements predicate returns truthy for. The\npredicate is invoked with three arguments: (value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "find",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratorTypeGuard<T, S>",
          "optional": false
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "S",
      "jsdoc": {
        "description": "Iterates over elements of collection, returning the first element predicate returns truthy for.\nThe predicate is invoked with three arguments: (value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to search."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "findLast",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratorTypeGuard<T, S>",
          "optional": false
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "S",
      "jsdoc": {
        "description": "This method is like _.find except that it iterates over elements of a collection from\nright to left.",
        "params": [
          {
            "name": "collection",
            "description": "Searches for a value in this list."
          },
          {
            "name": "predicate",
            "description": "The function called per iteration."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "flatMap",
      "parameters": [
        {
          "name": "collection",
          "type": "Dictionary<Many<T>> | NumericDictionary<Many<T>>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of flattened values by running each element in collection through iteratee\nand concating its result to the other mapped values. The iteratee is invoked with three arguments:\n(value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "flatMapDeep",
      "parameters": [
        {
          "name": "collection",
          "type": "Dictionary<T | ListOfRecursiveArraysOrValues<T>> | NumericDictionary<T | ListOfRecursiveArraysOrValues<T>>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.flatMap` except that it recursively flattens the\nmapped results.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "returns": "Returns the new flattened array.",
        "deprecated": false
      }
    },
    {
      "name": "flatMapDepth",
      "parameters": [
        {
          "name": "collection",
          "type": "Dictionary<T | ListOfRecursiveArraysOrValues<T>> | NumericDictionary<T | ListOfRecursiveArraysOrValues<T>>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.flatMap` except that it recursively flattens the\nmapped results up to `depth` times.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          },
          {
            "name": "depth",
            "description": "The maximum recursion depth."
          }
        ],
        "returns": "Returns the new flattened array.",
        "deprecated": false
      }
    },
    {
      "name": "forEach",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ArrayIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Iterates over elements of collection invoking iteratee for each element. The iteratee is invoked with three arguments:\n(value, index|key, collection). Iteratee functions may exit iteration early by explicitly returning false.\n\nNote: As with other \"Collections\" methods, objects with a \"length\" property are iterated like arrays. To\navoid this behavior _.forIn or _.forOwn may be used for object iteration.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "forEachRight",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ArrayIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like _.forEach except that it iterates over elements of collection from right to left.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function called per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "groupBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<T[]>",
      "jsdoc": {
        "description": "Creates an object composed of keys generated from the results of running each element of collection through\niteratee. The corresponding value of each key is an array of the elements responsible for generating the\nkey. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "includes",
      "parameters": [
        {
          "name": "collection",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": false
        },
        {
          "name": "target",
          "type": "T",
          "optional": false
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if target is in collection using SameValueZero for equality comparisons. If fromIndex is negative,\nitâ€™s used as the offset from the end of collection.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to search."
          },
          {
            "name": "target",
            "description": "The value to search for."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "invokeMap",
      "parameters": [
        {
          "name": "collection",
          "type": "object",
          "optional": false
        },
        {
          "name": "methodName",
          "type": "string",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "any[]",
      "jsdoc": {
        "description": "Invokes the method named by methodName on each element in the collection returning\nan array of the results of each invoked method. Additional arguments will be provided\nto each invoked method. If methodName is a function it will be invoked for, and this\nbound to, each element in the collection.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "methodName",
            "description": "The name of the method to invoke."
          },
          {
            "name": "args",
            "description": "Arguments to invoke the method with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "keyBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIterateeCustom<T, PropertyName>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<T>",
      "jsdoc": {
        "description": "Creates an object composed of keys generated from the results of running each element of collection through\niteratee. The corresponding value of each key is the last element responsible for generating the key. The\niteratee function is invoked with one argument: (value).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "map",
      "parameters": [
        {
          "name": "collection",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "TupleIterator<T, TResult>",
          "optional": false
        }
      ],
      "returnType": "{ [K in keyof T]: TResult; }",
      "jsdoc": {
        "description": "Creates an array of values by running each element in collection through iteratee. The iteratee is\ninvoked with three arguments: (value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like _.every, _.filter, _.map, _.mapValues,\n_.reject, and _.some.\n\nThe guarded methods are:\nary, callback, chunk, clone, create, curry, curryRight, drop, dropRight, every, fill, flatten, invert, max,\nmin, parseInt, slice, sortBy, take, takeRight, template, trim, trimLeft, trimRight, trunc, random, range,\nsample, some, sum, uniq, and words",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "orderBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratees",
          "type": "Many<ListIterator<T, unknown>>",
          "optional": true
        },
        {
          "name": "orders",
          "type": "Many<boolean | \"asc\" | \"desc\">",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.sortBy` except that it allows specifying the sort\norders of the iteratees to sort by. If `orders` is unspecified, all values\nare sorted in ascending order. Otherwise, specify an order of \"desc\" for\ndescending or \"asc\" for ascending sort order of corresponding values.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratees",
            "description": "The iteratees to sort by."
          },
          {
            "name": "orders",
            "description": "The sort orders of `iteratees`."
          },
          {
            "name": "guard",
            "description": "Enables use as an iteratee for functions like `_.reduce`."
          }
        ],
        "returns": "Returns the new sorted array.",
        "deprecated": false
      }
    },
    {
      "name": "partition",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "callback",
          "type": "ValueIteratorTypeGuard<T, U>",
          "optional": false
        }
      ],
      "returnType": "[U[], Exclude<T, U>[]]",
      "jsdoc": {
        "description": "Creates an array of elements split into two groups, the first of which contains elements predicate returns truthy for,\nwhile the second of which contains elements predicate returns falsey for.\nThe predicate is invoked with three arguments: (value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "callback",
            "description": "The function called per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "reduce",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "callback",
          "type": "MemoListIterator<T, TResult, T[]>",
          "optional": false
        },
        {
          "name": "accumulator",
          "type": "TResult",
          "optional": false
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "Reduces a collection to a value which is the accumulated result of running each\nelement in the collection through the callback, where each successive callback execution\nconsumes the return value of the previous execution. If accumulator is not provided the\nfirst element of the collection will be used as the initial accumulator value. The callback\nis invoked with four arguments: (accumulator, value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "callback",
            "description": "The function called per iteration."
          },
          {
            "name": "accumulator",
            "description": "Initial value of the accumulator."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "reduceRight",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "callback",
          "type": "MemoListIterator<T, TResult, T[]>",
          "optional": false
        },
        {
          "name": "accumulator",
          "type": "TResult",
          "optional": false
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "This method is like _.reduce except that it iterates over elements of a collection from\nright to left.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "callback",
            "description": "The function called per iteration."
          },
          {
            "name": "accumulator",
            "description": "Initial value of the accumulator."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "reject",
      "parameters": [
        {
          "name": "collection",
          "type": "string",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "StringIterator<boolean>",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "The opposite of _.filter; this method returns the elements of collection that predicate does not return\ntruthy for.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "sample",
      "parameters": [
        {
          "name": "collection",
          "type": "readonly [T, ...T[]]",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Gets a random element from collection.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to sample."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "sampleSize",
      "parameters": [
        {
          "name": "collection",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Gets n random elements at unique keys from collection up to the size of collection.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to sample."
          },
          {
            "name": "n",
            "description": "The number of elements to sample."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "shuffle",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to shuffle."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "size",
      "parameters": [
        {
          "name": "collection",
          "type": "string | object",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the size of collection by returning its length for array-like values or the number of own enumerable\nproperties for objects.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "some",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIterateeCustom<T, boolean>",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if predicate returns truthy for any element of collection. Iteration is stopped once predicate\nreturns truthy. The predicate is invoked with three arguments: (value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "sortBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratees",
          "type": "Many<ListIteratee<T>>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of elements, sorted in ascending order by the results of\nrunning each element in a collection through each iteratee. This method\nperforms a stable sort, that is, it preserves the original sort order of\nequal elements. The iteratees are invoked with one argument: (value).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratees",
            "description": "The iteratees to sort by, specified individually or in arrays."
          }
        ],
        "returns": "Returns the new sorted array.",
        "deprecated": false
      }
    },
    {
      "name": "now",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null
    },
    {
      "name": "after",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "func",
          "type": "TFunc",
          "optional": false
        }
      ],
      "returnType": "TFunc",
      "jsdoc": {
        "description": "The opposite of _.before; this method creates a function that invokes func once itâ€™s called n or more times.",
        "params": [
          {
            "name": "n",
            "description": "The number of calls before func is invoked."
          },
          {
            "name": "func",
            "description": "The function to restrict."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ary",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that accepts up to n arguments ignoring any additional arguments.",
        "params": [
          {
            "name": "func",
            "description": "The function to cap arguments for."
          },
          {
            "name": "n",
            "description": "The arity cap."
          }
        ],
        "returns": "Returns the new function.",
        "deprecated": false
      }
    },
    {
      "name": "before",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "func",
          "type": "TFunc",
          "optional": false
        }
      ],
      "returnType": "TFunc",
      "jsdoc": {
        "description": "Creates a function that invokes func, with the this binding and arguments of the created function, while\nitâ€™s called less than n times. Subsequent calls to the created function return the result of the last func\ninvocation.",
        "params": [
          {
            "name": "n",
            "description": "The number of calls at which func is no longer invoked."
          },
          {
            "name": "func",
            "description": "The function to restrict."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "bind",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": false
        },
        {
          "name": "partials",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that invokes func with the this binding of thisArg and prepends any additional _.bind\narguments to those provided to the bound function.\n\nThe _.bind.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for\npartially applied arguments.\n\nNote: Unlike native Function#bind this method does not set the \"length\" property of bound functions.",
        "params": [
          {
            "name": "func",
            "description": "The function to bind."
          },
          {
            "name": "thisArg",
            "description": "The this binding of func."
          },
          {
            "name": "partials",
            "description": "The arguments to be partially applied."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "bindKey",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        },
        {
          "name": "key",
          "type": "string",
          "optional": false
        },
        {
          "name": "partials",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that invokes the method at object[key] and prepends any additional _.bindKey arguments\nto those provided to the bound function.\n\nThis method differs from _.bind by allowing bound functions to reference methods that may be redefined\nor donâ€™t yet exist. See Peter Michauxâ€™s article for more details.\n\nThe _.bindKey.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder\nfor partially applied arguments.",
        "params": [
          {
            "name": "object",
            "description": "The object the method belongs to."
          },
          {
            "name": "key",
            "description": "The key of the method."
          },
          {
            "name": "partials",
            "description": "The arguments to be partially applied."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "curry",
      "parameters": [
        {
          "name": "func",
          "type": "(t1: T1) => R",
          "optional": false
        },
        {
          "name": "arity",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "CurriedFunction1<T1, R>",
      "jsdoc": null
    },
    {
      "name": "curryRight",
      "parameters": [
        {
          "name": "func",
          "type": "(t1: T1) => R",
          "optional": false
        },
        {
          "name": "arity",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "RightCurriedFunction1<T1, R>",
      "jsdoc": null
    },
    {
      "name": "debounce",
      "parameters": [
        {
          "name": "func",
          "type": "T",
          "optional": false
        },
        {
          "name": "wait",
          "type": "number",
          "optional": false
        },
        {
          "name": "options",
          "type": "DebounceSettingsLeading",
          "optional": false
        }
      ],
      "returnType": "DebouncedFuncLeading<T>",
      "jsdoc": {
        "description": "Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since\nthe last time the debounced function was invoked. The debounced function comes with a cancel method to\ncancel delayed invocations and a flush method to immediately invoke them. Provide an options object to\nindicate that func should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent\ncalls to the debounced function return the result of the last func invocation.\n\nNote: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only\nif the the debounced function is invoked more than once during the wait timeout.\n\nSee David Corbachoâ€™s article for details over the differences between _.debounce and _.throttle.",
        "params": [
          {
            "name": "func",
            "description": "The function to debounce."
          },
          {
            "name": "wait",
            "description": "The number of milliseconds to delay."
          },
          {
            "name": "options",
            "description": "The options object."
          },
          {
            "description": "Specify invoking on the leading edge of the timeout."
          },
          {
            "description": "The maximum time func is allowed to be delayed before itâ€™s invoked."
          },
          {
            "description": "Specify invoking on the trailing edge of the timeout."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defer",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Defers invoking the func until the current call stack has cleared. Any additional arguments are provided to\nfunc when itâ€™s invoked.",
        "params": [
          {
            "name": "func",
            "description": "The function to defer."
          },
          {
            "name": "args",
            "description": "The arguments to invoke the function with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "delay",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "wait",
          "type": "number",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Invokes func after wait milliseconds. Any additional arguments are provided to func when itâ€™s invoked.",
        "params": [
          {
            "name": "func",
            "description": "The function to delay."
          },
          {
            "name": "wait",
            "description": "The number of milliseconds to delay invocation."
          },
          {
            "name": "args",
            "description": "The arguments to invoke the function with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "flip",
      "parameters": [
        {
          "name": "func",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Creates a function that invokes `func` with arguments reversed.",
        "params": [
          {
            "name": "func",
            "description": "The function to flip arguments for."
          }
        ],
        "returns": "Returns the new function.",
        "deprecated": false
      }
    },
    {
      "name": "memoize",
      "parameters": [
        {
          "name": "func",
          "type": "T",
          "optional": false
        },
        {
          "name": "resolver",
          "type": "(...args: Parameters<T>) => any",
          "optional": true
        }
      ],
      "returnType": "T & MemoizedFunction",
      "jsdoc": {
        "description": "Creates a function that memoizes the result of func. If resolver is provided it determines the cache key for\nstoring the result based on the arguments provided to the memoized function. By default, the first argument\nprovided to the memoized function is coerced to a string and used as the cache key. The func is invoked with\nthe this binding of the memoized function.",
        "params": [
          {
            "name": "func",
            "description": "The function to have its output memoized."
          },
          {
            "name": "resolver",
            "description": "The function to resolve the cache key."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "negate",
      "parameters": [
        {
          "name": "predicate",
          "type": "(...args: T) => boolean",
          "optional": false
        }
      ],
      "returnType": "(...args: T) => boolean",
      "jsdoc": {
        "description": "Creates a function that negates the result of the predicate func. The func predicate is invoked with\nthe this binding and arguments of the created function.",
        "params": [
          {
            "name": "predicate",
            "description": "The predicate to negate."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "once",
      "parameters": [
        {
          "name": "func",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Creates a function that is restricted to invoking func once. Repeat calls to the function return the value\nof the first call. The func is invoked with the this binding and arguments of the created function.",
        "params": [
          {
            "name": "func",
            "description": "The function to restrict."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "overArgs",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "transforms",
          "type": "Many<(...args: any[]) => any>[]",
          "optional": false
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that runs each argument through a corresponding transform function.",
        "params": [
          {
            "name": "func",
            "description": "The function to wrap."
          },
          {
            "name": "transforms",
            "description": "The functions to transform arguments, specified as individual functions or arrays\nof functions."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "partial",
      "parameters": [
        {
          "name": "func",
          "type": "Function2<T1, T2, R>",
          "optional": false
        },
        {
          "name": "plc1",
          "type": "LoDashStatic",
          "optional": false
        },
        {
          "name": "arg2",
          "type": "T2",
          "optional": false
        }
      ],
      "returnType": "Function1<T1, R>",
      "jsdoc": {
        "description": "Creates a function that, when called, invokes func with any additional partial arguments\nprepended to those provided to the new function. This method is similar to _.bind except\nit does not alter the this binding.",
        "params": [
          {
            "name": "func",
            "description": "The function to partially apply arguments to."
          },
          {
            "name": "args",
            "description": "Arguments to be partially applied."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "partialRight",
      "parameters": [
        {
          "name": "func",
          "type": "Function0<R>",
          "optional": false
        }
      ],
      "returnType": "Function0<R>",
      "jsdoc": {
        "description": "This method is like _.partial except that partial arguments are appended to those provided\nto the new function.",
        "params": [
          {
            "name": "func",
            "description": "The function to partially apply arguments to."
          },
          {
            "name": "args",
            "description": "Arguments to be partially applied."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "rearg",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "indexes",
          "type": "Many<number>[]",
          "optional": false
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that invokes func with arguments arranged according to the specified indexes where the\nargument value at the first index is provided as the first argument, the argument value at the second index\nis provided as the second argument, and so on.",
        "params": [
          {
            "name": "func",
            "description": "The function to rearrange arguments for."
          },
          {
            "name": "indexes",
            "description": "The arranged argument indexes, specified as individual indexes or arrays of indexes."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "rest",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that invokes func with the this binding of the created function and arguments from start\nand beyond provided as an array.\n\nNote: This method is based on the rest parameter.",
        "params": [
          {
            "name": "func",
            "description": "The function to apply a rest parameter to."
          },
          {
            "name": "start",
            "description": "The start position of the rest parameter."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "spread",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => TResult",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "(...args: any[]) => TResult",
      "jsdoc": {
        "description": "Creates a function that invokes func with the this binding of the created function and an array of arguments\nmuch like Function#apply.\n\nNote: This method is based on the spread operator.",
        "params": [
          {
            "name": "func",
            "description": "The function to spread arguments over."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "throttle",
      "parameters": [
        {
          "name": "func",
          "type": "T",
          "optional": false
        },
        {
          "name": "wait",
          "type": "number",
          "optional": true
        },
        {
          "name": "options",
          "type": "ThrottleSettingsLeading",
          "optional": true
        }
      ],
      "returnType": "DebouncedFuncLeading<T>",
      "jsdoc": {
        "description": "Creates a throttled function that only invokes func at most once per every wait milliseconds. The throttled\nfunction comes with a cancel method to cancel delayed invocations and a flush method to immediately invoke\nthem. Provide an options object to indicate that func should be invoked on the leading and/or trailing edge\nof the wait timeout. Subsequent calls to the throttled function return the result of the last func call.\n\nNote: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only if\nthe the throttled function is invoked more than once during the wait timeout.",
        "params": [
          {
            "name": "func",
            "description": "The function to throttle."
          },
          {
            "name": "wait",
            "description": "The number of milliseconds to throttle invocations to."
          },
          {
            "name": "options",
            "description": "The options object."
          },
          {
            "description": "Specify invoking on the leading edge of the timeout."
          },
          {
            "description": "Specify invoking on the trailing edge of the timeout."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "unary",
      "parameters": [
        {
          "name": "func",
          "type": "(arg1: T, ...args: any[]) => TResult",
          "optional": false
        }
      ],
      "returnType": "(arg1: T) => TResult",
      "jsdoc": {
        "description": "Creates a function that accepts up to one argument, ignoring any\nadditional arguments.",
        "params": [
          {
            "name": "func",
            "description": "The function to cap arguments for."
          }
        ],
        "returns": "Returns the new function.",
        "deprecated": false
      }
    },
    {
      "name": "wrap",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "wrapper",
          "type": "(value: T, ...args: TArgs[]) => TResult",
          "optional": false
        }
      ],
      "returnType": "(...args: TArgs[]) => TResult",
      "jsdoc": {
        "description": "Creates a function that provides value to the wrapper function as its first argument. Any additional\narguments provided to the function are appended to those provided to the wrapper function. The wrapper is\ninvoked with the this binding of the created function.",
        "params": [
          {
            "name": "value",
            "description": "The value to wrap."
          },
          {
            "name": "wrapper",
            "description": "The wrapper function."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "castArray",
      "parameters": [
        {
          "name": "value",
          "type": "Many<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Casts value as an array if itâ€™s not one.",
        "params": [
          {
            "name": "value",
            "description": "The value to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "clone",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Creates a shallow clone of value.\n\nNote: This method is loosely based on the structured clone algorithm and supports cloning arrays,\narray buffers, booleans, date objects, maps, numbers, Object objects, regexes, sets, strings, symbols,\nand typed arrays. The own enumerable properties of arguments objects are cloned as plain objects. An empty\nobject is returned for uncloneable values such as error objects, functions, DOM nodes, and WeakMaps.",
        "params": [
          {
            "name": "value",
            "description": "The value to clone."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "cloneDeep",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like _.clone except that it recursively clones value.",
        "params": [
          {
            "name": "value",
            "description": "The value to recursively clone."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "cloneDeepWith",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "CloneDeepWithCustomizer<T>",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "This method is like _.cloneWith except that it recursively clones value.",
        "params": [
          {
            "name": "value",
            "description": "The value to recursively clone."
          },
          {
            "name": "customizer",
            "description": "The function to customize cloning."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "cloneWith",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "CloneWithCustomizer<T, TResult>",
          "optional": false
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "This method is like _.clone except that it accepts customizer which is invoked to produce the cloned value.\nIf customizer returns undefined cloning is handled by the method instead.",
        "params": [
          {
            "name": "value",
            "description": "The value to clone."
          },
          {
            "name": "customizer",
            "description": "The function to customize cloning."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "conformsTo",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "source",
          "type": "ConformsPredicateObject<T>",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if object conforms to source by invoking the predicate properties of source with the\ncorresponding property values of object.\n\nNote: This method is equivalent to _.conforms when source is partially applied.",
        "deprecated": false
      }
    },
    {
      "name": "eq",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\ncomparison between two values to determine if they are equivalent.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "returns": "Returns `true` if the values are equivalent, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "gt",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is greater than other.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "gte",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is greater than or equal to other.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isArguments",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as an arguments object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isArray",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as an Array object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isArrayBuffer",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as an ArrayBuffer object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isArrayLike",
      "parameters": [
        {
          "name": "t",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is array-like. A value is considered array-like if it's\nnot a function and has a `value.length` that's an integer greater than or\nequal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is array-like, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isArrayLikeObject",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This method is like `_.isArrayLike` except that it also checks if `value`\nis an object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is an array-like object, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isBoolean",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a boolean primitive or object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isBuffer",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a buffer.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isDate",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a Date object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isElement",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a DOM element.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isEmpty",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is empty. A value is considered empty unless itâ€™s an arguments object, array, string, or\njQuery-like collection with a length greater than 0 or an object with own enumerable properties.",
        "params": [
          {
            "name": "value",
            "description": "The value to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isEqual",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Performs a deep comparison between two values to determine if they are\nequivalent.\n\n**Note:** This method supports comparing arrays, array buffers, booleans,\ndate objects, error objects, maps, numbers, `Object` objects, regexes,\nsets, strings, symbols, and typed arrays. `Object` objects are compared\nby their own, not inherited, enumerable properties. Functions and DOM\nnodes are **not** supported.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "returns": "Returns `true` if the values are equivalent, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isEqualWith",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "IsEqualCustomizer",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This method is like `_.isEqual` except that it accepts `customizer` which is\ninvoked to compare values. If `customizer` returns `undefined` comparisons are\nhandled by the method instead. The `customizer` is invoked with up to seven arguments:\n(objValue, othValue [, index|key, object, other, stack]).",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          },
          {
            "name": "customizer",
            "description": "The function to customize comparisons."
          }
        ],
        "returns": "Returns `true` if the values are equivalent, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isError",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, or URIError\nobject.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isFinite",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a finite primitive number.\n\nNote: This method is based on Number.isFinite.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isFunction",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a callable function.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isInteger",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is an integer.\n\n**Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is an integer, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isLength",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is a valid array-like length.\n\n**Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is a valid length, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isMap",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a Map object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns true if value is correctly classified, else false.",
        "deprecated": false
      }
    },
    {
      "name": "isMatch",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        },
        {
          "name": "source",
          "type": "object",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Performs a deep comparison between `object` and `source` to determine if\n`object` contains equivalent property values.\n\n**Note:** This method supports comparing the same values as `_.isEqual`.",
        "params": [
          {
            "name": "object",
            "description": "The object to inspect."
          },
          {
            "name": "source",
            "description": "The object of property values to match."
          }
        ],
        "returns": "Returns `true` if `object` is a match, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isMatchWith",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        },
        {
          "name": "source",
          "type": "object",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "isMatchWithCustomizer",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This method is like `_.isMatch` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined` comparisons\nare handled by the method instead. The `customizer` is invoked with three\narguments: (objValue, srcValue, index|key, object, source).",
        "params": [
          {
            "name": "object",
            "description": "The object to inspect."
          },
          {
            "name": "source",
            "description": "The object of property values to match."
          },
          {
            "name": "customizer",
            "description": "The function to customize comparisons."
          }
        ],
        "returns": "Returns `true` if `object` is a match, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isNaN",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is NaN.\n\nNote: This method is not the same as isNaN which returns true for undefined and other non-numeric values.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isNative",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a native function.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isNil",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is `null` or `undefined`.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is nullish, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isNull",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is null.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isNumber",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a Number primitive or object.\n\nNote: To exclude Infinity, -Infinity, and NaN, which are classified as numbers, use the _.isFinite method.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isObject",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is the language type of Object. (e.g. arrays, functions, objects, regexes, new Number(0),\nand new String(''))",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isObjectLike",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is object-like. A value is object-like if it's not `null`\nand has a `typeof` result of \"object\".",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is object-like, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isPlainObject",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a plain object, that is, an object created by the Object constructor or one with a\n[[Prototype]] of null.\n\nNote: This method assumes objects created by the Object constructor have no inherited enumerable properties.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isRegExp",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a RegExp object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isSafeInteger",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\ndouble precision number which isn't the result of a rounded unsafe integer.\n\n**Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is a safe integer, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isSet",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a Set object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns true if value is correctly classified, else false.",
        "deprecated": false
      }
    },
    {
      "name": "isString",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a String primitive or object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isSymbol",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is classified as a `Symbol` primitive or object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is correctly classified, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "isTypedArray",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a typed array.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isUndefined",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is undefined.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isWeakMap",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a WeakMap object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns true if value is correctly classified, else false.",
        "deprecated": false
      }
    },
    {
      "name": "isWeakSet",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a WeakSet object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns true if value is correctly classified, else false.",
        "deprecated": false
      }
    },
    {
      "name": "lt",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is less than other.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "lte",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is less than or equal to other.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toArray",
      "parameters": [
        {
          "name": "value",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Converts value to an array.",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toFinite",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts `value` to a finite number.",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "returns": "Returns the converted number.",
        "deprecated": false
      }
    },
    {
      "name": "toInteger",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts `value` to an integer.\n\n**Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "returns": "Returns the converted integer.",
        "deprecated": false
      }
    },
    {
      "name": "toLength",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts `value` to an integer suitable for use as the length of an\narray-like object.\n\n**Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toNumber",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts `value` to a number.",
        "params": [
          {
            "name": "value",
            "description": "The value to process."
          }
        ],
        "returns": "Returns the number.",
        "deprecated": false
      }
    },
    {
      "name": "toPlainObject",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Converts value to a plain object flattening inherited enumerable properties of value to own properties\nof the plain object.",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toSafeInteger",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts `value` to a safe integer. A safe integer can be compared and\nrepresented correctly.",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "returns": "Returns the converted integer.",
        "deprecated": false
      }
    },
    {
      "name": "toString",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts `value` to a string if it's not one. An empty string is returned\nfor `null` and `undefined` values. The sign of `-0` is preserved.",
        "params": [
          {
            "name": "value",
            "description": "The value to process."
          }
        ],
        "returns": "Returns the string.",
        "deprecated": false
      }
    },
    {
      "name": "add",
      "parameters": [
        {
          "name": "augend",
          "type": "number",
          "optional": false
        },
        {
          "name": "addend",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Adds two numbers.",
        "params": [
          {
            "name": "augend",
            "description": "The first number to add."
          },
          {
            "name": "addend",
            "description": "The second number to add."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ceil",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Calculates n rounded up to precision.",
        "params": [
          {
            "name": "n",
            "description": "The number to round up."
          },
          {
            "name": "precision",
            "description": "The precision to round up to."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "divide",
      "parameters": [
        {
          "name": "dividend",
          "type": "number",
          "optional": false
        },
        {
          "name": "divisor",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Divide two numbers.",
        "params": [
          {
            "name": "dividend",
            "description": "The first number in a division."
          },
          {
            "name": "divisor",
            "description": "The second number in a division."
          }
        ],
        "returns": "Returns the quotient.",
        "deprecated": false
      }
    },
    {
      "name": "floor",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Calculates n rounded down to precision.",
        "params": [
          {
            "name": "n",
            "description": "The number to round down."
          },
          {
            "name": "precision",
            "description": "The precision to round down to."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "max",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Computes the maximum value of `array`. If `array` is empty or falsey\n`undefined` is returned.",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          }
        ],
        "returns": "Returns the maximum value.",
        "deprecated": false
      }
    },
    {
      "name": "maxBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like `_.max` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the maximum value.",
        "deprecated": false
      }
    },
    {
      "name": "mean",
      "parameters": [
        {
          "name": "collection",
          "type": "List<any>",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Computes the mean of the values in `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          }
        ],
        "returns": "Returns the mean.",
        "deprecated": false
      }
    },
    {
      "name": "meanBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Computes the mean of the provided properties of the objects in the `array`",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the mean.",
        "deprecated": false
      }
    },
    {
      "name": "min",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Computes the minimum value of `array`. If `array` is empty or falsey\n`undefined` is returned.",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          }
        ],
        "returns": "Returns the minimum value.",
        "deprecated": false
      }
    },
    {
      "name": "minBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like `_.min` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the minimum value.",
        "deprecated": false
      }
    },
    {
      "name": "multiply",
      "parameters": [
        {
          "name": "multiplier",
          "type": "number",
          "optional": false
        },
        {
          "name": "multiplicand",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Multiply two numbers.",
        "params": [
          {
            "name": "multiplier",
            "description": "The first number in a multiplication."
          },
          {
            "name": "multiplicand",
            "description": "The second number in a multiplication."
          }
        ],
        "returns": "Returns the product.",
        "deprecated": false
      }
    },
    {
      "name": "round",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Calculates n rounded to precision.",
        "params": [
          {
            "name": "n",
            "description": "The number to round."
          },
          {
            "name": "precision",
            "description": "The precision to round to."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "subtract",
      "parameters": [
        {
          "name": "minuend",
          "type": "number",
          "optional": false
        },
        {
          "name": "subtrahend",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Subtract two numbers.",
        "params": [
          {
            "name": "minuend",
            "description": "The first number in a subtraction."
          },
          {
            "name": "subtrahend",
            "description": "The second number in a subtraction."
          }
        ],
        "returns": "Returns the difference.",
        "deprecated": false
      }
    },
    {
      "name": "sum",
      "parameters": [
        {
          "name": "collection",
          "type": "List<any>",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Computes the sum of the values in `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          }
        ],
        "returns": "Returns the sum.",
        "deprecated": false
      }
    },
    {
      "name": "sumBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "string | ((value: T) => number)",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.sum` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be summed.\nThe iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the sum.",
        "deprecated": false
      }
    },
    {
      "name": "clamp",
      "parameters": [
        {
          "name": "number",
          "type": "number",
          "optional": false
        },
        {
          "name": "lower",
          "type": "number",
          "optional": false
        },
        {
          "name": "upper",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Clamps `number` within the inclusive `lower` and `upper` bounds.",
        "params": [
          {
            "name": "number",
            "description": "The number to clamp."
          },
          {
            "name": "lower",
            "description": "The lower bound."
          },
          {
            "name": "upper",
            "description": "The upper bound."
          },
          {
            "name": "number",
            "description": "The number to clamp."
          },
          {
            "name": "lower",
            "description": "The lower bound."
          },
          {
            "name": "upper",
            "description": "The upper bound."
          }
        ],
        "returns": "Returns the clamped number.",
        "deprecated": false
      }
    },
    {
      "name": "inRange",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if n is between start and up to but not including, end. If end is not specified itâ€™s set to start\nwith start then set to 0.",
        "params": [
          {
            "name": "n",
            "description": "The number to check."
          },
          {
            "name": "start",
            "description": "The start of the range."
          },
          {
            "name": "end",
            "description": "The end of the range."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "random",
      "parameters": [
        {
          "name": "floating",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Produces a random number between min and max (inclusive). If only one argument is provided a number between\n0 and the given number is returned. If floating is true, or either min or max are floats, a floating-point\nnumber is returned instead of an integer.",
        "params": [
          {
            "name": "min",
            "description": "The minimum possible value."
          },
          {
            "name": "max",
            "description": "The maximum possible value."
          },
          {
            "name": "floating",
            "description": "Specify returning a floating-point number."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "assign",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "Assigns own enumerable properties of source objects to the destination\nobject. Source objects are applied from left to right. Subsequent sources\noverwrite property assignments of previous sources.\n\n**Note:** This method mutates `object` and is loosely based on\n[`Object.assign`](https://mdn.io/Object/assign).",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "assignIn",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "This method is like `_.assign` except that it iterates over own and\ninherited source properties.\n\n**Note:** This method mutates `object`.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "assignInWith",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "AssignCustomizer",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "This method is like `_.assignIn` except that it accepts `customizer` which\nis invoked to produce the assigned values. If `customizer` returns `undefined`\nassignment is handled by the method instead. The `customizer` is invoked\nwith five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          },
          {
            "name": "customizer",
            "description": "The function to customize assigned values."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "assignWith",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "AssignCustomizer",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "This method is like `_.assign` except that it accepts `customizer` which\nis invoked to produce the assigned values. If `customizer` returns `undefined`\nassignment is handled by the method instead. The `customizer` is invoked\nwith five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          },
          {
            "name": "customizer",
            "description": "The function to customize assigned values."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "at",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": false
        },
        {
          "name": "props",
          "type": "PropertyPath[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of elements corresponding to the given keys, or indexes, of collection. Keys may be\nspecified as individual arguments or as arrays of keys.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "props",
            "description": "The property names or indexes of elements to pick, specified individually or in arrays."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "create",
      "parameters": [
        {
          "name": "prototype",
          "type": "T",
          "optional": false
        },
        {
          "name": "properties",
          "type": "U",
          "optional": true
        }
      ],
      "returnType": "T & U",
      "jsdoc": {
        "description": "Creates an object that inherits from the given prototype object. If a properties object is provided its own\nenumerable properties are assigned to the created object.",
        "params": [
          {
            "name": "prototype",
            "description": "The object to inherit from."
          },
          {
            "name": "properties",
            "description": "The properties to assign to the object."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaults",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        }
      ],
      "returnType": "NonNullable<TSource & TObject>",
      "jsdoc": {
        "description": "Assigns own enumerable properties of source object(s) to the destination object for all destination\nproperties that resolve to undefined. Once a property is set, additional values of the same property are\nignored.\n\nNote: This method mutates object.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultsDeep",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        },
        {
          "name": "sources",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "This method is like _.defaults except that it recursively assigns default properties.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "entries",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": true
        }
      ],
      "returnType": "[string, T][]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "entriesIn",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": true
        }
      ],
      "returnType": "[string, T][]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "extend",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "extendWith",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "AssignCustomizer",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "findKey",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ObjectIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "This method is like _.find except that it returns the key of the first element predicate returns truthy for\ninstead of the element itself.",
        "params": [
          {
            "name": "object",
            "description": "The object to search."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "findLastKey",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ObjectIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "This method is like _.findKey except that it iterates over elements of a collection in the opposite order.",
        "params": [
          {
            "name": "object",
            "description": "The object to search."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "forIn",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ObjectIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Iterates over own and inherited enumerable properties of an object invoking iteratee for each property. The\niteratee is invoked with three arguments: (value, key, object). Iteratee functions may\nexit iteration early by explicitly returning false.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "forInRight",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ObjectIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like _.forIn except that it iterates over properties of object in the opposite order.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "forOwn",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ObjectIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Iterates over own enumerable properties of an object invoking iteratee for each property. The iteratee is\ninvoked with three arguments: (value, key, object). Iteratee functions may exit\niteration early by explicitly returning false.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "forOwnRight",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ObjectIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like _.forOwn except that it iterates over properties of object in the opposite order.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "functions",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Creates an array of function property names from own enumerable properties\nof `object`.",
        "params": [
          {
            "name": "object",
            "description": "The object to inspect."
          }
        ],
        "returns": "Returns the new array of property names.",
        "deprecated": false
      }
    },
    {
      "name": "functionsIn",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Creates an array of function property names from own and inherited\nenumerable properties of `object`.",
        "params": [
          {
            "name": "object",
            "description": "The object to inspect."
          }
        ],
        "returns": "Returns the new array of property names.",
        "deprecated": false
      }
    },
    {
      "name": "get",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "path",
          "type": "TKey | [TKey]",
          "optional": false
        }
      ],
      "returnType": "TObject[TKey]",
      "jsdoc": {
        "description": "Gets the property value at path of object. If the resolved value is undefined the defaultValue is used\nin its place.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "path",
            "description": "The path of the property to get."
          },
          {
            "name": "defaultValue",
            "description": "The value returned if the resolved value is undefined."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "has",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "path",
          "type": "K",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `path` is a direct property of `object`.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "path",
            "description": "The path to check."
          }
        ],
        "returns": "Returns `true` if `path` exists, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "hasIn",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `path` is a direct or inherited property of `object`.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "path",
            "description": "The path to check."
          }
        ],
        "returns": "Returns `true` if `path` exists, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "invert",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        }
      ],
      "returnType": "Dictionary<string>",
      "jsdoc": {
        "description": "Creates an object composed of the inverted keys and values of object. If object contains duplicate values,\nsubsequent values overwrite property assignments of previous values unless multiValue is true.",
        "params": [
          {
            "name": "object",
            "description": "The object to invert."
          },
          {
            "name": "multiValue",
            "description": "Allow multiple values per key."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "invertBy",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": false
        },
        {
          "name": "interatee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<string[]>",
      "jsdoc": {
        "description": "This method is like _.invert except that the inverted object is generated from the results of running each\nelement of object through iteratee. The corresponding inverted value of each inverted key is an array of\nkeys responsible for generating the inverted value. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "object",
            "description": "The object to invert."
          },
          {
            "name": "interatee",
            "description": "The iteratee invoked per element."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "invoke",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Invokes the method at path of object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "path",
            "description": "The path of the method to invoke."
          },
          {
            "name": "args",
            "description": "The arguments to invoke the method with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "keys",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Creates an array of the own enumerable property names of object.\n\nNote: Non-object values are coerced to objects. See the ES spec for more details.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "keysIn",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Creates an array of the own and inherited enumerable property names of object.\n\nNote: Non-object values are coerced to objects.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "mapKeys",
      "parameters": [
        {
          "name": "object",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<T>",
      "jsdoc": {
        "description": "The opposite of _.mapValues; this method creates an object with the same values as object and keys generated\nby running each own enumerable property of object through iteratee.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "mapValues",
      "parameters": [
        {
          "name": "obj",
          "type": "string",
          "optional": false
        },
        {
          "name": "callback",
          "type": "StringIterator<TResult>",
          "optional": false
        }
      ],
      "returnType": "NumericDictionary<TResult>",
      "jsdoc": {
        "description": "Creates an object with the same keys as object and values generated by running each own\nenumerable property of object through iteratee. The iteratee function is\ninvoked with three arguments: (value, key, object).",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "merge",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "Recursively merges own and inherited enumerable properties of source\nobjects into the destination object, skipping source properties that resolve\nto `undefined`. Array and plain object properties are merged recursively.\nOther objects and value types are overridden by assignment. Source objects\nare applied from left to right. Subsequent sources overwrite property\nassignments of previous sources.\n\n**Note:** This method mutates `object`.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "source",
            "description": "The source objects."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "mergeWith",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "(value: any, srcValue: any, key: string, object: any, source: any, stack: any) => any",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "This method is like `_.merge` except that it accepts `customizer` which\nis invoked to produce the merged values of the destination and source\nproperties. If `customizer` returns `undefined` merging is handled by the\nmethod instead. The `customizer` is invoked with six arguments:\n(objValue, srcValue, key, object, source, stack).",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "source",
            "description": "The source objects."
          },
          {
            "name": "customizer",
            "description": "The function to customize assigned values."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "omit",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "paths",
          "type": "K",
          "optional": false
        }
      ],
      "returnType": "Pick<T, Exclude<keyof T, K[number]>>",
      "jsdoc": {
        "description": "The opposite of `_.pick`; this method creates an object composed of the\nown and inherited enumerable properties of `object` that are not omitted.",
        "params": [
          {
            "name": "object",
            "description": "The source object."
          },
          {
            "name": "paths",
            "description": "The property names to omit, specified\nindividually or in arrays.."
          }
        ],
        "returns": "Returns the new object.",
        "deprecated": false
      }
    },
    {
      "name": "omitBy",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ValueKeyIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<T>",
      "jsdoc": {
        "description": "The opposite of `_.pickBy`; this method creates an object composed of the\nown and inherited enumerable properties of `object` that `predicate`\ndoesn't return truthy for.",
        "params": [
          {
            "name": "object",
            "description": "The source object."
          },
          {
            "name": "predicate",
            "description": "The function invoked per property."
          }
        ],
        "returns": "Returns the new object.",
        "deprecated": false
      }
    },
    {
      "name": "pick",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "props",
          "type": "Many<U>[]",
          "optional": false
        }
      ],
      "returnType": "Pick<T, U>",
      "jsdoc": {
        "description": "Creates an object composed of the picked `object` properties.",
        "params": [
          {
            "name": "object",
            "description": "The source object."
          },
          {
            "name": "props",
            "description": "The property names to pick, specified\nindividually or in arrays."
          }
        ],
        "returns": "Returns the new object.",
        "deprecated": false
      }
    },
    {
      "name": "pickBy",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ValueKeyIterateeTypeGuard<T, S>",
          "optional": false
        }
      ],
      "returnType": "Dictionary<S>",
      "jsdoc": {
        "description": "Creates an object composed of the `object` properties `predicate` returns\ntruthy for. The predicate is invoked with two arguments: (value, key).",
        "params": [
          {
            "name": "object",
            "description": "The source object."
          },
          {
            "name": "predicate",
            "description": "The function invoked per property."
          }
        ],
        "returns": "Returns the new object.",
        "deprecated": false
      }
    },
    {
      "name": "result",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "defaultValue",
          "type": "TResult | ((...args: any[]) => TResult)",
          "optional": true
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "This method is like _.get except that if the resolved value is a function itâ€™s invoked with the this binding\nof its parent object and its result is returned.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "path",
            "description": "The path of the property to resolve."
          },
          {
            "name": "defaultValue",
            "description": "The value returned if the resolved value is undefined."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "set",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Sets the value at path of object. If a portion of path doesnâ€™t exist itâ€™s created. Arrays are created for\nmissing index properties while objects are created for all other missing properties. Use _.setWith to\ncustomize path creation.",
        "params": [
          {
            "name": "object",
            "description": "The object to modify."
          },
          {
            "name": "path",
            "description": "The path of the property to set."
          },
          {
            "name": "value",
            "description": "The value to set."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "setWith",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "SetWithCustomizer<T>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like _.set except that it accepts customizer which is invoked to produce the objects of\npath. If customizer returns undefined path creation is handled by the method instead. The customizer is\ninvoked with three arguments: (nsValue, key, nsObject).",
        "params": [
          {
            "name": "object",
            "description": "The object to modify."
          },
          {
            "name": "path",
            "description": "The path of the property to set."
          },
          {
            "name": "value",
            "description": "The value to set."
          },
          {
            "name": "customizer",
            "description": "The function to customize assigned values."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toPairs",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": true
        }
      ],
      "returnType": "[string, T][]",
      "jsdoc": {
        "description": "Creates an array of own enumerable key-value pairs for object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toPairsIn",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": true
        }
      ],
      "returnType": "[string, T][]",
      "jsdoc": {
        "description": "Creates an array of own and inherited enumerable key-value pairs for object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "transform",
      "parameters": [
        {
          "name": "object",
          "type": "readonly T[]",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "MemoVoidArrayIterator<T, TResult>",
          "optional": false
        },
        {
          "name": "accumulator",
          "type": "TResult",
          "optional": true
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "An alternative to _.reduce; this method transforms object to a new accumulator object which is the result of\nrunning each of its own enumerable properties through iteratee, with each invocation potentially mutating\nthe accumulator object. The iteratee is invoked with four arguments: (accumulator,\nvalue, key, object). Iteratee functions may exit iteration early by explicitly returning false.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          },
          {
            "name": "accumulator",
            "description": "The custom accumulator value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "unset",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Removes the property at path of object.\n\nNote: This method mutates object.",
        "params": [
          {
            "name": "object",
            "description": "The object to modify."
          },
          {
            "name": "path",
            "description": "The path of the property to unset."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "update",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "updater",
          "type": "(value: any) => any",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "This method is like _.set except that accepts updater to produce the value to set. Use _.updateWith to\ncustomize path creation. The updater is invoked with one argument: (value).",
        "params": [
          {
            "name": "object",
            "description": "The object to modify."
          },
          {
            "name": "path",
            "description": "The path of the property to set."
          },
          {
            "name": "updater",
            "description": "The function to produce the updated value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "updateWith",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "updater",
          "type": "(oldValue: any) => any",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "SetWithCustomizer<T>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like `_.update` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
        "params": [
          {
            "name": "object",
            "description": "The object to modify."
          },
          {
            "name": "path",
            "description": "The path of the property to set."
          },
          {
            "name": "updater",
            "description": "The function to produce the updated value."
          },
          {
            "name": "customizer",
            "description": "The function to customize assigned values."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "values",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T> | List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of the own enumerable property values of object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "valuesIn",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T> | List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of the own and inherited enumerable property values of object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "chain",
      "parameters": [
        {
          "name": "value",
          "type": "TrapAny",
          "optional": false
        }
      ],
      "returnType": "CollectionChain<any> & FunctionChain<any> & ObjectChain<any> & PrimitiveChain<any> & StringChain<string>",
      "jsdoc": {
        "description": "Creates a lodash object that wraps value with explicit method chaining enabled.",
        "params": [
          {
            "name": "value",
            "description": "The value to wrap."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "tap",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "interceptor",
          "type": "(value: T) => void",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method invokes interceptor and returns value. The interceptor is invoked with one\nargument; (value). The purpose of this method is to \"tap into\" a method chain in order to perform operations\non intermediate results within the chain.",
        "params": [
          {
            "name": "value",
            "description": "The value to provide to interceptor."
          },
          {
            "name": "interceptor",
            "description": "The function to invoke."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "thru",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "interceptor",
          "type": "(value: T) => TResult",
          "optional": false
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "This method is like _.tap except that it returns the result of interceptor.",
        "params": [
          {
            "name": "value",
            "description": "The value to provide to interceptor."
          },
          {
            "name": "interceptor",
            "description": "The function to invoke."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "camelCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts string to camel case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "capitalize",
      "parameters": [
        {
          "name": "string",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "string extends T ? string : Capitalize<Lowercase<T>>",
      "jsdoc": {
        "description": "Converts the first character of string to upper case and the remaining to lower case.",
        "params": [
          {
            "name": "string",
            "description": "The string to capitalize."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "deburr",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Deburrs string by converting latin-1 supplementary letters to basic latin letters and removing combining\ndiacritical marks.",
        "params": [
          {
            "name": "string",
            "description": "The string to deburr."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "endsWith",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "target",
          "type": "string",
          "optional": true
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if string ends with the given target string.",
        "params": [
          {
            "name": "string",
            "description": "The string to search."
          },
          {
            "name": "target",
            "description": "The string to search for."
          },
          {
            "name": "position",
            "description": "The position to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "escape",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"`\" in string to their corresponding HTML entities.\n\nNote: No other characters are escaped. To escape additional characters use a third-party library like he.\n\nThough the \">\" character is escaped for symmetry, characters like \">\" and \"/\" donâ€™t need escaping in HTML\nand have no special meaning unless they're part of a tag or unquoted attribute value. See Mathias Bynensâ€™s\narticle (under \"semi-related fun fact\") for more details.\n\nBackticks are escaped because in IE < 9, they can break out of attribute values or HTML comments. See #59,\n#102, #108, and #133 of the HTML5 Security Cheatsheet for more details.\n\nWhen working with HTML you should always quote attribute values to reduce XSS vectors.",
        "params": [
          {
            "name": "string",
            "description": "The string to escape."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "escapeRegExp",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Escapes the RegExp special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\", \"?\", \"(\", \")\", \"[\", \"]\",\n\"{\", \"}\", and \"|\" in string.",
        "params": [
          {
            "name": "string",
            "description": "The string to escape."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "kebabCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts string to kebab case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "lowerCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts `string`, as space separated words, to lower case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "lowerFirst",
      "parameters": [
        {
          "name": "string",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "Uncapitalize<T>",
      "jsdoc": {
        "description": "Converts the first character of `string` to lower case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "pad",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        },
        {
          "name": "chars",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads string on the left and right sides if itâ€™s shorter than length. Padding characters are truncated if\nthey canâ€™t be evenly divided by length.",
        "params": [
          {
            "name": "string",
            "description": "The string to pad."
          },
          {
            "name": "length",
            "description": "The padding length."
          },
          {
            "name": "chars",
            "description": "The string used as padding."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "padEnd",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        },
        {
          "name": "chars",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads string on the right side if itâ€™s shorter than length. Padding characters are truncated if they exceed\nlength.",
        "params": [
          {
            "name": "string",
            "description": "The string to pad."
          },
          {
            "name": "length",
            "description": "The padding length."
          },
          {
            "name": "chars",
            "description": "The string used as padding."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "padStart",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        },
        {
          "name": "chars",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads string on the left side if itâ€™s shorter than length. Padding characters are truncated if they exceed\nlength.",
        "params": [
          {
            "name": "string",
            "description": "The string to pad."
          },
          {
            "name": "length",
            "description": "The padding length."
          },
          {
            "name": "chars",
            "description": "The string used as padding."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "parseInt",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        },
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts string to an integer of the specified radix. If radix is undefined or 0, a radix of 10 is used\nunless value is a hexadecimal, in which case a radix of 16 is used.\n\nNote: This method aligns with the ES5 implementation of parseInt.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          },
          {
            "name": "radix",
            "description": "The radix to interpret value by."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "repeat",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Repeats the given string n times.",
        "params": [
          {
            "name": "string",
            "description": "The string to repeat."
          },
          {
            "name": "n",
            "description": "The number of times to repeat the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "replace",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        },
        {
          "name": "pattern",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replacement",
          "type": "string | ReplaceFunction",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces matches for pattern in string with replacement.\n\nNote: This method is based on String#replace.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "snakeCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts string to snake case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "split",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        },
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": true
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Splits string by separator.\n\nNote: This method is based on String#split.",
        "params": [
          {
            "name": "string",
            "description": "The string to split."
          },
          {
            "name": "separator",
            "description": "The separator pattern to split by."
          },
          {
            "name": "limit",
            "description": "The length to truncate results to."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "startCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts string to start case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "startsWith",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "target",
          "type": "string",
          "optional": true
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if string starts with the given target string.",
        "params": [
          {
            "name": "string",
            "description": "The string to search."
          },
          {
            "name": "target",
            "description": "The string to search for."
          },
          {
            "name": "position",
            "description": "The position to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "template",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "options",
          "type": "TemplateOptions",
          "optional": true
        }
      ],
      "returnType": "TemplateExecutor",
      "jsdoc": {
        "description": "Creates a compiled template function that can interpolate data properties in \"interpolate\" delimiters,\nHTML-escape interpolated data properties in \"escape\" delimiters, and execute JavaScript in \"evaluate\"\ndelimiters. Data properties may be accessed as free variables in the template. If a setting object is\nprovided it takes precedence over _.templateSettings values.\n\nNote: In the development build _.template utilizes\n[sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl) for easier\ndebugging.\n\nFor more information on precompiling templates see\n[lodash's custom builds documentation](https://lodash.com/custom-builds).\n\nFor more information on Chrome extension sandboxes see\n[Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).",
        "params": [
          {
            "name": "string",
            "description": "The template string."
          },
          {
            "name": "options",
            "description": "The options object."
          },
          {
            "description": "The HTML \"escape\" delimiter."
          },
          {
            "description": "The \"evaluate\" delimiter."
          },
          {
            "description": "An object to import into the template as free variables."
          },
          {
            "description": "The \"interpolate\" delimiter."
          },
          {
            "description": "The sourceURL of the template's compiled source."
          },
          {
            "description": "The data object variable name."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toLower",
      "parameters": [
        {
          "name": "string",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "Lowercase<T>",
      "jsdoc": {
        "description": "Converts `string`, as a whole, to lower case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toUpper",
      "parameters": [
        {
          "name": "string",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "Uppercase<T>",
      "jsdoc": {
        "description": "Converts `string`, as a whole, to upper case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "trim",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "chars",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes leading and trailing whitespace or specified characters from string.",
        "params": [
          {
            "name": "string",
            "description": "The string to trim."
          },
          {
            "name": "chars",
            "description": "The characters to trim."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "trimEnd",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "chars",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes trailing whitespace or specified characters from string.",
        "params": [
          {
            "name": "string",
            "description": "The string to trim."
          },
          {
            "name": "chars",
            "description": "The characters to trim."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "trimStart",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "chars",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes leading whitespace or specified characters from string.",
        "params": [
          {
            "name": "string",
            "description": "The string to trim."
          },
          {
            "name": "chars",
            "description": "The characters to trim."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "truncate",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "options",
          "type": "TruncateOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Truncates string if itâ€™s longer than the given maximum string length. The last characters of the truncated\nstring are replaced with the omission string which defaults to \"â€¦\".",
        "params": [
          {
            "name": "string",
            "description": "The string to truncate."
          },
          {
            "name": "options",
            "description": "The options object or maximum string length."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "unescape",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "The inverse of _.escape; this method converts the HTML entities &amp;, &lt;, &gt;, &quot;, &#39;, and &#96;\nin string to their corresponding characters.\n\nNote: No other HTML entities are unescaped. To unescape additional HTML entities use a third-party library\nlike he.",
        "params": [
          {
            "name": "string",
            "description": "The string to unescape."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "upperCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts `string`, as space separated words, to upper case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "upperFirst",
      "parameters": [
        {
          "name": "string",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "Capitalize<T>",
      "jsdoc": {
        "description": "Converts the first character of `string` to upper case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "words",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "pattern",
          "type": "string | RegExp",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Splits `string` into an array of its words.",
        "params": [
          {
            "name": "string",
            "description": "The string to inspect."
          },
          {
            "name": "pattern",
            "description": "The pattern to match words."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "attempt",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => TResult",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "TResult | Error",
      "jsdoc": {
        "description": "Attempts to invoke func, returning either the result or the caught error object. Any additional arguments\nare provided to func when itâ€™s invoked.",
        "params": [
          {
            "name": "func",
            "description": "The function to attempt."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "bindAll",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "methodNames",
          "type": "Many<string>[]",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Binds methods of an object to the object itself, overwriting the existing method. Method names may be\nspecified as individual arguments or as arrays of method names. If no method names are provided all\nenumerable function properties, own and inherited, of object are bound.\n\nNote: This method does not set the \"length\" property of bound functions.",
        "params": [
          {
            "name": "object",
            "description": "The object to bind and assign the bound methods to."
          },
          {
            "name": "methodNames",
            "description": "The object method names to bind, specified as individual method names or arrays of\nmethod names."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "cond",
      "parameters": [
        {
          "name": "pairs",
          "type": "CondPairNullary<R>[]",
          "optional": false
        }
      ],
      "returnType": "() => R",
      "jsdoc": {
        "description": "Creates a function that iterates over `pairs` and invokes the corresponding\nfunction of the first predicate to return truthy. The predicate-function\npairs are invoked with the `this` binding and arguments of the created\nfunction.",
        "params": [
          {
            "name": "pairs",
            "description": "The predicate-function pairs."
          }
        ],
        "returns": "Returns the new composite function.",
        "deprecated": false
      }
    },
    {
      "name": "conforms",
      "parameters": [
        {
          "name": "source",
          "type": "ConformsPredicateObject<T>",
          "optional": false
        }
      ],
      "returnType": "(value: T) => boolean",
      "jsdoc": {
        "description": "Creates a function that invokes the predicate properties of `source` with the corresponding\nproperty values of a given object, returning true if all predicates return truthy, else false.",
        "deprecated": false
      }
    },
    {
      "name": "constant",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "() => T",
      "jsdoc": {
        "description": "Creates a function that returns value.",
        "params": [
          {
            "name": "value",
            "description": "The value to return from the new function."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultTo",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "defaultValue",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Checks `value` to determine whether a default value should be returned in\nits place. The `defaultValue` is returned if `value` is `NaN`, `null`,\nor `undefined`.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          },
          {
            "name": "defaultValue",
            "description": "The default value."
          }
        ],
        "returns": "Returns the resolved value.",
        "deprecated": false
      }
    },
    {
      "name": "flow",
      "parameters": [
        {
          "name": "f1",
          "type": "(...args: A) => R1",
          "optional": false
        },
        {
          "name": "f2",
          "type": "(a: R1) => R2",
          "optional": false
        },
        {
          "name": "f3",
          "type": "(a: R2) => R3",
          "optional": false
        },
        {
          "name": "f4",
          "type": "(a: R3) => R4",
          "optional": false
        },
        {
          "name": "f5",
          "type": "(a: R4) => R5",
          "optional": false
        },
        {
          "name": "f6",
          "type": "(a: R5) => R6",
          "optional": false
        },
        {
          "name": "f7",
          "type": "(a: R6) => R7",
          "optional": false
        }
      ],
      "returnType": "(...args: A) => R7",
      "jsdoc": {
        "description": "Creates a function that returns the result of invoking the provided functions with the this binding of the\ncreated function, where each successive invocation is supplied the return value of the previous.",
        "params": [
          {
            "name": "funcs",
            "description": "Functions to invoke."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "flowRight",
      "parameters": [
        {
          "name": "f7",
          "type": "(a: R6) => R7",
          "optional": false
        },
        {
          "name": "f6",
          "type": "(a: R5) => R6",
          "optional": false
        },
        {
          "name": "f5",
          "type": "(a: R4) => R5",
          "optional": false
        },
        {
          "name": "f4",
          "type": "(a: R3) => R4",
          "optional": false
        },
        {
          "name": "f3",
          "type": "(a: R2) => R3",
          "optional": false
        },
        {
          "name": "f2",
          "type": "(a: R1) => R2",
          "optional": false
        },
        {
          "name": "f1",
          "type": "(...args: A) => R1",
          "optional": false
        }
      ],
      "returnType": "(...args: A) => R7",
      "jsdoc": {
        "description": "This method is like _.flow except that it creates a function that invokes the provided functions from right\nto left.",
        "params": [
          {
            "name": "funcs",
            "description": "Functions to invoke."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "identity",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method returns the first argument provided to it.",
        "params": [
          {
            "name": "value",
            "description": "Any value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "iteratee",
      "parameters": [
        {
          "name": "func",
          "type": "TFunction",
          "optional": false
        }
      ],
      "returnType": "TFunction",
      "jsdoc": {
        "description": "Creates a function that invokes `func` with the arguments of the created\nfunction. If `func` is a property name the created callback returns the\nproperty value for a given element. If `func` is an object the created\ncallback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.",
        "params": [
          {
            "name": "func",
            "description": "The value to convert to a callback."
          }
        ],
        "returns": "Returns the callback.",
        "deprecated": false
      }
    },
    {
      "name": "matches",
      "parameters": [
        {
          "name": "source",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "(value: any) => boolean",
      "jsdoc": {
        "description": "Creates a function that performs a deep comparison between a given object and source, returning true if the\ngiven object has equivalent property values, else false.\n\nNote: This method supports comparing arrays, booleans, Date objects, numbers, Object objects, regexes, and\nstrings. Objects are compared by their own, not inherited, enumerable properties. For comparing a single own\nor inherited property value see _.matchesProperty.",
        "params": [
          {
            "name": "source",
            "description": "The object of property values to match."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "matchesProperty",
      "parameters": [
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "srcValue",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "(value: any) => boolean",
      "jsdoc": {
        "description": "Creates a function that compares the property value of path on a given object to value.\n\nNote: This method supports comparing arrays, booleans, Date objects, numbers, Object objects, regexes, and\nstrings. Objects are compared by their own, not inherited, enumerable properties.",
        "params": [
          {
            "name": "path",
            "description": "The path of the property to get."
          },
          {
            "name": "srcValue",
            "description": "The value to match."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "method",
      "parameters": [
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "(object: any) => any",
      "jsdoc": {
        "description": "Creates a function that invokes the method at path on a given object. Any additional arguments are provided\nto the invoked method.",
        "params": [
          {
            "name": "path",
            "description": "The path of the method to invoke."
          },
          {
            "name": "args",
            "description": "The arguments to invoke the method with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "methodOf",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "(path: PropertyPath) => any",
      "jsdoc": {
        "description": "The opposite of _.method; this method creates a function that invokes the method at a given path on object.\nAny additional arguments are provided to the invoked method.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "args",
            "description": "The arguments to invoke the method with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "mixin",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "Dictionary<(...args: any[]) => any>",
          "optional": false
        },
        {
          "name": "options",
          "type": "MixinOptions",
          "optional": true
        }
      ],
      "returnType": "TObject",
      "jsdoc": {
        "description": "Adds all own enumerable function properties of a source object to the destination object. If object is a\nfunction then methods are added to its prototype as well.\n\nNote: Use _.runInContext to create a pristine lodash function to avoid conflicts caused by modifying\nthe original.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "source",
            "description": "The object of functions to add."
          },
          {
            "name": "options",
            "description": "The options object."
          },
          {
            "description": "Specify whether the functions added are chainable."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "noConflict",
      "parameters": [],
      "returnType": "LoDashStatic",
      "jsdoc": {
        "description": "Reverts the _ variable to its previous value and returns a reference to the lodash function.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "noop",
      "parameters": [
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "A no-operation function that returns undefined regardless of the arguments it receives.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "nthArg",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that returns its nth argument.",
        "params": [
          {
            "name": "n",
            "description": "The index of the argument to return."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "over",
      "parameters": [
        {
          "name": "iteratees",
          "type": "Many<(...args: any[]) => TResult>[]",
          "optional": false
        }
      ],
      "returnType": "(...args: any[]) => TResult[]",
      "jsdoc": {
        "description": "Creates a function that invokes iteratees with the arguments provided to the created function and returns\ntheir results.",
        "params": [
          {
            "name": "iteratees",
            "description": "The iteratees to invoke."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "overEvery",
      "parameters": [
        {
          "name": "predicates",
          "type": "[(arg: T) => arg is Result1, (arg: T) => arg is Result2]",
          "optional": false
        }
      ],
      "returnType": "(arg: T) => arg is Result1 & Result2",
      "jsdoc": {
        "description": "Creates a function that checks if all of the predicates return truthy when invoked with the arguments\nprovided to the created function.",
        "params": [
          {
            "name": "predicates",
            "description": "The predicates to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "overSome",
      "parameters": [
        {
          "name": "predicates",
          "type": "[(arg: T) => arg is Result1, (arg: T) => arg is Result2]",
          "optional": false
        }
      ],
      "returnType": "(arg: T) => arg is Result1 | Result2",
      "jsdoc": {
        "description": "Creates a function that checks if any of the predicates return truthy when invoked with the arguments\nprovided to the created function.",
        "params": [
          {
            "name": "predicates",
            "description": "The predicates to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "property",
      "parameters": [
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        }
      ],
      "returnType": "(obj: TObj) => TResult",
      "jsdoc": {
        "description": "Creates a function that returns the property value at path on a given object.",
        "params": [
          {
            "name": "path",
            "description": "The path of the property to get."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "propertyOf",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "(path: PropertyPath) => any",
      "jsdoc": {
        "description": "The opposite of _.property; this method creates a function that returns the property value at a given path\non object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "range",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        },
        {
          "name": "step",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number[]",
      "jsdoc": {
        "description": "Creates an array of numbers (positive and/or negative) progressing from start up to, but not including, end.\nIf end is not specified itâ€™s set to start with start then set to 0. If end is less than start a zero-length\nrange is created unless a negative step is specified.",
        "params": [
          {
            "name": "start",
            "description": "The start of the range."
          },
          {
            "name": "end",
            "description": "The end of the range."
          },
          {
            "name": "step",
            "description": "The value to increment or decrement by."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "rangeRight",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        },
        {
          "name": "step",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number[]",
      "jsdoc": {
        "description": "This method is like `_.range` except that it populates values in\ndescending order.",
        "params": [
          {
            "name": "start",
            "description": "The start of the range."
          },
          {
            "name": "end",
            "description": "The end of the range."
          },
          {
            "name": "step",
            "description": "The value to increment or decrement by."
          }
        ],
        "returns": "Returns the new array of numbers.",
        "deprecated": false
      }
    },
    {
      "name": "runInContext",
      "parameters": [
        {
          "name": "context",
          "type": "object",
          "optional": true
        }
      ],
      "returnType": "LoDashStatic",
      "jsdoc": {
        "description": "Create a new pristine lodash function using the given context object.",
        "params": [
          {
            "name": "context",
            "description": "The context object."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "stubArray",
      "parameters": [],
      "returnType": "any[]",
      "jsdoc": {
        "description": "This method returns a new empty array.",
        "params": [],
        "returns": "Returns the new empty array.",
        "deprecated": false
      }
    },
    {
      "name": "stubFalse",
      "parameters": [],
      "returnType": "false",
      "jsdoc": {
        "description": "This method returns `false`.",
        "params": [],
        "returns": "Returns `false`.",
        "deprecated": false
      }
    },
    {
      "name": "stubObject",
      "parameters": [],
      "returnType": "any",
      "jsdoc": {
        "description": "This method returns a new empty object.",
        "params": [],
        "returns": "Returns the new empty object.",
        "deprecated": false
      }
    },
    {
      "name": "stubString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "This method returns an empty string.",
        "params": [],
        "returns": "Returns the empty string.",
        "deprecated": false
      }
    },
    {
      "name": "stubTrue",
      "parameters": [],
      "returnType": "true",
      "jsdoc": {
        "description": "This method returns `true`.",
        "params": [],
        "returns": "Returns `true`.",
        "deprecated": false
      }
    },
    {
      "name": "times",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "(num: number) => TResult",
          "optional": false
        }
      ],
      "returnType": "TResult[]",
      "jsdoc": {
        "description": "Invokes the iteratee function n times, returning an array of the results of each invocation. The iteratee\nis invoked with one argument; (index).",
        "params": [
          {
            "name": "n",
            "description": "The number of times to invoke iteratee."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toPath",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Converts `value` to a property path array.",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "returns": "Returns the new property path array.",
        "deprecated": false
      }
    },
    {
      "name": "uniqueId",
      "parameters": [
        {
          "name": "prefix",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Generates a unique ID. If prefix is provided the ID is appended to it.",
        "params": [
          {
            "name": "prefix",
            "description": "The value to prefix the ID with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "_.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "_.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "_.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "_.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "_.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "_.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "_.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "_.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "_.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition â€“ length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "_.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "_.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "_.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "_.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "_.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "_.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.__@iterator@2071",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "_.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null
    },
    {
      "name": "_.chunk",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "size",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[][]",
      "jsdoc": {
        "description": "Creates an array of elements split into groups the length of size. If collection canâ€™t be split evenly, the\nfinal chunk will be the remaining elements.",
        "params": [
          {
            "name": "array",
            "description": "The array to process."
          },
          {
            "name": "size",
            "description": "The length of each chunk."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.compact",
      "parameters": [
        {
          "name": "array",
          "type": "List<T | Falsey>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array with all falsey values removed. The values false, null, 0, 0n, \"\", undefined, and NaN are\nfalsey.",
        "params": [
          {
            "name": "array",
            "description": "The array to compact."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.difference",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of `array` values not included in the other provided arrays using SameValueZero for\nequality comparisons. The order and references of result values are determined by the first array.",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          },
          {
            "name": "values",
            "description": "The arrays of values to exclude."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.differenceBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T1>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T2>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T1 | T2>",
          "optional": false
        }
      ],
      "returnType": "T1[]",
      "jsdoc": {
        "description": "This method is like _.difference except that it accepts iteratee which is invoked for each element\nof array and values to generate the criterion by which they're compared. The order and references\nof result values are determined by the first array. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          },
          {
            "name": "values",
            "description": "The values to exclude."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the new array of filtered values.",
        "deprecated": false
      }
    },
    {
      "name": "_.differenceWith",
      "parameters": [
        {
          "name": "array",
          "type": "List<T1>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T2>",
          "optional": false
        },
        {
          "name": "comparator",
          "type": "Comparator2<T1, T2>",
          "optional": false
        }
      ],
      "returnType": "T1[]",
      "jsdoc": {
        "description": "This method is like _.difference except that it accepts comparator which is invoked to compare elements\nof array to values. The order and references of result values are determined by the first array. The\ncomparator is invoked with two arguments: (arrVal, othVal).",
        "params": [
          {
            "name": "values",
            "description": "The arrays to inspect."
          },
          {
            "name": "comparator",
            "description": "The comparator invoked per element."
          }
        ],
        "returns": "Returns the new array of filtered values.",
        "deprecated": false
      }
    },
    {
      "name": "_.drop",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with n elements dropped from the beginning.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "n",
            "description": "The number of elements to drop."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.dropRight",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with n elements dropped from the end.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "n",
            "description": "The number of elements to drop."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.dropRightWhile",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array excluding elements dropped from the end. Elements are dropped until predicate\nreturns falsey. The predicate is invoked with three arguments: (value, index, array).",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.dropWhile",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array excluding elements dropped from the beginning. Elements are dropped until predicate\nreturns falsey. The predicate is invoked with three arguments: (value, index, array).",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.fill",
      "parameters": [
        {
          "name": "array",
          "type": "any[]",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Fills elements of array with value from start up to, but not including, end.\n\nNote: This method mutates array.",
        "params": [
          {
            "name": "array",
            "description": "The array to fill."
          },
          {
            "name": "value",
            "description": "The value to fill array with."
          },
          {
            "name": "start",
            "description": "The start position."
          },
          {
            "name": "end",
            "description": "The end position."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.findIndex",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIterateeCustom<T, boolean>",
          "optional": true
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like _.find except that it returns the index of the first element predicate returns truthy\nfor instead of the element itself.",
        "params": [
          {
            "name": "array",
            "description": "The array to search."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.findLastIndex",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIterateeCustom<T, boolean>",
          "optional": true
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like _.findIndex except that it iterates over elements of collection from right to left.",
        "params": [
          {
            "name": "array",
            "description": "The array to search."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.first",
      "parameters": [
        {
          "name": "array",
          "type": "readonly [T, ...unknown[]]",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "_.flatten",
      "parameters": [
        {
          "name": "array",
          "type": "List<Many<T>>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Flattens `array` a single level deep.",
        "params": [
          {
            "name": "array",
            "description": "The array to flatten."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.flattenDeep",
      "parameters": [
        {
          "name": "array",
          "type": "ListOfRecursiveArraysOrValues<T>",
          "optional": false
        }
      ],
      "returnType": "Flat<T>[]",
      "jsdoc": {
        "description": "Recursively flattens a nested array.",
        "params": [
          {
            "name": "array",
            "description": "The array to recursively flatten."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.flattenDepth",
      "parameters": [
        {
          "name": "array",
          "type": "ListOfRecursiveArraysOrValues<T>",
          "optional": false
        },
        {
          "name": "depth",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Recursively flatten array up to depth times.",
        "params": [
          {
            "name": "array",
            "description": "The array to recursively flatten."
          },
          {
            "name": "number",
            "description": "The maximum recursion depth."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.fromPairs",
      "parameters": [
        {
          "name": "pairs",
          "type": "List<[PropertyName, T]>",
          "optional": false
        }
      ],
      "returnType": "Dictionary<T>",
      "jsdoc": {
        "description": "The inverse of `_.toPairs`; this method returns an object composed\nfrom key-value `pairs`.",
        "params": [
          {
            "name": "pairs",
            "description": "The key-value pairs."
          }
        ],
        "returns": "Returns the new object.",
        "deprecated": false
      }
    },
    {
      "name": "_.head",
      "parameters": [
        {
          "name": "array",
          "type": "readonly [T, ...unknown[]]",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Gets the first element of array.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.initial",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Gets all but the last element of array.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.intersection",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of unique values that are included in all of the provided arrays using SameValueZero for\nequality comparisons.",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.intersectionBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T1>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T2>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T1 | T2>",
          "optional": false
        }
      ],
      "returnType": "T1[]",
      "jsdoc": {
        "description": "This method is like `_.intersection` except that it accepts `iteratee`\nwhich is invoked for each element of each `arrays` to generate the criterion\nby which uniqueness is computed. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the new array of shared values.",
        "deprecated": false
      }
    },
    {
      "name": "_.intersectionWith",
      "parameters": [
        {
          "name": "array",
          "type": "List<T1>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T2>",
          "optional": false
        },
        {
          "name": "comparator",
          "type": "Comparator2<T1, T2>",
          "optional": false
        }
      ],
      "returnType": "T1[]",
      "jsdoc": {
        "description": "Creates an array of unique `array` values not included in the other\nprovided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons.",
        "params": [
          {
            "name": "values",
            "description": "The arrays to inspect."
          },
          {
            "name": "comparator",
            "description": "The comparator invoked per element."
          }
        ],
        "returns": "Returns the new array of filtered values.",
        "deprecated": false
      }
    },
    {
      "name": "_.join",
      "parameters": [
        {
          "name": "array",
          "type": "List<any>",
          "optional": false
        },
        {
          "name": "separator",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all elements in `array` into a string separated by `separator`.",
        "params": [
          {
            "name": "array",
            "description": "The array to convert."
          },
          {
            "name": "separator",
            "description": "The element separator."
          }
        ],
        "returns": "Returns the joined string.",
        "deprecated": false
      }
    },
    {
      "name": "_.last",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Gets the last element of array.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.nth",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Gets the element at index `n` of `array`. If `n` is negative, the nth element from the end is returned.",
        "params": [
          {
            "name": "array",
            "description": "array The array to query."
          },
          {
            "name": "value",
            "description": "The index of the element to return."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.pull",
      "parameters": [
        {
          "name": "array",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "values",
          "type": "T[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Removes all provided values from array using SameValueZero for equality comparisons.\n\nNote: Unlike _.without, this method mutates array.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "values",
            "description": "The values to remove."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.pullAll",
      "parameters": [
        {
          "name": "array",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.pull` except that it accepts an array of values to remove.\n\n**Note:** Unlike `_.difference`, this method mutates `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "values",
            "description": "The values to remove."
          }
        ],
        "returns": "Returns `array`.",
        "deprecated": false
      }
    },
    {
      "name": "_.pullAllBy",
      "parameters": [
        {
          "name": "array",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T>",
          "optional": true
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.pullAll` except that it accepts `iteratee` which is\ninvoked for each element of `array` and `values` to to generate the criterion\nby which uniqueness is computed. The iteratee is invoked with one argument: (value).\n\n**Note:** Unlike `_.differenceBy`, this method mutates `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "values",
            "description": "The values to remove."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns `array`.",
        "deprecated": false
      }
    },
    {
      "name": "_.pullAllWith",
      "parameters": [
        {
          "name": "array",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T>",
          "optional": true
        },
        {
          "name": "comparator",
          "type": "Comparator<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.pullAll` except that it accepts `comparator` which is\ninvoked to compare elements of array to values. The comparator is invoked with\ntwo arguments: (arrVal, othVal).\n\n**Note:** Unlike `_.differenceWith`, this method mutates `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "values",
            "description": "The values to remove."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns `array`.",
        "deprecated": false
      }
    },
    {
      "name": "_.pullAt",
      "parameters": [
        {
          "name": "array",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "indexes",
          "type": "Many<number>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Removes elements from array corresponding to the given indexes and returns an array of the removed elements.\nIndexes may be specified as an array of indexes or as individual arguments.\n\nNote: Unlike _.at, this method mutates array.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "indexes",
            "description": "The indexes of elements to remove, specified as individual indexes or arrays of indexes."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.remove",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Removes all elements from array that predicate returns truthy for and returns an array of the removed\nelements. The predicate is invoked with three arguments: (value, index, array).\n\nNote: Unlike _.filter, this method mutates array.",
        "params": [
          {
            "name": "array",
            "description": "The array to modify."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.reverse",
      "parameters": [
        {
          "name": "array",
          "type": "TList",
          "optional": false
        }
      ],
      "returnType": "TList",
      "jsdoc": {
        "description": "Reverses `array` so that the first element becomes the last, the second\nelement becomes the second to last, and so on.\n\n**Note:** This method mutates `array` and is based on\n[`Array#reverse`](https://mdn.io/Array/reverse).",
        "params": [],
        "returns": "Returns `array`.",
        "deprecated": false
      }
    },
    {
      "name": "_.sortedIndex",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Uses a binary search to determine the lowest index at which `value` should\nbe inserted into `array` in order to maintain its sort order.",
        "params": [
          {
            "name": "array",
            "description": "The sorted array to inspect."
          },
          {
            "name": "value",
            "description": "The value to evaluate."
          }
        ],
        "returns": "Returns the index at which `value` should be inserted into `array`.",
        "deprecated": false
      }
    },
    {
      "name": "_.sortedIndexBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.sortedIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The sorted array to inspect."
          },
          {
            "name": "value",
            "description": "The value to evaluate."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the index at which `value` should be inserted into `array`.",
        "deprecated": false
      }
    },
    {
      "name": "_.sortedIndexOf",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.indexOf` except that it performs a binary\nsearch on a sorted `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to search."
          },
          {
            "name": "value",
            "description": "The value to search for."
          }
        ],
        "returns": "Returns the index of the matched value, else `-1`.",
        "deprecated": false
      }
    },
    {
      "name": "_.sortedLastIndex",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.sortedIndex` except that it returns the highest\nindex at which `value` should be inserted into `array` in order to\nmaintain its sort order.",
        "params": [
          {
            "name": "array",
            "description": "The sorted array to inspect."
          },
          {
            "name": "value",
            "description": "The value to evaluate."
          }
        ],
        "returns": "Returns the index at which `value` should be inserted into `array`.",
        "deprecated": false
      }
    },
    {
      "name": "_.sortedLastIndexBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.sortedLastIndex` except that it accepts `iteratee`\nwhich is invoked for `value` and each element of `array` to compute their\nsort ranking. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The sorted array to inspect."
          },
          {
            "name": "value",
            "description": "The value to evaluate."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the index at which `value` should be inserted into `array`.",
        "deprecated": false
      }
    },
    {
      "name": "_.sortedLastIndexOf",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.lastIndexOf` except that it performs a binary\nsearch on a sorted `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to search."
          },
          {
            "name": "value",
            "description": "The value to search for."
          }
        ],
        "returns": "Returns the index of the matched value, else `-1`.",
        "deprecated": false
      }
    },
    {
      "name": "_.sortedUniq",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.uniq` except that it's designed and optimized\nfor sorted arrays.",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          }
        ],
        "returns": "Returns the new duplicate free array.",
        "deprecated": false
      }
    },
    {
      "name": "_.sortedUniqBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.uniqBy` except that it's designed and optimized\nfor sorted arrays.",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the new duplicate free array.",
        "deprecated": false
      }
    },
    {
      "name": "_.tail",
      "parameters": [
        {
          "name": "array",
          "type": "readonly [unknown, ...T]",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Gets all but the first element of array.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.take",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with n elements taken from the beginning.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "n",
            "description": "The number of elements to take."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.takeRight",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with n elements taken from the end.",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "n",
            "description": "The number of elements to take."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.takeRightWhile",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with elements taken from the end. Elements are taken until predicate returns\nfalsey. The predicate is invoked with three arguments: (value, index, array).",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.takeWhile",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a slice of array with elements taken from the beginning. Elements are taken until predicate returns\nfalsey. The predicate is invoked with three arguments: (value, index, array).",
        "params": [
          {
            "name": "array",
            "description": "The array to query."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.union",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of unique values, in order, from all of the provided arrays using SameValueZero for\nequality comparisons.",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.unionBy",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.union` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by which\nuniqueness is computed. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.unionWith",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "comparator",
          "type": "Comparator<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.union` except that it accepts `comparator` which\nis invoked to compare elements of `arrays`. The comparator is invoked\nwith two arguments: (arrVal, othVal).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          },
          {
            "name": "comparator",
            "description": "The comparator invoked per element."
          }
        ],
        "returns": "Returns the new array of combined values.",
        "deprecated": false
      }
    },
    {
      "name": "_.uniq",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates a duplicate-free version of an array, using\n[`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\nfor equality comparisons, in which only the first occurrence of each element\nis kept.",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          }
        ],
        "returns": "Returns the new duplicate free array.",
        "deprecated": false
      }
    },
    {
      "name": "_.uniqBy",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.uniq` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nuniqueness is computed. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the new duplicate free array.",
        "deprecated": false
      }
    },
    {
      "name": "_.uniqWith",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "comparator",
          "type": "Comparator<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.uniq` except that it accepts `comparator` which\nis invoked to compare elements of `array`. The comparator is invoked with\ntwo arguments: (arrVal, othVal).",
        "params": [
          {
            "name": "array",
            "description": "The array to inspect."
          },
          {
            "name": "comparator",
            "description": "The comparator invoked per element."
          }
        ],
        "returns": "Returns the new duplicate free array.",
        "deprecated": false
      }
    },
    {
      "name": "_.unzip",
      "parameters": [
        {
          "name": "array",
          "type": "T[][] | List<List<T>>",
          "optional": false
        }
      ],
      "returnType": "T[][]",
      "jsdoc": {
        "description": "This method is like _.zip except that it accepts an array of grouped elements and creates an array\nregrouping the elements to their pre-zip configuration.",
        "params": [
          {
            "name": "array",
            "description": "The array of grouped elements to process."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.unzipWith",
      "parameters": [
        {
          "name": "array",
          "type": "List<List<T>>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "(...values: T[]) => TResult",
          "optional": false
        }
      ],
      "returnType": "TResult[]",
      "jsdoc": {
        "description": "This method is like _.unzip except that it accepts an iteratee to specify how regrouped values should be\ncombined. The iteratee is invoked with four arguments: (accumulator, value, index, group).",
        "params": [
          {
            "name": "array",
            "description": "The array of grouped elements to process."
          },
          {
            "name": "iteratee",
            "description": "The function to combine regrouped values."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.without",
      "parameters": [
        {
          "name": "array",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "values",
          "type": "T[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array excluding all provided values using SameValueZero for equality comparisons.",
        "params": [
          {
            "name": "array",
            "description": "The array to filter."
          },
          {
            "name": "values",
            "description": "The values to exclude."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.xor",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of unique values that is the symmetric difference of the provided arrays.",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.xorBy",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.xor` except that it accepts `iteratee` which is\ninvoked for each element of each `arrays` to generate the criterion by which\nuniqueness is computed. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the new array of values.",
        "deprecated": false
      }
    },
    {
      "name": "_.xorWith",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "comparator",
          "type": "Comparator<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.xor` except that it accepts `comparator` which is\ninvoked to compare elements of `arrays`. The comparator is invoked with\ntwo arguments: (arrVal, othVal).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to inspect."
          },
          {
            "name": "comparator",
            "description": "The comparator invoked per element."
          }
        ],
        "returns": "Returns the new array of values.",
        "deprecated": false
      }
    },
    {
      "name": "_.zip",
      "parameters": [
        {
          "name": "arrays1",
          "type": "List<T1>",
          "optional": false
        },
        {
          "name": "arrays2",
          "type": "List<T2>",
          "optional": false
        }
      ],
      "returnType": "[T1, T2][]",
      "jsdoc": {
        "description": "Creates an array of grouped elements, the first of which contains the first elements of the given arrays,\nthe second of which contains the second elements of the given arrays, and so on.",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to process."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.zipObject",
      "parameters": [
        {
          "name": "props",
          "type": "List<PropertyName>",
          "optional": false
        },
        {
          "name": "values",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "Dictionary<T>",
      "jsdoc": {
        "description": "This method is like _.fromPairs except that it accepts two arrays, one of property\nidentifiers and one of corresponding values.",
        "params": [
          {
            "name": "props",
            "description": "The property names."
          },
          {
            "name": "values",
            "description": "The property values."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.zipObjectDeep",
      "parameters": [
        {
          "name": "paths",
          "type": "List<PropertyPath>",
          "optional": true
        },
        {
          "name": "values",
          "type": "List<any>",
          "optional": true
        }
      ],
      "returnType": "object",
      "jsdoc": {
        "description": "This method is like _.zipObject except that it supports property paths.",
        "params": [
          {
            "name": "paths",
            "description": "The property names."
          },
          {
            "name": "values",
            "description": "The property values."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.zipWith",
      "parameters": [
        {
          "name": "arrays",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "(value1: T) => TResult",
          "optional": false
        }
      ],
      "returnType": "TResult[]",
      "jsdoc": {
        "description": "This method is like _.zip except that it accepts an iteratee to specify how grouped values should be\ncombined. The iteratee is invoked with four arguments: (accumulator, value, index,\ngroup).",
        "params": [
          {
            "name": "arrays",
            "description": "The arrays to process."
          },
          {
            "name": "iteratee",
            "description": "The function to combine grouped values."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.countBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<number>",
      "jsdoc": {
        "description": "Creates an object composed of keys generated from the results of running each element of collection through\niteratee. The corresponding value of each key is the number of times the key was returned by iteratee. The\niteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.each",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ArrayIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "_.eachRight",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ArrayIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "_.every",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIterateeCustom<T, boolean>",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if predicate returns truthy for all elements of collection. Iteration is stopped once predicate\nreturns falsey. The predicate is invoked with three arguments: (value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.filter",
      "parameters": [
        {
          "name": "collection",
          "type": "string",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "StringIterator<boolean>",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Iterates over elements of collection, returning an array of all elements predicate returns truthy for. The\npredicate is invoked with three arguments: (value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.find",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratorTypeGuard<T, S>",
          "optional": false
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "S",
      "jsdoc": {
        "description": "Iterates over elements of collection, returning the first element predicate returns truthy for.\nThe predicate is invoked with three arguments: (value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to search."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.findLast",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIteratorTypeGuard<T, S>",
          "optional": false
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "S",
      "jsdoc": {
        "description": "This method is like _.find except that it iterates over elements of a collection from\nright to left.",
        "params": [
          {
            "name": "collection",
            "description": "Searches for a value in this list."
          },
          {
            "name": "predicate",
            "description": "The function called per iteration."
          },
          {
            "name": "fromIndex",
            "description": "The index to search from."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.flatMap",
      "parameters": [
        {
          "name": "collection",
          "type": "Dictionary<Many<T>> | NumericDictionary<Many<T>>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of flattened values by running each element in collection through iteratee\nand concating its result to the other mapped values. The iteratee is invoked with three arguments:\n(value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.flatMapDeep",
      "parameters": [
        {
          "name": "collection",
          "type": "Dictionary<T | ListOfRecursiveArraysOrValues<T>> | NumericDictionary<T | ListOfRecursiveArraysOrValues<T>>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.flatMap` except that it recursively flattens the\nmapped results.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "returns": "Returns the new flattened array.",
        "deprecated": false
      }
    },
    {
      "name": "_.flatMapDepth",
      "parameters": [
        {
          "name": "collection",
          "type": "Dictionary<T | ListOfRecursiveArraysOrValues<T>> | NumericDictionary<T | ListOfRecursiveArraysOrValues<T>>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.flatMap` except that it recursively flattens the\nmapped results up to `depth` times.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          },
          {
            "name": "depth",
            "description": "The maximum recursion depth."
          }
        ],
        "returns": "Returns the new flattened array.",
        "deprecated": false
      }
    },
    {
      "name": "_.forEach",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ArrayIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Iterates over elements of collection invoking iteratee for each element. The iteratee is invoked with three arguments:\n(value, index|key, collection). Iteratee functions may exit iteration early by explicitly returning false.\n\nNote: As with other \"Collections\" methods, objects with a \"length\" property are iterated like arrays. To\navoid this behavior _.forIn or _.forOwn may be used for object iteration.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.forEachRight",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ArrayIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like _.forEach except that it iterates over elements of collection from right to left.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function called per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.groupBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<T[]>",
      "jsdoc": {
        "description": "Creates an object composed of keys generated from the results of running each element of collection through\niteratee. The corresponding value of each key is an array of the elements responsible for generating the\nkey. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.invokeMap",
      "parameters": [
        {
          "name": "collection",
          "type": "object",
          "optional": false
        },
        {
          "name": "methodName",
          "type": "string",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "any[]",
      "jsdoc": {
        "description": "Invokes the method named by methodName on each element in the collection returning\nan array of the results of each invoked method. Additional arguments will be provided\nto each invoked method. If methodName is a function it will be invoked for, and this\nbound to, each element in the collection.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "methodName",
            "description": "The name of the method to invoke."
          },
          {
            "name": "args",
            "description": "Arguments to invoke the method with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.keyBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIterateeCustom<T, PropertyName>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<T>",
      "jsdoc": {
        "description": "Creates an object composed of keys generated from the results of running each element of collection through\niteratee. The corresponding value of each key is the last element responsible for generating the key. The\niteratee function is invoked with one argument: (value).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.map",
      "parameters": [
        {
          "name": "collection",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "TupleIterator<T, TResult>",
          "optional": false
        }
      ],
      "returnType": "{ [K in keyof T]: TResult; }",
      "jsdoc": {
        "description": "Creates an array of values by running each element in collection through iteratee. The iteratee is\ninvoked with three arguments: (value, index|key, collection).\n\nMany lodash methods are guarded to work as iteratees for methods like _.every, _.filter, _.map, _.mapValues,\n_.reject, and _.some.\n\nThe guarded methods are:\nary, callback, chunk, clone, create, curry, curryRight, drop, dropRight, every, fill, flatten, invert, max,\nmin, parseInt, slice, sortBy, take, takeRight, template, trim, trimLeft, trimRight, trunc, random, range,\nsample, some, sum, uniq, and words",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.orderBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratees",
          "type": "Many<ListIterator<T, unknown>>",
          "optional": true
        },
        {
          "name": "orders",
          "type": "Many<boolean | \"asc\" | \"desc\">",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "This method is like `_.sortBy` except that it allows specifying the sort\norders of the iteratees to sort by. If `orders` is unspecified, all values\nare sorted in ascending order. Otherwise, specify an order of \"desc\" for\ndescending or \"asc\" for ascending sort order of corresponding values.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratees",
            "description": "The iteratees to sort by."
          },
          {
            "name": "orders",
            "description": "The sort orders of `iteratees`."
          },
          {
            "name": "guard",
            "description": "Enables use as an iteratee for functions like `_.reduce`."
          }
        ],
        "returns": "Returns the new sorted array.",
        "deprecated": false
      }
    },
    {
      "name": "_.partition",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "callback",
          "type": "ValueIteratorTypeGuard<T, U>",
          "optional": false
        }
      ],
      "returnType": "[U[], Exclude<T, U>[]]",
      "jsdoc": {
        "description": "Creates an array of elements split into two groups, the first of which contains elements predicate returns truthy for,\nwhile the second of which contains elements predicate returns falsey for.\nThe predicate is invoked with three arguments: (value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "callback",
            "description": "The function called per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.reduce",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "callback",
          "type": "MemoListIterator<T, TResult, T[]>",
          "optional": false
        },
        {
          "name": "accumulator",
          "type": "TResult",
          "optional": false
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "Reduces a collection to a value which is the accumulated result of running each\nelement in the collection through the callback, where each successive callback execution\nconsumes the return value of the previous execution. If accumulator is not provided the\nfirst element of the collection will be used as the initial accumulator value. The callback\nis invoked with four arguments: (accumulator, value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "callback",
            "description": "The function called per iteration."
          },
          {
            "name": "accumulator",
            "description": "Initial value of the accumulator."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.reduceRight",
      "parameters": [
        {
          "name": "collection",
          "type": "T[]",
          "optional": false
        },
        {
          "name": "callback",
          "type": "MemoListIterator<T, TResult, T[]>",
          "optional": false
        },
        {
          "name": "accumulator",
          "type": "TResult",
          "optional": false
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "This method is like _.reduce except that it iterates over elements of a collection from\nright to left.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "callback",
            "description": "The function called per iteration."
          },
          {
            "name": "accumulator",
            "description": "Initial value of the accumulator."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.reject",
      "parameters": [
        {
          "name": "collection",
          "type": "string",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "StringIterator<boolean>",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "The opposite of _.filter; this method returns the elements of collection that predicate does not return\ntruthy for.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.sample",
      "parameters": [
        {
          "name": "collection",
          "type": "readonly [T, ...T[]]",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Gets a random element from collection.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to sample."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.sampleSize",
      "parameters": [
        {
          "name": "collection",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Gets n random elements at unique keys from collection up to the size of collection.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to sample."
          },
          {
            "name": "n",
            "description": "The number of elements to sample."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.shuffle",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of shuffled values, using a version of the Fisher-Yates shuffle.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to shuffle."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.size",
      "parameters": [
        {
          "name": "collection",
          "type": "string | object",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Gets the size of collection by returning its length for array-like values or the number of own enumerable\nproperties for objects.",
        "params": [
          {
            "name": "collection",
            "description": "The collection to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.some",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ListIterateeCustom<T, boolean>",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if predicate returns truthy for any element of collection. Iteration is stopped once predicate\nreturns truthy. The predicate is invoked with three arguments: (value, index|key, collection).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.sortBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratees",
          "type": "Many<ListIteratee<T>>[]",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of elements, sorted in ascending order by the results of\nrunning each element in a collection through each iteratee. This method\nperforms a stable sort, that is, it preserves the original sort order of\nequal elements. The iteratees are invoked with one argument: (value).",
        "params": [
          {
            "name": "collection",
            "description": "The collection to iterate over."
          },
          {
            "name": "iteratees",
            "description": "The iteratees to sort by, specified individually or in arrays."
          }
        ],
        "returns": "Returns the new sorted array.",
        "deprecated": false
      }
    },
    {
      "name": "_.now",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null
    },
    {
      "name": "_.after",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "func",
          "type": "TFunc",
          "optional": false
        }
      ],
      "returnType": "TFunc",
      "jsdoc": {
        "description": "The opposite of _.before; this method creates a function that invokes func once itâ€™s called n or more times.",
        "params": [
          {
            "name": "n",
            "description": "The number of calls before func is invoked."
          },
          {
            "name": "func",
            "description": "The function to restrict."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.ary",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that accepts up to n arguments ignoring any additional arguments.",
        "params": [
          {
            "name": "func",
            "description": "The function to cap arguments for."
          },
          {
            "name": "n",
            "description": "The arity cap."
          }
        ],
        "returns": "Returns the new function.",
        "deprecated": false
      }
    },
    {
      "name": "_.before",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "func",
          "type": "TFunc",
          "optional": false
        }
      ],
      "returnType": "TFunc",
      "jsdoc": {
        "description": "Creates a function that invokes func, with the this binding and arguments of the created function, while\nitâ€™s called less than n times. Subsequent calls to the created function return the result of the last func\ninvocation.",
        "params": [
          {
            "name": "n",
            "description": "The number of calls at which func is no longer invoked."
          },
          {
            "name": "func",
            "description": "The function to restrict."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.bind",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": false
        },
        {
          "name": "partials",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that invokes func with the this binding of thisArg and prepends any additional _.bind\narguments to those provided to the bound function.\n\nThe _.bind.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder for\npartially applied arguments.\n\nNote: Unlike native Function#bind this method does not set the \"length\" property of bound functions.",
        "params": [
          {
            "name": "func",
            "description": "The function to bind."
          },
          {
            "name": "thisArg",
            "description": "The this binding of func."
          },
          {
            "name": "partials",
            "description": "The arguments to be partially applied."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.placeholder",
      "parameters": [
        {
          "name": "value",
          "type": "TrapAny",
          "optional": false
        }
      ],
      "returnType": "Collection<any> & Function<any> & Object<any> & Primitive<any> & String<string>",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "_.bindKey",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        },
        {
          "name": "key",
          "type": "string",
          "optional": false
        },
        {
          "name": "partials",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that invokes the method at object[key] and prepends any additional _.bindKey arguments\nto those provided to the bound function.\n\nThis method differs from _.bind by allowing bound functions to reference methods that may be redefined\nor donâ€™t yet exist. See Peter Michauxâ€™s article for more details.\n\nThe _.bindKey.placeholder value, which defaults to _ in monolithic builds, may be used as a placeholder\nfor partially applied arguments.",
        "params": [
          {
            "name": "object",
            "description": "The object the method belongs to."
          },
          {
            "name": "key",
            "description": "The key of the method."
          },
          {
            "name": "partials",
            "description": "The arguments to be partially applied."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.curry",
      "parameters": [
        {
          "name": "func",
          "type": "(t1: T1) => R",
          "optional": false
        },
        {
          "name": "arity",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "CurriedFunction1<T1, R>",
      "jsdoc": null
    },
    {
      "name": "_.curryRight",
      "parameters": [
        {
          "name": "func",
          "type": "(t1: T1) => R",
          "optional": false
        },
        {
          "name": "arity",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "RightCurriedFunction1<T1, R>",
      "jsdoc": null
    },
    {
      "name": "_.debounce",
      "parameters": [
        {
          "name": "func",
          "type": "T",
          "optional": false
        },
        {
          "name": "wait",
          "type": "number",
          "optional": false
        },
        {
          "name": "options",
          "type": "DebounceSettingsLeading",
          "optional": false
        }
      ],
      "returnType": "DebouncedFuncLeading<T>",
      "jsdoc": {
        "description": "Creates a debounced function that delays invoking func until after wait milliseconds have elapsed since\nthe last time the debounced function was invoked. The debounced function comes with a cancel method to\ncancel delayed invocations and a flush method to immediately invoke them. Provide an options object to\nindicate that func should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent\ncalls to the debounced function return the result of the last func invocation.\n\nNote: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only\nif the the debounced function is invoked more than once during the wait timeout.\n\nSee David Corbachoâ€™s article for details over the differences between _.debounce and _.throttle.",
        "params": [
          {
            "name": "func",
            "description": "The function to debounce."
          },
          {
            "name": "wait",
            "description": "The number of milliseconds to delay."
          },
          {
            "name": "options",
            "description": "The options object."
          },
          {
            "description": "Specify invoking on the leading edge of the timeout."
          },
          {
            "description": "The maximum time func is allowed to be delayed before itâ€™s invoked."
          },
          {
            "description": "Specify invoking on the trailing edge of the timeout."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.defer",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Defers invoking the func until the current call stack has cleared. Any additional arguments are provided to\nfunc when itâ€™s invoked.",
        "params": [
          {
            "name": "func",
            "description": "The function to defer."
          },
          {
            "name": "args",
            "description": "The arguments to invoke the function with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.delay",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "wait",
          "type": "number",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Invokes func after wait milliseconds. Any additional arguments are provided to func when itâ€™s invoked.",
        "params": [
          {
            "name": "func",
            "description": "The function to delay."
          },
          {
            "name": "wait",
            "description": "The number of milliseconds to delay invocation."
          },
          {
            "name": "args",
            "description": "The arguments to invoke the function with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.flip",
      "parameters": [
        {
          "name": "func",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Creates a function that invokes `func` with arguments reversed.",
        "params": [
          {
            "name": "func",
            "description": "The function to flip arguments for."
          }
        ],
        "returns": "Returns the new function.",
        "deprecated": false
      }
    },
    {
      "name": "_.memoize",
      "parameters": [
        {
          "name": "func",
          "type": "T",
          "optional": false
        },
        {
          "name": "resolver",
          "type": "(...args: Parameters<T>) => any",
          "optional": true
        }
      ],
      "returnType": "T & MemoizedFunction",
      "jsdoc": {
        "description": "Creates a function that memoizes the result of func. If resolver is provided it determines the cache key for\nstoring the result based on the arguments provided to the memoized function. By default, the first argument\nprovided to the memoized function is coerced to a string and used as the cache key. The func is invoked with\nthe this binding of the memoized function.",
        "params": [
          {
            "name": "func",
            "description": "The function to have its output memoized."
          },
          {
            "name": "resolver",
            "description": "The function to resolve the cache key."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.negate",
      "parameters": [
        {
          "name": "predicate",
          "type": "(...args: T) => boolean",
          "optional": false
        }
      ],
      "returnType": "(...args: T) => boolean",
      "jsdoc": {
        "description": "Creates a function that negates the result of the predicate func. The func predicate is invoked with\nthe this binding and arguments of the created function.",
        "params": [
          {
            "name": "predicate",
            "description": "The predicate to negate."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.once",
      "parameters": [
        {
          "name": "func",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Creates a function that is restricted to invoking func once. Repeat calls to the function return the value\nof the first call. The func is invoked with the this binding and arguments of the created function.",
        "params": [
          {
            "name": "func",
            "description": "The function to restrict."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.overArgs",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "transforms",
          "type": "Many<(...args: any[]) => any>[]",
          "optional": false
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that runs each argument through a corresponding transform function.",
        "params": [
          {
            "name": "func",
            "description": "The function to wrap."
          },
          {
            "name": "transforms",
            "description": "The functions to transform arguments, specified as individual functions or arrays\nof functions."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.partial",
      "parameters": [
        {
          "name": "func",
          "type": "Function2<T1, T2, R>",
          "optional": false
        },
        {
          "name": "plc1",
          "type": "LoDashStatic",
          "optional": false
        },
        {
          "name": "arg2",
          "type": "T2",
          "optional": false
        }
      ],
      "returnType": "Function1<T1, R>",
      "jsdoc": {
        "description": "Creates a function that, when called, invokes func with any additional partial arguments\nprepended to those provided to the new function. This method is similar to _.bind except\nit does not alter the this binding.",
        "params": [
          {
            "name": "func",
            "description": "The function to partially apply arguments to."
          },
          {
            "name": "args",
            "description": "Arguments to be partially applied."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.partialRight",
      "parameters": [
        {
          "name": "func",
          "type": "Function0<R>",
          "optional": false
        }
      ],
      "returnType": "Function0<R>",
      "jsdoc": {
        "description": "This method is like _.partial except that partial arguments are appended to those provided\nto the new function.",
        "params": [
          {
            "name": "func",
            "description": "The function to partially apply arguments to."
          },
          {
            "name": "args",
            "description": "Arguments to be partially applied."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.rearg",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "indexes",
          "type": "Many<number>[]",
          "optional": false
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that invokes func with arguments arranged according to the specified indexes where the\nargument value at the first index is provided as the first argument, the argument value at the second index\nis provided as the second argument, and so on.",
        "params": [
          {
            "name": "func",
            "description": "The function to rearrange arguments for."
          },
          {
            "name": "indexes",
            "description": "The arranged argument indexes, specified as individual indexes or arrays of indexes."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.rest",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => any",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that invokes func with the this binding of the created function and arguments from start\nand beyond provided as an array.\n\nNote: This method is based on the rest parameter.",
        "params": [
          {
            "name": "func",
            "description": "The function to apply a rest parameter to."
          },
          {
            "name": "start",
            "description": "The start position of the rest parameter."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.spread",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => TResult",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "(...args: any[]) => TResult",
      "jsdoc": {
        "description": "Creates a function that invokes func with the this binding of the created function and an array of arguments\nmuch like Function#apply.\n\nNote: This method is based on the spread operator.",
        "params": [
          {
            "name": "func",
            "description": "The function to spread arguments over."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.throttle",
      "parameters": [
        {
          "name": "func",
          "type": "T",
          "optional": false
        },
        {
          "name": "wait",
          "type": "number",
          "optional": true
        },
        {
          "name": "options",
          "type": "ThrottleSettingsLeading",
          "optional": true
        }
      ],
      "returnType": "DebouncedFuncLeading<T>",
      "jsdoc": {
        "description": "Creates a throttled function that only invokes func at most once per every wait milliseconds. The throttled\nfunction comes with a cancel method to cancel delayed invocations and a flush method to immediately invoke\nthem. Provide an options object to indicate that func should be invoked on the leading and/or trailing edge\nof the wait timeout. Subsequent calls to the throttled function return the result of the last func call.\n\nNote: If leading and trailing options are true, func is invoked on the trailing edge of the timeout only if\nthe the throttled function is invoked more than once during the wait timeout.",
        "params": [
          {
            "name": "func",
            "description": "The function to throttle."
          },
          {
            "name": "wait",
            "description": "The number of milliseconds to throttle invocations to."
          },
          {
            "name": "options",
            "description": "The options object."
          },
          {
            "description": "Specify invoking on the leading edge of the timeout."
          },
          {
            "description": "Specify invoking on the trailing edge of the timeout."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.unary",
      "parameters": [
        {
          "name": "func",
          "type": "(arg1: T, ...args: any[]) => TResult",
          "optional": false
        }
      ],
      "returnType": "(arg1: T) => TResult",
      "jsdoc": {
        "description": "Creates a function that accepts up to one argument, ignoring any\nadditional arguments.",
        "params": [
          {
            "name": "func",
            "description": "The function to cap arguments for."
          }
        ],
        "returns": "Returns the new function.",
        "deprecated": false
      }
    },
    {
      "name": "_.wrap",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "wrapper",
          "type": "(value: T, ...args: TArgs[]) => TResult",
          "optional": false
        }
      ],
      "returnType": "(...args: TArgs[]) => TResult",
      "jsdoc": {
        "description": "Creates a function that provides value to the wrapper function as its first argument. Any additional\narguments provided to the function are appended to those provided to the wrapper function. The wrapper is\ninvoked with the this binding of the created function.",
        "params": [
          {
            "name": "value",
            "description": "The value to wrap."
          },
          {
            "name": "wrapper",
            "description": "The wrapper function."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.castArray",
      "parameters": [
        {
          "name": "value",
          "type": "Many<T>",
          "optional": true
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Casts value as an array if itâ€™s not one.",
        "params": [
          {
            "name": "value",
            "description": "The value to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.clone",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Creates a shallow clone of value.\n\nNote: This method is loosely based on the structured clone algorithm and supports cloning arrays,\narray buffers, booleans, date objects, maps, numbers, Object objects, regexes, sets, strings, symbols,\nand typed arrays. The own enumerable properties of arguments objects are cloned as plain objects. An empty\nobject is returned for uncloneable values such as error objects, functions, DOM nodes, and WeakMaps.",
        "params": [
          {
            "name": "value",
            "description": "The value to clone."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.cloneDeep",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like _.clone except that it recursively clones value.",
        "params": [
          {
            "name": "value",
            "description": "The value to recursively clone."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.cloneDeepWith",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "CloneDeepWithCustomizer<T>",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "This method is like _.cloneWith except that it recursively clones value.",
        "params": [
          {
            "name": "value",
            "description": "The value to recursively clone."
          },
          {
            "name": "customizer",
            "description": "The function to customize cloning."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.cloneWith",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "CloneWithCustomizer<T, TResult>",
          "optional": false
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "This method is like _.clone except that it accepts customizer which is invoked to produce the cloned value.\nIf customizer returns undefined cloning is handled by the method instead.",
        "params": [
          {
            "name": "value",
            "description": "The value to clone."
          },
          {
            "name": "customizer",
            "description": "The function to customize cloning."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.conformsTo",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "source",
          "type": "ConformsPredicateObject<T>",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if object conforms to source by invoking the predicate properties of source with the\ncorresponding property values of object.\n\nNote: This method is equivalent to _.conforms when source is partially applied.",
        "deprecated": false
      }
    },
    {
      "name": "_.eq",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\ncomparison between two values to determine if they are equivalent.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "returns": "Returns `true` if the values are equivalent, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.gt",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is greater than other.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.gte",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is greater than or equal to other.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isArguments",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as an arguments object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isArray",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as an Array object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isArrayBuffer",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as an ArrayBuffer object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isArrayLike",
      "parameters": [
        {
          "name": "t",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is array-like. A value is considered array-like if it's\nnot a function and has a `value.length` that's an integer greater than or\nequal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is array-like, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isArrayLikeObject",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This method is like `_.isArrayLike` except that it also checks if `value`\nis an object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is an array-like object, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isBoolean",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a boolean primitive or object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isBuffer",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a buffer.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isDate",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a Date object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isElement",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a DOM element.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isEmpty",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is empty. A value is considered empty unless itâ€™s an arguments object, array, string, or\njQuery-like collection with a length greater than 0 or an object with own enumerable properties.",
        "params": [
          {
            "name": "value",
            "description": "The value to inspect."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isEqual",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Performs a deep comparison between two values to determine if they are\nequivalent.\n\n**Note:** This method supports comparing arrays, array buffers, booleans,\ndate objects, error objects, maps, numbers, `Object` objects, regexes,\nsets, strings, symbols, and typed arrays. `Object` objects are compared\nby their own, not inherited, enumerable properties. Functions and DOM\nnodes are **not** supported.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "returns": "Returns `true` if the values are equivalent, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isEqualWith",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "IsEqualCustomizer",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This method is like `_.isEqual` except that it accepts `customizer` which is\ninvoked to compare values. If `customizer` returns `undefined` comparisons are\nhandled by the method instead. The `customizer` is invoked with up to seven arguments:\n(objValue, othValue [, index|key, object, other, stack]).",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          },
          {
            "name": "customizer",
            "description": "The function to customize comparisons."
          }
        ],
        "returns": "Returns `true` if the values are equivalent, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isError",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, or URIError\nobject.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isFinite",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a finite primitive number.\n\nNote: This method is based on Number.isFinite.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isFunction",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a callable function.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isInteger",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is an integer.\n\n**Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is an integer, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isLength",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is a valid array-like length.\n\n**Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is a valid length, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isMap",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a Map object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns true if value is correctly classified, else false.",
        "deprecated": false
      }
    },
    {
      "name": "_.isMatch",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        },
        {
          "name": "source",
          "type": "object",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Performs a deep comparison between `object` and `source` to determine if\n`object` contains equivalent property values.\n\n**Note:** This method supports comparing the same values as `_.isEqual`.",
        "params": [
          {
            "name": "object",
            "description": "The object to inspect."
          },
          {
            "name": "source",
            "description": "The object of property values to match."
          }
        ],
        "returns": "Returns `true` if `object` is a match, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isMatchWith",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        },
        {
          "name": "source",
          "type": "object",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "isMatchWithCustomizer",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This method is like `_.isMatch` except that it accepts `customizer` which\nis invoked to compare values. If `customizer` returns `undefined` comparisons\nare handled by the method instead. The `customizer` is invoked with three\narguments: (objValue, srcValue, index|key, object, source).",
        "params": [
          {
            "name": "object",
            "description": "The object to inspect."
          },
          {
            "name": "source",
            "description": "The object of property values to match."
          },
          {
            "name": "customizer",
            "description": "The function to customize comparisons."
          }
        ],
        "returns": "Returns `true` if `object` is a match, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isNaN",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is NaN.\n\nNote: This method is not the same as isNaN which returns true for undefined and other non-numeric values.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isNative",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a native function.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isNil",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is `null` or `undefined`.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is nullish, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isNull",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is null.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isNumber",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a Number primitive or object.\n\nNote: To exclude Infinity, -Infinity, and NaN, which are classified as numbers, use the _.isFinite method.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isObject",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is the language type of Object. (e.g. arrays, functions, objects, regexes, new Number(0),\nand new String(''))",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isObjectLike",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is object-like. A value is object-like if it's not `null`\nand has a `typeof` result of \"object\".",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is object-like, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isPlainObject",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is a plain object, that is, an object created by the Object constructor or one with a\n[[Prototype]] of null.\n\nNote: This method assumes objects created by the Object constructor have no inherited enumerable properties.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isRegExp",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a RegExp object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isSafeInteger",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754\ndouble precision number which isn't the result of a rounded unsafe integer.\n\n**Note:** This method is based on [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is a safe integer, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isSet",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a Set object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns true if value is correctly classified, else false.",
        "deprecated": false
      }
    },
    {
      "name": "_.isString",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a String primitive or object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isSymbol",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `value` is classified as a `Symbol` primitive or object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns `true` if `value` is correctly classified, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.isTypedArray",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a typed array.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isUndefined",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is undefined.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.isWeakMap",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a WeakMap object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns true if value is correctly classified, else false.",
        "deprecated": false
      }
    },
    {
      "name": "_.isWeakSet",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is classified as a WeakSet object.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "returns": "Returns true if value is correctly classified, else false.",
        "deprecated": false
      }
    },
    {
      "name": "_.lt",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is less than other.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.lte",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "other",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if value is less than or equal to other.",
        "params": [
          {
            "name": "value",
            "description": "The value to compare."
          },
          {
            "name": "other",
            "description": "The other value to compare."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toArray",
      "parameters": [
        {
          "name": "value",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Converts value to an array.",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toFinite",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts `value` to a finite number.",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "returns": "Returns the converted number.",
        "deprecated": false
      }
    },
    {
      "name": "_.toInteger",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts `value` to an integer.\n\n**Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "returns": "Returns the converted integer.",
        "deprecated": false
      }
    },
    {
      "name": "_.toLength",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts `value` to an integer suitable for use as the length of an\narray-like object.\n\n**Note:** This method is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toNumber",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts `value` to a number.",
        "params": [
          {
            "name": "value",
            "description": "The value to process."
          }
        ],
        "returns": "Returns the number.",
        "deprecated": false
      }
    },
    {
      "name": "_.toPlainObject",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Converts value to a plain object flattening inherited enumerable properties of value to own properties\nof the plain object.",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toSafeInteger",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts `value` to a safe integer. A safe integer can be compared and\nrepresented correctly.",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "returns": "Returns the converted integer.",
        "deprecated": false
      }
    },
    {
      "name": "_.add",
      "parameters": [
        {
          "name": "augend",
          "type": "number",
          "optional": false
        },
        {
          "name": "addend",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Adds two numbers.",
        "params": [
          {
            "name": "augend",
            "description": "The first number to add."
          },
          {
            "name": "addend",
            "description": "The second number to add."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.ceil",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Calculates n rounded up to precision.",
        "params": [
          {
            "name": "n",
            "description": "The number to round up."
          },
          {
            "name": "precision",
            "description": "The precision to round up to."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.divide",
      "parameters": [
        {
          "name": "dividend",
          "type": "number",
          "optional": false
        },
        {
          "name": "divisor",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Divide two numbers.",
        "params": [
          {
            "name": "dividend",
            "description": "The first number in a division."
          },
          {
            "name": "divisor",
            "description": "The second number in a division."
          }
        ],
        "returns": "Returns the quotient.",
        "deprecated": false
      }
    },
    {
      "name": "_.floor",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Calculates n rounded down to precision.",
        "params": [
          {
            "name": "n",
            "description": "The number to round down."
          },
          {
            "name": "precision",
            "description": "The precision to round down to."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.max",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Computes the maximum value of `array`. If `array` is empty or falsey\n`undefined` is returned.",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          }
        ],
        "returns": "Returns the maximum value.",
        "deprecated": false
      }
    },
    {
      "name": "_.maxBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like `_.max` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the maximum value.",
        "deprecated": false
      }
    },
    {
      "name": "_.mean",
      "parameters": [
        {
          "name": "collection",
          "type": "List<any>",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Computes the mean of the values in `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          }
        ],
        "returns": "Returns the mean.",
        "deprecated": false
      }
    },
    {
      "name": "_.meanBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Computes the mean of the provided properties of the objects in the `array`",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the mean.",
        "deprecated": false
      }
    },
    {
      "name": "_.min",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Computes the minimum value of `array`. If `array` is empty or falsey\n`undefined` is returned.",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          }
        ],
        "returns": "Returns the minimum value.",
        "deprecated": false
      }
    },
    {
      "name": "_.minBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like `_.min` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the criterion by which\nthe value is ranked. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the minimum value.",
        "deprecated": false
      }
    },
    {
      "name": "_.multiply",
      "parameters": [
        {
          "name": "multiplier",
          "type": "number",
          "optional": false
        },
        {
          "name": "multiplicand",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Multiply two numbers.",
        "params": [
          {
            "name": "multiplier",
            "description": "The first number in a multiplication."
          },
          {
            "name": "multiplicand",
            "description": "The second number in a multiplication."
          }
        ],
        "returns": "Returns the product.",
        "deprecated": false
      }
    },
    {
      "name": "_.round",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Calculates n rounded to precision.",
        "params": [
          {
            "name": "n",
            "description": "The number to round."
          },
          {
            "name": "precision",
            "description": "The precision to round to."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.subtract",
      "parameters": [
        {
          "name": "minuend",
          "type": "number",
          "optional": false
        },
        {
          "name": "subtrahend",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Subtract two numbers.",
        "params": [
          {
            "name": "minuend",
            "description": "The first number in a subtraction."
          },
          {
            "name": "subtrahend",
            "description": "The second number in a subtraction."
          }
        ],
        "returns": "Returns the difference.",
        "deprecated": false
      }
    },
    {
      "name": "_.sum",
      "parameters": [
        {
          "name": "collection",
          "type": "List<any>",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Computes the sum of the values in `array`.",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          }
        ],
        "returns": "Returns the sum.",
        "deprecated": false
      }
    },
    {
      "name": "_.sumBy",
      "parameters": [
        {
          "name": "collection",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "string | ((value: T) => number)",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This method is like `_.sum` except that it accepts `iteratee` which is\ninvoked for each element in `array` to generate the value to be summed.\nThe iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "array",
            "description": "The array to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The iteratee invoked per element."
          }
        ],
        "returns": "Returns the sum.",
        "deprecated": false
      }
    },
    {
      "name": "_.clamp",
      "parameters": [
        {
          "name": "number",
          "type": "number",
          "optional": false
        },
        {
          "name": "lower",
          "type": "number",
          "optional": false
        },
        {
          "name": "upper",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Clamps `number` within the inclusive `lower` and `upper` bounds.",
        "params": [
          {
            "name": "number",
            "description": "The number to clamp."
          },
          {
            "name": "lower",
            "description": "The lower bound."
          },
          {
            "name": "upper",
            "description": "The upper bound."
          },
          {
            "name": "number",
            "description": "The number to clamp."
          },
          {
            "name": "lower",
            "description": "The lower bound."
          },
          {
            "name": "upper",
            "description": "The upper bound."
          }
        ],
        "returns": "Returns the clamped number.",
        "deprecated": false
      }
    },
    {
      "name": "_.inRange",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if n is between start and up to but not including, end. If end is not specified itâ€™s set to start\nwith start then set to 0.",
        "params": [
          {
            "name": "n",
            "description": "The number to check."
          },
          {
            "name": "start",
            "description": "The start of the range."
          },
          {
            "name": "end",
            "description": "The end of the range."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.random",
      "parameters": [
        {
          "name": "floating",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Produces a random number between min and max (inclusive). If only one argument is provided a number between\n0 and the given number is returned. If floating is true, or either min or max are floats, a floating-point\nnumber is returned instead of an integer.",
        "params": [
          {
            "name": "min",
            "description": "The minimum possible value."
          },
          {
            "name": "max",
            "description": "The maximum possible value."
          },
          {
            "name": "floating",
            "description": "Specify returning a floating-point number."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.assign",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "Assigns own enumerable properties of source objects to the destination\nobject. Source objects are applied from left to right. Subsequent sources\noverwrite property assignments of previous sources.\n\n**Note:** This method mutates `object` and is loosely based on\n[`Object.assign`](https://mdn.io/Object/assign).",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "_.assignIn",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "This method is like `_.assign` except that it iterates over own and\ninherited source properties.\n\n**Note:** This method mutates `object`.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "_.assignInWith",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "AssignCustomizer",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "This method is like `_.assignIn` except that it accepts `customizer` which\nis invoked to produce the assigned values. If `customizer` returns `undefined`\nassignment is handled by the method instead. The `customizer` is invoked\nwith five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          },
          {
            "name": "customizer",
            "description": "The function to customize assigned values."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "_.assignWith",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "AssignCustomizer",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "This method is like `_.assign` except that it accepts `customizer` which\nis invoked to produce the assigned values. If `customizer` returns `undefined`\nassignment is handled by the method instead. The `customizer` is invoked\nwith five arguments: (objValue, srcValue, key, object, source).\n\n**Note:** This method mutates `object`.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          },
          {
            "name": "customizer",
            "description": "The function to customize assigned values."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "_.create",
      "parameters": [
        {
          "name": "prototype",
          "type": "T",
          "optional": false
        },
        {
          "name": "properties",
          "type": "U",
          "optional": true
        }
      ],
      "returnType": "T & U",
      "jsdoc": {
        "description": "Creates an object that inherits from the given prototype object. If a properties object is provided its own\nenumerable properties are assigned to the created object.",
        "params": [
          {
            "name": "prototype",
            "description": "The object to inherit from."
          },
          {
            "name": "properties",
            "description": "The properties to assign to the object."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.defaults",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        }
      ],
      "returnType": "NonNullable<TSource & TObject>",
      "jsdoc": {
        "description": "Assigns own enumerable properties of source object(s) to the destination object for all destination\nproperties that resolve to undefined. Once a property is set, additional values of the same property are\nignored.\n\nNote: This method mutates object.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.defaultsDeep",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        },
        {
          "name": "sources",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "This method is like _.defaults except that it recursively assigns default properties.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "sources",
            "description": "The source objects."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.entries",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": true
        }
      ],
      "returnType": "[string, T][]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "_.entriesIn",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": true
        }
      ],
      "returnType": "[string, T][]",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "_.extend",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "_.extendWith",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "AssignCustomizer",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "_.findKey",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ObjectIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "This method is like _.find except that it returns the key of the first element predicate returns truthy for\ninstead of the element itself.",
        "params": [
          {
            "name": "object",
            "description": "The object to search."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.findLastKey",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ObjectIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "This method is like _.findKey except that it iterates over elements of a collection in the opposite order.",
        "params": [
          {
            "name": "object",
            "description": "The object to search."
          },
          {
            "name": "predicate",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.forIn",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ObjectIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Iterates over own and inherited enumerable properties of an object invoking iteratee for each property. The\niteratee is invoked with three arguments: (value, key, object). Iteratee functions may\nexit iteration early by explicitly returning false.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.forInRight",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ObjectIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like _.forIn except that it iterates over properties of object in the opposite order.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.forOwn",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ObjectIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Iterates over own enumerable properties of an object invoking iteratee for each property. The iteratee is\ninvoked with three arguments: (value, key, object). Iteratee functions may exit\niteration early by explicitly returning false.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.forOwnRight",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ObjectIterator<T, any>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like _.forOwn except that it iterates over properties of object in the opposite order.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.functions",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Creates an array of function property names from own enumerable properties\nof `object`.",
        "params": [
          {
            "name": "object",
            "description": "The object to inspect."
          }
        ],
        "returns": "Returns the new array of property names.",
        "deprecated": false
      }
    },
    {
      "name": "_.functionsIn",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Creates an array of function property names from own and inherited\nenumerable properties of `object`.",
        "params": [
          {
            "name": "object",
            "description": "The object to inspect."
          }
        ],
        "returns": "Returns the new array of property names.",
        "deprecated": false
      }
    },
    {
      "name": "_.get",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "path",
          "type": "TKey | [TKey]",
          "optional": false
        }
      ],
      "returnType": "TObject[TKey]",
      "jsdoc": {
        "description": "Gets the property value at path of object. If the resolved value is undefined the defaultValue is used\nin its place.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "path",
            "description": "The path of the property to get."
          },
          {
            "name": "defaultValue",
            "description": "The value returned if the resolved value is undefined."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.has",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "path",
          "type": "K",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `path` is a direct property of `object`.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "path",
            "description": "The path to check."
          }
        ],
        "returns": "Returns `true` if `path` exists, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.hasIn",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if `path` is a direct or inherited property of `object`.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "path",
            "description": "The path to check."
          }
        ],
        "returns": "Returns `true` if `path` exists, else `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.invert",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        }
      ],
      "returnType": "Dictionary<string>",
      "jsdoc": {
        "description": "Creates an object composed of the inverted keys and values of object. If object contains duplicate values,\nsubsequent values overwrite property assignments of previous values unless multiValue is true.",
        "params": [
          {
            "name": "object",
            "description": "The object to invert."
          },
          {
            "name": "multiValue",
            "description": "Allow multiple values per key."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.invertBy",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": false
        },
        {
          "name": "interatee",
          "type": "ValueIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<string[]>",
      "jsdoc": {
        "description": "This method is like _.invert except that the inverted object is generated from the results of running each\nelement of object through iteratee. The corresponding inverted value of each inverted key is an array of\nkeys responsible for generating the inverted value. The iteratee is invoked with one argument: (value).",
        "params": [
          {
            "name": "object",
            "description": "The object to invert."
          },
          {
            "name": "interatee",
            "description": "The iteratee invoked per element."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.invoke",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Invokes the method at path of object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "path",
            "description": "The path of the method to invoke."
          },
          {
            "name": "args",
            "description": "The arguments to invoke the method with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.keys",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Creates an array of the own enumerable property names of object.\n\nNote: Non-object values are coerced to objects. See the ES spec for more details.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.keysIn",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Creates an array of the own and inherited enumerable property names of object.\n\nNote: Non-object values are coerced to objects.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.mapKeys",
      "parameters": [
        {
          "name": "object",
          "type": "List<T>",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "ListIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<T>",
      "jsdoc": {
        "description": "The opposite of _.mapValues; this method creates an object with the same values as object and keys generated\nby running each own enumerable property of object through iteratee.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.mapValues",
      "parameters": [
        {
          "name": "obj",
          "type": "string",
          "optional": false
        },
        {
          "name": "callback",
          "type": "StringIterator<TResult>",
          "optional": false
        }
      ],
      "returnType": "NumericDictionary<TResult>",
      "jsdoc": {
        "description": "Creates an object with the same keys as object and values generated by running each own\nenumerable property of object through iteratee. The iteratee function is\ninvoked with three arguments: (value, key, object).",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.merge",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "Recursively merges own and inherited enumerable properties of source\nobjects into the destination object, skipping source properties that resolve\nto `undefined`. Array and plain object properties are merged recursively.\nOther objects and value types are overridden by assignment. Source objects\nare applied from left to right. Subsequent sources overwrite property\nassignments of previous sources.\n\n**Note:** This method mutates `object`.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "source",
            "description": "The source objects."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "_.mergeWith",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "TSource",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "(value: any, srcValue: any, key: string, object: any, source: any, stack: any) => any",
          "optional": false
        }
      ],
      "returnType": "TObject & TSource",
      "jsdoc": {
        "description": "This method is like `_.merge` except that it accepts `customizer` which\nis invoked to produce the merged values of the destination and source\nproperties. If `customizer` returns `undefined` merging is handled by the\nmethod instead. The `customizer` is invoked with six arguments:\n(objValue, srcValue, key, object, source, stack).",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "source",
            "description": "The source objects."
          },
          {
            "name": "customizer",
            "description": "The function to customize assigned values."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "_.omit",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "paths",
          "type": "K",
          "optional": false
        }
      ],
      "returnType": "Pick<T, Exclude<keyof T, K[number]>>",
      "jsdoc": {
        "description": "The opposite of `_.pick`; this method creates an object composed of the\nown and inherited enumerable properties of `object` that are not omitted.",
        "params": [
          {
            "name": "object",
            "description": "The source object."
          },
          {
            "name": "paths",
            "description": "The property names to omit, specified\nindividually or in arrays.."
          }
        ],
        "returns": "Returns the new object.",
        "deprecated": false
      }
    },
    {
      "name": "_.omitBy",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ValueKeyIteratee<T>",
          "optional": true
        }
      ],
      "returnType": "Dictionary<T>",
      "jsdoc": {
        "description": "The opposite of `_.pickBy`; this method creates an object composed of the\nown and inherited enumerable properties of `object` that `predicate`\ndoesn't return truthy for.",
        "params": [
          {
            "name": "object",
            "description": "The source object."
          },
          {
            "name": "predicate",
            "description": "The function invoked per property."
          }
        ],
        "returns": "Returns the new object.",
        "deprecated": false
      }
    },
    {
      "name": "_.pick",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "props",
          "type": "Many<U>[]",
          "optional": false
        }
      ],
      "returnType": "Pick<T, U>",
      "jsdoc": {
        "description": "Creates an object composed of the picked `object` properties.",
        "params": [
          {
            "name": "object",
            "description": "The source object."
          },
          {
            "name": "props",
            "description": "The property names to pick, specified\nindividually or in arrays."
          }
        ],
        "returns": "Returns the new object.",
        "deprecated": false
      }
    },
    {
      "name": "_.pickBy",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T>",
          "optional": false
        },
        {
          "name": "predicate",
          "type": "ValueKeyIterateeTypeGuard<T, S>",
          "optional": false
        }
      ],
      "returnType": "Dictionary<S>",
      "jsdoc": {
        "description": "Creates an object composed of the `object` properties `predicate` returns\ntruthy for. The predicate is invoked with two arguments: (value, key).",
        "params": [
          {
            "name": "object",
            "description": "The source object."
          },
          {
            "name": "predicate",
            "description": "The function invoked per property."
          }
        ],
        "returns": "Returns the new object.",
        "deprecated": false
      }
    },
    {
      "name": "_.result",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "defaultValue",
          "type": "TResult | ((...args: any[]) => TResult)",
          "optional": true
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "This method is like _.get except that if the resolved value is a function itâ€™s invoked with the this binding\nof its parent object and its result is returned.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "path",
            "description": "The path of the property to resolve."
          },
          {
            "name": "defaultValue",
            "description": "The value returned if the resolved value is undefined."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.set",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Sets the value at path of object. If a portion of path doesnâ€™t exist itâ€™s created. Arrays are created for\nmissing index properties while objects are created for all other missing properties. Use _.setWith to\ncustomize path creation.",
        "params": [
          {
            "name": "object",
            "description": "The object to modify."
          },
          {
            "name": "path",
            "description": "The path of the property to set."
          },
          {
            "name": "value",
            "description": "The value to set."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.setWith",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "value",
          "type": "any",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "SetWithCustomizer<T>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like _.set except that it accepts customizer which is invoked to produce the objects of\npath. If customizer returns undefined path creation is handled by the method instead. The customizer is\ninvoked with three arguments: (nsValue, key, nsObject).",
        "params": [
          {
            "name": "object",
            "description": "The object to modify."
          },
          {
            "name": "path",
            "description": "The path of the property to set."
          },
          {
            "name": "value",
            "description": "The value to set."
          },
          {
            "name": "customizer",
            "description": "The function to customize assigned values."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toPairs",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": true
        }
      ],
      "returnType": "[string, T][]",
      "jsdoc": {
        "description": "Creates an array of own enumerable key-value pairs for object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toPairsIn",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T>",
          "optional": true
        }
      ],
      "returnType": "[string, T][]",
      "jsdoc": {
        "description": "Creates an array of own and inherited enumerable key-value pairs for object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.transform",
      "parameters": [
        {
          "name": "object",
          "type": "readonly T[]",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "MemoVoidArrayIterator<T, TResult>",
          "optional": false
        },
        {
          "name": "accumulator",
          "type": "TResult",
          "optional": true
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "An alternative to _.reduce; this method transforms object to a new accumulator object which is the result of\nrunning each of its own enumerable properties through iteratee, with each invocation potentially mutating\nthe accumulator object. The iteratee is invoked with four arguments: (accumulator,\nvalue, key, object). Iteratee functions may exit iteration early by explicitly returning false.",
        "params": [
          {
            "name": "object",
            "description": "The object to iterate over."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          },
          {
            "name": "accumulator",
            "description": "The custom accumulator value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.unset",
      "parameters": [
        {
          "name": "object",
          "type": "any",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Removes the property at path of object.\n\nNote: This method mutates object.",
        "params": [
          {
            "name": "object",
            "description": "The object to modify."
          },
          {
            "name": "path",
            "description": "The path of the property to unset."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.update",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "updater",
          "type": "(value: any) => any",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "This method is like _.set except that accepts updater to produce the value to set. Use _.updateWith to\ncustomize path creation. The updater is invoked with one argument: (value).",
        "params": [
          {
            "name": "object",
            "description": "The object to modify."
          },
          {
            "name": "path",
            "description": "The path of the property to set."
          },
          {
            "name": "updater",
            "description": "The function to produce the updated value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.updateWith",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "updater",
          "type": "(oldValue: any) => any",
          "optional": false
        },
        {
          "name": "customizer",
          "type": "SetWithCustomizer<T>",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method is like `_.update` except that it accepts `customizer` which is\ninvoked to produce the objects of `path`.  If `customizer` returns `undefined`\npath creation is handled by the method instead. The `customizer` is invoked\nwith three arguments: (nsValue, key, nsObject).\n\n**Note:** This method mutates `object`.",
        "params": [
          {
            "name": "object",
            "description": "The object to modify."
          },
          {
            "name": "path",
            "description": "The path of the property to set."
          },
          {
            "name": "updater",
            "description": "The function to produce the updated value."
          },
          {
            "name": "customizer",
            "description": "The function to customize assigned values."
          }
        ],
        "returns": "Returns `object`.",
        "deprecated": false
      }
    },
    {
      "name": "_.values",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T> | List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of the own enumerable property values of object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.valuesIn",
      "parameters": [
        {
          "name": "object",
          "type": "Dictionary<T> | NumericDictionary<T> | List<T>",
          "optional": false
        }
      ],
      "returnType": "T[]",
      "jsdoc": {
        "description": "Creates an array of the own and inherited enumerable property values of object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.chain",
      "parameters": [
        {
          "name": "value",
          "type": "TrapAny",
          "optional": false
        }
      ],
      "returnType": "CollectionChain<any> & FunctionChain<any> & ObjectChain<any> & PrimitiveChain<any> & StringChain<string>",
      "jsdoc": {
        "description": "Creates a lodash object that wraps value with explicit method chaining enabled.",
        "params": [
          {
            "name": "value",
            "description": "The value to wrap."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.tap",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "interceptor",
          "type": "(value: T) => void",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method invokes interceptor and returns value. The interceptor is invoked with one\nargument; (value). The purpose of this method is to \"tap into\" a method chain in order to perform operations\non intermediate results within the chain.",
        "params": [
          {
            "name": "value",
            "description": "The value to provide to interceptor."
          },
          {
            "name": "interceptor",
            "description": "The function to invoke."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.thru",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "interceptor",
          "type": "(value: T) => TResult",
          "optional": false
        }
      ],
      "returnType": "TResult",
      "jsdoc": {
        "description": "This method is like _.tap except that it returns the result of interceptor.",
        "params": [
          {
            "name": "value",
            "description": "The value to provide to interceptor."
          },
          {
            "name": "interceptor",
            "description": "The function to invoke."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.camelCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts string to camel case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.capitalize",
      "parameters": [
        {
          "name": "string",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "string extends T ? string : Capitalize<Lowercase<T>>",
      "jsdoc": {
        "description": "Converts the first character of string to upper case and the remaining to lower case.",
        "params": [
          {
            "name": "string",
            "description": "The string to capitalize."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.deburr",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Deburrs string by converting latin-1 supplementary letters to basic latin letters and removing combining\ndiacritical marks.",
        "params": [
          {
            "name": "string",
            "description": "The string to deburr."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.escape",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts the characters \"&\", \"<\", \">\", '\"', \"'\", and \"`\" in string to their corresponding HTML entities.\n\nNote: No other characters are escaped. To escape additional characters use a third-party library like he.\n\nThough the \">\" character is escaped for symmetry, characters like \">\" and \"/\" donâ€™t need escaping in HTML\nand have no special meaning unless they're part of a tag or unquoted attribute value. See Mathias Bynensâ€™s\narticle (under \"semi-related fun fact\") for more details.\n\nBackticks are escaped because in IE < 9, they can break out of attribute values or HTML comments. See #59,\n#102, #108, and #133 of the HTML5 Security Cheatsheet for more details.\n\nWhen working with HTML you should always quote attribute values to reduce XSS vectors.",
        "params": [
          {
            "name": "string",
            "description": "The string to escape."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.escapeRegExp",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Escapes the RegExp special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\", \"?\", \"(\", \")\", \"[\", \"]\",\n\"{\", \"}\", and \"|\" in string.",
        "params": [
          {
            "name": "string",
            "description": "The string to escape."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.kebabCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts string to kebab case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.lowerCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts `string`, as space separated words, to lower case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.lowerFirst",
      "parameters": [
        {
          "name": "string",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "Uncapitalize<T>",
      "jsdoc": {
        "description": "Converts the first character of `string` to lower case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.pad",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        },
        {
          "name": "chars",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads string on the left and right sides if itâ€™s shorter than length. Padding characters are truncated if\nthey canâ€™t be evenly divided by length.",
        "params": [
          {
            "name": "string",
            "description": "The string to pad."
          },
          {
            "name": "length",
            "description": "The padding length."
          },
          {
            "name": "chars",
            "description": "The string used as padding."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.parseInt",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        },
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Converts string to an integer of the specified radix. If radix is undefined or 0, a radix of 10 is used\nunless value is a hexadecimal, in which case a radix of 16 is used.\n\nNote: This method aligns with the ES5 implementation of parseInt.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          },
          {
            "name": "radix",
            "description": "The radix to interpret value by."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.snakeCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts string to snake case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.startCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts string to start case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.template",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "options",
          "type": "TemplateOptions",
          "optional": true
        }
      ],
      "returnType": "TemplateExecutor",
      "jsdoc": {
        "description": "Creates a compiled template function that can interpolate data properties in \"interpolate\" delimiters,\nHTML-escape interpolated data properties in \"escape\" delimiters, and execute JavaScript in \"evaluate\"\ndelimiters. Data properties may be accessed as free variables in the template. If a setting object is\nprovided it takes precedence over _.templateSettings values.\n\nNote: In the development build _.template utilizes\n[sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl) for easier\ndebugging.\n\nFor more information on precompiling templates see\n[lodash's custom builds documentation](https://lodash.com/custom-builds).\n\nFor more information on Chrome extension sandboxes see\n[Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).",
        "params": [
          {
            "name": "string",
            "description": "The template string."
          },
          {
            "name": "options",
            "description": "The options object."
          },
          {
            "description": "The HTML \"escape\" delimiter."
          },
          {
            "description": "The \"evaluate\" delimiter."
          },
          {
            "description": "An object to import into the template as free variables."
          },
          {
            "description": "The \"interpolate\" delimiter."
          },
          {
            "description": "The sourceURL of the template's compiled source."
          },
          {
            "description": "The data object variable name."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toLower",
      "parameters": [
        {
          "name": "string",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "Lowercase<T>",
      "jsdoc": {
        "description": "Converts `string`, as a whole, to lower case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toUpper",
      "parameters": [
        {
          "name": "string",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "Uppercase<T>",
      "jsdoc": {
        "description": "Converts `string`, as a whole, to upper case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.truncate",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "options",
          "type": "TruncateOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Truncates string if itâ€™s longer than the given maximum string length. The last characters of the truncated\nstring are replaced with the omission string which defaults to \"â€¦\".",
        "params": [
          {
            "name": "string",
            "description": "The string to truncate."
          },
          {
            "name": "options",
            "description": "The options object or maximum string length."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.unescape",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "The inverse of _.escape; this method converts the HTML entities &amp;, &lt;, &gt;, &quot;, &#39;, and &#96;\nin string to their corresponding characters.\n\nNote: No other HTML entities are unescaped. To unescape additional HTML entities use a third-party library\nlike he.",
        "params": [
          {
            "name": "string",
            "description": "The string to unescape."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.upperCase",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts `string`, as space separated words, to upper case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.upperFirst",
      "parameters": [
        {
          "name": "string",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "Capitalize<T>",
      "jsdoc": {
        "description": "Converts the first character of `string` to upper case.",
        "params": [
          {
            "name": "string",
            "description": "The string to convert."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.words",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": true
        },
        {
          "name": "pattern",
          "type": "string | RegExp",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Splits `string` into an array of its words.",
        "params": [
          {
            "name": "string",
            "description": "The string to inspect."
          },
          {
            "name": "pattern",
            "description": "The pattern to match words."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.attempt",
      "parameters": [
        {
          "name": "func",
          "type": "(...args: any[]) => TResult",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "TResult | Error",
      "jsdoc": {
        "description": "Attempts to invoke func, returning either the result or the caught error object. Any additional arguments\nare provided to func when itâ€™s invoked.",
        "params": [
          {
            "name": "func",
            "description": "The function to attempt."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.bindAll",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        },
        {
          "name": "methodNames",
          "type": "Many<string>[]",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Binds methods of an object to the object itself, overwriting the existing method. Method names may be\nspecified as individual arguments or as arrays of method names. If no method names are provided all\nenumerable function properties, own and inherited, of object are bound.\n\nNote: This method does not set the \"length\" property of bound functions.",
        "params": [
          {
            "name": "object",
            "description": "The object to bind and assign the bound methods to."
          },
          {
            "name": "methodNames",
            "description": "The object method names to bind, specified as individual method names or arrays of\nmethod names."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.cond",
      "parameters": [
        {
          "name": "pairs",
          "type": "CondPairNullary<R>[]",
          "optional": false
        }
      ],
      "returnType": "() => R",
      "jsdoc": {
        "description": "Creates a function that iterates over `pairs` and invokes the corresponding\nfunction of the first predicate to return truthy. The predicate-function\npairs are invoked with the `this` binding and arguments of the created\nfunction.",
        "params": [
          {
            "name": "pairs",
            "description": "The predicate-function pairs."
          }
        ],
        "returns": "Returns the new composite function.",
        "deprecated": false
      }
    },
    {
      "name": "_.conforms",
      "parameters": [
        {
          "name": "source",
          "type": "ConformsPredicateObject<T>",
          "optional": false
        }
      ],
      "returnType": "(value: T) => boolean",
      "jsdoc": {
        "description": "Creates a function that invokes the predicate properties of `source` with the corresponding\nproperty values of a given object, returning true if all predicates return truthy, else false.",
        "deprecated": false
      }
    },
    {
      "name": "_.constant",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "() => T",
      "jsdoc": {
        "description": "Creates a function that returns value.",
        "params": [
          {
            "name": "value",
            "description": "The value to return from the new function."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.defaultTo",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "defaultValue",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Checks `value` to determine whether a default value should be returned in\nits place. The `defaultValue` is returned if `value` is `NaN`, `null`,\nor `undefined`.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          },
          {
            "name": "defaultValue",
            "description": "The default value."
          }
        ],
        "returns": "Returns the resolved value.",
        "deprecated": false
      }
    },
    {
      "name": "_.flow",
      "parameters": [
        {
          "name": "f1",
          "type": "(...args: A) => R1",
          "optional": false
        },
        {
          "name": "f2",
          "type": "(a: R1) => R2",
          "optional": false
        },
        {
          "name": "f3",
          "type": "(a: R2) => R3",
          "optional": false
        },
        {
          "name": "f4",
          "type": "(a: R3) => R4",
          "optional": false
        },
        {
          "name": "f5",
          "type": "(a: R4) => R5",
          "optional": false
        },
        {
          "name": "f6",
          "type": "(a: R5) => R6",
          "optional": false
        },
        {
          "name": "f7",
          "type": "(a: R6) => R7",
          "optional": false
        }
      ],
      "returnType": "(...args: A) => R7",
      "jsdoc": {
        "description": "Creates a function that returns the result of invoking the provided functions with the this binding of the\ncreated function, where each successive invocation is supplied the return value of the previous.",
        "params": [
          {
            "name": "funcs",
            "description": "Functions to invoke."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.flowRight",
      "parameters": [
        {
          "name": "f7",
          "type": "(a: R6) => R7",
          "optional": false
        },
        {
          "name": "f6",
          "type": "(a: R5) => R6",
          "optional": false
        },
        {
          "name": "f5",
          "type": "(a: R4) => R5",
          "optional": false
        },
        {
          "name": "f4",
          "type": "(a: R3) => R4",
          "optional": false
        },
        {
          "name": "f3",
          "type": "(a: R2) => R3",
          "optional": false
        },
        {
          "name": "f2",
          "type": "(a: R1) => R2",
          "optional": false
        },
        {
          "name": "f1",
          "type": "(...args: A) => R1",
          "optional": false
        }
      ],
      "returnType": "(...args: A) => R7",
      "jsdoc": {
        "description": "This method is like _.flow except that it creates a function that invokes the provided functions from right\nto left.",
        "params": [
          {
            "name": "funcs",
            "description": "Functions to invoke."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.identity",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "This method returns the first argument provided to it.",
        "params": [
          {
            "name": "value",
            "description": "Any value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.iteratee",
      "parameters": [
        {
          "name": "func",
          "type": "TFunction",
          "optional": false
        }
      ],
      "returnType": "TFunction",
      "jsdoc": {
        "description": "Creates a function that invokes `func` with the arguments of the created\nfunction. If `func` is a property name the created callback returns the\nproperty value for a given element. If `func` is an object the created\ncallback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.",
        "params": [
          {
            "name": "func",
            "description": "The value to convert to a callback."
          }
        ],
        "returns": "Returns the callback.",
        "deprecated": false
      }
    },
    {
      "name": "_.matches",
      "parameters": [
        {
          "name": "source",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "(value: any) => boolean",
      "jsdoc": {
        "description": "Creates a function that performs a deep comparison between a given object and source, returning true if the\ngiven object has equivalent property values, else false.\n\nNote: This method supports comparing arrays, booleans, Date objects, numbers, Object objects, regexes, and\nstrings. Objects are compared by their own, not inherited, enumerable properties. For comparing a single own\nor inherited property value see _.matchesProperty.",
        "params": [
          {
            "name": "source",
            "description": "The object of property values to match."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.matchesProperty",
      "parameters": [
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "srcValue",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "(value: any) => boolean",
      "jsdoc": {
        "description": "Creates a function that compares the property value of path on a given object to value.\n\nNote: This method supports comparing arrays, booleans, Date objects, numbers, Object objects, regexes, and\nstrings. Objects are compared by their own, not inherited, enumerable properties.",
        "params": [
          {
            "name": "path",
            "description": "The path of the property to get."
          },
          {
            "name": "srcValue",
            "description": "The value to match."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.method",
      "parameters": [
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "(object: any) => any",
      "jsdoc": {
        "description": "Creates a function that invokes the method at path on a given object. Any additional arguments are provided\nto the invoked method.",
        "params": [
          {
            "name": "path",
            "description": "The path of the method to invoke."
          },
          {
            "name": "args",
            "description": "The arguments to invoke the method with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.methodOf",
      "parameters": [
        {
          "name": "object",
          "type": "object",
          "optional": false
        },
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "(path: PropertyPath) => any",
      "jsdoc": {
        "description": "The opposite of _.method; this method creates a function that invokes the method at a given path on object.\nAny additional arguments are provided to the invoked method.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          },
          {
            "name": "args",
            "description": "The arguments to invoke the method with."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.mixin",
      "parameters": [
        {
          "name": "object",
          "type": "TObject",
          "optional": false
        },
        {
          "name": "source",
          "type": "Dictionary<(...args: any[]) => any>",
          "optional": false
        },
        {
          "name": "options",
          "type": "MixinOptions",
          "optional": true
        }
      ],
      "returnType": "TObject",
      "jsdoc": {
        "description": "Adds all own enumerable function properties of a source object to the destination object. If object is a\nfunction then methods are added to its prototype as well.\n\nNote: Use _.runInContext to create a pristine lodash function to avoid conflicts caused by modifying\nthe original.",
        "params": [
          {
            "name": "object",
            "description": "The destination object."
          },
          {
            "name": "source",
            "description": "The object of functions to add."
          },
          {
            "name": "options",
            "description": "The options object."
          },
          {
            "description": "Specify whether the functions added are chainable."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.noConflict",
      "parameters": [],
      "returnType": "LoDashStatic",
      "jsdoc": {
        "description": "Reverts the _ variable to its previous value and returns a reference to the lodash function.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "_.noop",
      "parameters": [
        {
          "name": "args",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "A no-operation function that returns undefined regardless of the arguments it receives.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "_.nthArg",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "(...args: any[]) => any",
      "jsdoc": {
        "description": "Creates a function that returns its nth argument.",
        "params": [
          {
            "name": "n",
            "description": "The index of the argument to return."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.over",
      "parameters": [
        {
          "name": "iteratees",
          "type": "Many<(...args: any[]) => TResult>[]",
          "optional": false
        }
      ],
      "returnType": "(...args: any[]) => TResult[]",
      "jsdoc": {
        "description": "Creates a function that invokes iteratees with the arguments provided to the created function and returns\ntheir results.",
        "params": [
          {
            "name": "iteratees",
            "description": "The iteratees to invoke."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.overEvery",
      "parameters": [
        {
          "name": "predicates",
          "type": "[(arg: T) => arg is Result1, (arg: T) => arg is Result2]",
          "optional": false
        }
      ],
      "returnType": "(arg: T) => arg is Result1 & Result2",
      "jsdoc": {
        "description": "Creates a function that checks if all of the predicates return truthy when invoked with the arguments\nprovided to the created function.",
        "params": [
          {
            "name": "predicates",
            "description": "The predicates to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.overSome",
      "parameters": [
        {
          "name": "predicates",
          "type": "[(arg: T) => arg is Result1, (arg: T) => arg is Result2]",
          "optional": false
        }
      ],
      "returnType": "(arg: T) => arg is Result1 | Result2",
      "jsdoc": {
        "description": "Creates a function that checks if any of the predicates return truthy when invoked with the arguments\nprovided to the created function.",
        "params": [
          {
            "name": "predicates",
            "description": "The predicates to check."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.property",
      "parameters": [
        {
          "name": "path",
          "type": "PropertyPath",
          "optional": false
        }
      ],
      "returnType": "(obj: TObj) => TResult",
      "jsdoc": {
        "description": "Creates a function that returns the property value at path on a given object.",
        "params": [
          {
            "name": "path",
            "description": "The path of the property to get."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.propertyOf",
      "parameters": [
        {
          "name": "object",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "(path: PropertyPath) => any",
      "jsdoc": {
        "description": "The opposite of _.property; this method creates a function that returns the property value at a given path\non object.",
        "params": [
          {
            "name": "object",
            "description": "The object to query."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.range",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        },
        {
          "name": "step",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number[]",
      "jsdoc": {
        "description": "Creates an array of numbers (positive and/or negative) progressing from start up to, but not including, end.\nIf end is not specified itâ€™s set to start with start then set to 0. If end is less than start a zero-length\nrange is created unless a negative step is specified.",
        "params": [
          {
            "name": "start",
            "description": "The start of the range."
          },
          {
            "name": "end",
            "description": "The end of the range."
          },
          {
            "name": "step",
            "description": "The value to increment or decrement by."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.rangeRight",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        },
        {
          "name": "step",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number[]",
      "jsdoc": {
        "description": "This method is like `_.range` except that it populates values in\ndescending order.",
        "params": [
          {
            "name": "start",
            "description": "The start of the range."
          },
          {
            "name": "end",
            "description": "The end of the range."
          },
          {
            "name": "step",
            "description": "The value to increment or decrement by."
          }
        ],
        "returns": "Returns the new array of numbers.",
        "deprecated": false
      }
    },
    {
      "name": "_.runInContext",
      "parameters": [
        {
          "name": "context",
          "type": "object",
          "optional": true
        }
      ],
      "returnType": "LoDashStatic",
      "jsdoc": {
        "description": "Create a new pristine lodash function using the given context object.",
        "params": [
          {
            "name": "context",
            "description": "The context object."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.stubArray",
      "parameters": [],
      "returnType": "any[]",
      "jsdoc": {
        "description": "This method returns a new empty array.",
        "params": [],
        "returns": "Returns the new empty array.",
        "deprecated": false
      }
    },
    {
      "name": "_.stubFalse",
      "parameters": [],
      "returnType": "false",
      "jsdoc": {
        "description": "This method returns `false`.",
        "params": [],
        "returns": "Returns `false`.",
        "deprecated": false
      }
    },
    {
      "name": "_.stubObject",
      "parameters": [],
      "returnType": "any",
      "jsdoc": {
        "description": "This method returns a new empty object.",
        "params": [],
        "returns": "Returns the new empty object.",
        "deprecated": false
      }
    },
    {
      "name": "_.stubString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "This method returns an empty string.",
        "params": [],
        "returns": "Returns the empty string.",
        "deprecated": false
      }
    },
    {
      "name": "_.stubTrue",
      "parameters": [],
      "returnType": "true",
      "jsdoc": {
        "description": "This method returns `true`.",
        "params": [],
        "returns": "Returns `true`.",
        "deprecated": false
      }
    },
    {
      "name": "_.times",
      "parameters": [
        {
          "name": "n",
          "type": "number",
          "optional": false
        },
        {
          "name": "iteratee",
          "type": "(num: number) => TResult",
          "optional": false
        }
      ],
      "returnType": "TResult[]",
      "jsdoc": {
        "description": "Invokes the iteratee function n times, returning an array of the results of each invocation. The iteratee\nis invoked with one argument; (index).",
        "params": [
          {
            "name": "n",
            "description": "The number of times to invoke iteratee."
          },
          {
            "name": "iteratee",
            "description": "The function invoked per iteration."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "_.toPath",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Converts `value` to a property path array.",
        "params": [
          {
            "name": "value",
            "description": "The value to convert."
          }
        ],
        "returns": "Returns the new property path array.",
        "deprecated": false
      }
    },
    {
      "name": "_.uniqueId",
      "parameters": [
        {
          "name": "prefix",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Generates a unique ID. If prefix is provided the ID is appended to it.",
        "params": [
          {
            "name": "prefix",
            "description": "The value to prefix the ID with."
          }
        ],
        "deprecated": false
      }
    }
  ],
  "enums": [],
  "types": [
    {
      "name": "LoDashStatic",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Omit",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "PartialObject",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Many",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ImpChain",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ExpChain",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "TemplateSettings",
      "type": "any",
      "jsdoc": {
        "description": "By default, the template delimiters used by Lo-Dash are similar to those in embedded Ruby\n(ERB). Change the following template settings to use alternative delimiters.",
        "deprecated": false
      }
    },
    {
      "name": "MapCache",
      "type": "any",
      "jsdoc": {
        "description": "Creates a cache object to store key/value pairs.",
        "deprecated": false
      }
    },
    {
      "name": "MapCacheConstructor",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Collection",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CollectionChain",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Function",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "String",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Object",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Primitive",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "FunctionChain",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "StringChain",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "StringNullableChain",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ObjectChain",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "PrimitiveChain",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "NotVoid",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "IterateeShorthand",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ArrayIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "TupleIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ListIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ListIteratee",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ListIterateeCustom",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ListIteratorTypeGuard",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ObjectIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ObjectIteratee",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ObjectIterateeCustom",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ObjectIteratorTypeGuard",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "StringIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "MemoVoidIterator",
      "type": "any",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MemoIterator",
      "type": "any",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "MemoListIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "MemoObjectIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "MemoIteratorCapped",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "MemoIteratorCappedRight",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "MemoVoidArrayIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "MemoVoidDictionaryIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "MemoVoidIteratorCapped",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ValueIteratee",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ValueIterateeCustom",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ValueIteratorTypeGuard",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ValueKeyIteratee",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ValueKeyIterateeTypeGuard",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Comparator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Comparator2",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "PropertyName",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "PropertyPath",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "List",
      "type": "any",
      "jsdoc": {
        "description": "Common interface between Arrays and jQuery objects",
        "deprecated": false
      }
    },
    {
      "name": "Dictionary",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "NumericDictionary",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "AnyKindOfDictionary",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "PartialShallow",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "StringToNumber",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashImplicitArrayWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashImplicitNillableArrayWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashImplicitObjectWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashImplicitNillableObjectWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashImplicitNumberArrayWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashImplicitStringWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashExplicitArrayWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashExplicitNillableArrayWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashExplicitObjectWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashExplicitNillableObjectWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashExplicitNumberArrayWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashExplicitStringWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "DictionaryIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "DictionaryIteratee",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "DictionaryIteratorTypeGuard",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "NumericDictionaryIterator",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "NumericDictionaryIteratee",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "NumericDictionaryIterateeCustom",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Falsey",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Truthy",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "RecursiveArray",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ListOfRecursiveArraysOrValues",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Flat",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashImplicitWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashExplicitWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "FunctionBind",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "FunctionBindKey",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Curry",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CurriedFunction1",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CurriedFunction2",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CurriedFunction3",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CurriedFunction4",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CurriedFunction5",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "RightCurriedFunction1",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "RightCurriedFunction2",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "RightCurriedFunction3",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "RightCurriedFunction4",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "RightCurriedFunction5",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CurryRight",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "DebounceSettings",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "DebounceSettingsLeading",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "DebouncedFunc",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "DebouncedFuncLeading",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "MemoizedFunction",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "__",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Function0",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Function1",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Function2",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Function3",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Function4",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "Partial",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "PartialRight",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ThrottleSettings",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ThrottleSettingsLeading",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "FunctionBase",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CloneDeepWithCustomizer",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CloneWithCustomizer",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CondPairNullary",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "CondPairUnary",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "EmptyObject",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "EmptyObjectOf",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "IsEqualCustomizer",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "isMatchWithCustomizer",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "AssignCustomizer",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "GetFieldTypeOfArrayLikeByKey",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "GetFieldTypeOfStringByKey",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "GetFieldTypeOfNarrowedByKey",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "GetFieldTypeOfNarrowedByDotPath",
      "type": "any",
      "jsdoc": {
        "description": "Internal. Assumes P is a dot-delimited path.",
        "deprecated": false
      }
    },
    {
      "name": "GetFieldTypeOfNarrowedByLcKR",
      "type": "any",
      "jsdoc": {
        "description": "Internal. This is a piece of GetFieldTypeOfNarrowedByLKR logic,\nassuming that Lc isn't to be ignored, and does not end with dot.",
        "deprecated": false
      }
    },
    {
      "name": "GetFieldTypeOfNarrowedByLKR",
      "type": "any",
      "jsdoc": {
        "description": "Internal. Assumes T has been narrowed; L is a dot-delimited path,\nand should be ignored if an empty string; K is a key name; and R is\na dot-delimetered path, to be ignored if an empty string. Also if\nL has a tail dot, or R has a front dot, these dots should be discarded,\nhowever when L or R is just a dot, they should be interpreted as empty\nkey name (rather than ignored).",
        "deprecated": false
      }
    },
    {
      "name": "GetFieldTypeOfNarrowed",
      "type": "any",
      "jsdoc": {
        "description": "Internal. Assumes T has been narrowed.",
        "deprecated": false
      }
    },
    {
      "name": "GetFieldTypeOfObject",
      "type": "any",
      "jsdoc": {
        "description": "Internal. Assumes T has been narrowed to an object type.",
        "deprecated": false
      }
    },
    {
      "name": "GetFieldTypeOfPrimitive",
      "type": "any",
      "jsdoc": {
        "description": "Internal. Assumes T has been narrowed to a primitive type.",
        "deprecated": false
      }
    },
    {
      "name": "GetFieldType",
      "type": "any",
      "jsdoc": {
        "description": "Deduces the type of value at the path P of type T,\nso that _.get<T, P>(t: T, p: P): GetFieldType<T, P>.\nXT specifies the exact meaning of X:\n- 'Path' (default) - X is a path type to be fully parsed;\n- 'DotPath - X is a dot-delimitered path, without square (indexing) brackets;\n- 'Key' - X is a simple key, and needs no parsing.",
        "deprecated": false
      }
    },
    {
      "name": "MergeWithCustomizer",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "SetWithCustomizer",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "LoDashWrapper",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ReplaceFunction",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "TemplateOptions",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "TemplateExecutor",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "TruncateOptions",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "ConformsPredicateObject",
      "type": "any",
      "jsdoc": null
    },
    {
      "name": "MixinOptions",
      "type": "any",
      "jsdoc": null
    }
  ],
  "classes": [],
  "version": "4.14.191"
}