{
  "functions": [
    {
      "name": "getAdapter",
      "parameters": [
        {
          "name": "adapters",
          "type": "AxiosAdapterConfig | AxiosAdapterConfig[]"
        }
      ],
      "returnType": "AxiosAdapter",
      "xaiDescription": "Retrieves adapter from config. Uses AxiosAdapterConfig."
    },
    {
      "name": "toFormData",
      "parameters": [
        {
          "name": "sourceObj",
          "type": "object"
        },
        {
          "name": "targetFormData",
          "type": "GenericFormData"
        },
        {
          "name": "options",
          "type": "FormSerializerOptions"
        }
      ],
      "returnType": "GenericFormData",
      "xaiDescription": "Converts object to FormData. Uses GenericFormData, FormSerializerOptions."
    },
    {
      "name": "formToJSON",
      "parameters": [
        {
          "name": "form",
          "type": "GenericFormData | GenericHTMLFormElement"
        }
      ],
      "returnType": "object",
      "xaiDescription": "Converts FormData to JSON. Uses GenericFormData, GenericHTMLFormElement."
    },
    {
      "name": "isAxiosError",
      "parameters": [
        {
          "name": "payload",
          "type": "any"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Checks if payload is an Axios error."
    },
    {
      "name": "spread",
      "parameters": [
        {
          "name": "callback",
          "type": "(...args: T[]) => R"
        }
      ],
      "returnType": "(array: T[]) => R",
      "xaiDescription": "Spreads array into callback args. Returns new function."
    },
    {
      "name": "isCancel",
      "parameters": [
        {
          "name": "value",
          "type": "any"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Checks if the given value is a cancellation signal."
    },
    {
      "name": "all",
      "parameters": [
        {
          "name": "values",
          "type": "(T | Promise<T>)[]"
        }
      ],
      "returnType": "Promise<T[]>",
      "xaiDescription": "Returns a promise that resolves when all input promises resolve."
    },
    {
      "name": "mergeConfig",
      "parameters": [
        {
          "name": "config1",
          "type": "AxiosRequestConfig<D>"
        },
        {
          "name": "config2",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "AxiosRequestConfig<D>",
      "xaiDescription": "Merges two Axios request configurations into one."
    },
    {
      "name": "from",
      "parameters": [
        {
          "name": "thing",
          "type": "string | AxiosHeaders | RawAxiosHeaders"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Creates AxiosHeaders from a string or existing headers."
    },
    {
      "name": "accessor",
      "parameters": [
        {
          "name": "header",
          "type": "string | string[]"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Retrieves or sets headers using the provided header name(s)."
    },
    {
      "name": "AxiosError.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "xaiDescription": "Generates a larger text element"
      }
    },
    {
      "name": "AxiosError.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "xaiDescription": "Creates a blinking text effect"
      }
    },
    {
      "name": "AxiosError.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "xaiDescription": "Renders text in bold"
      }
    },
    {
      "name": "AxiosError.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "xaiDescription": "Displays text in a fixed-width font"
      }
    },
    {
      "name": "AxiosError.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [
          {
            "name": "color",
            "type": "string",
            "description": "The color value to set"
          }
        ],
        "xaiDescription": "Applies specified color to text"
      }
    },
    {
      "name": "AxiosError.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "xaiDescription": "Creates font element with specified size (Uses number)"
      }
    },
    {
      "name": "AxiosError.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "xaiDescription": "Generates italics HTML element"
      }
    },
    {
      "name": "AxiosError.link",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "xaiDescription": "Creates link element with specified URL (Uses string)"
      }
    },
    {
      "name": "AxiosError.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "xaiDescription": "Generates small text HTML element"
      }
    },
    {
      "name": "AxiosError.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "xaiDescription": "Generates strikethrough text HTML element"
      }
    },
    {
      "name": "AxiosError.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "xaiDescription": "Generates a subscript HTML element."
      }
    },
    {
      "name": "AxiosError.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "xaiDescription": "Generates a superscript HTML element."
      }
    },
    {
      "name": "AxiosError.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number"
        },
        {
          "name": "fillString",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current strings length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is   (U+0020)."
          }
        ],
        "xaiDescription": "Pads string from start to reach specified length."
      }
    },
    {
      "name": "AxiosError.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number"
        },
        {
          "name": "fillString",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current strings length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is   (U+0020)."
          }
        ],
        "xaiDescription": "Pads string from end to reach specified length."
      }
    },
    {
      "name": "AxiosError.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "xaiDescription": "Removes trailing whitespace and line terminators."
      }
    },
    {
      "name": "AxiosError.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "xaiDescription": "Trims leading whitespace from a string."
      }
    },
    {
      "name": "AxiosError.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "xaiDescription": "Trims leading whitespace from a string."
      }
    },
    {
      "name": "AxiosError.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "xaiDescription": "Trims trailing whitespace from a string."
      }
    },
    {
      "name": "AxiosError.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "xaiDescription": "Matches string with regex, returns iterable of matches."
      }
    },
    {
      "name": "AxiosError.__@iterator@8870",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "xaiDescription": "Provides iteration over a string."
      }
    },
    {
      "name": "AxiosError.at",
      "parameters": [
        {
          "name": "index",
          "type": "number"
        }
      ],
      "returnType": "string",
      "xaiDescription": "Get error message at specified index. Uses number."
    },
    {
      "name": "AxiosError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object"
        },
        {
          "name": "constructorOpt",
          "type": "Function"
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object"
      }
    },
    {
      "name": "AxiosError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error"
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]"
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": []
      },
      "xaiDescription": "Customize error stack trace formatting. Uses Error, CallSite[]."
    },
    {
      "name": "AxiosError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ]
      }
    },
    {
      "name": "AxiosError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ]
      }
    },
    {
      "name": "AxiosError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ]
      },
      "xaiDescription": "Converts number to string with specified precision (1-21)."
    },
    {
      "name": "AxiosError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        },
        {
          "name": "options",
          "type": "NumberFormatOptions"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ]
      },
      "xaiDescription": "Converts number to string using specified locale and options."
    },
    {
      "name": "CanceledError.from",
      "parameters": [
        {
          "name": "error",
          "type": "unknown"
        },
        {
          "name": "code",
          "type": "string"
        },
        {
          "name": "config",
          "type": "InternalAxiosRequestConfig<D>"
        },
        {
          "name": "request",
          "type": "any"
        },
        {
          "name": "response",
          "type": "AxiosResponse<T, D>"
        },
        {
          "name": "customProps",
          "type": "object"
        }
      ],
      "returnType": "AxiosError<T, D>",
      "xaiDescription": "Creates AxiosError from given parameters. Uses InternalAxiosRequestConfig<D> and AxiosResponse<T, D>."
    },
    {
      "name": "CanceledError.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string."
      },
      "xaiDescription": "Returns string representation of CanceledError."
    },
    {
      "name": "CanceledError.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ]
      },
      "xaiDescription": "Returns character at specified index in CanceledError."
    },
    {
      "name": "CanceledError.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ]
      },
      "xaiDescription": "Gets Unicode value of character at index."
    },
    {
      "name": "CanceledError.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ]
      },
      "xaiDescription": "Concatenates strings."
    },
    {
      "name": "CanceledError.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ]
      },
      "xaiDescription": "Finds first occurrence of substring."
    },
    {
      "name": "CanceledError.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ]
      },
      "xaiDescription": "Finds last occurrence of substring."
    },
    {
      "name": "CanceledError.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ]
      },
      "xaiDescription": "Compares strings in current locale."
    },
    {
      "name": "CanceledError.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp"
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ]
      },
      "xaiDescription": "Matches string with regex, returns result array. Uses RegExpMatchArray."
    },
    {
      "name": "CanceledError.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp"
        },
        {
          "name": "replaceValue",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ]
      },
      "xaiDescription": "Replaces text in string using regex or search string."
    },
    {
      "name": "CanceledError.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ]
      },
      "xaiDescription": "Finds first substring match in regex search, returns index."
    },
    {
      "name": "CanceledError.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number"
        },
        {
          "name": "end",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ]
      },
      "xaiDescription": "Returns section of string from start to end index."
    },
    {
      "name": "CanceledError.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp"
        },
        {
          "name": "limit",
          "type": "number"
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ]
      },
      "xaiDescription": "Splits string into substrings using separator, returns array. Uses string[]."
    },
    {
      "name": "CanceledError.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number"
        },
        {
          "name": "end",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ]
      },
      "xaiDescription": "Extracts substring from start to end index (exclusive)."
    },
    {
      "name": "CanceledError.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase."
      },
      "xaiDescription": "Converts string to lowercase."
    },
    {
      "name": "CanceledError.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale."
      },
      "xaiDescription": "Converts string to lowercase considering locale."
    },
    {
      "name": "CanceledError.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase."
      },
      "xaiDescription": "Converts string to uppercase."
    },
    {
      "name": "CanceledError.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale."
      },
      "xaiDescription": "Converts string to uppercase considering locale."
    },
    {
      "name": "CanceledError.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes leading and trailing whitespace and line terminators from a string."
      },
      "xaiDescription": "Trims whitespace from a string."
    },
    {
      "name": "CanceledError.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number"
        },
        {
          "name": "length",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ]
      },
      "xaiDescription": "Extracts a substring from a string."
    },
    {
      "name": "CanceledError.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object."
      },
      "xaiDescription": "Returns the primitive value of an object."
    },
    {
      "name": "CanceledError.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos."
      },
      "xaiDescription": "Gets the Unicode code point at a position."
    },
    {
      "name": "CanceledError.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ]
      },
      "xaiDescription": "Checks if a string contains a substring."
    },
    {
      "name": "concat",
      "parameters": [
        {
          "name": "targets",
          "type": "(string | AxiosHeaders | RawAxiosHeaders)[]"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Concatenates multiple headers into a single AxiosHeaders object."
    },
    {
      "name": "AxiosHeaders.from",
      "parameters": [
        {
          "name": "thing",
          "type": "string | AxiosHeaders | RawAxiosHeaders"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Creates an AxiosHeaders object from a given input."
    },
    {
      "name": "AxiosHeaders.accessor",
      "parameters": [
        {
          "name": "header",
          "type": "string | string[]"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Accesses or modifies headers using a specified header name."
    },
    {
      "name": "AxiosHeaders.concat",
      "parameters": [
        {
          "name": "targets",
          "type": "(string | AxiosHeaders | RawAxiosHeaders)[]"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Concatenates multiple headers into a single AxiosHeaders object."
    },
    {
      "name": "HttpStatusCode.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ]
      },
      "xaiDescription": "Converts an HTTP status code to a string using a specified radix."
    },
    {
      "name": "CanceledError.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "endPosition",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false."
      },
      "xaiDescription": "Checks if string ends with searchString at endPosition."
    },
    {
      "name": "CanceledError.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "NFC | NFD | NFKC | NFKD"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: NFC, NFD, NFKC, or NFKD, If not specified default\nis NFC"
          }
        ]
      },
      "xaiDescription": "Normalizes string according to specified Unicode form."
    },
    {
      "name": "CanceledError.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ]
      },
      "xaiDescription": "Repeats string count times, returns empty string if count is 0."
    },
    {
      "name": "CanceledError.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false."
      },
      "xaiDescription": "Checks if string starts with searchString at position."
    },
    {
      "name": "CanceledError.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ]
      },
      "xaiDescription": "Creates HTML anchor element with specified name."
    },
    {
      "name": "CanceledError.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "xaiDescription": "Generates a larger text element"
      }
    },
    {
      "name": "CanceledError.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "xaiDescription": "Creates a blinking text effect"
      }
    },
    {
      "name": "CanceledError.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "xaiDescription": "Renders text in bold"
      }
    },
    {
      "name": "CanceledError.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "xaiDescription": "Displays text in a fixed-width font"
      }
    },
    {
      "name": "CanceledError.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "xaiDescription": "Applies color to text (param: color)"
      }
    },
    {
      "name": "CanceledError.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "xaiDescription": "Sets font size for CanceledError message"
      }
    },
    {
      "name": "CanceledError.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "xaiDescription": "Formats CanceledError message in italics"
      }
    },
    {
      "name": "CanceledError.link",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "xaiDescription": "Creates a link for CanceledError message"
      }
    },
    {
      "name": "CanceledError.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "xaiDescription": "Displays CanceledError message in smaller text"
      }
    },
    {
      "name": "CanceledError.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "xaiDescription": "Strikes through CanceledError message"
      }
    },
    {
      "name": "CanceledError.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "xaiDescription": "Returns a `<sub>` HTML element for subscript text."
      }
    },
    {
      "name": "CanceledError.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "xaiDescription": "Returns a `<sup>` HTML element for superscript text."
      }
    },
    {
      "name": "CanceledError.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number"
        },
        {
          "name": "fillString",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current strings length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is   (U+0020)."
          }
        ],
        "xaiDescription": "Pads string from start to reach given length."
      }
    },
    {
      "name": "CanceledError.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number"
        },
        {
          "name": "fillString",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current strings length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is   (U+0020)."
          }
        ],
        "xaiDescription": "Pads string from end to reach given length."
      }
    },
    {
      "name": "CanceledError.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "xaiDescription": "Removes trailing whitespace and line terminators."
      }
    },
    {
      "name": "CanceledError.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "xaiDescription": "Removes leading whitespace from string."
      }
    },
    {
      "name": "CanceledError.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "xaiDescription": "Removes leading whitespace from string."
      }
    },
    {
      "name": "CanceledError.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "xaiDescription": "Removes trailing whitespace from string."
      }
    },
    {
      "name": "CanceledError.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "xaiDescription": "Matches string with regex, returns iterable of matches."
      }
    },
    {
      "name": "CanceledError.__@iterator@8870",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "xaiDescription": "Provides iteration over string."
      }
    },
    {
      "name": "CanceledError.at",
      "parameters": [
        {
          "name": "index",
          "type": "number"
        }
      ],
      "returnType": "string",
      "xaiDescription": "Get error message at specified index."
    },
    {
      "name": "CanceledError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object"
        },
        {
          "name": "constructorOpt",
          "type": "Function"
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object"
      }
    },
    {
      "name": "CanceledError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error"
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]"
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": []
      }
    },
    {
      "name": "CanceledError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ]
      }
    },
    {
      "name": "CanceledError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ]
      }
    },
    {
      "name": "CanceledError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a number string with specified digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits (1-21)."
          }
        ]
      }
    },
    {
      "name": "CanceledError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        },
        {
          "name": "options",
          "type": "NumberFormatOptions"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a locale-specific string.",
        "params": [
          {
            "name": "locales",
            "description": "Locale string or array (priority order)."
          },
          {
            "name": "options",
            "description": "Comparison options."
          }
        ]
      }
    },
    {
      "name": "default",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Creates a default Axios instance (Uses AxiosRequestConfig<D>)."
    },
    {
      "name": "create",
      "parameters": [
        {
          "name": "config",
          "type": "CreateAxiosDefaults<any>"
        }
      ],
      "returnType": "AxiosInstance",
      "xaiDescription": "Creates a new Axios instance (Uses CreateAxiosDefaults<any>)."
    },
    {
      "name": "getUri",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<any>"
        }
      ],
      "returnType": "string",
      "xaiDescription": "Gets the URI for an Axios request (Uses AxiosRequestConfig<any>)."
    },
    {
      "name": "request",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "xaiDescription": "Config for the request (Uses AxiosRequestConfig<D>)"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a custom request (Returns Promise<R>)"
    },
    {
      "name": "get",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "xaiDescription": "URL for the GET request"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "xaiDescription": "Config for the GET request (Uses AxiosRequestConfig<D>)"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Perform a GET request (Returns Promise<R>)"
    },
    {
      "name": "delete",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "xaiDescription": "URL for the DELETE request"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "xaiDescription": "Config for the DELETE request (Uses AxiosRequestConfig<D>)"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Perform a DELETE request (Returns Promise<R>)"
    },
    {
      "name": "head",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "xaiDescription": "URL for the HEAD request"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "xaiDescription": "Config for the HEAD request (Uses AxiosRequestConfig<D>)"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Perform a HEAD request (Returns Promise<R>)"
    },
    {
      "name": "options",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "xaiDescription": "URL for the OPTIONS request"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>",
          "xaiDescription": "Config for the OPTIONS request (Uses AxiosRequestConfig<D>)"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Perform an OPTIONS request (Returns Promise<R>)"
    },
    {
      "name": "post",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send POST request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "put",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send PUT request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "patch",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send PATCH request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "postForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send POST form request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "putForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send PUT form request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "patchForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a PATCH request with form data. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.create",
      "parameters": [
        {
          "name": "config",
          "type": "CreateAxiosDefaults<any>"
        }
      ],
      "returnType": "AxiosInstance",
      "xaiDescription": "Create a new Axios instance. Uses CreateAxiosDefaults<any>."
    },
    {
      "name": "default.source",
      "parameters": [],
      "returnType": "CancelTokenSource",
      "xaiDescription": "Create a cancel token source for request cancellation."
    },
    {
      "name": "default.from",
      "parameters": [
        {
          "name": "error",
          "type": "unknown"
        },
        {
          "name": "code",
          "type": "string"
        },
        {
          "name": "config",
          "type": "InternalAxiosRequestConfig<D>"
        },
        {
          "name": "request",
          "type": "any"
        },
        {
          "name": "response",
          "type": "AxiosResponse<T, D>"
        },
        {
          "name": "customProps",
          "type": "object"
        }
      ],
      "returnType": "AxiosError<T, D>",
      "xaiDescription": "Create an Axios error object. Uses AxiosResponse<T, D>."
    },
    {
      "name": "default.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object"
        },
        {
          "name": "constructorOpt",
          "type": "Function"
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object"
      }
    },
    {
      "name": "HttpStatusCode.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ]
      },
      "xaiDescription": "Converts HttpStatusCode to fixed-point notation string."
    },
    {
      "name": "HttpStatusCode.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ]
      },
      "xaiDescription": "Converts HttpStatusCode to exponential notation string."
    },
    {
      "name": "HttpStatusCode.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ]
      },
      "xaiDescription": "Converts HttpStatusCode to string with specified precision."
    },
    {
      "name": "HttpStatusCode.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object."
      },
      "xaiDescription": "Returns the numeric value of HttpStatusCode."
    },
    {
      "name": "HttpStatusCode.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        },
        {
          "name": "options",
          "type": "NumberFormatOptions"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ]
      },
      "xaiDescription": "Converts HttpStatusCode to locale-specific string."
    },
    {
      "name": "default.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error"
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]"
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "xaiDescription": "Customizes stack trace formatting. Uses Error and CallSite[] types."
      }
    },
    {
      "name": "default.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "xaiDescription": "Converts object to string."
      }
    },
    {
      "name": "default.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "xaiDescription": "Retrieves character at given position. Uses number type."
      }
    },
    {
      "name": "default.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "xaiDescription": "Gets Unicode value of character. Uses number type."
      }
    },
    {
      "name": "default.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "xaiDescription": "Joins multiple strings. Uses string[] type."
      }
    },
    {
      "name": "default.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ]
      },
      "xaiDescription": "Finds first occurrence of substring in string."
    },
    {
      "name": "default.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ]
      },
      "xaiDescription": "Finds last occurrence of substring in string."
    },
    {
      "name": "default.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ]
      },
      "xaiDescription": "Compares strings based on current locale."
    },
    {
      "name": "default.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp"
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ]
      },
      "xaiDescription": "Matches string with regex, returns result array."
    },
    {
      "name": "default.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp"
        },
        {
          "name": "replaceValue",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ]
      },
      "xaiDescription": "Replaces text in string using regex or search string."
    },
    {
      "name": "default.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ]
      },
      "xaiDescription": "Searches for a pattern in a string, returns the index of the match."
    },
    {
      "name": "default.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number"
        },
        {
          "name": "end",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ]
      },
      "xaiDescription": "Extracts a section of a string, returns a new string."
    },
    {
      "name": "default.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp"
        },
        {
          "name": "limit",
          "type": "number"
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ]
      },
      "xaiDescription": "Divides a string into an array of substrings based on a separator."
    },
    {
      "name": "default.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number"
        },
        {
          "name": "end",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ]
      },
      "xaiDescription": "Extracts a substring from a string, returns a new string."
    },
    {
      "name": "default.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase."
      },
      "xaiDescription": "Converts a string to lowercase."
    },
    {
      "name": "default.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, considering the current locale.",
        "xaiDescription": "Converts string to lowercase using locale-specific rules."
      }
    },
    {
      "name": "default.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "xaiDescription": "Converts string to uppercase."
      }
    },
    {
      "name": "default.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale.",
        "xaiDescription": "Converts string to uppercase using locale-specific rules."
      }
    },
    {
      "name": "default.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "xaiDescription": "Removes whitespace from both ends of a string."
      }
    },
    {
      "name": "default.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number"
        },
        {
          "name": "length",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "xaiDescription": "Extracts a substring from a string."
      }
    },
    {
      "name": "default.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "xaiDescription": "Returns the primitive value of the object."
      }
    },
    {
      "name": "default.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "xaiDescription": "Returns the code point value at the specified position in the string."
      }
    },
    {
      "name": "default.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "xaiDescription": "Checks if a string contains a specified substring from a given position."
      }
    },
    {
      "name": "default.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "endPosition",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "xaiDescription": "Checks if a string ends with a specified substring at a given position."
      }
    },
    {
      "name": "default.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "NFC | NFD | NFKC | NFKD"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: NFC, NFD, NFKC, or NFKD, If not specified default\nis NFC"
          }
        ],
        "xaiDescription": "Normalizes a string according to the specified Unicode normalization form."
      }
    },
    {
      "name": "default.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value made from count copies appended together. If count is 0, returns empty string.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ]
      },
      "xaiDescription": "Creates a string by repeating a value. Uses String."
    },
    {
      "name": "default.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false."
      },
      "xaiDescription": "Checks if a string starts with a specified substring. Uses String."
    },
    {
      "name": "default.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name",
            "description": "name attribute value"
          }
        ]
      },
      "xaiDescription": "Creates an HTML anchor element. Uses String."
    },
    {
      "name": "default.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": []
      },
      "xaiDescription": "Creates an HTML big element. Uses String."
    },
    {
      "name": "default.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": []
      },
      "xaiDescription": "Creates an HTML blink element. Uses String."
    },
    {
      "name": "default.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "xaiDescription": "Returns a bold HTML element."
      }
    },
    {
      "name": "default.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "xaiDescription": "Returns a fixed-width font HTML element."
      }
    },
    {
      "name": "default.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "xaiDescription": "Returns a font HTML element with specified color."
      }
    },
    {
      "name": "default.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "xaiDescription": "Returns a font HTML element with specified size."
      }
    },
    {
      "name": "default.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "xaiDescription": "Returns an italic HTML element."
      }
    },
    {
      "name": "default.link",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [
          {
            "name": "url",
            "description": "The URL to set as the href attribute"
          }
        ]
      },
      "xaiDescription": "Creates an anchor element with specified URL"
    },
    {
      "name": "default.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": []
      },
      "xaiDescription": "Generates a small text element"
    },
    {
      "name": "default.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": []
      },
      "xaiDescription": "Creates a strikethrough text element"
    },
    {
      "name": "default.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": []
      },
      "xaiDescription": "Generates a subscript text element"
    },
    {
      "name": "default.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": []
      },
      "xaiDescription": "Creates a superscript text element"
    },
    {
      "name": "default.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number"
        },
        {
          "name": "fillString",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads string from start to reach given length.",
        "params": [
          {
            "name": "maxLength",
            "description": "Resulting string length after padding."
          },
          {
            "name": "fillString",
            "description": "String used for padding (default: space)."
          }
        ]
      },
      "xaiDescription": "Pads string from start to given length."
    },
    {
      "name": "default.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number"
        },
        {
          "name": "fillString",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads string from end to reach given length.",
        "params": [
          {
            "name": "maxLength",
            "description": "Resulting string length after padding."
          },
          {
            "name": "fillString",
            "description": "String used for padding (default: space)."
          }
        ]
      },
      "xaiDescription": "Pads string from end to given length."
    },
    {
      "name": "default.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes trailing whitespace and line terminators.",
        "params": []
      },
      "xaiDescription": "Removes trailing whitespace and line terminators."
    },
    {
      "name": "default.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes leading whitespace and line terminators.",
        "params": []
      },
      "xaiDescription": "Removes leading whitespace and line terminators."
    },
    {
      "name": "default.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes leading whitespace and line terminators.",
        "params": []
      },
      "xaiDescription": "Removes leading whitespace and line terminators."
    },
    {
      "name": "default.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes trailing white space and line terminators from a string.",
        "params": [],
        "xaiDescription": "Removes trailing whitespace and line terminators from a string."
      }
    },
    {
      "name": "default.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "xaiDescription": "Matches string with RegExp, returns iterable of matches (RegExpExecArray)."
      }
    },
    {
      "name": "default.__@iterator@8870",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "xaiDescription": "Provides an iterator for string traversal."
      }
    },
    {
      "name": "default.at",
      "parameters": [
        {
          "name": "index",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Retrieves the character at the specified index in a string.",
        "params": [
          {
            "name": "index",
            "description": "The index of the character to retrieve."
          }
        ],
        "xaiDescription": "Retrieves character at specified index in a string."
      }
    },
    {
      "name": "default.isCancel",
      "parameters": [
        {
          "name": "value",
          "type": "any"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether the provided value is a cancellation signal.",
        "params": [
          {
            "name": "value",
            "description": "The value to check."
          }
        ],
        "xaiDescription": "Checks if provided value is a cancellation signal."
      }
    },
    {
      "name": "captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object"
        },
        {
          "name": "constructorOpt",
          "type": "Function"
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "xaiDescription": "Adds stack trace to target object"
      }
    },
    {
      "name": "prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error"
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]"
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "xaiDescription": "Customizes stack trace formatting"
      }
    },
    {
      "name": "AxiosError.from",
      "parameters": [
        {
          "name": "error",
          "type": "unknown"
        },
        {
          "name": "code",
          "type": "string"
        },
        {
          "name": "config",
          "type": "InternalAxiosRequestConfig<D>"
        },
        {
          "name": "request",
          "type": "any"
        },
        {
          "name": "response",
          "type": "AxiosResponse<T, D>"
        },
        {
          "name": "customProps",
          "type": "object"
        }
      ],
      "returnType": "AxiosError<T, D>",
      "jsdoc": {
        "xaiDescription": "Creates AxiosError from given parameters"
      }
    },
    {
      "name": "AxiosError.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "xaiDescription": "Converts AxiosError to string"
      }
    },
    {
      "name": "AxiosError.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "xaiDescription": "Gets character at specified index in AxiosError"
      }
    },
    {
      "name": "default.all",
      "parameters": [
        {
          "name": "values",
          "type": "(T | Promise<T>)[]"
        }
      ],
      "returnType": "Promise<T[]>",
      "xaiDescription": "Resolves all promises in the array. Uses Promise<T>."
    },
    {
      "name": "default.spread",
      "parameters": [
        {
          "name": "callback",
          "type": "(...args: T[]) => R"
        }
      ],
      "returnType": "(array: T[]) => R",
      "xaiDescription": "Spreads array elements as arguments to callback. Returns function."
    },
    {
      "name": "default.isAxiosError",
      "parameters": [
        {
          "name": "payload",
          "type": "any"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Checks if payload is an Axios error. Returns boolean."
    },
    {
      "name": "default.toFormData",
      "parameters": [
        {
          "name": "sourceObj",
          "type": "object"
        },
        {
          "name": "targetFormData",
          "type": "GenericFormData"
        },
        {
          "name": "options",
          "type": "FormSerializerOptions"
        }
      ],
      "returnType": "GenericFormData",
      "xaiDescription": "Converts object to FormData. Uses GenericFormData, FormSerializerOptions."
    },
    {
      "name": "default.formToJSON",
      "parameters": [
        {
          "name": "form",
          "type": "GenericFormData | GenericHTMLFormElement"
        }
      ],
      "returnType": "object",
      "xaiDescription": "Converts FormData or HTMLForm to JSON object. Uses GenericFormData."
    },
    {
      "name": "default.getAdapter",
      "parameters": [
        {
          "name": "adapters",
          "type": "AxiosAdapterConfig | AxiosAdapterConfig[]"
        }
      ],
      "returnType": "AxiosAdapter",
      "xaiDescription": "Retrieves adapter from config. Uses AxiosAdapterConfig."
    },
    {
      "name": "default.accessor",
      "parameters": [
        {
          "name": "header",
          "type": "string | string[]"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Accesses headers. Uses AxiosHeaders."
    },
    {
      "name": "default.mergeConfig",
      "parameters": [
        {
          "name": "config1",
          "type": "AxiosRequestConfig<D>"
        },
        {
          "name": "config2",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "AxiosRequestConfig<D>",
      "xaiDescription": "Merges two configs. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.onUploadProgress",
      "parameters": [
        {
          "name": "progressEvent",
          "type": "AxiosProgressEvent"
        }
      ],
      "returnType": "void",
      "xaiDescription": "Handles upload progress. Uses AxiosProgressEvent."
    },
    {
      "name": "default.onDownloadProgress",
      "parameters": [
        {
          "name": "progressEvent",
          "type": "AxiosProgressEvent"
        }
      ],
      "returnType": "void",
      "xaiDescription": "Handles download progress. Uses AxiosProgressEvent."
    },
    {
      "name": "default.validateStatus",
      "parameters": [
        {
          "name": "status",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Checks if HTTP status code is valid. Returns true or false."
    },
    {
      "name": "default.beforeRedirect",
      "parameters": [
        {
          "name": "options",
          "type": "Record<string, any>"
        },
        {
          "name": "responseDetails",
          "type": "{ headers: Record<string, string>; statusCode: HttpStatusCode; }"
        }
      ],
      "returnType": "void",
      "xaiDescription": "Called before redirecting. Modifies options based on response details."
    },
    {
      "name": "default.lookup",
      "parameters": [
        {
          "name": "hostname",
          "type": "string"
        },
        {
          "name": "options",
          "type": "object"
        },
        {
          "name": "cb",
          "type": "(err: Error, address: LookupAddress | LookupAddress[], family?: AddressFamily) => void"
        }
      ],
      "returnType": "void | Promise<LookupAddress | [address: LookupAddressEntry | LookupAddressEntry[], family?: AddressFamily]>",
      "xaiDescription": "Resolves hostname to IP address. Uses callback or returns Promise."
    },
    {
      "name": "default.getUri",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<any>"
        }
      ],
      "returnType": "string",
      "xaiDescription": "Generates URI from Axios request config. Uses AxiosRequestConfig<any>."
    },
    {
      "name": "default.request",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Sends HTTP request using Axios. Configures and returns Promise<R>."
    },
    {
      "name": "default.get",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a GET request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.delete",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a DELETE request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.head",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a HEAD request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.options",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send an OPTIONS request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.post",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a POST request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.put",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Sends a PUT request to the specified URL. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.patch",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Sends a PATCH request to the specified URL. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.postForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Sends a POST request with form data to the specified URL. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.putForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Sends a PUT request with form data to the specified URL. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "default.patchForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Sends a PATCH request with form data to the specified URL. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "AxiosHeaders.set",
      "parameters": [
        {
          "name": "headerName",
          "type": "string"
        },
        {
          "name": "value",
          "type": "AxiosHeaderValue"
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Sets a header with the given name and value. Uses AxiosHeaderValue."
    },
    {
      "name": "AxiosHeaders.set",
      "parameters": [
        {
          "name": "headers",
          "type": "string | AxiosHeaders | RawAxiosHeaders"
        },
        {
          "name": "rewrite",
          "type": "boolean"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Sets multiple headers. Uses AxiosHeaders and RawAxiosHeaders."
    },
    {
      "name": "AxiosHeaders.get",
      "parameters": [
        {
          "name": "headerName",
          "type": "string"
        },
        {
          "name": "parser",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpExecArray",
      "xaiDescription": "Gets a header value using a regular expression parser."
    },
    {
      "name": "AxiosHeaders.get",
      "parameters": [
        {
          "name": "headerName",
          "type": "string"
        },
        {
          "name": "matcher",
          "type": "true | AxiosHeaderParser"
        }
      ],
      "returnType": "AxiosHeaderValue",
      "xaiDescription": "Gets a header value using a matcher. Uses AxiosHeaderValue."
    },
    {
      "name": "AxiosHeaders.has",
      "parameters": [
        {
          "name": "header",
          "type": "string"
        },
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Checks if a header exists using a matcher. Uses AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.delete",
      "parameters": [
        {
          "name": "header",
          "type": "string | string[]"
        },
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Deletes specified header(s) from AxiosHeaders instance."
    },
    {
      "name": "AxiosHeaders.clear",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Clears headers from AxiosHeaders instance based on matcher."
    },
    {
      "name": "AxiosHeaders.normalize",
      "parameters": [
        {
          "name": "format",
          "type": "boolean"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Normalizes headers in AxiosHeaders instance."
    },
    {
      "name": "AxiosHeaders.concat",
      "parameters": [
        {
          "name": "targets",
          "type": "(string | AxiosHeaders | RawAxiosHeaders)[]"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Concatenates headers from multiple sources into AxiosHeaders."
    },
    {
      "name": "AxiosHeaders.toJSON",
      "parameters": [
        {
          "name": "asStrings",
          "type": "boolean"
        }
      ],
      "returnType": "RawAxiosHeaders",
      "xaiDescription": "Converts AxiosHeaders to JSON format."
    },
    {
      "name": "AxiosHeaders.setContentType",
      "parameters": [
        {
          "name": "value",
          "type": "ContentType"
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Sets the Content-Type header. Uses ContentType, AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.getContentType",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpExecArray",
      "xaiDescription": "Gets Content-Type header using RegExp. Returns RegExpExecArray."
    },
    {
      "name": "AxiosHeaders.getContentType",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaderValue",
      "xaiDescription": "Gets Content-Type header using AxiosHeaderMatcher. Returns AxiosHeaderValue."
    },
    {
      "name": "AxiosHeaders.hasContentType",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Checks if Content-Type header exists. Uses AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.setContentLength",
      "parameters": [
        {
          "name": "value",
          "type": "AxiosHeaderValue"
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Sets the Content-Length header. Uses AxiosHeaderValue, AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.getContentLength",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpExecArray",
      "xaiDescription": "Extracts content length using a regular expression parser."
    },
    {
      "name": "AxiosHeaders.getContentLength",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaderValue",
      "xaiDescription": "Retrieves content length using a header matcher."
    },
    {
      "name": "AxiosHeaders.hasContentLength",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Checks if content length exists using a header matcher."
    },
    {
      "name": "AxiosHeaders.setAccept",
      "parameters": [
        {
          "name": "value",
          "type": "AxiosHeaderValue"
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Sets the Accept header value, optionally rewriting existing value."
    },
    {
      "name": "AxiosHeaders.getAccept",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpExecArray",
      "xaiDescription": "Retrieves the Accept header using a regular expression parser."
    },
    {
      "name": "AxiosHeaders.getAccept",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaderValue",
      "xaiDescription": "Get Accept header value. Uses AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.hasAccept",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Check if Accept header exists. Uses AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.setUserAgent",
      "parameters": [
        {
          "name": "value",
          "type": "AxiosHeaderValue"
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Set User-Agent header. Uses AxiosHeaderValue and AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.getUserAgent",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpExecArray",
      "xaiDescription": "Get User-Agent header using RegExp. Returns RegExpExecArray."
    },
    {
      "name": "AxiosHeaders.getUserAgent",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaderValue",
      "xaiDescription": "Get User-Agent header. Uses AxiosHeaderMatcher."
    },
    {
      "name": "AxiosError.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "xaiDescription": "Gets Unicode value of character at index."
      }
    },
    {
      "name": "AxiosError.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "xaiDescription": "Concatenates strings."
      }
    },
    {
      "name": "AxiosError.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "xaiDescription": "Finds first occurrence of substring."
      }
    },
    {
      "name": "AxiosError.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "xaiDescription": "Finds last occurrence of substring."
      }
    },
    {
      "name": "AxiosError.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "xaiDescription": "Compares strings in current locale."
      }
    },
    {
      "name": "AxiosHeaders.hasUserAgent",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Checks if User-Agent header exists. Uses AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.setContentEncoding",
      "parameters": [
        {
          "name": "value",
          "type": "AxiosHeaderValue"
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Sets Content-Encoding header. Uses AxiosHeaderValue and AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.getContentEncoding",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpExecArray",
      "xaiDescription": "Gets Content-Encoding header using RegExp. Returns RegExpExecArray."
    },
    {
      "name": "AxiosHeaders.getContentEncoding",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaderValue",
      "xaiDescription": "Gets Content-Encoding header. Uses AxiosHeaderMatcher. Returns AxiosHeaderValue."
    },
    {
      "name": "AxiosHeaders.hasContentEncoding",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Checks if Content-Encoding header exists. Uses AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.setAuthorization",
      "parameters": [
        {
          "name": "value",
          "type": "AxiosHeaderValue"
        },
        {
          "name": "rewrite",
          "type": "boolean | AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Sets the Authorization header. Uses AxiosHeaderValue, boolean, AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.getAuthorization",
      "parameters": [
        {
          "name": "parser",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpExecArray",
      "xaiDescription": "Gets Authorization header using RegExp. Returns RegExpExecArray."
    },
    {
      "name": "AxiosHeaders.getAuthorization",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "AxiosHeaderValue",
      "xaiDescription": "Gets Authorization header using AxiosHeaderMatcher. Returns AxiosHeaderValue."
    },
    {
      "name": "AxiosHeaders.hasAuthorization",
      "parameters": [
        {
          "name": "matcher",
          "type": "AxiosHeaderMatcher"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Checks if Authorization header exists. Uses AxiosHeaderMatcher."
    },
    {
      "name": "AxiosHeaders.__@iterator@8870",
      "parameters": [],
      "returnType": "IterableIterator<[string, AxiosHeaderValue]>",
      "xaiDescription": "Iterates over AxiosHeaders. Returns IterableIterator<[string, AxiosHeaderValue]>."
    },
    {
      "name": "Axios.getUri",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<any>"
        }
      ],
      "returnType": "string",
      "xaiDescription": "Generates a URL from the given config. Uses AxiosRequestConfig<any>."
    },
    {
      "name": "Axios.request",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Sends a custom request. Uses AxiosRequestConfig<D>. Returns Promise<R>."
    },
    {
      "name": "Axios.get",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Performs a GET request. Uses AxiosRequestConfig<D>. Returns Promise<R>."
    },
    {
      "name": "Axios.delete",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Performs a DELETE request. Uses AxiosRequestConfig<D>. Returns Promise<R>."
    },
    {
      "name": "Axios.head",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Performs a HEAD request. Uses AxiosRequestConfig<D>. Returns Promise<R>."
    },
    {
      "name": "Axios.options",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send OPTIONS request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "Axios.post",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send POST request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "Axios.put",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send PUT request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "Axios.patch",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send PATCH request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "Axios.postForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send POST form request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "Axios.putForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send PUT request with form data. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "Axios.patchForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send PATCH request with form data. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send HTTP request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.create",
      "parameters": [
        {
          "name": "config",
          "type": "CreateAxiosDefaults<any>"
        }
      ],
      "returnType": "AxiosInstance",
      "xaiDescription": "Create new Axios instance. Uses CreateAxiosDefaults<any>."
    },
    {
      "name": "axios.source",
      "parameters": [],
      "returnType": "CancelTokenSource",
      "xaiDescription": "Create cancel token source."
    },
    {
      "name": "axios.from",
      "parameters": [
        {
          "name": "error",
          "type": "unknown"
        },
        {
          "name": "code",
          "type": "string"
        },
        {
          "name": "config",
          "type": "InternalAxiosRequestConfig<D>"
        },
        {
          "name": "request",
          "type": "any"
        },
        {
          "name": "response",
          "type": "AxiosResponse<T, D>"
        },
        {
          "name": "customProps",
          "type": "object"
        }
      ],
      "returnType": "AxiosError<T, D>",
      "xaiDescription": "Creates an AxiosError from given parameters. Uses InternalAxiosRequestConfig<D> and AxiosResponse<T, D>."
    },
    {
      "name": "axios.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object"
        },
        {
          "name": "constructorOpt",
          "type": "Function"
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object"
      }
    },
    {
      "name": "axios.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error"
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]"
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": []
      }
    },
    {
      "name": "axios.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string."
      }
    },
    {
      "name": "axios.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ]
      }
    },
    {
      "name": "axios.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "xaiDescription": "Gets Unicode value of character at given index."
      }
    },
    {
      "name": "axios.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "xaiDescription": "Concatenates multiple strings into one."
      }
    },
    {
      "name": "axios.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "xaiDescription": "Finds first occurrence of substring."
      }
    },
    {
      "name": "axios.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "xaiDescription": "Finds last occurrence of substring."
      }
    },
    {
      "name": "axios.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "xaiDescription": "Compares strings based on locale."
      }
    },
    {
      "name": "axios.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp"
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ]
      },
      "xaiDescription": "Matches string with regex, returns result array. Uses RegExpMatchArray."
    },
    {
      "name": "axios.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp"
        },
        {
          "name": "replaceValue",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ]
      },
      "xaiDescription": "Replaces text in string using regex or search string. Returns modified string."
    },
    {
      "name": "axios.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ]
      },
      "xaiDescription": "Finds first substring match using regex. Returns index or -1 if not found."
    },
    {
      "name": "axios.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number"
        },
        {
          "name": "end",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ]
      },
      "xaiDescription": "Extracts section of string from start to end index. Returns extracted string."
    },
    {
      "name": "axios.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp"
        },
        {
          "name": "limit",
          "type": "number"
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ]
      },
      "xaiDescription": "Splits string into substrings using separator. Returns array of substrings. Uses Array<string>."
    },
    {
      "name": "axios.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number"
        },
        {
          "name": "end",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ]
      },
      "xaiDescription": "Extracts a substring from a string (start, end)."
    },
    {
      "name": "axios.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase."
      },
      "xaiDescription": "Converts a string to lowercase."
    },
    {
      "name": "axios.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale."
      },
      "xaiDescription": "Converts a string to lowercase based on locale."
    },
    {
      "name": "axios.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase."
      },
      "xaiDescription": "Converts a string to uppercase."
    },
    {
      "name": "axios.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale."
      },
      "xaiDescription": "Converts a string to uppercase based on locale."
    },
    {
      "name": "axios.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes leading and trailing whitespace and line terminators from a string."
      },
      "xaiDescription": "Trims whitespace and line terminators from a string."
    },
    {
      "name": "axios.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number"
        },
        {
          "name": "length",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ]
      },
      "xaiDescription": "Extracts a substring from a string using start position and length."
    },
    {
      "name": "axios.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object."
      },
      "xaiDescription": "Returns the primitive value of an object."
    },
    {
      "name": "axios.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos."
      },
      "xaiDescription": "Gets the Unicode code point at a specified position in a string."
    },
    {
      "name": "axios.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ]
      },
      "xaiDescription": "Checks if a string contains a specified substring from a given position."
    },
    {
      "name": "AxiosError.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp"
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ]
      },
      "xaiDescription": "Matches string with regex, returns result array."
    },
    {
      "name": "AxiosError.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp"
        },
        {
          "name": "replaceValue",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ]
      },
      "xaiDescription": "Replaces text in string using regex or search string."
    },
    {
      "name": "AxiosError.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ]
      },
      "xaiDescription": "Finds first substring match in regex search."
    },
    {
      "name": "AxiosError.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number"
        },
        {
          "name": "end",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ]
      },
      "xaiDescription": "Returns section of string based on start and end indices."
    },
    {
      "name": "AxiosError.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp"
        },
        {
          "name": "limit",
          "type": "number"
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ]
      },
      "xaiDescription": "Splits string into substrings using separator, returns array."
    },
    {
      "name": "axios.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "endPosition",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false."
      },
      "xaiDescription": "Checks if string ends with searchString at endPosition."
    },
    {
      "name": "axios.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "NFC | NFD | NFKC | NFKD"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: NFC, NFD, NFKC, or NFKD, If not specified default\nis NFC"
          }
        ]
      },
      "xaiDescription": "Normalizes string according to specified Unicode form."
    },
    {
      "name": "axios.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ]
      },
      "xaiDescription": "Repeats string count times, returns empty string if count is 0."
    },
    {
      "name": "axios.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false."
      },
      "xaiDescription": "Checks if string starts with searchString at position."
    },
    {
      "name": "axios.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ]
      },
      "xaiDescription": "Creates HTML anchor element with specified name attribute."
    },
    {
      "name": "axios.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "xaiDescription": "Creates a larger text HTML element"
      }
    },
    {
      "name": "axios.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "xaiDescription": "Generates a blinking text HTML element"
      }
    },
    {
      "name": "axios.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "xaiDescription": "Creates a bold text HTML element"
      }
    },
    {
      "name": "axios.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "xaiDescription": "Generates a fixed-width text HTML element"
      }
    },
    {
      "name": "axios.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [
          {
            "name": "color",
            "type": "string",
            "description": "The color value to set for the font"
          }
        ],
        "xaiDescription": "Creates a font HTML element with specified color"
      }
    },
    {
      "name": "axios.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "xaiDescription": "Creates font element with specified size. Uses number."
      }
    },
    {
      "name": "axios.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "xaiDescription": "Generates italics HTML element."
      }
    },
    {
      "name": "axios.link",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "xaiDescription": "Creates link element with given URL. Uses string."
      }
    },
    {
      "name": "axios.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "xaiDescription": "Generates small HTML element."
      }
    },
    {
      "name": "axios.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "xaiDescription": "Generates strike-through HTML element."
      }
    },
    {
      "name": "axios.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "xaiDescription": "Generates a subscript HTML tag."
      }
    },
    {
      "name": "axios.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "xaiDescription": "Generates a superscript HTML tag."
      }
    },
    {
      "name": "axios.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number"
        },
        {
          "name": "fillString",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current strings length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is   (U+0020)."
          }
        ],
        "xaiDescription": "Pads string from start to reach specified length."
      }
    },
    {
      "name": "axios.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number"
        },
        {
          "name": "fillString",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current strings length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is   (U+0020)."
          }
        ],
        "xaiDescription": "Pads string from end to reach specified length."
      }
    },
    {
      "name": "axios.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "xaiDescription": "Removes trailing whitespace from string."
      }
    },
    {
      "name": "axios.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "xaiDescription": "Trims leading whitespace and line terminators from a string."
      }
    },
    {
      "name": "axios.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "xaiDescription": "Trims leading whitespace and line terminators from a string."
      }
    },
    {
      "name": "axios.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "xaiDescription": "Trims trailing whitespace and line terminators from a string."
      }
    },
    {
      "name": "axios.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp"
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "xaiDescription": "Matches string with regex, returns iterable of matches (Uses RegExpStringIterator<RegExpExecArray>)."
      }
    },
    {
      "name": "axios.__@iterator@8870",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "xaiDescription": "Provides iteration over a string (Uses StringIterator<string>)."
      }
    },
    {
      "name": "axios.at",
      "parameters": [
        {
          "name": "index",
          "type": "number"
        }
      ],
      "returnType": "string",
      "xaiDescription": "Get value at specific index in Axios response data array."
    },
    {
      "name": "axios.isCancel",
      "parameters": [
        {
          "name": "value",
          "type": "any"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Check if given value is a cancellation token."
    },
    {
      "name": "axios.all",
      "parameters": [
        {
          "name": "values",
          "type": "(T | Promise<T>)[]"
        }
      ],
      "returnType": "Promise<T[]>",
      "xaiDescription": "Run all promises in parallel, return array of results."
    },
    {
      "name": "axios.spread",
      "parameters": [
        {
          "name": "callback",
          "type": "(...args: T[]) => R"
        }
      ],
      "returnType": "(array: T[]) => R",
      "xaiDescription": "Spread array into separate arguments for callback function."
    },
    {
      "name": "axios.isAxiosError",
      "parameters": [
        {
          "name": "payload",
          "type": "any"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Check if given payload is an Axios error object."
    },
    {
      "name": "axios.toFormData",
      "parameters": [
        {
          "name": "sourceObj",
          "type": "object"
        },
        {
          "name": "targetFormData",
          "type": "GenericFormData"
        },
        {
          "name": "options",
          "type": "FormSerializerOptions"
        }
      ],
      "returnType": "GenericFormData",
      "xaiDescription": "Converts object to FormData. Uses GenericFormData, FormSerializerOptions."
    },
    {
      "name": "axios.formToJSON",
      "parameters": [
        {
          "name": "form",
          "type": "GenericFormData | GenericHTMLFormElement"
        }
      ],
      "returnType": "object",
      "xaiDescription": "Converts FormData or HTMLFormElement to JSON object."
    },
    {
      "name": "axios.getAdapter",
      "parameters": [
        {
          "name": "adapters",
          "type": "AxiosAdapterConfig | AxiosAdapterConfig[]"
        }
      ],
      "returnType": "AxiosAdapter",
      "xaiDescription": "Retrieves adapter from config. Uses AxiosAdapterConfig."
    },
    {
      "name": "axios.accessor",
      "parameters": [
        {
          "name": "header",
          "type": "string | string[]"
        }
      ],
      "returnType": "AxiosHeaders",
      "xaiDescription": "Creates accessor for headers. Uses AxiosHeaders."
    },
    {
      "name": "axios.mergeConfig",
      "parameters": [
        {
          "name": "config1",
          "type": "AxiosRequestConfig<D>"
        },
        {
          "name": "config2",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "AxiosRequestConfig<D>",
      "xaiDescription": "Merges two Axios configs. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.onUploadProgress",
      "parameters": [
        {
          "name": "progressEvent",
          "type": "AxiosProgressEvent"
        }
      ],
      "returnType": "void",
      "xaiDescription": "Callback for upload progress events. Uses AxiosProgressEvent."
    },
    {
      "name": "axios.onDownloadProgress",
      "parameters": [
        {
          "name": "progressEvent",
          "type": "AxiosProgressEvent"
        }
      ],
      "returnType": "void",
      "xaiDescription": "Callback for download progress events. Uses AxiosProgressEvent."
    },
    {
      "name": "axios.validateStatus",
      "parameters": [
        {
          "name": "status",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "xaiDescription": "Validates HTTP status code. Returns true if valid."
    },
    {
      "name": "axios.beforeRedirect",
      "parameters": [
        {
          "name": "options",
          "type": "Record<string, any>"
        },
        {
          "name": "responseDetails",
          "type": "{ headers: Record<string, string>; statusCode: HttpStatusCode; }"
        }
      ],
      "returnType": "void",
      "xaiDescription": "Callback before redirect. Uses HttpStatusCode."
    },
    {
      "name": "axios.lookup",
      "parameters": [
        {
          "name": "hostname",
          "type": "string"
        },
        {
          "name": "options",
          "type": "object"
        },
        {
          "name": "cb",
          "type": "(err: Error, address: LookupAddress | LookupAddress[], family?: AddressFamily) => void"
        }
      ],
      "returnType": "void | Promise<LookupAddress | [address: LookupAddressEntry | LookupAddressEntry[], family?: AddressFamily]>",
      "xaiDescription": "Performs DNS lookup. Uses LookupAddress and AddressFamily."
    },
    {
      "name": "axios.getUri",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<any>"
        }
      ],
      "returnType": "string",
      "xaiDescription": "Get the URI for a given Axios request config. Uses AxiosRequestConfig<any>."
    },
    {
      "name": "axios.request",
      "parameters": [
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send an HTTP request with the given Axios request config. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.get",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a GET request to the specified URL with optional Axios request config. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.delete",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a DELETE request to the specified URL with optional Axios request config. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.head",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a HEAD request to the specified URL with optional Axios request config. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.options",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send an OPTIONS request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.post",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a POST request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.put",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a PUT request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.patch",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a PATCH request. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.postForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Send a POST request with form data. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "AxiosError.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number"
        },
        {
          "name": "end",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ]
      },
      "xaiDescription": "Extracts a substring from the AxiosError message."
    },
    {
      "name": "AxiosError.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase."
      },
      "xaiDescription": "Converts the AxiosError message to lowercase."
    },
    {
      "name": "AxiosError.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environments current locale."
      },
      "xaiDescription": "Converts the AxiosError message to lowercase based on locale."
    },
    {
      "name": "AxiosError.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase."
      },
      "xaiDescription": "Converts the AxiosError message to uppercase."
    },
    {
      "name": "AxiosError.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environments current locale."
      },
      "xaiDescription": "Converts the AxiosError message to uppercase based on locale."
    },
    {
      "name": "axios.putForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Sends a PUT request with form data. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "axios.patchForm",
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "data",
          "type": "D"
        },
        {
          "name": "config",
          "type": "AxiosRequestConfig<D>"
        }
      ],
      "returnType": "Promise<R>",
      "xaiDescription": "Sends a PATCH request with form data. Uses AxiosRequestConfig<D>."
    },
    {
      "name": "AxiosError.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string."
      },
      "xaiDescription": "Trims whitespace from string."
    },
    {
      "name": "AxiosError.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number"
        },
        {
          "name": "length",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ]
      },
      "xaiDescription": "Extracts substring from string."
    },
    {
      "name": "AxiosError.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object."
      },
      "xaiDescription": "Returns primitive value of object."
    },
    {
      "name": "AxiosError.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number"
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos."
      },
      "xaiDescription": "Gets UTF-16 code point at position."
    },
    {
      "name": "AxiosError.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ]
      },
      "xaiDescription": "Checks if string contains substring."
    },
    {
      "name": "AxiosError.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "endPosition",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false."
      },
      "xaiDescription": "Checks if string ends with searchString at endPosition."
    },
    {
      "name": "AxiosError.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "NFC | NFD | NFKC | NFKD"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: NFC, NFD, NFKC, or NFKD, If not specified default is NFC"
          }
        ]
      },
      "xaiDescription": "Normalizes string according to specified Unicode form."
    },
    {
      "name": "AxiosError.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ]
      },
      "xaiDescription": "Repeats string count times, returns empty string if count is 0."
    },
    {
      "name": "AxiosError.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string"
        },
        {
          "name": "position",
          "type": "number"
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false."
      },
      "xaiDescription": "Checks if string starts with searchString at position."
    },
    {
      "name": "AxiosError.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ]
      },
      "xaiDescription": "Creates HTML anchor element with specified name attribute."
    }
  ],
  "enums": [
    {
      "name": "HttpStatusCode",
      "members": [
        {
          "name": "Continue",
          "value": "100"
        },
        {
          "name": "SwitchingProtocols",
          "value": "101"
        },
        {
          "name": "Processing",
          "value": "102"
        },
        {
          "name": "EarlyHints",
          "value": "103"
        },
        {
          "name": "Ok",
          "value": "200"
        },
        {
          "name": "Created",
          "value": "201"
        },
        {
          "name": "Accepted",
          "value": "202"
        },
        {
          "name": "NonAuthoritativeInformation",
          "value": "203"
        },
        {
          "name": "NoContent",
          "value": "204"
        },
        {
          "name": "ResetContent",
          "value": "205"
        },
        {
          "name": "PartialContent",
          "value": "206"
        },
        {
          "name": "MultiStatus",
          "value": "207"
        },
        {
          "name": "AlreadyReported",
          "value": "208"
        },
        {
          "name": "ImUsed",
          "value": "226"
        },
        {
          "name": "MultipleChoices",
          "value": "300"
        },
        {
          "name": "MovedPermanently",
          "value": "301"
        },
        {
          "name": "Found",
          "value": "302"
        },
        {
          "name": "SeeOther",
          "value": "303"
        },
        {
          "name": "NotModified",
          "value": "304"
        },
        {
          "name": "UseProxy",
          "value": "305"
        },
        {
          "name": "Unused",
          "value": "306"
        },
        {
          "name": "TemporaryRedirect",
          "value": "307"
        },
        {
          "name": "PermanentRedirect",
          "value": "308"
        },
        {
          "name": "BadRequest",
          "value": "400"
        },
        {
          "name": "Unauthorized",
          "value": "401"
        },
        {
          "name": "PaymentRequired",
          "value": "402"
        },
        {
          "name": "Forbidden",
          "value": "403"
        },
        {
          "name": "NotFound",
          "value": "404"
        },
        {
          "name": "MethodNotAllowed",
          "value": "405"
        },
        {
          "name": "NotAcceptable",
          "value": "406"
        },
        {
          "name": "ProxyAuthenticationRequired",
          "value": "407"
        },
        {
          "name": "RequestTimeout",
          "value": "408"
        },
        {
          "name": "Conflict",
          "value": "409"
        },
        {
          "name": "Gone",
          "value": "410"
        },
        {
          "name": "LengthRequired",
          "value": "411"
        },
        {
          "name": "PreconditionFailed",
          "value": "412"
        },
        {
          "name": "PayloadTooLarge",
          "value": "413"
        },
        {
          "name": "UriTooLong",
          "value": "414"
        },
        {
          "name": "UnsupportedMediaType",
          "value": "415"
        },
        {
          "name": "RangeNotSatisfiable",
          "value": "416"
        },
        {
          "name": "ExpectationFailed",
          "value": "417"
        },
        {
          "name": "ImATeapot",
          "value": "418"
        },
        {
          "name": "MisdirectedRequest",
          "value": "421"
        },
        {
          "name": "UnprocessableEntity",
          "value": "422"
        },
        {
          "name": "Locked",
          "value": "423"
        },
        {
          "name": "FailedDependency",
          "value": "424"
        },
        {
          "name": "TooEarly",
          "value": "425"
        },
        {
          "name": "UpgradeRequired",
          "value": "426"
        },
        {
          "name": "PreconditionRequired",
          "value": "428"
        },
        {
          "name": "TooManyRequests",
          "value": "429"
        },
        {
          "name": "RequestHeaderFieldsTooLarge",
          "value": "431"
        },
        {
          "name": "UnavailableForLegalReasons",
          "value": "451"
        },
        {
          "name": "InternalServerError",
          "value": "500"
        },
        {
          "name": "NotImplemented",
          "value": "501"
        },
        {
          "name": "BadGateway",
          "value": "502"
        },
        {
          "name": "ServiceUnavailable",
          "value": "503"
        },
        {
          "name": "GatewayTimeout",
          "value": "504"
        },
        {
          "name": "HttpVersionNotSupported",
          "value": "505"
        },
        {
          "name": "VariantAlsoNegotiates",
          "value": "506"
        },
        {
          "name": "InsufficientStorage",
          "value": "507"
        },
        {
          "name": "LoopDetected",
          "value": "508"
        },
        {
          "name": "NotExtended",
          "value": "510"
        },
        {
          "name": "NetworkAuthenticationRequired",
          "value": "511"
        }
      ],
      "xaiDescription": "Represents the HTTP status codes used in HTTP responses. Each member corresponds to a specific status code and its associated value."
    }
  ],
  "types": [
    {
      "name": "AxiosHeaderValue",
      "type": "AxiosHeaderValue",
      "properties": [
        {
          "name": "toString",
          "type": "((radix?: number) => string) | (() => string) | (() => string) | (() => string)",
          "xaiDescription": "Converts header value to string, optional radix for number conversion."
        },
        {
          "name": "valueOf",
          "type": "(() => number) | (() => string) | (() => boolean) | (() => Object)",
          "xaiDescription": "Returns primitive value of header, type depends on content."
        },
        {
          "name": "toLocaleString",
          "type": "{ (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; } | (() => string) | { ...; }",
          "xaiDescription": "Formats header value as locale-specific string, optional formatting options."
        }
      ],
      "extends": [],
      "xaiDescription": "Represents a value for an HTTP header in Axios."
    },
    {
      "name": "RawAxiosHeaders",
      "type": "RawAxiosHeaders",
      "properties": [],
      "extends": [],
      "xaiDescription": "Raw representation of HTTP headers used in Axios."
    },
    {
      "name": "MethodsHeaders",
      "type": "Partial<{ get: AxiosHeaders; delete: AxiosHeaders; head: AxiosHeaders; options: AxiosHeaders; post: AxiosHeaders; ... 4 more ...; unlink: AxiosHeaders; } & { ...; }>",
      "properties": [
        {
          "name": "get",
          "type": "AxiosHeaders",
          "xaiDescription": "Headers for HTTP GET requests."
        },
        {
          "name": "delete",
          "type": "AxiosHeaders",
          "xaiDescription": "Headers for HTTP DELETE requests."
        },
        {
          "name": "head",
          "type": "AxiosHeaders",
          "xaiDescription": "Headers for HTTP HEAD requests."
        },
        {
          "name": "options",
          "type": "AxiosHeaders",
          "xaiDescription": "Headers for HTTP OPTIONS requests."
        },
        {
          "name": "post",
          "type": "AxiosHeaders",
          "xaiDescription": "Headers for HTTP POST requests."
        },
        {
          "name": "put",
          "type": "AxiosHeaders",
          "xaiDescription": "Headers for HTTP PUT requests."
        },
        {
          "name": "patch",
          "type": "AxiosHeaders",
          "xaiDescription": "Headers for HTTP PATCH requests."
        },
        {
          "name": "purge",
          "type": "AxiosHeaders",
          "xaiDescription": "Headers for HTTP PURGE requests."
        },
        {
          "name": "link",
          "type": "AxiosHeaders",
          "xaiDescription": "Headers for HTTP LINK requests."
        },
        {
          "name": "unlink",
          "type": "AxiosHeaders",
          "xaiDescription": "Headers for HTTP UNLINK requests."
        },
        {
          "name": "common",
          "type": "AxiosHeaders",
          "xaiDescription": "Common headers applicable to all HTTP methods."
        }
      ],
      "extends": [],
      "xaiDescription": "Defines headers for different HTTP methods in Axios."
    },
    {
      "name": "AxiosHeaderMatcher",
      "type": "AxiosHeaderMatcher",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string) | (() => string)",
          "xaiDescription": "Converts header matcher to string."
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "xaiDescription": "Returns primitive value of header matcher."
        }
      ],
      "extends": [],
      "xaiDescription": "Matcher for HTTP headers in Axios."
    },
    {
      "name": "AxiosHeaderParser",
      "type": "AxiosHeaderParser",
      "properties": [],
      "extends": [],
      "xaiDescription": "Parser for HTTP headers in Axios."
    },
    {
      "name": "CommonRequestHeadersList",
      "type": "CommonRequestHeadersList",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "xaiDescription": "Converts headers list to string."
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "xaiDescription": "Returns character at specified position in headers list."
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "xaiDescription": "Returns Unicode value of character at specified index in headers list."
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "xaiDescription": "Concatenates headers list with other strings."
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "xaiDescription": "Searches for a string within headers list, returns index."
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "xaiDescription": "Searches for last occurrence of string in headers list, returns index."
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "xaiDescription": "Compares headers list with another string, locale-sensitive."
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "xaiDescription": "Matches headers list against a regular expression."
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "xaiDescription": "Replaces parts of headers list with specified values or functions."
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "xaiDescription": "Searches headers list for a match to a regular expression."
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "xaiDescription": "Extracts part of headers list from start to end."
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "xaiDescription": "Splits headers list into an array of substrings."
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "xaiDescription": "Extracts characters from headers list between start and end."
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "xaiDescription": "Converts headers list to lowercase."
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "xaiDescription": "Converts headers list to locale-specific lowercase."
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "xaiDescription": "Converts headers list to uppercase."
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "xaiDescription": "Converts headers list to locale-specific uppercase."
        },
        {
          "name": "trim",
          "type": "() => string",
          "xaiDescription": "Removes whitespace from both ends of headers list."
        },
        {
          "name": "length",
          "type": "number",
          "xaiDescription": "Length of headers list."
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "xaiDescription": "Extracts part of headers list from specified position."
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "xaiDescription": "Returns primitive value of headers list."
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "xaiDescription": "Returns Unicode code point at specified position in headers list."
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "xaiDescription": "Checks if headers list contains specified string."
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "xaiDescription": "Checks if headers list ends with specified string."
        },
        {
          "name": "normalize",
          "type": "{ (form: NFC | NFD | NFKC | NFKD): string; (form?: string): string; }",
          "xaiDescription": "Normalizes headers list to specified Unicode form."
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "xaiDescription": "Repeats headers list specified number of times."
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "xaiDescription": "Checks if headers list starts with specified string."
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "xaiDescription": "Creates an HTML anchor element from headers list."
        },
        {
          "name": "big",
          "type": "() => string",
          "xaiDescription": "Creates a big text element from headers list."
        },
        {
          "name": "blink",
          "type": "() => string",
          "xaiDescription": "Creates a blinking text element from headers list."
        },
        {
          "name": "bold",
          "type": "() => string",
          "xaiDescription": "Creates a bold text element from headers list."
        },
        {
          "name": "fixed",
          "type": "() => string",
          "xaiDescription": "Creates a fixed-pitch font text element from headers list."
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "xaiDescription": "Creates a text element with specified color from headers list."
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "xaiDescription": "Creates a text element with specified font size from headers list."
        },
        {
          "name": "italics",
          "type": "() => string",
          "xaiDescription": "Creates an italic text element from headers list."
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "xaiDescription": "Creates an HTML hyperlink from headers list."
        },
        {
          "name": "small",
          "type": "() => string",
          "xaiDescription": "Creates a small text element from headers list."
        },
        {
          "name": "strike",
          "type": "() => string",
          "xaiDescription": "Creates a strikethrough text element from headers list."
        },
        {
          "name": "sub",
          "type": "() => string",
          "xaiDescription": "Creates a subscript text element from headers list."
        },
        {
          "name": "sup",
          "type": "() => string",
          "xaiDescription": "Creates a superscript text element from headers list."
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "xaiDescription": "Pads headers list at the start to specified length."
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "xaiDescription": "Pads headers list at the end to specified length."
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "xaiDescription": "Removes whitespace from the end of headers list."
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "xaiDescription": "Removes whitespace from the start of headers list."
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "xaiDescription": "Removes whitespace from the left of headers list."
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "xaiDescription": "Removes whitespace from the right of headers list."
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "xaiDescription": "Returns all matches of a regular expression in headers list."
        },
        {
          "name": "__@iterator@8870",
          "type": "() => StringIterator<string>",
          "xaiDescription": "Provides an iterator for headers list."
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "xaiDescription": "Returns character at specified index in headers list."
        }
      ],
      "extends": [],
      "xaiDescription": "List of common request headers used in Axios."
    }
  ],
  "classes": [
    {
      "name": "AxiosHeaders",
      "xaiDescription": "Represents a collection of HTTP headers used in Axios requests and responses.",
      "constructors": [
        {
          "parameters": [
            {
              "name": "headers",
              "type": "string | AxiosHeaders | RawAxiosHeaders",
              "xaiDescription": "The initial headers to set. Can be a string, an instance of AxiosHeaders, or an object representing raw headers."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Creates a new instance of AxiosHeaders with the specified initial headers."
        }
      ],
      "methods": [
        {
          "name": "AxiosHeaders.set",
          "parameters": [
            {
              "name": "headerName",
              "type": "string",
              "xaiDescription": "The name of the header to set."
            },
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "xaiDescription": "The value to set for the specified header."
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "xaiDescription": "Whether to rewrite existing headers or use a matcher to determine which headers to rewrite."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Sets a single header with the specified name and value. If rewrite is true or a matcher is provided, existing headers may be overwritten."
        },
        {
          "name": "AxiosHeaders.set",
          "parameters": [
            {
              "name": "headers",
              "type": "string | AxiosHeaders | RawAxiosHeaders",
              "xaiDescription": "The headers to set. Can be a string, an instance of AxiosHeaders, or an object representing raw headers."
            },
            {
              "name": "rewrite",
              "type": "boolean",
              "xaiDescription": "Whether to rewrite existing headers."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Sets multiple headers at once. If rewrite is true, existing headers will be overwritten."
        },
        {
          "name": "AxiosHeaders.get",
          "parameters": [
            {
              "name": "headerName",
              "type": "string",
              "xaiDescription": "The name of the header to retrieve."
            },
            {
              "name": "parser",
              "type": "RegExp",
              "xaiDescription": "A regular expression used to parse the header value."
            }
          ],
          "returnType": "RegExpExecArray",
          "xaiDescription": "Retrieves the value of a header using a regular expression parser. Returns the result of the regular expression match."
        },
        {
          "name": "AxiosHeaders.get",
          "parameters": [
            {
              "name": "headerName",
              "type": "string",
              "xaiDescription": "The name of the header to retrieve."
            },
            {
              "name": "matcher",
              "type": "true | AxiosHeaderParser",
              "xaiDescription": "A matcher or parser used to retrieve the header value."
            }
          ],
          "returnType": "AxiosHeaderValue",
          "xaiDescription": "Retrieves the value of a header using a matcher or parser. Returns the parsed header value."
        },
        {
          "name": "AxiosHeaders.has",
          "parameters": [
            {
              "name": "header",
              "type": "string",
              "xaiDescription": "The name of the header to check."
            },
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to check for the presence of the header."
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Checks if a header with the specified name exists, optionally using a matcher."
        },
        {
          "name": "AxiosHeaders.delete",
          "parameters": [
            {
              "name": "header",
              "type": "string | string[]",
              "xaiDescription": "The name or names of the headers to delete."
            },
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to determine which headers to delete."
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Deletes one or more headers, optionally using a matcher. Returns true if any headers were deleted."
        },
        {
          "name": "AxiosHeaders.clear",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to determine which headers to clear."
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Clears all headers, optionally using a matcher. Returns true if any headers were cleared."
        },
        {
          "name": "AxiosHeaders.normalize",
          "parameters": [
            {
              "name": "format",
              "type": "boolean",
              "xaiDescription": "Whether to normalize the headers in a specific format."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Normalizes the headers, optionally in a specific format. Returns a new instance of AxiosHeaders with normalized headers."
        },
        {
          "name": "AxiosHeaders.concat",
          "parameters": [
            {
              "name": "targets",
              "type": "(string | AxiosHeaders | RawAxiosHeaders)[]",
              "xaiDescription": "An array of headers to concatenate. Can contain strings, instances of AxiosHeaders, or objects representing raw headers."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Concatenates multiple sets of headers into a single instance of AxiosHeaders."
        },
        {
          "name": "AxiosHeaders.toJSON",
          "parameters": [
            {
              "name": "asStrings",
              "type": "boolean",
              "xaiDescription": "Whether to convert the headers to strings."
            }
          ],
          "returnType": "RawAxiosHeaders",
          "xaiDescription": "Converts the headers to a JSON representation, optionally as strings."
        },
        {
          "name": "AxiosHeaders.setContentType",
          "parameters": [
            {
              "name": "value",
              "type": "ContentType",
              "xaiDescription": "The content type to set."
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "xaiDescription": "Whether to rewrite existing content type headers or use a matcher to determine which headers to rewrite."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Sets the Content-Type header. If rewrite is true or a matcher is provided, existing headers may be overwritten."
        },
        {
          "name": "AxiosHeaders.getContentType",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "xaiDescription": "A regular expression used to parse the Content-Type header value."
            }
          ],
          "returnType": "RegExpExecArray",
          "xaiDescription": "Retrieves the value of the Content-Type header using a regular expression parser. Returns the result of the regular expression match."
        },
        {
          "name": "AxiosHeaders.getContentType",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to retrieve the Content-Type header value."
            }
          ],
          "returnType": "AxiosHeaderValue",
          "xaiDescription": "Retrieves the value of the Content-Type header using a matcher. Returns the parsed header value."
        },
        {
          "name": "AxiosHeaders.hasContentType",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to check for the presence of the Content-Type header."
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Checks if a Content-Type header exists, optionally using a matcher."
        },
        {
          "name": "AxiosHeaders.setContentLength",
          "parameters": [
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "xaiDescription": "The content length to set."
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "xaiDescription": "Whether to rewrite existing content length headers or use a matcher to determine which headers to rewrite."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Sets the Content-Length header. If rewrite is true or a matcher is provided, existing headers may be overwritten."
        },
        {
          "name": "AxiosHeaders.getContentLength",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "xaiDescription": "A regular expression used to parse the Content-Length header value."
            }
          ],
          "returnType": "RegExpExecArray",
          "xaiDescription": "Retrieves the value of the Content-Length header using a regular expression parser. Returns the result of the regular expression match."
        },
        {
          "name": "AxiosHeaders.getContentLength",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to retrieve the Content-Length header value."
            }
          ],
          "returnType": "AxiosHeaderValue",
          "xaiDescription": "Retrieves the value of the Content-Length header using a matcher. Returns the parsed header value."
        },
        {
          "name": "AxiosHeaders.hasContentLength",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to check for the presence of the Content-Length header."
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Checks if a Content-Length header exists, optionally using a matcher."
        },
        {
          "name": "AxiosHeaders.setAccept",
          "parameters": [
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "xaiDescription": "The accept value to set."
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "xaiDescription": "Whether to rewrite existing accept headers or use a matcher to determine which headers to rewrite."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Sets the Accept header. If rewrite is true or a matcher is provided, existing headers may be overwritten."
        },
        {
          "name": "AxiosHeaders.getAccept",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "xaiDescription": "A regular expression used to parse the Accept header value."
            }
          ],
          "returnType": "RegExpExecArray",
          "xaiDescription": "Retrieves the value of the Accept header using a regular expression parser. Returns the result of the regular expression match."
        },
        {
          "name": "AxiosHeaders.getAccept",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to retrieve the Accept header value."
            }
          ],
          "returnType": "AxiosHeaderValue",
          "xaiDescription": "Retrieves the value of the Accept header using a matcher. Returns the parsed header value."
        },
        {
          "name": "AxiosHeaders.hasAccept",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to check for the presence of the Accept header."
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Checks if an Accept header exists, optionally using a matcher."
        },
        {
          "name": "AxiosHeaders.setUserAgent",
          "parameters": [
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "xaiDescription": "The user agent value to set."
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "xaiDescription": "Whether to rewrite existing user agent headers or use a matcher to determine which headers to rewrite."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Sets the User-Agent header. If rewrite is true or a matcher is provided, existing headers may be overwritten."
        },
        {
          "name": "AxiosHeaders.getUserAgent",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "xaiDescription": "A regular expression used to parse the User-Agent header value."
            }
          ],
          "returnType": "RegExpExecArray",
          "xaiDescription": "Retrieves the value of the User-Agent header using a regular expression parser. Returns the result of the regular expression match."
        },
        {
          "name": "AxiosHeaders.getUserAgent",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to retrieve the User-Agent header value."
            }
          ],
          "returnType": "AxiosHeaderValue",
          "xaiDescription": "Retrieves the value of the User-Agent header using a matcher. Returns the parsed header value."
        },
        {
          "name": "AxiosHeaders.hasUserAgent",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to check for the presence of the User-Agent header."
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Checks if a User-Agent header exists, optionally using a matcher."
        },
        {
          "name": "AxiosHeaders.setContentEncoding",
          "parameters": [
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "xaiDescription": "The content encoding value to set."
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "xaiDescription": "Whether to rewrite existing content encoding headers or use a matcher to determine which headers to rewrite."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Sets the Content-Encoding header. If rewrite is true or a matcher is provided, existing headers may be overwritten."
        },
        {
          "name": "AxiosHeaders.getContentEncoding",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "xaiDescription": "A regular expression used to parse the Content-Encoding header value."
            }
          ],
          "returnType": "RegExpExecArray",
          "xaiDescription": "Retrieves the value of the Content-Encoding header using a regular expression parser. Returns the result of the regular expression match."
        },
        {
          "name": "AxiosHeaders.getContentEncoding",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to retrieve the Content-Encoding header value."
            }
          ],
          "returnType": "AxiosHeaderValue",
          "xaiDescription": "Retrieves the value of the Content-Encoding header using a matcher. Returns the parsed header value."
        },
        {
          "name": "AxiosHeaders.hasContentEncoding",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to check for the presence of the Content-Encoding header."
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Checks if a Content-Encoding header exists, optionally using a matcher."
        },
        {
          "name": "AxiosHeaders.setAuthorization",
          "parameters": [
            {
              "name": "value",
              "type": "AxiosHeaderValue",
              "xaiDescription": "The authorization value to set."
            },
            {
              "name": "rewrite",
              "type": "boolean | AxiosHeaderMatcher",
              "xaiDescription": "Whether to rewrite existing authorization headers or use a matcher to determine which headers to rewrite."
            }
          ],
          "returnType": "AxiosHeaders",
          "xaiDescription": "Sets the Authorization header. If rewrite is true or a matcher is provided, existing headers may be overwritten."
        },
        {
          "name": "AxiosHeaders.getAuthorization",
          "parameters": [
            {
              "name": "parser",
              "type": "RegExp",
              "xaiDescription": "A regular expression used to parse the Authorization header value."
            }
          ],
          "returnType": "RegExpExecArray",
          "xaiDescription": "Retrieves the value of the Authorization header using a regular expression parser. Returns the result of the regular expression match."
        },
        {
          "name": "AxiosHeaders.getAuthorization",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to retrieve the Authorization header value."
            }
          ],
          "returnType": "AxiosHeaderValue",
          "xaiDescription": "Retrieves the value of the Authorization header using a matcher. Returns the parsed header value."
        },
        {
          "name": "AxiosHeaders.hasAuthorization",
          "parameters": [
            {
              "name": "matcher",
              "type": "AxiosHeaderMatcher",
              "xaiDescription": "A matcher used to check for the presence of the Authorization header."
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Checks if an Authorization header exists, optionally using a matcher."
        },
        {
          "name": "AxiosHeaders.__@iterator@42606",
          "parameters": [],
          "returnType": "IterableIterator<[string, AxiosHeaderValue]>",
          "xaiDescription": "Returns an iterator over the headers, allowing iteration over the key-value pairs."
        }
      ],
      "properties": [],
      "implements": []
    },
    {
      "name": "AxiosError",
      "xaiDescription": "Represents an error that occurred during an Axios request.",
      "constructors": [
        {
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "xaiDescription": "The error message."
            },
            {
              "name": "code",
              "type": "string",
              "xaiDescription": "The error code."
            },
            {
              "name": "config",
              "type": "InternalAxiosRequestConfig<D>",
              "xaiDescription": "The request configuration that caused the error."
            },
            {
              "name": "request",
              "type": "any",
              "xaiDescription": "The request object associated with the error."
            },
            {
              "name": "response",
              "type": "AxiosResponse<T, D>",
              "xaiDescription": "The response object associated with the error, if available."
            }
          ],
          "returnType": "AxiosError<T, D>",
          "xaiDescription": "Creates a new instance of AxiosError with the specified error details."
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "config",
          "type": "InternalAxiosRequestConfig<D>",
          "xaiDescription": "The request configuration that caused the error."
        },
        {
          "name": "code",
          "type": "string",
          "xaiDescription": "The error code."
        },
        {
          "name": "request",
          "type": "any",
          "xaiDescription": "The request object associated with the error."
        },
        {
          "name": "response",
          "type": "AxiosResponse<T, D>",
          "xaiDescription": "The response object associated with the error, if available."
        },
        {
          "name": "isAxiosError",
          "type": "boolean",
          "xaiDescription": "Indicates whether the error is an instance of AxiosError."
        },
        {
          "name": "status",
          "type": "number",
          "xaiDescription": "The HTTP status code associated with the error, if available."
        },
        {
          "name": "toJSON",
          "type": "() => object",
          "xaiDescription": "Converts the error to a JSON representation."
        },
        {
          "name": "cause",
          "type": "Error",
          "xaiDescription": "The underlying cause of the error, if available."
        },
        {
          "name": "name",
          "type": "string",
          "xaiDescription": "The name of the error."
        },
        {
          "name": "message",
          "type": "string",
          "xaiDescription": "The error message."
        },
        {
          "name": "stack",
          "type": "string",
          "xaiDescription": "The stack trace of the error."
        }
      ],
      "extends": "Error",
      "implements": []
    },
    {
      "name": "CanceledError",
      "xaiDescription": "Represents an error that occurred due to a canceled Axios request.",
      "constructors": [],
      "methods": [],
      "properties": [
        {
          "name": "config",
          "type": "InternalAxiosRequestConfig<any>",
          "xaiDescription": "The request configuration that caused the error."
        },
        {
          "name": "code",
          "type": "string",
          "xaiDescription": "The error code."
        },
        {
          "name": "request",
          "type": "any",
          "xaiDescription": "The request object associated with the error."
        },
        {
          "name": "response",
          "type": "AxiosResponse<T, any>",
          "xaiDescription": "The response object associated with the error, if available."
        },
        {
          "name": "isAxiosError",
          "type": "boolean",
          "xaiDescription": "Indicates whether the error is an instance of AxiosError."
        },
        {
          "name": "status",
          "type": "number",
          "xaiDescription": "The HTTP status code associated with the error, if available."
        },
        {
          "name": "toJSON",
          "type": "() => object",
          "xaiDescription": "Converts the error to a JSON representation."
        },
        {
          "name": "cause",
          "type": "Error",
          "xaiDescription": "The underlying cause of the error, if available."
        },
        {
          "name": "name",
          "type": "string",
          "xaiDescription": "The name of the error."
        },
        {
          "name": "message",
          "type": "string",
          "xaiDescription": "The error message."
        },
        {
          "name": "stack",
          "type": "string",
          "xaiDescription": "The stack trace of the error."
        }
      ],
      "extends": "AxiosError<T>",
      "implements": []
    },
    {
      "name": "Axios",
      "xaiDescription": "The main Axios class used to create instances and make HTTP requests.",
      "constructors": [
        {
          "parameters": [
            {
              "name": "config",
              "type": "AxiosRequestConfig<any>",
              "xaiDescription": "The default configuration for the Axios instance."
            }
          ],
          "returnType": "Axios",
          "xaiDescription": "Creates a new instance of Axios with the specified default configuration."
        }
      ],
      "methods": [
        {
          "name": "Axios.getUri",
          "parameters": [
            {
              "name": "config",
              "type": "AxiosRequestConfig<any>",
              "xaiDescription": "The request configuration used to generate the URI."
            }
          ],
          "returnType": "string",
          "xaiDescription": "Generates the URI for a request based on the provided configuration."
        },
        {
          "name": "Axios.request",
          "parameters": [
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends a request with the specified configuration and returns a promise that resolves to the response."
        },
        {
          "name": "Axios.get",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "xaiDescription": "The URL to send the GET request to."
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends a GET request to the specified URL with the provided configuration and returns a promise that resolves to the response."
        },
        {
          "name": "Axios.delete",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "xaiDescription": "The URL to send the DELETE request to."
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends a DELETE request to the specified URL with the provided configuration and returns a promise that resolves to the response."
        },
        {
          "name": "Axios.head",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "xaiDescription": "The URL to send the HEAD request to."
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends a HEAD request to the specified URL with the provided configuration and returns a promise that resolves to the response."
        },
        {
          "name": "Axios.options",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "xaiDescription": "The URL to send the OPTIONS request to."
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends an OPTIONS request to the specified URL with the provided configuration and returns a promise that resolves to the response."
        },
        {
          "name": "Axios.post",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "xaiDescription": "The URL to send the POST request to."
            },
            {
              "name": "data",
              "type": "D",
              "xaiDescription": "The data to send with the request."
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends a POST request to the specified URL with the provided data and configuration, and returns a promise that resolves to the response."
        },
        {
          "name": "Axios.put",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "xaiDescription": "The URL to send the PUT request to."
            },
            {
              "name": "data",
              "type": "D",
              "xaiDescription": "The data to send with the request."
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends a PUT request to the specified URL with the provided data and configuration, and returns a promise that resolves to the response."
        },
        {
          "name": "Axios.patch",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "xaiDescription": "The URL to send the PATCH request to."
            },
            {
              "name": "data",
              "type": "D",
              "xaiDescription": "The data to send with the request."
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends a PATCH request to the specified URL with the provided data and configuration, and returns a promise that resolves to the response."
        },
        {
          "name": "Axios.postForm",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "xaiDescription": "The URL to send the POST request to."
            },
            {
              "name": "data",
              "type": "D",
              "xaiDescription": "The form data to send with the request."
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends a POST request with form data to the specified URL with the provided configuration, and returns a promise that resolves to the response."
        },
        {
          "name": "Axios.putForm",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "xaiDescription": "The URL to send the PUT request to."
            },
            {
              "name": "data",
              "type": "D",
              "xaiDescription": "The form data to send with the request."
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends a PUT request with form data to the specified URL with the provided configuration, and returns a promise that resolves to the response."
        },
        {
          "name": "Axios.patchForm",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "xaiDescription": "The URL to send the PATCH request to."
            },
            {
              "name": "data",
              "type": "D",
              "xaiDescription": "The form data to send with the request."
            },
            {
              "name": "config",
              "type": "AxiosRequestConfig<D>",
              "xaiDescription": "The request configuration."
            }
          ],
          "returnType": "Promise<R>",
          "xaiDescription": "Sends a PATCH request with form data to the specified URL with the provided configuration, and returns a promise that resolves to the response."
        }
      ],
      "properties": [
        {
          "name": "defaults",
          "type": "AxiosDefaults<any>",
          "xaiDescription": "The default configuration for the Axios instance."
        },
        {
          "name": "interceptors",
          "type": "{ request: AxiosInterceptorManager<InternalAxiosRequestConfig<any>>; response: AxiosInterceptorManager<AxiosResponse<any, any>>; }",
          "xaiDescription": "The interceptors for request and response handling."
        }
      ],
      "implements": []
    }
  ],
  "constants": [
    {
      "name": "HttpStatusCode.Continue",
      "type": "HttpStatusCode.Continue",
      "value": "100"
    },
    {
      "name": "HttpStatusCode.SwitchingProtocols",
      "type": "HttpStatusCode.SwitchingProtocols",
      "value": "101"
    },
    {
      "name": "HttpStatusCode.Processing",
      "type": "HttpStatusCode.Processing",
      "value": "102"
    },
    {
      "name": "HttpStatusCode.EarlyHints",
      "type": "HttpStatusCode.EarlyHints",
      "value": "103"
    },
    {
      "name": "HttpStatusCode.Ok",
      "type": "HttpStatusCode.Ok",
      "value": "200"
    },
    {
      "name": "HttpStatusCode.Created",
      "type": "HttpStatusCode.Created",
      "value": "201"
    },
    {
      "name": "HttpStatusCode.Accepted",
      "type": "HttpStatusCode.Accepted",
      "value": "202"
    },
    {
      "name": "HttpStatusCode.NonAuthoritativeInformation",
      "type": "HttpStatusCode.NonAuthoritativeInformation",
      "value": "203"
    },
    {
      "name": "HttpStatusCode.NoContent",
      "type": "HttpStatusCode.NoContent",
      "value": "204"
    },
    {
      "name": "HttpStatusCode.ResetContent",
      "type": "HttpStatusCode.ResetContent",
      "value": "205"
    },
    {
      "name": "HttpStatusCode.PartialContent",
      "type": "HttpStatusCode.PartialContent",
      "value": "206"
    },
    {
      "name": "HttpStatusCode.MultiStatus",
      "type": "HttpStatusCode.MultiStatus",
      "value": "207"
    },
    {
      "name": "HttpStatusCode.AlreadyReported",
      "type": "HttpStatusCode.AlreadyReported",
      "value": "208"
    },
    {
      "name": "HttpStatusCode.ImUsed",
      "type": "HttpStatusCode.ImUsed",
      "value": "226"
    },
    {
      "name": "HttpStatusCode.MultipleChoices",
      "type": "HttpStatusCode.MultipleChoices",
      "value": "300"
    },
    {
      "name": "HttpStatusCode.MovedPermanently",
      "type": "HttpStatusCode.MovedPermanently",
      "value": "301"
    },
    {
      "name": "HttpStatusCode.Found",
      "type": "HttpStatusCode.Found",
      "value": "302"
    },
    {
      "name": "HttpStatusCode.SeeOther",
      "type": "HttpStatusCode.SeeOther",
      "value": "303"
    },
    {
      "name": "HttpStatusCode.NotModified",
      "type": "HttpStatusCode.NotModified",
      "value": "304"
    },
    {
      "name": "HttpStatusCode.UseProxy",
      "type": "HttpStatusCode.UseProxy",
      "value": "305"
    },
    {
      "name": "HttpStatusCode.Unused",
      "type": "HttpStatusCode.Unused",
      "value": "306"
    },
    {
      "name": "HttpStatusCode.TemporaryRedirect",
      "type": "HttpStatusCode.TemporaryRedirect",
      "value": "307"
    },
    {
      "name": "HttpStatusCode.PermanentRedirect",
      "type": "HttpStatusCode.PermanentRedirect",
      "value": "308"
    },
    {
      "name": "HttpStatusCode.BadRequest",
      "type": "HttpStatusCode.BadRequest",
      "value": "400"
    },
    {
      "name": "HttpStatusCode.Unauthorized",
      "type": "HttpStatusCode.Unauthorized",
      "value": "401"
    },
    {
      "name": "HttpStatusCode.PaymentRequired",
      "type": "HttpStatusCode.PaymentRequired",
      "value": "402"
    },
    {
      "name": "HttpStatusCode.Forbidden",
      "type": "HttpStatusCode.Forbidden",
      "value": "403"
    },
    {
      "name": "HttpStatusCode.NotFound",
      "type": "HttpStatusCode.NotFound",
      "value": "404"
    },
    {
      "name": "HttpStatusCode.MethodNotAllowed",
      "type": "HttpStatusCode.MethodNotAllowed",
      "value": "405"
    },
    {
      "name": "HttpStatusCode.NotAcceptable",
      "type": "HttpStatusCode.NotAcceptable",
      "value": "406"
    },
    {
      "name": "HttpStatusCode.ProxyAuthenticationRequired",
      "type": "HttpStatusCode.ProxyAuthenticationRequired",
      "value": "407"
    },
    {
      "name": "HttpStatusCode.RequestTimeout",
      "type": "HttpStatusCode.RequestTimeout",
      "value": "408"
    },
    {
      "name": "HttpStatusCode.Conflict",
      "type": "HttpStatusCode.Conflict",
      "value": "409"
    },
    {
      "name": "HttpStatusCode.Gone",
      "type": "HttpStatusCode.Gone",
      "value": "410"
    },
    {
      "name": "HttpStatusCode.LengthRequired",
      "type": "HttpStatusCode.LengthRequired",
      "value": "411"
    },
    {
      "name": "HttpStatusCode.PreconditionFailed",
      "type": "HttpStatusCode.PreconditionFailed",
      "value": "412"
    },
    {
      "name": "HttpStatusCode.PayloadTooLarge",
      "type": "HttpStatusCode.PayloadTooLarge",
      "value": "413"
    },
    {
      "name": "HttpStatusCode.UriTooLong",
      "type": "HttpStatusCode.UriTooLong",
      "value": "414"
    },
    {
      "name": "HttpStatusCode.UnsupportedMediaType",
      "type": "HttpStatusCode.UnsupportedMediaType",
      "value": "415"
    },
    {
      "name": "HttpStatusCode.RangeNotSatisfiable",
      "type": "HttpStatusCode.RangeNotSatisfiable",
      "value": "416"
    },
    {
      "name": "HttpStatusCode.ExpectationFailed",
      "type": "HttpStatusCode.ExpectationFailed",
      "value": "417"
    },
    {
      "name": "HttpStatusCode.ImATeapot",
      "type": "HttpStatusCode.ImATeapot",
      "value": "418"
    },
    {
      "name": "HttpStatusCode.MisdirectedRequest",
      "type": "HttpStatusCode.MisdirectedRequest",
      "value": "421"
    },
    {
      "name": "HttpStatusCode.UnprocessableEntity",
      "type": "HttpStatusCode.UnprocessableEntity",
      "value": "422"
    },
    {
      "name": "HttpStatusCode.Locked",
      "type": "HttpStatusCode.Locked",
      "value": "423"
    },
    {
      "name": "HttpStatusCode.FailedDependency",
      "type": "HttpStatusCode.FailedDependency",
      "value": "424"
    },
    {
      "name": "HttpStatusCode.TooEarly",
      "type": "HttpStatusCode.TooEarly",
      "value": "425"
    },
    {
      "name": "HttpStatusCode.UpgradeRequired",
      "type": "HttpStatusCode.UpgradeRequired",
      "value": "426"
    },
    {
      "name": "HttpStatusCode.PreconditionRequired",
      "type": "HttpStatusCode.PreconditionRequired",
      "value": "428"
    },
    {
      "name": "HttpStatusCode.TooManyRequests",
      "type": "HttpStatusCode.TooManyRequests",
      "value": "429"
    },
    {
      "name": "HttpStatusCode.RequestHeaderFieldsTooLarge",
      "type": "HttpStatusCode.RequestHeaderFieldsTooLarge",
      "value": "431"
    },
    {
      "name": "HttpStatusCode.UnavailableForLegalReasons",
      "type": "HttpStatusCode.UnavailableForLegalReasons",
      "value": "451"
    },
    {
      "name": "HttpStatusCode.InternalServerError",
      "type": "HttpStatusCode.InternalServerError",
      "value": "500"
    },
    {
      "name": "HttpStatusCode.NotImplemented",
      "type": "HttpStatusCode.NotImplemented",
      "value": "501"
    },
    {
      "name": "HttpStatusCode.BadGateway",
      "type": "HttpStatusCode.BadGateway",
      "value": "502"
    },
    {
      "name": "HttpStatusCode.ServiceUnavailable",
      "type": "HttpStatusCode.ServiceUnavailable",
      "value": "503"
    },
    {
      "name": "HttpStatusCode.GatewayTimeout",
      "type": "HttpStatusCode.GatewayTimeout",
      "value": "504"
    },
    {
      "name": "HttpStatusCode.HttpVersionNotSupported",
      "type": "HttpStatusCode.HttpVersionNotSupported",
      "value": "505"
    },
    {
      "name": "HttpStatusCode.VariantAlsoNegotiates",
      "type": "HttpStatusCode.VariantAlsoNegotiates",
      "value": "506"
    },
    {
      "name": "HttpStatusCode.InsufficientStorage",
      "type": "HttpStatusCode.InsufficientStorage",
      "value": "507"
    },
    {
      "name": "HttpStatusCode.LoopDetected",
      "type": "HttpStatusCode.LoopDetected",
      "value": "508"
    },
    {
      "name": "HttpStatusCode.NotExtended",
      "type": "HttpStatusCode.NotExtended",
      "value": "510"
    },
    {
      "name": "HttpStatusCode.NetworkAuthenticationRequired",
      "type": "HttpStatusCode.NetworkAuthenticationRequired",
      "value": "511"
    },
    {
      "name": "AxiosError.ERR_FR_TOO_MANY_REDIRECTS",
      "type": "ERR_FR_TOO_MANY_REDIRECTS",
      "value": "ERR_FR_TOO_MANY_REDIRECTS"
    },
    {
      "name": "AxiosError.ERR_BAD_OPTION_VALUE",
      "type": "ERR_BAD_OPTION_VALUE",
      "value": "ERR_BAD_OPTION_VALUE"
    },
    {
      "name": "AxiosError.ERR_BAD_OPTION",
      "type": "ERR_BAD_OPTION",
      "value": "ERR_BAD_OPTION"
    },
    {
      "name": "AxiosError.ERR_NETWORK",
      "type": "ERR_NETWORK",
      "value": "ERR_NETWORK"
    },
    {
      "name": "AxiosError.ERR_DEPRECATED",
      "type": "ERR_DEPRECATED",
      "value": "ERR_DEPRECATED"
    },
    {
      "name": "AxiosError.ERR_BAD_RESPONSE",
      "type": "ERR_BAD_RESPONSE",
      "value": "ERR_BAD_RESPONSE"
    },
    {
      "name": "AxiosError.ERR_BAD_REQUEST",
      "type": "ERR_BAD_REQUEST",
      "value": "ERR_BAD_REQUEST"
    },
    {
      "name": "AxiosError.ERR_NOT_SUPPORT",
      "type": "ERR_NOT_SUPPORT",
      "value": "ERR_NOT_SUPPORT"
    },
    {
      "name": "AxiosError.ERR_INVALID_URL",
      "type": "ERR_INVALID_URL",
      "value": "ERR_INVALID_URL"
    },
    {
      "name": "AxiosError.ERR_CANCELED",
      "type": "ERR_CANCELED",
      "value": "ERR_CANCELED"
    },
    {
      "name": "AxiosError.ECONNABORTED",
      "type": "ECONNABORTED",
      "value": "ECONNABORTED"
    },
    {
      "name": "AxiosError.ETIMEDOUT",
      "type": "ETIMEDOUT",
      "value": "ETIMEDOUT"
    },
    {
      "name": "CanceledError.ERR_FR_TOO_MANY_REDIRECTS",
      "type": "ERR_FR_TOO_MANY_REDIRECTS",
      "value": "ERR_FR_TOO_MANY_REDIRECTS"
    },
    {
      "name": "CanceledError.ERR_BAD_OPTION_VALUE",
      "type": "ERR_BAD_OPTION_VALUE",
      "value": "ERR_BAD_OPTION_VALUE"
    },
    {
      "name": "CanceledError.ERR_BAD_OPTION",
      "type": "ERR_BAD_OPTION",
      "value": "ERR_BAD_OPTION"
    },
    {
      "name": "CanceledError.ERR_NETWORK",
      "type": "ERR_NETWORK",
      "value": "ERR_NETWORK"
    },
    {
      "name": "CanceledError.ERR_DEPRECATED",
      "type": "ERR_DEPRECATED",
      "value": "ERR_DEPRECATED"
    },
    {
      "name": "CanceledError.ERR_BAD_RESPONSE",
      "type": "ERR_BAD_RESPONSE",
      "value": "ERR_BAD_RESPONSE"
    },
    {
      "name": "CanceledError.ERR_BAD_REQUEST",
      "type": "ERR_BAD_REQUEST",
      "value": "ERR_BAD_REQUEST"
    },
    {
      "name": "CanceledError.ERR_NOT_SUPPORT",
      "type": "ERR_NOT_SUPPORT",
      "value": "ERR_NOT_SUPPORT"
    },
    {
      "name": "CanceledError.ERR_INVALID_URL",
      "type": "ERR_INVALID_URL",
      "value": "ERR_INVALID_URL"
    },
    {
      "name": "CanceledError.ERR_CANCELED",
      "type": "ERR_CANCELED",
      "value": "ERR_CANCELED"
    },
    {
      "name": "CanceledError.ECONNABORTED",
      "type": "ECONNABORTED",
      "value": "ECONNABORTED"
    },
    {
      "name": "CanceledError.ETIMEDOUT",
      "type": "ETIMEDOUT",
      "value": "ETIMEDOUT"
    },
    {
      "name": "axios.VERSION",
      "type": "string",
      "value": "1.8.4"
    },
    {
      "name": "axios",
      "type": "AxiosStatic",
      "xaiDescription": "The main Axios class that provides methods for making HTTP requests."
    }
  ],
  "namespaces": [
    {
      "name": "axios",
      "contents": {
        "functions": [
          {
            "name": "getAdapter",
            "parameters": [
              {
                "name": "adapters",
                "type": "AxiosAdapterConfig | AxiosAdapterConfig[]"
              }
            ],
            "returnType": "AxiosAdapter",
            "xaiDescription": "Selects an appropriate adapter for the given configuration. Uses AxiosAdapterConfig."
          },
          {
            "name": "toFormData",
            "parameters": [
              {
                "name": "sourceObj",
                "type": "object"
              },
              {
                "name": "targetFormData",
                "type": "GenericFormData"
              },
              {
                "name": "options",
                "type": "FormSerializerOptions"
              }
            ],
            "returnType": "GenericFormData",
            "xaiDescription": "Converts an object to FormData. Uses GenericFormData and FormSerializerOptions."
          },
          {
            "name": "formToJSON",
            "parameters": [
              {
                "name": "form",
                "type": "GenericFormData | GenericHTMLFormElement"
              }
            ],
            "returnType": "object",
            "xaiDescription": "Converts FormData or HTMLFormElement to a JSON object. Uses GenericFormData."
          },
          {
            "name": "isAxiosError",
            "parameters": [
              {
                "name": "payload",
                "type": "any"
              }
            ],
            "returnType": "boolean",
            "xaiDescription": "Checks if the payload is an Axios error object."
          },
          {
            "name": "spread",
            "parameters": [
              {
                "name": "callback",
                "type": "(...args: T[]) => R"
              }
            ],
            "returnType": "(array: T[]) => R",
            "xaiDescription": "Spreads an array into arguments for a callback function."
          },
          {
            "name": "isCancel",
            "parameters": [
              {
                "name": "value",
                "type": "any"
              }
            ],
            "returnType": "boolean",
            "xaiDescription": "Determines if a value is a canceled request."
          },
          {
            "name": "all",
            "parameters": [
              {
                "name": "values",
                "type": "(T | Promise<T>)[]"
              }
            ],
            "returnType": "Promise<T[]>",
            "xaiDescription": "Resolves all given promises or values into an array."
          },
          {
            "name": "mergeConfig",
            "parameters": [
              {
                "name": "config1",
                "type": "AxiosRequestConfig<D>"
              },
              {
                "name": "config2",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "AxiosRequestConfig<D>",
            "xaiDescription": "Merges two Axios request configurations. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "from",
            "parameters": [
              {
                "name": "thing",
                "type": "string | AxiosHeaders | RawAxiosHeaders"
              }
            ],
            "returnType": "AxiosHeaders",
            "xaiDescription": "Creates AxiosHeaders from various input types. Uses AxiosHeaders."
          },
          {
            "name": "accessor",
            "parameters": [
              {
                "name": "header",
                "type": "string | string[]"
              }
            ],
            "returnType": "AxiosHeaders",
            "xaiDescription": "Accesses or creates headers using a string or array. Uses AxiosHeaders."
          },
          {
            "name": "concat",
            "parameters": [
              {
                "name": "targets",
                "type": "(string | AxiosHeaders | RawAxiosHeaders)[]"
              }
            ],
            "returnType": "AxiosHeaders",
            "xaiDescription": "Concatenates multiple headers into one. Uses AxiosHeaders."
          },
          {
            "name": "AxiosHeaders.from",
            "parameters": [
              {
                "name": "thing",
                "type": "string | AxiosHeaders | RawAxiosHeaders"
              }
            ],
            "returnType": "AxiosHeaders",
            "xaiDescription": "Creates AxiosHeaders from various input types. Uses AxiosHeaders."
          },
          {
            "name": "AxiosHeaders.accessor",
            "parameters": [
              {
                "name": "header",
                "type": "string | string[]"
              }
            ],
            "returnType": "AxiosHeaders",
            "xaiDescription": "Accesses or creates headers using a string or array. Uses AxiosHeaders."
          },
          {
            "name": "AxiosHeaders.concat",
            "parameters": [
              {
                "name": "targets",
                "type": "(string | AxiosHeaders | RawAxiosHeaders)[]"
              }
            ],
            "returnType": "AxiosHeaders",
            "xaiDescription": "Concatenates multiple headers into one. Uses AxiosHeaders."
          },
          {
            "name": "HttpStatusCode.toString",
            "parameters": [
              {
                "name": "radix",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "HttpStatusCode.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "HttpStatusCode.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "HttpStatusCode.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "HttpStatusCode.valueOf",
            "parameters": [],
            "returnType": "number"
          },
          {
            "name": "HttpStatusCode.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]"
              },
              {
                "name": "options",
                "type": "NumberFormatOptions"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object"
              },
              {
                "name": "constructorOpt",
                "type": "Function"
              }
            ],
            "returnType": "void"
          },
          {
            "name": "prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error"
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]"
              }
            ],
            "returnType": "any"
          },
          {
            "name": "AxiosError.from",
            "parameters": [
              {
                "name": "error",
                "type": "unknown"
              },
              {
                "name": "code",
                "type": "string"
              },
              {
                "name": "config",
                "type": "InternalAxiosRequestConfig<D>"
              },
              {
                "name": "request",
                "type": "any"
              },
              {
                "name": "response",
                "type": "AxiosResponse<T, D>"
              },
              {
                "name": "customProps",
                "type": "object"
              }
            ],
            "returnType": "AxiosError<T, D>",
            "xaiDescription": "Creates an AxiosError from various inputs. Uses AxiosError<T, D>."
          },
          {
            "name": "AxiosError.toString",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "AxiosError.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "AxiosError.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "AxiosError.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "AxiosError.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp"
              }
            ],
            "returnType": "RegExpMatchArray"
          },
          {
            "name": "AxiosError.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp"
              },
              {
                "name": "replaceValue",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "AxiosError.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number"
              },
              {
                "name": "end",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp"
              },
              {
                "name": "limit",
                "type": "number"
              }
            ],
            "returnType": "string[]"
          },
          {
            "name": "AxiosError.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number"
              },
              {
                "name": "end",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.toLowerCase",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.toUpperCase",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.trim",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number"
              },
              {
                "name": "length",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.valueOf",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "AxiosError.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "AxiosError.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "endPosition",
                "type": "number"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "AxiosError.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "NFC | NFD | NFKC | NFKD"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "AxiosError.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.big",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.blink",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.bold",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.fixed",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.italics",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.link",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.small",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.strike",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.sub",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.sup",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number"
              },
              {
                "name": "fillString",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number"
              },
              {
                "name": "fillString",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.trimEnd",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.trimStart",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.trimLeft",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.trimRight",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "AxiosError.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp"
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>"
          },
          {
            "name": "AxiosError.__@iterator@8870",
            "parameters": [],
            "returnType": "StringIterator<string>"
          },
          {
            "name": "AxiosError.at",
            "parameters": [
              {
                "name": "index",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object"
              },
              {
                "name": "constructorOpt",
                "type": "Function"
              }
            ],
            "returnType": "void"
          },
          {
            "name": "AxiosError.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error"
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]"
              }
            ],
            "returnType": "any"
          },
          {
            "name": "AxiosError.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "AxiosError.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]"
              },
              {
                "name": "options",
                "type": "NumberFormatOptions"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.from",
            "parameters": [
              {
                "name": "error",
                "type": "unknown"
              },
              {
                "name": "code",
                "type": "string"
              },
              {
                "name": "config",
                "type": "InternalAxiosRequestConfig<D>"
              },
              {
                "name": "request",
                "type": "any"
              },
              {
                "name": "response",
                "type": "AxiosResponse<T, D>"
              },
              {
                "name": "customProps",
                "type": "object"
              }
            ],
            "returnType": "AxiosError<T, D>",
            "xaiDescription": "Creates an AxiosError from various inputs. Uses AxiosError<T, D>."
          },
          {
            "name": "CanceledError.toString",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "CanceledError.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "CanceledError.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "CanceledError.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "CanceledError.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp"
              }
            ],
            "returnType": "RegExpMatchArray"
          },
          {
            "name": "CanceledError.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp"
              },
              {
                "name": "replaceValue",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "CanceledError.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number"
              },
              {
                "name": "end",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp"
              },
              {
                "name": "limit",
                "type": "number"
              }
            ],
            "returnType": "string[]"
          },
          {
            "name": "CanceledError.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number"
              },
              {
                "name": "end",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.toLowerCase",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.toUpperCase",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.trim",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number"
              },
              {
                "name": "length",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.valueOf",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "CanceledError.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "CanceledError.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "endPosition",
                "type": "number"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "CanceledError.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "NFC | NFD | NFKC | NFKD"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "CanceledError.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.big",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.blink",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.bold",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.fixed",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.italics",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.link",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.small",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.strike",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.sub",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.sup",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number"
              },
              {
                "name": "fillString",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number"
              },
              {
                "name": "fillString",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.trimEnd",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.trimStart",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.trimLeft",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.trimRight",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "CanceledError.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp"
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>"
          },
          {
            "name": "CanceledError.__@iterator@8870",
            "parameters": [],
            "returnType": "StringIterator<string>"
          },
          {
            "name": "CanceledError.at",
            "parameters": [
              {
                "name": "index",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object"
              },
              {
                "name": "constructorOpt",
                "type": "Function"
              }
            ],
            "returnType": "void"
          },
          {
            "name": "CanceledError.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error"
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]"
              }
            ],
            "returnType": "any"
          },
          {
            "name": "CanceledError.toFixed",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.toExponential",
            "parameters": [
              {
                "name": "fractionDigits",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.toPrecision",
            "parameters": [
              {
                "name": "precision",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "CanceledError.toLocaleString",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]"
              },
              {
                "name": "options",
                "type": "NumberFormatOptions"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default",
            "parameters": [
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends an HTTP request using the provided configuration. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "create",
            "parameters": [
              {
                "name": "config",
                "type": "CreateAxiosDefaults<any>"
              }
            ],
            "returnType": "AxiosInstance",
            "xaiDescription": "Creates a new Axios instance with custom default settings. Uses CreateAxiosDefaults."
          },
          {
            "name": "getUri",
            "parameters": [
              {
                "name": "config",
                "type": "AxiosRequestConfig<any>"
              }
            ],
            "returnType": "string",
            "xaiDescription": "Generates a URI from the given Axios request configuration. Uses AxiosRequestConfig."
          },
          {
            "name": "request",
            "parameters": [
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends an HTTP request using the provided configuration. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "get",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends a GET request to the specified URL. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "delete",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends a DELETE request to the specified URL. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "head",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends a HEAD request to the specified URL. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "options",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends an OPTIONS request to the specified URL. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "post",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends a POST request to the specified URL with data. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "put",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends a PUT request to the specified URL with data. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "patch",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends a PATCH request to the specified URL with data. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "postForm",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends a POST request with form data to the specified URL. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "putForm",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends a PUT request with form data to the specified URL. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "patchForm",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>",
            "xaiDescription": "Sends a PATCH request with form data to the specified URL. Uses AxiosRequestConfig<D>."
          },
          {
            "name": "default.create",
            "parameters": [
              {
                "name": "config",
                "type": "CreateAxiosDefaults<any>"
              }
            ],
            "returnType": "AxiosInstance"
          },
          {
            "name": "default.source",
            "parameters": [],
            "returnType": "CancelTokenSource",
            "xaiDescription": "Creates a cancel token source for request cancellation."
          },
          {
            "name": "default.from",
            "parameters": [
              {
                "name": "error",
                "type": "unknown"
              },
              {
                "name": "code",
                "type": "string"
              },
              {
                "name": "config",
                "type": "InternalAxiosRequestConfig<D>"
              },
              {
                "name": "request",
                "type": "any"
              },
              {
                "name": "response",
                "type": "AxiosResponse<T, D>"
              },
              {
                "name": "customProps",
                "type": "object"
              }
            ],
            "returnType": "AxiosError<T, D>"
          },
          {
            "name": "default.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object"
              },
              {
                "name": "constructorOpt",
                "type": "Function"
              }
            ],
            "returnType": "void"
          },
          {
            "name": "default.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error"
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]"
              }
            ],
            "returnType": "any"
          },
          {
            "name": "default.toString",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.charAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.charCodeAt",
            "parameters": [
              {
                "name": "index",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "default.concat",
            "parameters": [
              {
                "name": "strings",
                "type": "string[]"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.indexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "default.lastIndexOf",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "default.localeCompare",
            "parameters": [
              {
                "name": "that",
                "type": "string"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "default.match",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp"
              }
            ],
            "returnType": "RegExpMatchArray"
          },
          {
            "name": "default.replace",
            "parameters": [
              {
                "name": "searchValue",
                "type": "string | RegExp"
              },
              {
                "name": "replaceValue",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.search",
            "parameters": [
              {
                "name": "regexp",
                "type": "string | RegExp"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "default.slice",
            "parameters": [
              {
                "name": "start",
                "type": "number"
              },
              {
                "name": "end",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.split",
            "parameters": [
              {
                "name": "separator",
                "type": "string | RegExp"
              },
              {
                "name": "limit",
                "type": "number"
              }
            ],
            "returnType": "string[]"
          },
          {
            "name": "default.substring",
            "parameters": [
              {
                "name": "start",
                "type": "number"
              },
              {
                "name": "end",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.toLowerCase",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.toLocaleLowerCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.toUpperCase",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.toLocaleUpperCase",
            "parameters": [
              {
                "name": "locales",
                "type": "string | string[]"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.trim",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.substr",
            "parameters": [
              {
                "name": "from",
                "type": "number"
              },
              {
                "name": "length",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.valueOf",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.codePointAt",
            "parameters": [
              {
                "name": "pos",
                "type": "number"
              }
            ],
            "returnType": "number"
          },
          {
            "name": "default.includes",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "default.endsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "endPosition",
                "type": "number"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "default.normalize",
            "parameters": [
              {
                "name": "form",
                "type": "NFC | NFD | NFKC | NFKD"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.repeat",
            "parameters": [
              {
                "name": "count",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.startsWith",
            "parameters": [
              {
                "name": "searchString",
                "type": "string"
              },
              {
                "name": "position",
                "type": "number"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "default.anchor",
            "parameters": [
              {
                "name": "name",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.big",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.blink",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.bold",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.fixed",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.fontcolor",
            "parameters": [
              {
                "name": "color",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.fontsize",
            "parameters": [
              {
                "name": "size",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.italics",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.link",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.small",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.strike",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.sub",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.sup",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.padStart",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number"
              },
              {
                "name": "fillString",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.padEnd",
            "parameters": [
              {
                "name": "maxLength",
                "type": "number"
              },
              {
                "name": "fillString",
                "type": "string"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.trimEnd",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.trimStart",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.trimLeft",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.trimRight",
            "parameters": [],
            "returnType": "string"
          },
          {
            "name": "default.matchAll",
            "parameters": [
              {
                "name": "regexp",
                "type": "RegExp"
              }
            ],
            "returnType": "RegExpStringIterator<RegExpExecArray>"
          },
          {
            "name": "default.__@iterator@8870",
            "parameters": [],
            "returnType": "StringIterator<string>"
          },
          {
            "name": "default.at",
            "parameters": [
              {
                "name": "index",
                "type": "number"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.isCancel",
            "parameters": [
              {
                "name": "value",
                "type": "any"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "default.all",
            "parameters": [
              {
                "name": "values",
                "type": "(T | Promise<T>)[]"
              }
            ],
            "returnType": "Promise<T[]>"
          },
          {
            "name": "default.spread",
            "parameters": [
              {
                "name": "callback",
                "type": "(...args: T[]) => R"
              }
            ],
            "returnType": "(array: T[]) => R"
          },
          {
            "name": "default.isAxiosError",
            "parameters": [
              {
                "name": "payload",
                "type": "any"
              }
            ],
            "returnType": "boolean"
          },
          {
            "name": "default.toFormData",
            "parameters": [
              {
                "name": "sourceObj",
                "type": "object"
              },
              {
                "name": "targetFormData",
                "type": "GenericFormData"
              },
              {
                "name": "options",
                "type": "FormSerializerOptions"
              }
            ],
            "returnType": "GenericFormData"
          },
          {
            "name": "default.formToJSON",
            "parameters": [
              {
                "name": "form",
                "type": "GenericFormData | GenericHTMLFormElement"
              }
            ],
            "returnType": "object"
          },
          {
            "name": "default.getAdapter",
            "parameters": [
              {
                "name": "adapters",
                "type": "AxiosAdapterConfig | AxiosAdapterConfig[]"
              }
            ],
            "returnType": "AxiosAdapter"
          },
          {
            "name": "default.accessor",
            "parameters": [
              {
                "name": "header",
                "type": "string | string[]"
              }
            ],
            "returnType": "AxiosHeaders"
          },
          {
            "name": "default.mergeConfig",
            "parameters": [
              {
                "name": "config1",
                "type": "AxiosRequestConfig<D>"
              },
              {
                "name": "config2",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "AxiosRequestConfig<D>"
          },
          {
            "name": "default.onUploadProgress",
            "parameters": [
              {
                "name": "progressEvent",
                "type": "AxiosProgressEvent"
              }
            ],
            "returnType": "void",
            "xaiDescription": "Handles upload progress events. Uses AxiosProgressEvent."
          },
          {
            "name": "default.onDownloadProgress",
            "parameters": [
              {
                "name": "progressEvent",
                "type": "AxiosProgressEvent"
              }
            ],
            "returnType": "void",
            "xaiDescription": "Handles download progress events. Uses AxiosProgressEvent."
          },
          {
            "name": "default.validateStatus",
            "parameters": [
              {
                "name": "status",
                "type": "number"
              }
            ],
            "returnType": "boolean",
            "xaiDescription": "Validates the HTTP status code to determine if it's acceptable."
          },
          {
            "name": "default.beforeRedirect",
            "parameters": [
              {
                "name": "options",
                "type": "Record<string, any>"
              },
              {
                "name": "responseDetails",
                "type": "{ headers: Record<string, string>; statusCode: HttpStatusCode; }"
              }
            ],
            "returnType": "void",
            "xaiDescription": "Handles actions before a redirect. Uses HttpStatusCode."
          },
          {
            "name": "default.lookup",
            "parameters": [
              {
                "name": "hostname",
                "type": "string"
              },
              {
                "name": "options",
                "type": "object"
              },
              {
                "name": "cb",
                "type": "(err: Error, address: LookupAddress | LookupAddress[], family?: AddressFamily) => void"
              }
            ],
            "returnType": "void | Promise<LookupAddress | [address: LookupAddressEntry | LookupAddressEntry[], family?: AddressFamily]>",
            "xaiDescription": "Performs DNS lookup for a hostname. Uses LookupAddress and AddressFamily."
          },
          {
            "name": "default.getUri",
            "parameters": [
              {
                "name": "config",
                "type": "AxiosRequestConfig<any>"
              }
            ],
            "returnType": "string"
          },
          {
            "name": "default.request",
            "parameters": [
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          },
          {
            "name": "default.get",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          },
          {
            "name": "default.delete",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          },
          {
            "name": "default.head",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          },
          {
            "name": "default.options",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          },
          {
            "name": "default.post",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          },
          {
            "name": "default.put",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          },
          {
            "name": "default.patch",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          },
          {
            "name": "default.postForm",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          },
          {
            "name": "default.putForm",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          },
          {
            "name": "default.patchForm",
            "parameters": [
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "data",
                "type": "D"
              },
              {
                "name": "config",
                "type": "AxiosRequestConfig<D>"
              }
            ],
            "returnType": "Promise<R>"
          }
        ],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": [
          {
            "name": "HttpStatusCode.Continue",
            "type": "HttpStatusCode.Continue",
            "value": "100"
          },
          {
            "name": "HttpStatusCode.SwitchingProtocols",
            "type": "HttpStatusCode.SwitchingProtocols",
            "value": "101"
          },
          {
            "name": "HttpStatusCode.Processing",
            "type": "HttpStatusCode.Processing",
            "value": "102"
          },
          {
            "name": "HttpStatusCode.EarlyHints",
            "type": "HttpStatusCode.EarlyHints",
            "value": "103"
          },
          {
            "name": "HttpStatusCode.Ok",
            "type": "HttpStatusCode.Ok",
            "value": "200"
          },
          {
            "name": "HttpStatusCode.Created",
            "type": "HttpStatusCode.Created",
            "value": "201"
          },
          {
            "name": "HttpStatusCode.Accepted",
            "type": "HttpStatusCode.Accepted",
            "value": "202"
          },
          {
            "name": "HttpStatusCode.NonAuthoritativeInformation",
            "type": "HttpStatusCode.NonAuthoritativeInformation",
            "value": "203"
          },
          {
            "name": "HttpStatusCode.NoContent",
            "type": "HttpStatusCode.NoContent",
            "value": "204"
          },
          {
            "name": "HttpStatusCode.ResetContent",
            "type": "HttpStatusCode.ResetContent",
            "value": "205"
          },
          {
            "name": "HttpStatusCode.PartialContent",
            "type": "HttpStatusCode.PartialContent",
            "value": "206"
          },
          {
            "name": "HttpStatusCode.MultiStatus",
            "type": "HttpStatusCode.MultiStatus",
            "value": "207"
          },
          {
            "name": "HttpStatusCode.AlreadyReported",
            "type": "HttpStatusCode.AlreadyReported",
            "value": "208"
          },
          {
            "name": "HttpStatusCode.ImUsed",
            "type": "HttpStatusCode.ImUsed",
            "value": "226"
          },
          {
            "name": "HttpStatusCode.MultipleChoices",
            "type": "HttpStatusCode.MultipleChoices",
            "value": "300"
          },
          {
            "name": "HttpStatusCode.MovedPermanently",
            "type": "HttpStatusCode.MovedPermanently",
            "value": "301"
          },
          {
            "name": "HttpStatusCode.Found",
            "type": "HttpStatusCode.Found",
            "value": "302"
          },
          {
            "name": "HttpStatusCode.SeeOther",
            "type": "HttpStatusCode.SeeOther",
            "value": "303"
          },
          {
            "name": "HttpStatusCode.NotModified",
            "type": "HttpStatusCode.NotModified",
            "value": "304"
          },
          {
            "name": "HttpStatusCode.UseProxy",
            "type": "HttpStatusCode.UseProxy",
            "value": "305"
          },
          {
            "name": "HttpStatusCode.Unused",
            "type": "HttpStatusCode.Unused",
            "value": "306"
          },
          {
            "name": "HttpStatusCode.TemporaryRedirect",
            "type": "HttpStatusCode.TemporaryRedirect",
            "value": "307"
          },
          {
            "name": "HttpStatusCode.PermanentRedirect",
            "type": "HttpStatusCode.PermanentRedirect",
            "value": "308"
          },
          {
            "name": "HttpStatusCode.BadRequest",
            "type": "HttpStatusCode.BadRequest",
            "value": "400"
          },
          {
            "name": "HttpStatusCode.Unauthorized",
            "type": "HttpStatusCode.Unauthorized",
            "value": "401"
          },
          {
            "name": "HttpStatusCode.PaymentRequired",
            "type": "HttpStatusCode.PaymentRequired",
            "value": "402"
          },
          {
            "name": "HttpStatusCode.Forbidden",
            "type": "HttpStatusCode.Forbidden",
            "value": "403"
          },
          {
            "name": "HttpStatusCode.NotFound",
            "type": "HttpStatusCode.NotFound",
            "value": "404"
          },
          {
            "name": "HttpStatusCode.MethodNotAllowed",
            "type": "HttpStatusCode.MethodNotAllowed",
            "value": "405"
          },
          {
            "name": "HttpStatusCode.NotAcceptable",
            "type": "HttpStatusCode.NotAcceptable",
            "value": "406"
          },
          {
            "name": "HttpStatusCode.ProxyAuthenticationRequired",
            "type": "HttpStatusCode.ProxyAuthenticationRequired",
            "value": "407"
          },
          {
            "name": "HttpStatusCode.RequestTimeout",
            "type": "HttpStatusCode.RequestTimeout",
            "value": "408"
          },
          {
            "name": "HttpStatusCode.Conflict",
            "type": "HttpStatusCode.Conflict",
            "value": "409"
          },
          {
            "name": "HttpStatusCode.Gone",
            "type": "HttpStatusCode.Gone",
            "value": "410"
          },
          {
            "name": "HttpStatusCode.LengthRequired",
            "type": "HttpStatusCode.LengthRequired",
            "value": "411"
          },
          {
            "name": "HttpStatusCode.PreconditionFailed",
            "type": "HttpStatusCode.PreconditionFailed",
            "value": "412"
          },
          {
            "name": "HttpStatusCode.PayloadTooLarge",
            "type": "HttpStatusCode.PayloadTooLarge",
            "value": "413"
          },
          {
            "name": "HttpStatusCode.UriTooLong",
            "type": "HttpStatusCode.UriTooLong",
            "value": "414"
          },
          {
            "name": "HttpStatusCode.UnsupportedMediaType",
            "type": "HttpStatusCode.UnsupportedMediaType",
            "value": "415"
          },
          {
            "name": "HttpStatusCode.RangeNotSatisfiable",
            "type": "HttpStatusCode.RangeNotSatisfiable",
            "value": "416"
          },
          {
            "name": "HttpStatusCode.ExpectationFailed",
            "type": "HttpStatusCode.ExpectationFailed",
            "value": "417"
          },
          {
            "name": "HttpStatusCode.ImATeapot",
            "type": "HttpStatusCode.ImATeapot",
            "value": "418"
          },
          {
            "name": "HttpStatusCode.MisdirectedRequest",
            "type": "HttpStatusCode.MisdirectedRequest",
            "value": "421"
          },
          {
            "name": "HttpStatusCode.UnprocessableEntity",
            "type": "HttpStatusCode.UnprocessableEntity",
            "value": "422"
          },
          {
            "name": "HttpStatusCode.Locked",
            "type": "HttpStatusCode.Locked",
            "value": "423"
          },
          {
            "name": "HttpStatusCode.FailedDependency",
            "type": "HttpStatusCode.FailedDependency",
            "value": "424"
          },
          {
            "name": "HttpStatusCode.TooEarly",
            "type": "HttpStatusCode.TooEarly",
            "value": "425"
          },
          {
            "name": "HttpStatusCode.UpgradeRequired",
            "type": "HttpStatusCode.UpgradeRequired",
            "value": "426"
          },
          {
            "name": "HttpStatusCode.PreconditionRequired",
            "type": "HttpStatusCode.PreconditionRequired",
            "value": "428"
          },
          {
            "name": "HttpStatusCode.TooManyRequests",
            "type": "HttpStatusCode.TooManyRequests",
            "value": "429"
          },
          {
            "name": "HttpStatusCode.RequestHeaderFieldsTooLarge",
            "type": "HttpStatusCode.RequestHeaderFieldsTooLarge",
            "value": "431"
          },
          {
            "name": "HttpStatusCode.UnavailableForLegalReasons",
            "type": "HttpStatusCode.UnavailableForLegalReasons",
            "value": "451"
          },
          {
            "name": "HttpStatusCode.InternalServerError",
            "type": "HttpStatusCode.InternalServerError",
            "value": "500"
          },
          {
            "name": "HttpStatusCode.NotImplemented",
            "type": "HttpStatusCode.NotImplemented",
            "value": "501"
          },
          {
            "name": "HttpStatusCode.BadGateway",
            "type": "HttpStatusCode.BadGateway",
            "value": "502"
          },
          {
            "name": "HttpStatusCode.ServiceUnavailable",
            "type": "HttpStatusCode.ServiceUnavailable",
            "value": "503"
          },
          {
            "name": "HttpStatusCode.GatewayTimeout",
            "type": "HttpStatusCode.GatewayTimeout",
            "value": "504"
          },
          {
            "name": "HttpStatusCode.HttpVersionNotSupported",
            "type": "HttpStatusCode.HttpVersionNotSupported",
            "value": "505"
          },
          {
            "name": "HttpStatusCode.VariantAlsoNegotiates",
            "type": "HttpStatusCode.VariantAlsoNegotiates",
            "value": "506"
          },
          {
            "name": "HttpStatusCode.InsufficientStorage",
            "type": "HttpStatusCode.InsufficientStorage",
            "value": "507"
          },
          {
            "name": "HttpStatusCode.LoopDetected",
            "type": "HttpStatusCode.LoopDetected",
            "value": "508"
          },
          {
            "name": "HttpStatusCode.NotExtended",
            "type": "HttpStatusCode.NotExtended",
            "value": "510"
          },
          {
            "name": "HttpStatusCode.NetworkAuthenticationRequired",
            "type": "HttpStatusCode.NetworkAuthenticationRequired",
            "value": "511"
          },
          {
            "name": "AxiosError.ERR_FR_TOO_MANY_REDIRECTS",
            "type": "ERR_FR_TOO_MANY_REDIRECTS",
            "value": "ERR_FR_TOO_MANY_REDIRECTS"
          },
          {
            "name": "AxiosError.ERR_BAD_OPTION_VALUE",
            "type": "ERR_BAD_OPTION_VALUE",
            "value": "ERR_BAD_OPTION_VALUE"
          },
          {
            "name": "AxiosError.ERR_BAD_OPTION",
            "type": "ERR_BAD_OPTION",
            "value": "ERR_BAD_OPTION"
          },
          {
            "name": "AxiosError.ERR_NETWORK",
            "type": "ERR_NETWORK",
            "value": "ERR_NETWORK"
          },
          {
            "name": "AxiosError.ERR_DEPRECATED",
            "type": "ERR_DEPRECATED",
            "value": "ERR_DEPRECATED"
          },
          {
            "name": "AxiosError.ERR_BAD_RESPONSE",
            "type": "ERR_BAD_RESPONSE",
            "value": "ERR_BAD_RESPONSE"
          },
          {
            "name": "AxiosError.ERR_BAD_REQUEST",
            "type": "ERR_BAD_REQUEST",
            "value": "ERR_BAD_REQUEST"
          },
          {
            "name": "AxiosError.ERR_NOT_SUPPORT",
            "type": "ERR_NOT_SUPPORT",
            "value": "ERR_NOT_SUPPORT"
          },
          {
            "name": "AxiosError.ERR_INVALID_URL",
            "type": "ERR_INVALID_URL",
            "value": "ERR_INVALID_URL"
          },
          {
            "name": "AxiosError.ERR_CANCELED",
            "type": "ERR_CANCELED",
            "value": "ERR_CANCELED"
          },
          {
            "name": "AxiosError.ECONNABORTED",
            "type": "ECONNABORTED",
            "value": "ECONNABORTED"
          },
          {
            "name": "AxiosError.ETIMEDOUT",
            "type": "ETIMEDOUT",
            "value": "ETIMEDOUT"
          },
          {
            "name": "CanceledError.ERR_FR_TOO_MANY_REDIRECTS",
            "type": "ERR_FR_TOO_MANY_REDIRECTS",
            "value": "ERR_FR_TOO_MANY_REDIRECTS"
          },
          {
            "name": "CanceledError.ERR_BAD_OPTION_VALUE",
            "type": "ERR_BAD_OPTION_VALUE",
            "value": "ERR_BAD_OPTION_VALUE"
          },
          {
            "name": "CanceledError.ERR_BAD_OPTION",
            "type": "ERR_BAD_OPTION",
            "value": "ERR_BAD_OPTION"
          },
          {
            "name": "CanceledError.ERR_NETWORK",
            "type": "ERR_NETWORK",
            "value": "ERR_NETWORK"
          },
          {
            "name": "CanceledError.ERR_DEPRECATED",
            "type": "ERR_DEPRECATED",
            "value": "ERR_DEPRECATED"
          },
          {
            "name": "CanceledError.ERR_BAD_RESPONSE",
            "type": "ERR_BAD_RESPONSE",
            "value": "ERR_BAD_RESPONSE"
          },
          {
            "name": "CanceledError.ERR_BAD_REQUEST",
            "type": "ERR_BAD_REQUEST",
            "value": "ERR_BAD_REQUEST"
          },
          {
            "name": "CanceledError.ERR_NOT_SUPPORT",
            "type": "ERR_NOT_SUPPORT",
            "value": "ERR_NOT_SUPPORT"
          },
          {
            "name": "CanceledError.ERR_INVALID_URL",
            "type": "ERR_INVALID_URL",
            "value": "ERR_INVALID_URL"
          },
          {
            "name": "CanceledError.ERR_CANCELED",
            "type": "ERR_CANCELED",
            "value": "ERR_CANCELED"
          },
          {
            "name": "CanceledError.ECONNABORTED",
            "type": "ECONNABORTED",
            "value": "ECONNABORTED"
          },
          {
            "name": "CanceledError.ETIMEDOUT",
            "type": "ETIMEDOUT",
            "value": "ETIMEDOUT"
          },
          {
            "name": "axios.VERSION",
            "type": "string",
            "value": "1.8.4"
          }
        ]
      }
    }
  ],
  "version": "1.8.4"
}