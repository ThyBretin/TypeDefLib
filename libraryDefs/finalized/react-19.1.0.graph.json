{
  "version": "19.1.0",
  "functions": [
    {
      "name": "createElement",
      "parameters": [
        {
          "name": "type",
          "type": "\"input\"",
          "optional": false
        },
        {
          "name": "props",
          "type": "React.InputHTMLAttributes<HTMLInputElement> & React.ClassAttributes<HTMLInputElement>",
          "optional": true
        },
        {
          "name": "children",
          "type": "React.ReactNode[]",
          "optional": false
        }
      ],
      "returnType": "React.DetailedReactHTMLElement<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>",
      "jsdoc": null,
      "xaiDescription": "Creates a new React element with specified type, props, and children. Uses React types.",
      "isExported": false
    },
    {
      "name": "cloneElement",
      "parameters": [
        {
          "name": "element",
          "type": "React.DetailedReactHTMLElement<P, T>",
          "optional": false
        },
        {
          "name": "props",
          "type": "P",
          "optional": true
        },
        {
          "name": "children",
          "type": "React.ReactNode[]",
          "optional": false
        }
      ],
      "returnType": "React.DetailedReactHTMLElement<P, T>",
      "jsdoc": null,
      "xaiDescription": "Clones a React element and merges new props and children. Uses React element types.",
      "isExported": false
    },
    {
      "name": "forwardRef",
      "parameters": [
        {
          "name": "render",
          "type": "React.ForwardRefRenderFunction<T, React.PropsWithoutRef<P>>",
          "optional": false
        }
      ],
      "returnType": "React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<T>>",
      "jsdoc": {
        "description": "Lets your component expose a DOM node to a parent component\nusing a ref.",
        "tags": [
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/forwardRef React Docs}"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}"
          },
          {
            "tagName": "param",
            "name": "render",
            "text": "See the {@link ForwardRefRenderFunction}."
          },
          {
            "tagName": "template",
            "name": "",
            "text": "The type of the DOM node."
          },
          {
            "tagName": "template",
            "name": "",
            "text": "The props the component accepts, if any."
          },
          {
            "tagName": "example",
            "name": "",
            "text": "tsx\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\n\nexport const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <button ref={ref} className=\"MyClassName\" type={props.type}>\n    {props.children}\n  </button>\n));\n"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "memo",
      "parameters": [
        {
          "name": "Component",
          "type": "React.FunctionComponent<P>",
          "optional": false
        },
        {
          "name": "propsAreEqual",
          "type": "(prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean",
          "optional": true
        }
      ],
      "returnType": "React.NamedExoticComponent<P>",
      "jsdoc": {
        "description": "Lets you skip re-rendering a component when its props are unchanged.",
        "tags": [
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/memo React Docs}"
          },
          {
            "tagName": "param",
            "name": "Component",
            "text": "The component to memoize."
          },
          {
            "tagName": "param",
            "name": "propsAreEqual",
            "text": "A function that will be used to determine if the props have changed."
          },
          {
            "tagName": "example",
            "name": "",
            "text": "tsx\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props: { foo: string }) {\n  // ...\n});\n"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "anonymous",
      "parameters": [
        {
          "name": "prevState",
          "type": "S",
          "optional": false
        }
      ],
      "returnType": "S",
      "jsdoc": {
        "description": "The instruction passed to a {@link Dispatch} function in {@link useState}\nto tell React what the next value of the {@link useState} should be.\n\nOften found wrapped in {@link Dispatch}.",
        "tags": [
          {
            "tagName": "template",
            "name": "",
            "text": "The type of the state."
          },
          {
            "tagName": "example",
            "name": "",
            "text": "tsx\n// This return type correctly represents the type of\n// `setCount` in the example below.\nconst useCustomState = (): Dispatch<SetStateAction<number>> => {\n  const [count, setCount] = useState(0);\n\n  return setCount;\n}\n"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useContext",
      "parameters": [
        {
          "name": "context",
          "type": "React.Context<T>",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Accepts a context object (the value returned from `React.createContext`) and returns the current\ncontext value, as given by the nearest context provider for the given context.",
        "tags": [
          {
            "tagName": "version",
            "name": "",
            "text": "16.8.0"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useContext}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useState",
      "parameters": [
        {
          "name": "initialState",
          "type": "S | (() => S)",
          "optional": false
        }
      ],
      "returnType": "[S, React.Dispatch<React.SetStateAction<S>>]",
      "jsdoc": {
        "description": "Returns a stateful value, and a function to update it.",
        "tags": [
          {
            "tagName": "version",
            "name": "",
            "text": "16.8.0"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useState}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useReducer",
      "parameters": [
        {
          "name": "reducer",
          "type": "(prevState: S, ...args: A) => S",
          "optional": false
        },
        {
          "name": "initialState",
          "type": "S",
          "optional": false
        }
      ],
      "returnType": "[S, React.ActionDispatch<A>]",
      "jsdoc": {
        "description": "An alternative to `useState`.\n\n`useReducer` is usually preferable to `useState` when you have complex state logic that involves\nmultiple sub-values. It also lets you optimize performance for components that trigger deep\nupdates because you can pass `dispatch` down instead of callbacks.",
        "tags": [
          {
            "tagName": "version",
            "name": "",
            "text": "16.8.0"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useReducer}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useRef",
      "parameters": [
        {
          "name": "initialValue",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "React.RefObject<T>",
      "jsdoc": {
        "description": "`useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n(`initialValue`). The returned object will persist for the full lifetime of the component.\n\nNote that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\nvalue around similar to how you’d use instance fields in classes.",
        "tags": [
          {
            "tagName": "version",
            "name": "",
            "text": "16.8.0"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useRef}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useLayoutEffect",
      "parameters": [
        {
          "name": "effect",
          "type": "React.EffectCallback",
          "optional": false
        },
        {
          "name": "deps",
          "type": "React.DependencyList",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\nUse this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n`useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n\nPrefer the standard `useEffect` when possible to avoid blocking visual updates.\n\nIf you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n`componentDidMount` and `componentDidUpdate`.",
        "tags": [
          {
            "tagName": "version",
            "name": "",
            "text": "16.8.0"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useLayoutEffect}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useEffect",
      "parameters": [
        {
          "name": "effect",
          "type": "React.EffectCallback",
          "optional": false
        },
        {
          "name": "deps",
          "type": "React.DependencyList",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Accepts a function that contains imperative, possibly effectful code.",
        "tags": [
          {
            "tagName": "param",
            "name": "effect",
            "text": "Imperative function that can return a cleanup function"
          },
          {
            "tagName": "param",
            "name": "deps",
            "text": "If present, effect will only activate if the values in the list change."
          },
          {
            "tagName": "version",
            "name": "",
            "text": "16.8.0"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useEffect}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useImperativeHandle",
      "parameters": [
        {
          "name": "ref",
          "type": "React.Ref<T>",
          "optional": false
        },
        {
          "name": "init",
          "type": "() => R",
          "optional": false
        },
        {
          "name": "deps",
          "type": "React.DependencyList",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "`useImperativeHandle` customizes the instance value that is exposed to parent components when using\n`ref`. As always, imperative code using refs should be avoided in most cases.\n\n`useImperativeHandle` should be used with `React.forwardRef`.",
        "tags": [
          {
            "tagName": "version",
            "name": "",
            "text": "16.8.0"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useImperativeHandle}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useCallback",
      "parameters": [
        {
          "name": "callback",
          "type": "T",
          "optional": false
        },
        {
          "name": "deps",
          "type": "React.DependencyList",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "`useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\nhas changed.",
        "tags": [
          {
            "tagName": "version",
            "name": "",
            "text": "16.8.0"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useCallback}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useMemo",
      "parameters": [
        {
          "name": "factory",
          "type": "() => T",
          "optional": false
        },
        {
          "name": "deps",
          "type": "React.DependencyList",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "`useMemo` will only recompute the memoized value when one of the `deps` has changed.",
        "tags": [
          {
            "tagName": "version",
            "name": "",
            "text": "16.8.0"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useMemo}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useDebugValue",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "format",
          "type": "(value: T) => any",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "`useDebugValue` can be used to display a label for custom hooks in React DevTools.\n\nNOTE: We don’t recommend adding debug values to every custom hook.\nIt’s most valuable for custom hooks that are part of shared libraries.",
        "tags": [
          {
            "tagName": "version",
            "name": "",
            "text": "16.8.0"
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useDebugValue}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "useDeferredValue",
      "parameters": [
        {
          "name": "value",
          "type": "T",
          "optional": false
        },
        {
          "name": "initialValue",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "T",
      "jsdoc": {
        "description": "Returns a deferred version of the value that may “lag behind” it.\n\nThis is commonly used to keep the interface responsive when you have something that renders immediately\nbased on user input and something that needs to wait for a data fetch.\n\nA good example of this is a text input.",
        "tags": [
          {
            "tagName": "param",
            "name": "value",
            "text": "The value that is going to be deferred"
          },
          {
            "tagName": "param",
            "name": "initialValue",
            "text": "A value to use during the initial render of a component. If this option is omitted, `useDeferredValue` will not defer during the initial render, because there’s no previous version of `value` that it can render instead."
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useDeferredValue}"
          }
        ]
      },
      "isExported": true
    },
    {
      "name": "useTransition",
      "parameters": [],
      "returnType": "[boolean, React.TransitionStartFunction]",
      "jsdoc": {
        "description": "Allows components to avoid undesirable loading states by waiting for content to load\nbefore transitioning to the next screen. It also allows components to defer slower,\ndata fetching updates until subsequent renders so that more crucial updates can be\nrendered immediately.\n\nThe `useTransition` hook returns two values in an array.\n\nThe first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.\nThe second is a function that takes a callback. We can use it to tell React which state we want to defer.\n\n**If some state update causes a component to suspend, that state update should be wrapped in a transition.**",
        "tags": [
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useTransition}"
          }
        ]
      },
      "isExported": true
    },
    {
      "name": "useId",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Generates a unique ID for React components. Uses string type.",
      "isExported": true
    },
    {
      "name": "useInsertionEffect",
      "parameters": [
        {
          "name": "effect",
          "type": "React.EffectCallback",
          "optional": false
        },
        {
          "name": "deps",
          "type": "React.DependencyList",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "",
        "tags": [
          {
            "tagName": "param",
            "name": "effect",
            "text": "Imperative function that can return a cleanup function"
          },
          {
            "tagName": "param",
            "name": "deps",
            "text": "If present, effect will only activate if the values in the list change."
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://github.com/facebook/react/pull/21913}"
          }
        ]
      },
      "xaiDescription": "Runs an effect after DOM insertion, before painting. Uses React effect types.",
      "isExported": true
    },
    {
      "name": "useSyncExternalStore",
      "parameters": [
        {
          "name": "subscribe",
          "type": "(onStoreChange: () => void) => () => void",
          "optional": false
        },
        {
          "name": "getSnapshot",
          "type": "() => Snapshot",
          "optional": false
        },
        {
          "name": "getServerSnapshot",
          "type": "() => Snapshot",
          "optional": true
        }
      ],
      "returnType": "Snapshot",
      "jsdoc": {
        "description": "",
        "tags": [
          {
            "tagName": "param",
            "name": "subscribe",
            "text": ""
          },
          {
            "tagName": "param",
            "name": "getSnapshot",
            "text": ""
          },
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://github.com/reactwg/react-18/discussions/86}"
          }
        ]
      },
      "xaiDescription": "Synchronizes React with an external store using subscribe and snapshot functions.",
      "isExported": true
    },
    {
      "name": "useOptimistic",
      "parameters": [
        {
          "name": "passthrough",
          "type": "State",
          "optional": false
        }
      ],
      "returnType": "[State, (action: State | ((pendingState: State) => State)) => void]",
      "jsdoc": null,
      "xaiDescription": "Manages optimistic state updates in React for UI responsiveness.",
      "isExported": true
    },
    {
      "name": "use",
      "parameters": [
        {
          "name": "usable",
          "type": "React.Usable<T>",
          "optional": false
        }
      ],
      "returnType": "T",
      "jsdoc": null,
      "xaiDescription": "Uses a React usable value, such as a promise. Links to React.Usable<T>.",
      "isExported": true
    },
    {
      "name": "useActionState",
      "parameters": [
        {
          "name": "action",
          "type": "(state: Awaited<State>) => State | Promise<State>",
          "optional": false
        },
        {
          "name": "initialState",
          "type": "Awaited<State>",
          "optional": false
        },
        {
          "name": "permalink",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "[state: Awaited<State>, dispatch: () => void, isPending: boolean]",
      "jsdoc": null,
      "xaiDescription": "Handles state with asynchronous actions and pending status in React.",
      "isExported": true
    },
    {
      "name": "jsxDEV",
      "parameters": [
        {
          "name": "type",
          "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
          "optional": false
        },
        {
          "name": "props",
          "type": "unknown",
          "optional": false
        },
        {
          "name": "key",
          "type": "React.Key",
          "optional": false
        },
        {
          "name": "isStatic",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "source",
          "type": "import(\"/Users/Thy/TypeDefLib/node_modules/@types/react/jsx-dev-runtime\").JSXSource",
          "optional": true
        },
        {
          "name": "self",
          "type": "unknown",
          "optional": true
        }
      ],
      "returnType": "React.ReactElement<unknown, string | React.JSXElementConstructor<any>>",
      "jsdoc": {
        "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "jsx",
      "parameters": [
        {
          "name": "type",
          "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
          "optional": false
        },
        {
          "name": "props",
          "type": "unknown",
          "optional": false
        },
        {
          "name": "key",
          "type": "React.Key",
          "optional": true
        }
      ],
      "returnType": "React.ReactElement<unknown, string | React.JSXElementConstructor<any>>",
      "jsdoc": {
        "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "jsxs",
      "parameters": [
        {
          "name": "type",
          "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
          "optional": false
        },
        {
          "name": "props",
          "type": "unknown",
          "optional": false
        },
        {
          "name": "key",
          "type": "React.Key",
          "optional": true
        }
      ],
      "returnType": "React.ReactElement<unknown, string | React.JSXElementConstructor<any>>",
      "jsdoc": {
        "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
        "tags": []
      },
      "isExported": true
    }
  ],
  "enums": [],
  "types": [
    {
      "name": "AwaitedReactNode",
      "type": "| React.ReactElement\n    | string\n    | number\n    | bigint\n    | Iterable<React.ReactNode>\n    | React.ReactPortal\n    | boolean\n    | null\n    | undefined\n    | React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES[\n        keyof React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES\n    ]",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | ((radix?: number) => string) | ((radix?: number) => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => boolean) | (() => string) | (() => number) | (() => bigint) | (() => Object)",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; } | ((locales?: Intl.LocalesArgument, options?: BigIntToLocaleStringOptions) => string)",
          "optional": false
        }
      ],
      "jsdoc": {
        "description": "",
        "tags": [
          {
            "tagName": "internal",
            "name": "",
            "text": "Use `Awaited<ReactNode>` instead"
          }
        ]
      },
      "isExported": false,
      "xaiDescription": "Type for awaited React nodes, including elements, strings, and iterables. Uses React.ReactNode."
    },
    {
      "name": "Destructor",
      "type": "() => void | { [UNDEFINED_VOID_ONLY]: never }",
      "properties": [],
      "jsdoc": {
        "description": "The function returned from an effect passed to {@link React.useEffect useEffect},\nwhich can be used to clean up the effect when the component unmounts.",
        "tags": [
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://react.dev/reference/react/useEffect React Docs}"
          }
        ]
      },
      "isExported": false
    },
    {
      "name": "ReactManagedAttributes",
      "type": "C extends { defaultProps: infer D } ? Defaultize<P, D>\n    : P",
      "properties": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Type for merging component props with default props in React."
    },
    {
      "name": "Booleanish",
      "type": "boolean | \"true\" | \"false\"",
      "properties": [
        {
          "name": "valueOf",
          "type": "(() => boolean) | (() => string)",
          "optional": false
        }
      ],
      "jsdoc": {
        "description": "Used to represent DOM API's where users can either pass\ntrue or false as a boolean or as its equivalent strings.",
        "tags": []
      },
      "isExported": false
    },
    {
      "name": "CrossOrigin",
      "type": "\"anonymous\" | \"use-credentials\" | \"\" | undefined",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number; (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: Intl.LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: Intl.LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@1179",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "jsdoc": {
        "description": "",
        "tags": [
          {
            "tagName": "see",
            "name": "",
            "text": "{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}"
          }
        ]
      },
      "isExported": false,
      "xaiDescription": "Type for cross-origin attribute values in HTML elements."
    },
    {
      "name": "Defaultize",
      "type": "P extends any ? string extends keyof P ? P\n    :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>\n        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never",
      "properties": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Utility type to merge props with defaults, handling partial overlaps."
    },
    {
      "name": "InexactPartial",
      "type": "{ [K in keyof T]?: T[K] | undefined }",
      "properties": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Creates a partial type where properties can be undefined."
    },
    {
      "name": "NativeAnimationEvent",
      "type": "AnimationEvent",
      "properties": [
        {
          "name": "animationName",
          "type": "string",
          "optional": false
        },
        {
          "name": "elapsedTime",
          "type": "number",
          "optional": false
        },
        {
          "name": "pseudoElement",
          "type": "string",
          "optional": false
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Native event for CSS animations, extending AnimationEvent interface."
    },
    {
      "name": "NativeClipboardEvent",
      "type": "ClipboardEvent",
      "properties": [
        {
          "name": "clipboardData",
          "type": "DataTransfer",
          "optional": false
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Native event for clipboard operations, extending ClipboardEvent."
    },
    {
      "name": "NativeCompositionEvent",
      "type": "CompositionEvent",
      "properties": [
        {
          "name": "data",
          "type": "string",
          "optional": false
        },
        {
          "name": "initCompositionEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, dataArg?: string) => void",
          "optional": false
        },
        {
          "name": "detail",
          "type": "number",
          "optional": false
        },
        {
          "name": "view",
          "type": "Window",
          "optional": false
        },
        {
          "name": "which",
          "type": "number",
          "optional": false
        },
        {
          "name": "initUIEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
          "optional": false
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Native event for text composition input, extending CompositionEvent."
    },
    {
      "name": "NativeDragEvent",
      "type": "DragEvent",
      "properties": [
        {
          "name": "dataTransfer",
          "type": "DataTransfer",
          "optional": false
        },
        {
          "name": "altKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "button",
          "type": "number",
          "optional": false
        },
        {
          "name": "buttons",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientX",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientY",
          "type": "number",
          "optional": false
        },
        {
          "name": "ctrlKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "layerX",
          "type": "number",
          "optional": false
        },
        {
          "name": "layerY",
          "type": "number",
          "optional": false
        },
        {
          "name": "metaKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "movementX",
          "type": "number",
          "optional": false
        },
        {
          "name": "movementY",
          "type": "number",
          "optional": false
        },
        {
          "name": "offsetX",
          "type": "number",
          "optional": false
        },
        {
          "name": "offsetY",
          "type": "number",
          "optional": false
        },
        {
          "name": "pageX",
          "type": "number",
          "optional": false
        },
        {
          "name": "pageY",
          "type": "number",
          "optional": false
        },
        {
          "name": "relatedTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "screenX",
          "type": "number",
          "optional": false
        },
        {
          "name": "screenY",
          "type": "number",
          "optional": false
        },
        {
          "name": "shiftKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        },
        {
          "name": "getModifierState",
          "type": "(keyArg: string) => boolean",
          "optional": false,
          "xaiDescription": "Checks if modifier key is active. Uses string keyArg."
        },
        {
          "name": "initMouseEvent",
          "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
          "optional": false,
          "xaiDescription": "Initializes mouse event with parameters. Uses Window and EventTarget types."
        },
        {
          "name": "detail",
          "type": "number",
          "optional": false
        },
        {
          "name": "view",
          "type": "Window",
          "optional": false
        },
        {
          "name": "which",
          "type": "number",
          "optional": false
        },
        {
          "name": "initUIEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
          "optional": false,
          "xaiDescription": "Initializes UI event with optional parameters. Uses Window type."
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false,
          "xaiDescription": "Returns array of event targets in composition path. Uses EventTarget array."
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false,
          "xaiDescription": "Initializes basic event with type and options."
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Prevents default event action."
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops further event propagation immediately."
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops event bubbling or capturing."
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "xaiDescription": "Native implementation of DragEvent for browser drag operations.",
      "isExported": false
    },
    {
      "name": "NativeFocusEvent",
      "type": "FocusEvent",
      "properties": [
        {
          "name": "relatedTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "detail",
          "type": "number",
          "optional": false
        },
        {
          "name": "view",
          "type": "Window",
          "optional": false
        },
        {
          "name": "which",
          "type": "number",
          "optional": false
        },
        {
          "name": "initUIEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
          "optional": false,
          "xaiDescription": "Initializes UI event with optional parameters. Uses Window type."
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false,
          "xaiDescription": "Returns array of event targets in composition path. Uses EventTarget array."
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false,
          "xaiDescription": "Initializes basic event with type and options."
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Prevents default event action."
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops further event propagation immediately."
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops event bubbling or capturing."
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "xaiDescription": "Native implementation of FocusEvent for element focus changes.",
      "isExported": false
    },
    {
      "name": "NativeKeyboardEvent",
      "type": "KeyboardEvent",
      "properties": [
        {
          "name": "altKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "charCode",
          "type": "number",
          "optional": false
        },
        {
          "name": "code",
          "type": "string",
          "optional": false
        },
        {
          "name": "ctrlKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "isComposing",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "key",
          "type": "string",
          "optional": false
        },
        {
          "name": "keyCode",
          "type": "number",
          "optional": false
        },
        {
          "name": "location",
          "type": "number",
          "optional": false
        },
        {
          "name": "metaKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "shiftKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "getModifierState",
          "type": "(keyArg: string) => boolean",
          "optional": false,
          "xaiDescription": "Checks if modifier key is active. Uses string keyArg."
        },
        {
          "name": "initKeyboardEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, keyArg?: string, locationArg?: number, ctrlKey?: boolean, altKey?: boolean, shiftKey?: boolean, metaKey?: boolean) => void",
          "optional": false,
          "xaiDescription": "Initializes keyboard event with key details. Uses Window type."
        },
        {
          "name": "DOM_KEY_LOCATION_STANDARD",
          "type": "0",
          "optional": false
        },
        {
          "name": "DOM_KEY_LOCATION_LEFT",
          "type": "1",
          "optional": false
        },
        {
          "name": "DOM_KEY_LOCATION_RIGHT",
          "type": "2",
          "optional": false
        },
        {
          "name": "DOM_KEY_LOCATION_NUMPAD",
          "type": "3",
          "optional": false
        },
        {
          "name": "detail",
          "type": "number",
          "optional": false
        },
        {
          "name": "view",
          "type": "Window",
          "optional": false
        },
        {
          "name": "which",
          "type": "number",
          "optional": false
        },
        {
          "name": "initUIEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
          "optional": false,
          "xaiDescription": "Initializes UI event with optional parameters. Uses Window type."
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false,
          "xaiDescription": "Returns array of event targets in composition path. Uses EventTarget array."
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false,
          "xaiDescription": "Initializes basic event with type and options."
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Prevents default event action."
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops further event propagation immediately."
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops event bubbling or capturing."
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "xaiDescription": "Native implementation of KeyboardEvent for key presses.",
      "isExported": false
    },
    {
      "name": "NativeMouseEvent",
      "type": "MouseEvent",
      "properties": [
        {
          "name": "altKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "button",
          "type": "number",
          "optional": false
        },
        {
          "name": "buttons",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientX",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientY",
          "type": "number",
          "optional": false
        },
        {
          "name": "ctrlKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "layerX",
          "type": "number",
          "optional": false
        },
        {
          "name": "layerY",
          "type": "number",
          "optional": false
        },
        {
          "name": "metaKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "movementX",
          "type": "number",
          "optional": false
        },
        {
          "name": "movementY",
          "type": "number",
          "optional": false
        },
        {
          "name": "offsetX",
          "type": "number",
          "optional": false
        },
        {
          "name": "offsetY",
          "type": "number",
          "optional": false
        },
        {
          "name": "pageX",
          "type": "number",
          "optional": false
        },
        {
          "name": "pageY",
          "type": "number",
          "optional": false
        },
        {
          "name": "relatedTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "screenX",
          "type": "number",
          "optional": false
        },
        {
          "name": "screenY",
          "type": "number",
          "optional": false
        },
        {
          "name": "shiftKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        },
        {
          "name": "getModifierState",
          "type": "(keyArg: string) => boolean",
          "optional": false,
          "xaiDescription": "Checks if modifier key is active. Uses string keyArg."
        },
        {
          "name": "initMouseEvent",
          "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
          "optional": false,
          "xaiDescription": "Initializes mouse event with parameters. Uses Window and EventTarget types."
        },
        {
          "name": "detail",
          "type": "number",
          "optional": false
        },
        {
          "name": "view",
          "type": "Window",
          "optional": false
        },
        {
          "name": "which",
          "type": "number",
          "optional": false
        },
        {
          "name": "initUIEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
          "optional": false,
          "xaiDescription": "Initializes UI event with optional parameters. Uses Window type."
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false,
          "xaiDescription": "Returns array of event targets in composition path. Uses EventTarget array."
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false,
          "xaiDescription": "Initializes basic event with type and options."
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Prevents default event action."
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops further event propagation immediately."
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops event bubbling or capturing."
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "xaiDescription": "Native implementation of MouseEvent for mouse interactions.",
      "isExported": false
    },
    {
      "name": "NativeWheelEvent",
      "type": "WheelEvent",
      "properties": [
        {
          "name": "deltaMode",
          "type": "number",
          "optional": false
        },
        {
          "name": "deltaX",
          "type": "number",
          "optional": false
        },
        {
          "name": "deltaY",
          "type": "number",
          "optional": false
        },
        {
          "name": "deltaZ",
          "type": "number",
          "optional": false
        },
        {
          "name": "DOM_DELTA_PIXEL",
          "type": "0",
          "optional": false
        },
        {
          "name": "DOM_DELTA_LINE",
          "type": "1",
          "optional": false
        },
        {
          "name": "DOM_DELTA_PAGE",
          "type": "2",
          "optional": false
        },
        {
          "name": "altKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "button",
          "type": "number",
          "optional": false
        },
        {
          "name": "buttons",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientX",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientY",
          "type": "number",
          "optional": false
        },
        {
          "name": "ctrlKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "layerX",
          "type": "number",
          "optional": false
        },
        {
          "name": "layerY",
          "type": "number",
          "optional": false
        },
        {
          "name": "metaKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "movementX",
          "type": "number",
          "optional": false
        },
        {
          "name": "movementY",
          "type": "number",
          "optional": false
        },
        {
          "name": "offsetX",
          "type": "number",
          "optional": false
        },
        {
          "name": "offsetY",
          "type": "number",
          "optional": false
        },
        {
          "name": "pageX",
          "type": "number",
          "optional": false
        },
        {
          "name": "pageY",
          "type": "number",
          "optional": false
        },
        {
          "name": "relatedTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "screenX",
          "type": "number",
          "optional": false
        },
        {
          "name": "screenY",
          "type": "number",
          "optional": false
        },
        {
          "name": "shiftKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        },
        {
          "name": "getModifierState",
          "type": "(keyArg: string) => boolean",
          "optional": false
        },
        {
          "name": "initMouseEvent",
          "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
          "optional": false
        },
        {
          "name": "detail",
          "type": "number",
          "optional": false
        },
        {
          "name": "view",
          "type": "Window",
          "optional": false
        },
        {
          "name": "which",
          "type": "number",
          "optional": false
        },
        {
          "name": "initUIEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
          "optional": false
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Wheel event interface extending UIEvent for mouse wheel interactions.",
      "isExported": false
    },
    {
      "name": "VoidOrUndefinedOnly",
      "type": "void | { [UNDEFINED_VOID_ONLY]: never }",
      "properties": [],
      "jsdoc": null,
      "xaiDescription": "Type representing void or undefined values only.",
      "isExported": false
    },
    {
      "name": "JSXSource",
      "type": "export interface JSXSource {\n    /**\n     * The source file where the element originates from.\n     */\n    fileName?: string | undefined;\n\n    /**\n     * The line number where the element was created.\n     */\n    lineNumber?: number | undefined;\n\n    /**\n     * The column number where the element was created.\n     */\n    columnNumber?: number | undefined;\n}",
      "properties": [
        {
          "name": "fileName",
          "type": "string",
          "optional": true
        },
        {
          "name": "lineNumber",
          "type": "number",
          "optional": true
        },
        {
          "name": "columnNumber",
          "type": "number",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": null,
      "xaiDescription": "Interface for JSX source location details like file, line, and column.",
      "isExported": true
    },
    {
      "name": "AnimationEvent",
      "type": "interface AnimationEvent extends Event {}",
      "properties": [],
      "extends": [
        "Event",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "xaiDescription": "Event interface for CSS or DOM animations.",
      "isExported": false
    },
    {
      "name": "ClipboardEvent",
      "type": "interface ClipboardEvent extends Event {}",
      "properties": [],
      "extends": [
        "Event",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "xaiDescription": "Event interface for clipboard operations like copy and paste.",
      "isExported": false
    },
    {
      "name": "CompositionEvent",
      "type": "interface CompositionEvent extends Event {}",
      "properties": [],
      "extends": [
        "UIEvent",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "xaiDescription": "Event interface for text composition, like input methods.",
      "isExported": false
    },
    {
      "name": "DataTransfer",
      "type": "interface DataTransfer {}",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "xaiDescription": "Interface for handling data during drag and drop operations.",
      "isExported": false
    },
    {
      "name": "Document",
      "type": "interface Document {}",
      "properties": [],
      "extends": [
        "Node",
        "DocumentOrShadowRoot",
        "FontFaceSource",
        "GlobalEventHandlers",
        "NonElementParentNode",
        "ParentNode",
        "XPathEvaluatorBase"
      ],
      "jsdoc": null,
      "xaiDescription": "Root node interface representing the entire HTML or XML document.",
      "isExported": false
    },
    {
      "name": "DocumentFragment",
      "type": "interface DocumentFragment {}",
      "properties": [],
      "extends": [
        "Node",
        "NonElementParentNode",
        "ParentNode"
      ],
      "jsdoc": null,
      "xaiDescription": "Node interface for a document fragment, used for DOM manipulation.",
      "isExported": false
    },
    {
      "name": "DragEvent",
      "type": "interface DragEvent extends Event {}",
      "properties": [],
      "extends": [
        "MouseEvent",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "xaiDescription": "Event interface for drag and drop actions.",
      "isExported": false
    },
    {
      "name": "Element",
      "type": "interface Element {}",
      "properties": [],
      "extends": [
        "Node",
        "ARIAMixin",
        "Animatable",
        "ChildNode",
        "NonDocumentTypeChildNode",
        "ParentNode",
        "Slottable"
      ],
      "jsdoc": null,
      "xaiDescription": "Base interface for all DOM elements.",
      "isExported": false
    },
    {
      "name": "Event",
      "type": "interface Event {}",
      "properties": [],
      "extends": [
        "{}"
      ],
      "jsdoc": null,
      "xaiDescription": "Base interface for all events in the DOM.",
      "isExported": false
    },
    {
      "name": "EventTarget",
      "type": "interface EventTarget {}",
      "properties": [],
      "extends": [
        "{}"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for objects that can receive events.",
      "isExported": false
    },
    {
      "name": "FocusEvent",
      "type": "interface FocusEvent extends Event {}",
      "properties": [],
      "extends": [
        "UIEvent",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "xaiDescription": "Event interface for focus and blur events.",
      "isExported": false
    },
    {
      "name": "FormData",
      "type": "interface FormData {}",
      "properties": [],
      "extends": [
        "{}"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for constructing key/value pairs representing form fields.",
      "isExported": false
    },
    {
      "name": "HTMLAnchorElement",
      "type": "interface HTMLAnchorElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLHyperlinkElementUtils",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for anchor tags, extending HTMLElement.",
      "isExported": false
    },
    {
      "name": "HTMLAreaElement",
      "type": "interface HTMLAreaElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLHyperlinkElementUtils",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for area tags in image maps.",
      "isExported": false
    },
    {
      "name": "HTMLAudioElement",
      "type": "interface HTMLAudioElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLMediaElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for audio elements.",
      "isExported": false
    },
    {
      "name": "HTMLBaseElement",
      "type": "interface HTMLBaseElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for base URL elements.",
      "isExported": false
    },
    {
      "name": "HTMLBodyElement",
      "type": "interface HTMLBodyElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "WindowEventHandlers",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for the body of an HTML document.",
      "isExported": false
    },
    {
      "name": "HTMLBRElement",
      "type": "interface HTMLBRElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for line break elements.",
      "isExported": false
    },
    {
      "name": "HTMLButtonElement",
      "type": "interface HTMLButtonElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "PopoverInvokerElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for button elements.",
      "isExported": false
    },
    {
      "name": "HTMLCanvasElement",
      "type": "interface HTMLCanvasElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for canvas drawing surfaces.",
      "isExported": false
    },
    {
      "name": "HTMLDataElement",
      "type": "interface HTMLDataElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for data elements.",
      "isExported": false
    },
    {
      "name": "HTMLDataListElement",
      "type": "interface HTMLDataListElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for datalist elements.",
      "isExported": false
    },
    {
      "name": "HTMLDetailsElement",
      "type": "interface HTMLDetailsElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for details disclosure elements.",
      "isExported": false
    },
    {
      "name": "HTMLDialogElement",
      "type": "interface HTMLDialogElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for dialog boxes.",
      "isExported": false
    },
    {
      "name": "HTMLDivElement",
      "type": "interface HTMLDivElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for generic division elements.",
      "isExported": false
    },
    {
      "name": "HTMLDListElement",
      "type": "interface HTMLDListElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for definition list elements.",
      "isExported": false
    },
    {
      "name": "HTMLElement",
      "type": "interface HTMLElement extends Element {}",
      "properties": [],
      "extends": [
        "Element",
        "ElementCSSInlineStyle",
        "ElementContentEditable",
        "GlobalEventHandlers",
        "HTMLOrSVGElement",
        "Element",
        "Element"
      ],
      "jsdoc": null,
      "xaiDescription": "Base interface for all HTML elements.",
      "isExported": false
    },
    {
      "name": "HTMLEmbedElement",
      "type": "interface HTMLEmbedElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for embedded objects.",
      "isExported": false
    },
    {
      "name": "HTMLFieldSetElement",
      "type": "interface HTMLFieldSetElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for fieldset groups.",
      "isExported": false
    },
    {
      "name": "HTMLFormElement",
      "type": "interface HTMLFormElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for HTML forms.",
      "isExported": false
    },
    {
      "name": "HTMLHeadElement",
      "type": "interface HTMLHeadElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for the document head.",
      "isExported": false
    },
    {
      "name": "HTMLHeadingElement",
      "type": "interface HTMLHeadingElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for heading elements like h1-h6.",
      "isExported": false
    },
    {
      "name": "HTMLHRElement",
      "type": "interface HTMLHRElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for horizontal rule elements.",
      "isExported": false
    },
    {
      "name": "HTMLHtmlElement",
      "type": "interface HTMLHtmlElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for the root html element.",
      "isExported": false
    },
    {
      "name": "HTMLIFrameElement",
      "type": "interface HTMLIFrameElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for inline frames.",
      "isExported": false
    },
    {
      "name": "HTMLImageElement",
      "type": "interface HTMLImageElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for image elements.",
      "isExported": false
    },
    {
      "name": "HTMLInputElement",
      "type": "interface HTMLInputElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "PopoverInvokerElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for input fields.",
      "isExported": false
    },
    {
      "name": "HTMLLabelElement",
      "type": "interface HTMLLabelElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for label elements.",
      "isExported": false
    },
    {
      "name": "HTMLLegendElement",
      "type": "interface HTMLLegendElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for legend elements in fieldsets.",
      "isExported": false
    },
    {
      "name": "HTMLLIElement",
      "type": "interface HTMLLIElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for list item elements.",
      "isExported": false
    },
    {
      "name": "HTMLLinkElement",
      "type": "interface HTMLLinkElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "LinkStyle",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for link elements, extending HTMLElement.",
      "isExported": false
    },
    {
      "name": "HTMLMapElement",
      "type": "interface HTMLMapElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for image map elements.",
      "isExported": false
    },
    {
      "name": "HTMLMetaElement",
      "type": "interface HTMLMetaElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for meta data elements.",
      "isExported": false
    },
    {
      "name": "HTMLMeterElement",
      "type": "interface HTMLMeterElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for meter gauge elements.",
      "isExported": false
    },
    {
      "name": "HTMLModElement",
      "type": "interface HTMLModElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for modified text elements.",
      "isExported": false
    },
    {
      "name": "HTMLObjectElement",
      "type": "interface HTMLObjectElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for embedded objects.",
      "isExported": false
    },
    {
      "name": "HTMLOListElement",
      "type": "interface HTMLOListElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for ordered list elements.",
      "isExported": false
    },
    {
      "name": "HTMLOptGroupElement",
      "type": "interface HTMLOptGroupElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for option group elements in selects.",
      "isExported": false
    },
    {
      "name": "HTMLOptionElement",
      "type": "interface HTMLOptionElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for option elements in selects.",
      "isExported": false
    },
    {
      "name": "HTMLOutputElement",
      "type": "interface HTMLOutputElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for output elements.",
      "isExported": false
    },
    {
      "name": "HTMLParagraphElement",
      "type": "interface HTMLParagraphElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Element interface for paragraph elements.",
      "isExported": false
    },
    {
      "name": "HTMLParamElement",
      "type": "interface HTMLParamElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <param> element, used to pass parameters to plugins."
    },
    {
      "name": "HTMLPreElement",
      "type": "interface HTMLPreElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <pre> element, preserves whitespace and formatting."
    },
    {
      "name": "HTMLProgressElement",
      "type": "interface HTMLProgressElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <progress> element, represents task progress."
    },
    {
      "name": "HTMLQuoteElement",
      "type": "interface HTMLQuoteElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <q> or <blockquote> elements, denotes quotations."
    },
    {
      "name": "HTMLScriptElement",
      "type": "interface HTMLScriptElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <script> element, embeds or links executable code."
    },
    {
      "name": "HTMLSelectElement",
      "type": "interface HTMLSelectElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <select> element, creates dropdown or list controls."
    },
    {
      "name": "HTMLSlotElement",
      "type": "interface HTMLSlotElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <slot> element, used in shadow DOM for content projection."
    },
    {
      "name": "HTMLSourceElement",
      "type": "interface HTMLSourceElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <source> element, specifies media resources."
    },
    {
      "name": "HTMLSpanElement",
      "type": "interface HTMLSpanElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <span> element, inline container for styling."
    },
    {
      "name": "HTMLStyleElement",
      "type": "interface HTMLStyleElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "LinkStyle",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <style> element, defines CSS stylesheets. Extends LinkStyle."
    },
    {
      "name": "HTMLTableColElement",
      "type": "interface HTMLTableColElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <col> element, specifies column properties in tables."
    },
    {
      "name": "HTMLTableDataCellElement",
      "type": "interface HTMLTableDataCellElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLTableCellElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <td> element, represents data cells in tables."
    },
    {
      "name": "HTMLTableElement",
      "type": "interface HTMLTableElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <table> element, structures tabular data."
    },
    {
      "name": "HTMLTableHeaderCellElement",
      "type": "interface HTMLTableHeaderCellElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLTableCellElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <th> element, represents header cells in tables."
    },
    {
      "name": "HTMLTableRowElement",
      "type": "interface HTMLTableRowElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <tr> element, defines a row in tables."
    },
    {
      "name": "HTMLTableSectionElement",
      "type": "interface HTMLTableSectionElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <thead>, <tbody>, or <tfoot> elements, sections table rows."
    },
    {
      "name": "HTMLTemplateElement",
      "type": "interface HTMLTemplateElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <template> element, holds client-side content."
    },
    {
      "name": "HTMLTextAreaElement",
      "type": "interface HTMLTextAreaElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <textarea> element, multi-line text input control."
    },
    {
      "name": "HTMLTimeElement",
      "type": "interface HTMLTimeElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <time> element, represents a time or date."
    },
    {
      "name": "HTMLTitleElement",
      "type": "interface HTMLTitleElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <title> element, sets document title."
    },
    {
      "name": "HTMLTrackElement",
      "type": "interface HTMLTrackElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <track> element, adds timed text tracks to media."
    },
    {
      "name": "HTMLUListElement",
      "type": "interface HTMLUListElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <ul> element, unordered list container."
    },
    {
      "name": "HTMLVideoElement",
      "type": "interface HTMLVideoElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLMediaElement",
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <video> element, embeds video content. Extends HTMLMediaElement."
    },
    {
      "name": "HTMLWebViewElement",
      "type": "interface HTMLWebViewElement extends HTMLElement {}",
      "properties": [],
      "extends": [
        "HTMLElement",
        "HTMLElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for HTML <webview> element, embeds external web content."
    },
    {
      "name": "KeyboardEvent",
      "type": "interface KeyboardEvent extends Event {}",
      "properties": [],
      "extends": [
        "UIEvent",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for keyboard events, handles key presses. Extends UIEvent."
    },
    {
      "name": "MouseEvent",
      "type": "interface MouseEvent extends Event {}",
      "properties": [],
      "extends": [
        "UIEvent",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for mouse events, tracks pointer actions. Extends UIEvent."
    },
    {
      "name": "PointerEvent",
      "type": "interface PointerEvent extends Event {}",
      "properties": [],
      "extends": [
        "MouseEvent",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for pointer events, unifies mouse, touch, pen inputs. Extends MouseEvent."
    },
    {
      "name": "StyleMedia",
      "type": "interface StyleMedia {}",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for querying style sheet media types."
    },
    {
      "name": "SVGCircleElement",
      "type": "interface SVGCircleElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGeometryElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <circle> element, draws circular shapes. Extends SVGGeometryElement."
    },
    {
      "name": "SVGClipPathElement",
      "type": "interface SVGClipPathElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <clipPath> element, defines clipping paths."
    },
    {
      "name": "SVGDefsElement",
      "type": "interface SVGDefsElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGraphicsElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <defs> element, contains referenced graphics. Extends SVGGraphicsElement."
    },
    {
      "name": "SVGDescElement",
      "type": "interface SVGDescElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <desc> element, provides descriptive text."
    },
    {
      "name": "SVGElement",
      "type": "interface SVGElement extends Element {}",
      "properties": [],
      "extends": [
        "Element",
        "ElementCSSInlineStyle",
        "GlobalEventHandlers",
        "HTMLOrSVGElement",
        "Element",
        "Element"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Base interface for SVG elements, extends Element and event handlers."
    },
    {
      "name": "SVGEllipseElement",
      "type": "interface SVGEllipseElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGeometryElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <ellipse> element, draws elliptical shapes. Extends SVGGeometryElement."
    },
    {
      "name": "SVGFEBlendElement",
      "type": "interface SVGFEBlendElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feBlend> element, blends graphics in filters."
    },
    {
      "name": "SVGFEColorMatrixElement",
      "type": "interface SVGFEColorMatrixElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feColorMatrix> element, applies color matrix filters."
    },
    {
      "name": "SVGFEComponentTransferElement",
      "type": "interface SVGFEComponentTransferElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feComponentTransfer> element, adjusts color components."
    },
    {
      "name": "SVGFECompositeElement",
      "type": "interface SVGFECompositeElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feComposite> element, composites images using operators."
    },
    {
      "name": "SVGFEConvolveMatrixElement",
      "type": "interface SVGFEConvolveMatrixElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feConvolveMatrix> element, applies matrix convolutions."
    },
    {
      "name": "SVGFEDiffuseLightingElement",
      "type": "interface SVGFEDiffuseLightingElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feDiffuseLighting> element, simulates diffuse lighting effects."
    },
    {
      "name": "SVGFEDisplacementMapElement",
      "type": "interface SVGFEDisplacementMapElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feDisplacementMap> element, displaces graphics based on maps."
    },
    {
      "name": "SVGFEDistantLightElement",
      "type": "interface SVGFEDistantLightElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feDistantLight> element, defines distant light sources."
    },
    {
      "name": "SVGFEDropShadowElement",
      "type": "interface SVGFEDropShadowElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feDropShadow> element, adds drop shadow effects."
    },
    {
      "name": "SVGFEFloodElement",
      "type": "interface SVGFEFloodElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feFlood> element, fills areas with color."
    },
    {
      "name": "SVGFEFuncAElement",
      "type": "interface SVGFEFuncAElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGComponentTransferFunctionElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feFuncA> element, defines alpha transfer functions."
    },
    {
      "name": "SVGFEFuncBElement",
      "type": "interface SVGFEFuncBElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGComponentTransferFunctionElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feFuncB> element, defines blue transfer functions."
    },
    {
      "name": "SVGFEFuncGElement",
      "type": "interface SVGFEFuncGElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGComponentTransferFunctionElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feFuncG> element, defines green transfer functions."
    },
    {
      "name": "SVGFEFuncRElement",
      "type": "interface SVGFEFuncRElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGComponentTransferFunctionElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feFuncR> element, defines red transfer functions."
    },
    {
      "name": "SVGFEGaussianBlurElement",
      "type": "interface SVGFEGaussianBlurElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feGaussianBlur> element, applies Gaussian blur filters."
    },
    {
      "name": "SVGFEImageElement",
      "type": "interface SVGFEImageElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGURIReference",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feImage> element, incorporates images into filters."
    },
    {
      "name": "SVGFEMergeElement",
      "type": "interface SVGFEMergeElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feMerge> element, merges multiple inputs."
    },
    {
      "name": "SVGFEMergeNodeElement",
      "type": "interface SVGFEMergeNodeElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feMergeNode> element, specifies merge inputs."
    },
    {
      "name": "SVGFEMorphologyElement",
      "type": "interface SVGFEMorphologyElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feMorphology> element, applies morphological operations."
    },
    {
      "name": "SVGFEOffsetElement",
      "type": "interface SVGFEOffsetElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feOffset> element, offsets graphical elements."
    },
    {
      "name": "SVGFEPointLightElement",
      "type": "interface SVGFEPointLightElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <fePointLight> element, defines point light sources."
    },
    {
      "name": "SVGFESpecularLightingElement",
      "type": "interface SVGFESpecularLightingElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feSpecularLighting> element, simulates specular lighting."
    },
    {
      "name": "SVGFESpotLightElement",
      "type": "interface SVGFESpotLightElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feSpotLight> element, defines spot light sources."
    },
    {
      "name": "SVGFETileElement",
      "type": "interface SVGFETileElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feTile> element, tiles input graphics."
    },
    {
      "name": "SVGFETurbulenceElement",
      "type": "interface SVGFETurbulenceElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFilterPrimitiveStandardAttributes",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <feTurbulence> element, generates Perlin noise patterns."
    },
    {
      "name": "SVGFilterElement",
      "type": "interface SVGFilterElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGURIReference",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <filter> element, defines graphical effects. Extends SVGURIReference."
    },
    {
      "name": "SVGForeignObjectElement",
      "type": "interface SVGForeignObjectElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGraphicsElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <foreignObject> element, embeds foreign content."
    },
    {
      "name": "SVGGElement",
      "type": "interface SVGGElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGraphicsElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <g> element, groups SVG shapes. Extends SVGGraphicsElement."
    },
    {
      "name": "SVGImageElement",
      "type": "interface SVGImageElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGraphicsElement",
        "SVGURIReference",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <image> element, embeds raster images. Extends SVGURIReference."
    },
    {
      "name": "SVGLinearGradientElement",
      "type": "interface SVGLinearGradientElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGradientElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <linearGradient> element, defines linear color gradients."
    },
    {
      "name": "SVGLineElement",
      "type": "interface SVGLineElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGeometryElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <line> element, draws straight lines. Extends SVGGeometryElement."
    },
    {
      "name": "SVGMarkerElement",
      "type": "interface SVGMarkerElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFitToViewBox",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <marker> element, defines markers for paths."
    },
    {
      "name": "SVGMaskElement",
      "type": "interface SVGMaskElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <mask> element, applies masking effects."
    },
    {
      "name": "SVGMetadataElement",
      "type": "interface SVGMetadataElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Interface for SVG <metadata> element, holds document metadata."
    },
    {
      "name": "SVGPathElement",
      "type": "interface SVGPathElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGeometryElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG path elements, used in vector graphics.",
      "isExported": false
    },
    {
      "name": "SVGPatternElement",
      "type": "interface SVGPatternElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFitToViewBox",
        "SVGURIReference",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG pattern elements, defines reusable patterns.",
      "isExported": false
    },
    {
      "name": "SVGPolygonElement",
      "type": "interface SVGPolygonElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGeometryElement",
        "SVGAnimatedPoints",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG polygon elements, represents polygonal shapes.",
      "isExported": false
    },
    {
      "name": "SVGPolylineElement",
      "type": "interface SVGPolylineElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGeometryElement",
        "SVGAnimatedPoints",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG polyline elements, draws connected straight lines.",
      "isExported": false
    },
    {
      "name": "SVGRadialGradientElement",
      "type": "interface SVGRadialGradientElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGradientElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG radial gradient elements, creates radial color transitions.",
      "isExported": false
    },
    {
      "name": "SVGRectElement",
      "type": "interface SVGRectElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGeometryElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG rectangle elements, defines rectangular shapes.",
      "isExported": false
    },
    {
      "name": "SVGSetElement",
      "type": "interface SVGSetElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGAnimationElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG set elements, sets attribute values in animations.",
      "isExported": false
    },
    {
      "name": "SVGStopElement",
      "type": "interface SVGStopElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG stop elements, defines color stops in gradients.",
      "isExported": false
    },
    {
      "name": "SVGSVGElement",
      "type": "interface SVGSVGElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGraphicsElement",
        "SVGFitToViewBox",
        "WindowEventHandlers",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for the root SVG element, manages SVG document structure.",
      "isExported": false
    },
    {
      "name": "SVGSwitchElement",
      "type": "interface SVGSwitchElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGraphicsElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG switch elements, conditionally renders child elements.",
      "isExported": false
    },
    {
      "name": "SVGSymbolElement",
      "type": "interface SVGSymbolElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFitToViewBox",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG symbol elements, defines reusable graphic symbols.",
      "isExported": false
    },
    {
      "name": "SVGTextElement",
      "type": "interface SVGTextElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGTextPositioningElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG text elements, positions and styles text content.",
      "isExported": false
    },
    {
      "name": "SVGTextPathElement",
      "type": "interface SVGTextPathElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGTextContentElement",
        "SVGURIReference",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG textPath elements, places text along a path.",
      "isExported": false
    },
    {
      "name": "SVGTSpanElement",
      "type": "interface SVGTSpanElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGTextPositioningElement",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG tspan elements, groups and positions text spans.",
      "isExported": false
    },
    {
      "name": "SVGUseElement",
      "type": "interface SVGUseElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGGraphicsElement",
        "SVGURIReference",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG use elements, references and instances other elements.",
      "isExported": false
    },
    {
      "name": "SVGViewElement",
      "type": "interface SVGViewElement extends SVGElement {}",
      "properties": [],
      "extends": [
        "SVGElement",
        "SVGFitToViewBox",
        "SVGElement",
        "SVGElement"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for SVG view elements, defines viewport properties.",
      "isExported": false
    },
    {
      "name": "Text",
      "type": "interface Text {}",
      "properties": [],
      "extends": [
        "CharacterData",
        "Slottable"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for text nodes in the DOM, represents textual content.",
      "isExported": false
    },
    {
      "name": "ToggleEvent",
      "type": "interface ToggleEvent extends Event {}",
      "properties": [],
      "extends": [
        "Event",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "xaiDescription": "Event interface for toggle actions, extends base Event.",
      "isExported": false
    },
    {
      "name": "TouchEvent",
      "type": "interface TouchEvent extends Event {}",
      "properties": [],
      "extends": [
        "UIEvent",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "xaiDescription": "Event interface for touch inputs, extends UIEvent.",
      "isExported": false
    },
    {
      "name": "TouchList",
      "type": "interface TouchList {}",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "xaiDescription": "Interface for lists of touch points in touch events.",
      "isExported": false
    },
    {
      "name": "TransitionEvent",
      "type": "interface TransitionEvent extends Event {}",
      "properties": [],
      "extends": [
        "Event",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "xaiDescription": "Event interface for CSS transitions, extends base Event.",
      "isExported": false
    },
    {
      "name": "TrustedHTML",
      "type": "interface TrustedHTML {}",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "xaiDescription": "Interface for trusted HTML strings, prevents XSS vulnerabilities.",
      "isExported": false
    },
    {
      "name": "UIEvent",
      "type": "interface UIEvent extends Event {}",
      "properties": [],
      "extends": [
        "Event",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "xaiDescription": "Event interface for user interface interactions, extends Event.",
      "isExported": false
    },
    {
      "name": "WebGL2RenderingContext",
      "type": "interface WebGL2RenderingContext {}",
      "properties": [],
      "extends": [
        "WebGL2RenderingContextBase",
        "WebGL2RenderingContextOverloads",
        "WebGLRenderingContextBase"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for WebGL 2.0 rendering context, extends base contexts.",
      "isExported": false
    },
    {
      "name": "WebGLRenderingContext",
      "type": "interface WebGLRenderingContext {}",
      "properties": [],
      "extends": [
        "WebGLRenderingContextBase",
        "WebGLRenderingContextOverloads"
      ],
      "jsdoc": null,
      "xaiDescription": "Interface for WebGL rendering context, handles 3D graphics rendering.",
      "isExported": false
    },
    {
      "name": "WheelEvent",
      "type": "interface WheelEvent extends Event {}",
      "properties": [],
      "extends": [
        "MouseEvent",
        "Event",
        "Event"
      ],
      "jsdoc": null,
      "xaiDescription": "Event interface for mouse wheel actions, extends MouseEvent.",
      "isExported": false
    },
    {
      "name": "GlobalJSXElement",
      "type": "interface GlobalJSXElement extends JSX.Element {}",
      "properties": [],
      "extends": [
        "JSX.Element"
      ],
      "jsdoc": null,
      "xaiDescription": "Global interface extending JSX.Element for React components.",
      "isExported": false
    },
    {
      "name": "GlobalJSXElementAttributesProperty",
      "type": "interface GlobalJSXElementAttributesProperty extends JSX.ElementAttributesProperty {}",
      "properties": [],
      "extends": [
        "JSX.ElementAttributesProperty"
      ],
      "jsdoc": null,
      "xaiDescription": "Global interface for JSX element attributes properties.",
      "isExported": false
    },
    {
      "name": "GlobalJSXElementChildrenAttribute",
      "type": "interface GlobalJSXElementChildrenAttribute extends JSX.ElementChildrenAttribute {}",
      "properties": [],
      "extends": [
        "JSX.ElementChildrenAttribute"
      ],
      "jsdoc": null,
      "xaiDescription": "Global interface for JSX element children attributes.",
      "isExported": false
    },
    {
      "name": "GlobalJSXElementClass",
      "type": "interface GlobalJSXElementClass extends JSX.ElementClass {}",
      "properties": [],
      "extends": [
        "JSX.ElementClass"
      ],
      "jsdoc": null,
      "xaiDescription": "Global interface extending JSX.ElementClass for components.",
      "isExported": false
    },
    {
      "name": "GlobalJSXElementType",
      "type": "JSX.ElementType",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string)",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Type for JSX elements, includes methods like toString.",
      "isExported": false
    },
    {
      "name": "GlobalJSXIntrinsicAttributes",
      "type": "interface GlobalJSXIntrinsicAttributes extends JSX.IntrinsicAttributes {}",
      "properties": [],
      "extends": [
        "JSX.IntrinsicAttributes"
      ],
      "jsdoc": null,
      "xaiDescription": "Global interface for intrinsic attributes in JSX.",
      "isExported": false
    },
    {
      "name": "GlobalJSXIntrinsicClassAttributes",
      "type": "interface GlobalJSXIntrinsicClassAttributes<T> extends JSX.IntrinsicClassAttributes<T> {}",
      "properties": [],
      "extends": [
        "JSX.IntrinsicClassAttributes<T>"
      ],
      "jsdoc": null,
      "xaiDescription": "Global interface for intrinsic class attributes in JSX.",
      "isExported": false
    },
    {
      "name": "GlobalJSXIntrinsicElements",
      "type": "interface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}",
      "properties": [],
      "extends": [
        "JSX.IntrinsicElements"
      ],
      "jsdoc": null,
      "xaiDescription": "Global interface for intrinsic elements in JSX.",
      "isExported": false
    },
    {
      "name": "GlobalJSXLibraryManagedAttributes",
      "type": "JSX.LibraryManagedAttributes<C, P>",
      "properties": [],
      "jsdoc": null,
      "xaiDescription": "Type for managing attributes in JSX libraries.",
      "isExported": false
    },
    {
      "name": "ExactlyAnyPropertyKeys",
      "type": "{ [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T]",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | ((radix?: number) => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => number) | (() => symbol)",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; }",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Type for extracting keys with exactly any values.",
      "isExported": false
    },
    {
      "name": "IsExactlyAny",
      "type": "boolean extends (T extends never ? true : false) ? true : false",
      "properties": [
        {
          "name": "valueOf",
          "type": "() => boolean",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Type guard to check if a type is exactly any.",
      "isExported": false
    },
    {
      "name": "MergePropTypes",
      "type": "P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n        : string extends keyof P ? P\n            // Prefer declared types which are not exactly any\n        :\n            & Pick<P, NotExactlyAnyPropertyKeys<P>>\n            // For props which are exactly any, use the type inferred from propTypes if present\n            & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n            // Keep leftover props not specified in propTypes\n            & Pick<P, Exclude<keyof P, keyof T>>\n        : never",
      "properties": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Utility type to merge prop types with inferred props for React components."
    },
    {
      "name": "NativePointerEvent",
      "type": "PointerEvent",
      "properties": [
        {
          "name": "altitudeAngle",
          "type": "number",
          "optional": false
        },
        {
          "name": "azimuthAngle",
          "type": "number",
          "optional": false
        },
        {
          "name": "height",
          "type": "number",
          "optional": false
        },
        {
          "name": "isPrimary",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "pointerId",
          "type": "number",
          "optional": false
        },
        {
          "name": "pointerType",
          "type": "string",
          "optional": false
        },
        {
          "name": "pressure",
          "type": "number",
          "optional": false
        },
        {
          "name": "tangentialPressure",
          "type": "number",
          "optional": false
        },
        {
          "name": "tiltX",
          "type": "number",
          "optional": false
        },
        {
          "name": "tiltY",
          "type": "number",
          "optional": false
        },
        {
          "name": "twist",
          "type": "number",
          "optional": false
        },
        {
          "name": "width",
          "type": "number",
          "optional": false
        },
        {
          "name": "getCoalescedEvents",
          "type": "() => PointerEvent[]",
          "optional": false,
          "xaiDescription": "Returns coalesced pointer events array."
        },
        {
          "name": "getPredictedEvents",
          "type": "() => PointerEvent[]",
          "optional": false,
          "xaiDescription": "Returns predicted pointer events array."
        },
        {
          "name": "altKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "button",
          "type": "number",
          "optional": false
        },
        {
          "name": "buttons",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientX",
          "type": "number",
          "optional": false
        },
        {
          "name": "clientY",
          "type": "number",
          "optional": false
        },
        {
          "name": "ctrlKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "layerX",
          "type": "number",
          "optional": false
        },
        {
          "name": "layerY",
          "type": "number",
          "optional": false
        },
        {
          "name": "metaKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "movementX",
          "type": "number",
          "optional": false
        },
        {
          "name": "movementY",
          "type": "number",
          "optional": false
        },
        {
          "name": "offsetX",
          "type": "number",
          "optional": false
        },
        {
          "name": "offsetY",
          "type": "number",
          "optional": false
        },
        {
          "name": "pageX",
          "type": "number",
          "optional": false
        },
        {
          "name": "pageY",
          "type": "number",
          "optional": false
        },
        {
          "name": "relatedTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "screenX",
          "type": "number",
          "optional": false
        },
        {
          "name": "screenY",
          "type": "number",
          "optional": false
        },
        {
          "name": "shiftKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "x",
          "type": "number",
          "optional": false
        },
        {
          "name": "y",
          "type": "number",
          "optional": false
        },
        {
          "name": "getModifierState",
          "type": "(keyArg: string) => boolean",
          "optional": false,
          "xaiDescription": "Checks if a modifier key is active."
        },
        {
          "name": "initMouseEvent",
          "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
          "optional": false,
          "xaiDescription": "Initializes a mouse event with specified properties."
        },
        {
          "name": "detail",
          "type": "number",
          "optional": false
        },
        {
          "name": "view",
          "type": "Window",
          "optional": false
        },
        {
          "name": "which",
          "type": "number",
          "optional": false
        },
        {
          "name": "initUIEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
          "optional": false,
          "xaiDescription": "Initializes a UI event with optional parameters."
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false,
          "xaiDescription": "Returns array of elements in the event path. Uses EventTarget[]."
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false,
          "xaiDescription": "Initializes a basic event with type and options."
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Prevents the default action of the event."
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops further event propagation and handlers."
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops event bubbling or capturing."
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Native DOM interface for pointer events.",
      "isExported": false
    },
    {
      "name": "NativeTouchEvent",
      "type": "TouchEvent",
      "properties": [
        {
          "name": "altKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "changedTouches",
          "type": "TouchList",
          "optional": false
        },
        {
          "name": "ctrlKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "metaKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "shiftKey",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "targetTouches",
          "type": "TouchList",
          "optional": false
        },
        {
          "name": "touches",
          "type": "TouchList",
          "optional": false
        },
        {
          "name": "detail",
          "type": "number",
          "optional": false
        },
        {
          "name": "view",
          "type": "Window",
          "optional": false
        },
        {
          "name": "which",
          "type": "number",
          "optional": false
        },
        {
          "name": "initUIEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
          "optional": false,
          "xaiDescription": "Initializes a UI event with optional parameters."
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false,
          "xaiDescription": "Returns array of elements in the event path. Uses EventTarget[]."
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false,
          "xaiDescription": "Initializes a basic event with type and options."
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Prevents the default action of the event."
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops further event propagation and handlers."
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops event bubbling or capturing."
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Native DOM interface for touch events.",
      "isExported": false
    },
    {
      "name": "NativeTransitionEvent",
      "type": "TransitionEvent",
      "properties": [
        {
          "name": "elapsedTime",
          "type": "number",
          "optional": false
        },
        {
          "name": "propertyName",
          "type": "string",
          "optional": false
        },
        {
          "name": "pseudoElement",
          "type": "string",
          "optional": false
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false,
          "xaiDescription": "Returns array of elements in the event path. Uses EventTarget[]."
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false,
          "xaiDescription": "Initializes a basic event with type and options."
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Prevents the default action of the event."
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops further event propagation and handlers."
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops event bubbling or capturing."
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Native DOM interface for CSS transition events.",
      "isExported": false
    },
    {
      "name": "NativeUIEvent",
      "type": "UIEvent",
      "properties": [
        {
          "name": "detail",
          "type": "number",
          "optional": false
        },
        {
          "name": "view",
          "type": "Window",
          "optional": false
        },
        {
          "name": "which",
          "type": "number",
          "optional": false
        },
        {
          "name": "initUIEvent",
          "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
          "optional": false,
          "xaiDescription": "Initializes a UI event with optional parameters."
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false,
          "xaiDescription": "Returns array of elements in the event path. Uses EventTarget[]."
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false,
          "xaiDescription": "Initializes a basic event with type and options."
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Prevents the default action of the event."
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops further event propagation and handlers."
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops event bubbling or capturing."
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Native DOM interface for user interface events.",
      "isExported": false
    },
    {
      "name": "NotExactlyAnyPropertyKeys",
      "type": "Exclude<keyof T, ExactlyAnyPropertyKeys<T>>",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | ((radix?: number) => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => number) | (() => symbol)",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; }",
          "optional": false
        }
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Type excluding exactly any property keys from T for precise type manipulation."
    },
    {
      "name": "NativeToggleEvent",
      "type": "ToggleEvent",
      "properties": [
        {
          "name": "newState",
          "type": "string",
          "optional": false
        },
        {
          "name": "oldState",
          "type": "string",
          "optional": false
        },
        {
          "name": "bubbles",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelBubble",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "composed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "currentTarget",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "defaultPrevented",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "eventPhase",
          "type": "number",
          "optional": false
        },
        {
          "name": "isTrusted",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "returnValue",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "srcElement",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "target",
          "type": "EventTarget",
          "optional": false
        },
        {
          "name": "timeStamp",
          "type": "number",
          "optional": false
        },
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "composedPath",
          "type": "() => EventTarget[]",
          "optional": false,
          "xaiDescription": "Returns array of event targets in path. Uses EventTarget."
        },
        {
          "name": "initEvent",
          "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
          "optional": false,
          "xaiDescription": "Initializes basic event."
        },
        {
          "name": "preventDefault",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Prevents default event action."
        },
        {
          "name": "stopImmediatePropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops event propagation immediately."
        },
        {
          "name": "stopPropagation",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Stops event bubbling."
        },
        {
          "name": "NONE",
          "type": "0",
          "optional": false
        },
        {
          "name": "CAPTURING_PHASE",
          "type": "1",
          "optional": false
        },
        {
          "name": "AT_TARGET",
          "type": "2",
          "optional": false
        },
        {
          "name": "BUBBLING_PHASE",
          "type": "3",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Native ToggleEvent for state changes. Uses EventTarget.",
      "isExported": false
    }
  ],
  "classes": [],
  "constants": [],
  "namespaces": [
    {
      "name": "react",
      "contents": {
        "functions": [
          {
            "name": "createElement",
            "parameters": [
              {
                "name": "type",
                "type": "\"input\"",
                "optional": false
              },
              {
                "name": "props",
                "type": "React.InputHTMLAttributes<HTMLInputElement> & React.ClassAttributes<HTMLInputElement>",
                "optional": true
              },
              {
                "name": "children",
                "type": "React.ReactNode[]",
                "optional": false
              }
            ],
            "returnType": "React.DetailedReactHTMLElement<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>",
            "jsdoc": null,
            "xaiDescription": "Creates a new React element with specified type, props, and children. Uses React types.",
            "isExported": false
          },
          {
            "name": "cloneElement",
            "parameters": [
              {
                "name": "element",
                "type": "React.DetailedReactHTMLElement<P, T>",
                "optional": false
              },
              {
                "name": "props",
                "type": "P",
                "optional": true
              },
              {
                "name": "children",
                "type": "React.ReactNode[]",
                "optional": false
              }
            ],
            "returnType": "React.DetailedReactHTMLElement<P, T>",
            "jsdoc": null,
            "xaiDescription": "Clones a React element and merges new props and children. Uses React element types.",
            "isExported": false
          },
          {
            "name": "forwardRef",
            "parameters": [
              {
                "name": "render",
                "type": "React.ForwardRefRenderFunction<T, React.PropsWithoutRef<P>>",
                "optional": false
              }
            ],
            "returnType": "React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<T>>",
            "jsdoc": {
              "description": "Lets your component expose a DOM node to a parent component\nusing a ref.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/forwardRef React Docs}"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}"
                },
                {
                  "tagName": "param",
                  "name": "render",
                  "text": "See the {@link ForwardRefRenderFunction}."
                },
                {
                  "tagName": "template",
                  "name": "",
                  "text": "The type of the DOM node."
                },
                {
                  "tagName": "template",
                  "name": "",
                  "text": "The props the component accepts, if any."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\n\nexport const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <button ref={ref} className=\"MyClassName\" type={props.type}>\n    {props.children}\n  </button>\n));\n"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "memo",
            "parameters": [
              {
                "name": "Component",
                "type": "React.FunctionComponent<P>",
                "optional": false
              },
              {
                "name": "propsAreEqual",
                "type": "(prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean",
                "optional": true
              }
            ],
            "returnType": "React.NamedExoticComponent<P>",
            "jsdoc": {
              "description": "Lets you skip re-rendering a component when its props are unchanged.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/memo React Docs}"
                },
                {
                  "tagName": "param",
                  "name": "Component",
                  "text": "The component to memoize."
                },
                {
                  "tagName": "param",
                  "name": "propsAreEqual",
                  "text": "A function that will be used to determine if the props have changed."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props: { foo: string }) {\n  // ...\n});\n"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "anonymous",
            "parameters": [
              {
                "name": "prevState",
                "type": "S",
                "optional": false
              }
            ],
            "returnType": "S",
            "jsdoc": {
              "description": "The instruction passed to a {@link Dispatch} function in {@link useState}\nto tell React what the next value of the {@link useState} should be.\n\nOften found wrapped in {@link Dispatch}.",
              "tags": [
                {
                  "tagName": "template",
                  "name": "",
                  "text": "The type of the state."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\n// This return type correctly represents the type of\n// `setCount` in the example below.\nconst useCustomState = (): Dispatch<SetStateAction<number>> => {\n  const [count, setCount] = useState(0);\n\n  return setCount;\n}\n"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useContext",
            "parameters": [
              {
                "name": "context",
                "type": "React.Context<T>",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "Accepts a context object (the value returned from `React.createContext`) and returns the current\ncontext value, as given by the nearest context provider for the given context.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useContext}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useState",
            "parameters": [
              {
                "name": "initialState",
                "type": "S | (() => S)",
                "optional": false
              }
            ],
            "returnType": "[S, React.Dispatch<React.SetStateAction<S>>]",
            "jsdoc": {
              "description": "Returns a stateful value, and a function to update it.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useState}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useReducer",
            "parameters": [
              {
                "name": "reducer",
                "type": "(prevState: S, ...args: A) => S",
                "optional": false
              },
              {
                "name": "initialState",
                "type": "S",
                "optional": false
              }
            ],
            "returnType": "[S, React.ActionDispatch<A>]",
            "jsdoc": {
              "description": "An alternative to `useState`.\n\n`useReducer` is usually preferable to `useState` when you have complex state logic that involves\nmultiple sub-values. It also lets you optimize performance for components that trigger deep\nupdates because you can pass `dispatch` down instead of callbacks.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useReducer}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useRef",
            "parameters": [
              {
                "name": "initialValue",
                "type": "T",
                "optional": false
              }
            ],
            "returnType": "React.RefObject<T>",
            "jsdoc": {
              "description": "`useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n(`initialValue`). The returned object will persist for the full lifetime of the component.\n\nNote that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\nvalue around similar to how you’d use instance fields in classes.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useRef}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useLayoutEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\nUse this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n`useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n\nPrefer the standard `useEffect` when possible to avoid blocking visual updates.\n\nIf you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n`componentDidMount` and `componentDidUpdate`.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useLayoutEffect}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Accepts a function that contains imperative, possibly effectful code.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "effect",
                  "text": "Imperative function that can return a cleanup function"
                },
                {
                  "tagName": "param",
                  "name": "deps",
                  "text": "If present, effect will only activate if the values in the list change."
                },
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useEffect}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useImperativeHandle",
            "parameters": [
              {
                "name": "ref",
                "type": "React.Ref<T>",
                "optional": false
              },
              {
                "name": "init",
                "type": "() => R",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "`useImperativeHandle` customizes the instance value that is exposed to parent components when using\n`ref`. As always, imperative code using refs should be avoided in most cases.\n\n`useImperativeHandle` should be used with `React.forwardRef`.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useImperativeHandle}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useCallback",
            "parameters": [
              {
                "name": "callback",
                "type": "T",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "`useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\nhas changed.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useCallback}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useMemo",
            "parameters": [
              {
                "name": "factory",
                "type": "() => T",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "`useMemo` will only recompute the memoized value when one of the `deps` has changed.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useMemo}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useDebugValue",
            "parameters": [
              {
                "name": "value",
                "type": "T",
                "optional": false
              },
              {
                "name": "format",
                "type": "(value: T) => any",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "`useDebugValue` can be used to display a label for custom hooks in React DevTools.\n\nNOTE: We don’t recommend adding debug values to every custom hook.\nIt’s most valuable for custom hooks that are part of shared libraries.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useDebugValue}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useDeferredValue",
            "parameters": [
              {
                "name": "value",
                "type": "T",
                "optional": false
              },
              {
                "name": "initialValue",
                "type": "T",
                "optional": true
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "Returns a deferred version of the value that may “lag behind” it.\n\nThis is commonly used to keep the interface responsive when you have something that renders immediately\nbased on user input and something that needs to wait for a data fetch.\n\nA good example of this is a text input.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "value",
                  "text": "The value that is going to be deferred"
                },
                {
                  "tagName": "param",
                  "name": "initialValue",
                  "text": "A value to use during the initial render of a component. If this option is omitted, `useDeferredValue` will not defer during the initial render, because there’s no previous version of `value` that it can render instead."
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useDeferredValue}"
                }
              ]
            },
            "isExported": true
          },
          {
            "name": "useTransition",
            "parameters": [],
            "returnType": "[boolean, React.TransitionStartFunction]",
            "jsdoc": {
              "description": "Allows components to avoid undesirable loading states by waiting for content to load\nbefore transitioning to the next screen. It also allows components to defer slower,\ndata fetching updates until subsequent renders so that more crucial updates can be\nrendered immediately.\n\nThe `useTransition` hook returns two values in an array.\n\nThe first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.\nThe second is a function that takes a callback. We can use it to tell React which state we want to defer.\n\n**If some state update causes a component to suspend, that state update should be wrapped in a transition.**",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useTransition}"
                }
              ]
            },
            "isExported": true
          },
          {
            "name": "useId",
            "parameters": [],
            "returnType": "string",
            "jsdoc": null,
            "xaiDescription": "Generates a unique ID for React components.",
            "isExported": true
          },
          {
            "name": "useInsertionEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "param",
                  "name": "effect",
                  "text": "Imperative function that can return a cleanup function"
                },
                {
                  "tagName": "param",
                  "name": "deps",
                  "text": "If present, effect will only activate if the values in the list change."
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://github.com/facebook/react/pull/21913}"
                }
              ]
            },
            "xaiDescription": "Runs an effect after DOM insertion, useful for CSS-in-JS. Uses React effect types.",
            "isExported": true
          },
          {
            "name": "useSyncExternalStore",
            "parameters": [
              {
                "name": "subscribe",
                "type": "(onStoreChange: () => void) => () => void",
                "optional": false
              },
              {
                "name": "getSnapshot",
                "type": "() => Snapshot",
                "optional": false
              },
              {
                "name": "getServerSnapshot",
                "type": "() => Snapshot",
                "optional": true
              }
            ],
            "returnType": "Snapshot",
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "param",
                  "name": "subscribe",
                  "text": ""
                },
                {
                  "tagName": "param",
                  "name": "getSnapshot",
                  "text": ""
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://github.com/reactwg/react-18/discussions/86}"
                }
              ]
            },
            "xaiDescription": "Synchronizes React state with an external store snapshot. Uses subscribe and snapshot functions.",
            "isExported": true
          },
          {
            "name": "useOptimistic",
            "parameters": [
              {
                "name": "passthrough",
                "type": "State",
                "optional": false
              }
            ],
            "returnType": "[State, (action: State | ((pendingState: State) => State)) => void]",
            "jsdoc": null,
            "xaiDescription": "Manages optimistic UI state updates with action handler.",
            "isExported": true
          },
          {
            "name": "use",
            "parameters": [
              {
                "name": "usable",
                "type": "React.Usable<T>",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": null,
            "xaiDescription": "Accepts and returns a React usable object value.",
            "isExported": true
          },
          {
            "name": "useActionState",
            "parameters": [
              {
                "name": "action",
                "type": "(state: Awaited<State>) => State | Promise<State>",
                "optional": false
              },
              {
                "name": "initialState",
                "type": "Awaited<State>",
                "optional": false
              },
              {
                "name": "permalink",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "[state: Awaited<State>, dispatch: () => void, isPending: boolean]",
            "jsdoc": null,
            "xaiDescription": "Handles state with asynchronous actions, returns state, dispatch, and pending status.",
            "isExported": true
          },
          {
            "name": "jsxDEV",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": false
              },
              {
                "name": "isStatic",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "source",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/@types/react/jsx-dev-runtime\").JSXSource",
                "optional": true
              },
              {
                "name": "self",
                "type": "unknown",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<unknown, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "jsx",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<unknown, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "jsxs",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<unknown, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "createElement",
            "parameters": [
              {
                "name": "type",
                "type": "\"input\"",
                "optional": false
              },
              {
                "name": "props",
                "type": "React.InputHTMLAttributes<HTMLInputElement> & React.ClassAttributes<HTMLInputElement>",
                "optional": true
              },
              {
                "name": "children",
                "type": "React.ReactNode[]",
                "optional": false
              }
            ],
            "returnType": "React.DetailedReactHTMLElement<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>",
            "jsdoc": null,
            "xaiDescription": "Creates a React element with specified type, props, and children.",
            "isExported": false
          },
          {
            "name": "cloneElement",
            "parameters": [
              {
                "name": "element",
                "type": "React.DetailedReactHTMLElement<P, T>",
                "optional": false
              },
              {
                "name": "props",
                "type": "P",
                "optional": true
              },
              {
                "name": "children",
                "type": "React.ReactNode[]",
                "optional": false
              }
            ],
            "returnType": "React.DetailedReactHTMLElement<P, T>",
            "jsdoc": null,
            "xaiDescription": "Clones a React element and merges new props or children.",
            "isExported": false
          },
          {
            "name": "forwardRef",
            "parameters": [
              {
                "name": "render",
                "type": "React.ForwardRefRenderFunction<T, React.PropsWithoutRef<P>>",
                "optional": false
              }
            ],
            "returnType": "React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<T>>",
            "jsdoc": {
              "description": "Lets your component expose a DOM node to a parent component\nusing a ref.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/forwardRef React Docs}"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}"
                },
                {
                  "tagName": "param",
                  "name": "render",
                  "text": "See the {@link ForwardRefRenderFunction}."
                },
                {
                  "tagName": "template",
                  "name": "",
                  "text": "The type of the DOM node."
                },
                {
                  "tagName": "template",
                  "name": "",
                  "text": "The props the component accepts, if any."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\n\nexport const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <button ref={ref} className=\"MyClassName\" type={props.type}>\n    {props.children}\n  </button>\n));\n"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "memo",
            "parameters": [
              {
                "name": "Component",
                "type": "React.FunctionComponent<P>",
                "optional": false
              },
              {
                "name": "propsAreEqual",
                "type": "(prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean",
                "optional": true
              }
            ],
            "returnType": "React.NamedExoticComponent<P>",
            "jsdoc": {
              "description": "Lets you skip re-rendering a component when its props are unchanged.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/memo React Docs}"
                },
                {
                  "tagName": "param",
                  "name": "Component",
                  "text": "The component to memoize."
                },
                {
                  "tagName": "param",
                  "name": "propsAreEqual",
                  "text": "A function that will be used to determine if the props have changed."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props: { foo: string }) {\n  // ...\n});\n"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "anonymous",
            "parameters": [
              {
                "name": "prevState",
                "type": "S",
                "optional": false
              }
            ],
            "returnType": "S",
            "jsdoc": {
              "description": "The instruction passed to a {@link Dispatch} function in {@link useState}\nto tell React what the next value of the {@link useState} should be.\n\nOften found wrapped in {@link Dispatch}.",
              "tags": [
                {
                  "tagName": "template",
                  "name": "",
                  "text": "The type of the state."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\n// This return type correctly represents the type of\n// `setCount` in the example below.\nconst useCustomState = (): Dispatch<SetStateAction<number>> => {\n  const [count, setCount] = useState(0);\n\n  return setCount;\n}\n"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useContext",
            "parameters": [
              {
                "name": "context",
                "type": "React.Context<T>",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "Accepts a context object (the value returned from `React.createContext`) and returns the current\ncontext value, as given by the nearest context provider for the given context.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useContext}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useState",
            "parameters": [
              {
                "name": "initialState",
                "type": "S | (() => S)",
                "optional": false
              }
            ],
            "returnType": "[S, React.Dispatch<React.SetStateAction<S>>]",
            "jsdoc": {
              "description": "Returns a stateful value, and a function to update it.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useState}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useReducer",
            "parameters": [
              {
                "name": "reducer",
                "type": "(prevState: S, ...args: A) => S",
                "optional": false
              },
              {
                "name": "initialState",
                "type": "S",
                "optional": false
              }
            ],
            "returnType": "[S, React.ActionDispatch<A>]",
            "jsdoc": {
              "description": "An alternative to `useState`.\n\n`useReducer` is usually preferable to `useState` when you have complex state logic that involves\nmultiple sub-values. It also lets you optimize performance for components that trigger deep\nupdates because you can pass `dispatch` down instead of callbacks.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useReducer}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useRef",
            "parameters": [
              {
                "name": "initialValue",
                "type": "T",
                "optional": false
              }
            ],
            "returnType": "React.RefObject<T>",
            "jsdoc": {
              "description": "`useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n(`initialValue`). The returned object will persist for the full lifetime of the component.\n\nNote that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\nvalue around similar to how you’d use instance fields in classes.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useRef}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useLayoutEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\nUse this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n`useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n\nPrefer the standard `useEffect` when possible to avoid blocking visual updates.\n\nIf you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n`componentDidMount` and `componentDidUpdate`.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useLayoutEffect}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Accepts a function that contains imperative, possibly effectful code.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "effect",
                  "text": "Imperative function that can return a cleanup function"
                },
                {
                  "tagName": "param",
                  "name": "deps",
                  "text": "If present, effect will only activate if the values in the list change."
                },
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useEffect}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useImperativeHandle",
            "parameters": [
              {
                "name": "ref",
                "type": "React.Ref<T>",
                "optional": false
              },
              {
                "name": "init",
                "type": "() => R",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "`useImperativeHandle` customizes the instance value that is exposed to parent components when using\n`ref`. As always, imperative code using refs should be avoided in most cases.\n\n`useImperativeHandle` should be used with `React.forwardRef`.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useImperativeHandle}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useCallback",
            "parameters": [
              {
                "name": "callback",
                "type": "T",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "`useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\nhas changed.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useCallback}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useMemo",
            "parameters": [
              {
                "name": "factory",
                "type": "() => T",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "`useMemo` will only recompute the memoized value when one of the `deps` has changed.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useMemo}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useDebugValue",
            "parameters": [
              {
                "name": "value",
                "type": "T",
                "optional": false
              },
              {
                "name": "format",
                "type": "(value: T) => any",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "`useDebugValue` can be used to display a label for custom hooks in React DevTools.\n\nNOTE: We don’t recommend adding debug values to every custom hook.\nIt’s most valuable for custom hooks that are part of shared libraries.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useDebugValue}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useDeferredValue",
            "parameters": [
              {
                "name": "value",
                "type": "T",
                "optional": false
              },
              {
                "name": "initialValue",
                "type": "T",
                "optional": true
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "Returns a deferred version of the value that may “lag behind” it.\n\nThis is commonly used to keep the interface responsive when you have something that renders immediately\nbased on user input and something that needs to wait for a data fetch.\n\nA good example of this is a text input.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "value",
                  "text": "The value that is going to be deferred"
                },
                {
                  "tagName": "param",
                  "name": "initialValue",
                  "text": "A value to use during the initial render of a component. If this option is omitted, `useDeferredValue` will not defer during the initial render, because there’s no previous version of `value` that it can render instead."
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useDeferredValue}"
                }
              ]
            },
            "isExported": true
          },
          {
            "name": "useTransition",
            "parameters": [],
            "returnType": "[boolean, React.TransitionStartFunction]",
            "jsdoc": {
              "description": "Allows components to avoid undesirable loading states by waiting for content to load\nbefore transitioning to the next screen. It also allows components to defer slower,\ndata fetching updates until subsequent renders so that more crucial updates can be\nrendered immediately.\n\nThe `useTransition` hook returns two values in an array.\n\nThe first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.\nThe second is a function that takes a callback. We can use it to tell React which state we want to defer.\n\n**If some state update causes a component to suspend, that state update should be wrapped in a transition.**",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useTransition}"
                }
              ]
            },
            "isExported": true
          },
          {
            "name": "useId",
            "parameters": [],
            "returnType": "string",
            "jsdoc": null,
            "xaiDescription": "Generates a unique ID string for React components.",
            "isExported": true
          },
          {
            "name": "useInsertionEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "param",
                  "name": "effect",
                  "text": "Imperative function that can return a cleanup function"
                },
                {
                  "tagName": "param",
                  "name": "deps",
                  "text": "If present, effect will only activate if the values in the list change."
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://github.com/facebook/react/pull/21913}"
                }
              ]
            },
            "xaiDescription": "Runs an effect after DOM insertion, useful for CSS-in-JS.",
            "isExported": true
          },
          {
            "name": "useSyncExternalStore",
            "parameters": [
              {
                "name": "subscribe",
                "type": "(onStoreChange: () => void) => () => void",
                "optional": false
              },
              {
                "name": "getSnapshot",
                "type": "() => Snapshot",
                "optional": false
              },
              {
                "name": "getServerSnapshot",
                "type": "() => Snapshot",
                "optional": true
              }
            ],
            "returnType": "Snapshot",
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "param",
                  "name": "subscribe",
                  "text": ""
                },
                {
                  "tagName": "param",
                  "name": "getSnapshot",
                  "text": ""
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://github.com/reactwg/react-18/discussions/86}"
                }
              ]
            },
            "xaiDescription": "Synchronizes external store state with React components.",
            "isExported": true
          },
          {
            "name": "useOptimistic",
            "parameters": [
              {
                "name": "passthrough",
                "type": "State",
                "optional": false
              }
            ],
            "returnType": "[State, (action: State | ((pendingState: State) => State)) => void]",
            "jsdoc": null,
            "xaiDescription": "Manages optimistic UI state updates for better user experience.",
            "isExported": true
          },
          {
            "name": "use",
            "parameters": [
              {
                "name": "usable",
                "type": "React.Usable<T>",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": null,
            "xaiDescription": "Suspends components while awaiting promises or other usables.",
            "isExported": true
          },
          {
            "name": "useActionState",
            "parameters": [
              {
                "name": "action",
                "type": "(state: Awaited<State>) => State | Promise<State>",
                "optional": false
              },
              {
                "name": "initialState",
                "type": "Awaited<State>",
                "optional": false
              },
              {
                "name": "permalink",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "[state: Awaited<State>, dispatch: () => void, isPending: boolean]",
            "jsdoc": null,
            "xaiDescription": "Hook to manage state with action function and initial value. Uses Awaited<State>.",
            "isExported": true
          },
          {
            "name": "jsxDEV",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": false
              },
              {
                "name": "isStatic",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "source",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/@types/react/ts5.0/jsx-dev-runtime\").JSXSource",
                "optional": true
              },
              {
                "name": "self",
                "type": "unknown",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<unknown, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "jsx",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<unknown, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "jsxs",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<unknown, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "createElement",
            "parameters": [
              {
                "name": "type",
                "type": "\"input\"",
                "optional": false
              },
              {
                "name": "props",
                "type": "React.InputHTMLAttributes<HTMLInputElement> & React.ClassAttributes<HTMLInputElement>",
                "optional": true
              },
              {
                "name": "children",
                "type": "React.ReactNode[]",
                "optional": false
              }
            ],
            "returnType": "React.DetailedReactHTMLElement<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>",
            "jsdoc": null,
            "xaiDescription": "Creates React input element with props and children. Uses React.InputHTMLAttributes.",
            "isExported": false
          },
          {
            "name": "cloneElement",
            "parameters": [
              {
                "name": "element",
                "type": "React.DetailedReactHTMLElement<P, T>",
                "optional": false
              },
              {
                "name": "props",
                "type": "P",
                "optional": true
              },
              {
                "name": "children",
                "type": "React.ReactNode[]",
                "optional": false
              }
            ],
            "returnType": "React.DetailedReactHTMLElement<P, T>",
            "jsdoc": null,
            "xaiDescription": "Clones React element with new props and children. Uses React.DetailedReactHTMLElement.",
            "isExported": false
          },
          {
            "name": "anonymous",
            "parameters": [
              {
                "name": "child",
                "type": "C",
                "optional": false
              },
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "Maintainer's note: Sync with {@link ReactChildren} until {@link ReactChildren} is removed.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "forwardRef",
            "parameters": [
              {
                "name": "render",
                "type": "React.ForwardRefRenderFunction<T, React.PropsWithoutRef<P>>",
                "optional": false
              }
            ],
            "returnType": "React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<T>>",
            "jsdoc": {
              "description": "Lets your component expose a DOM node to a parent component\nusing a ref.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/forwardRef React Docs}"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}"
                },
                {
                  "tagName": "param",
                  "name": "render",
                  "text": "See the {@link ForwardRefRenderFunction}."
                },
                {
                  "tagName": "template",
                  "name": "",
                  "text": "The type of the DOM node."
                },
                {
                  "tagName": "template",
                  "name": "",
                  "text": "The props the component accepts, if any."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\n\nexport const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <button ref={ref} className=\"MyClassName\" type={props.type}>\n    {props.children}\n  </button>\n));\n"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "memo",
            "parameters": [
              {
                "name": "Component",
                "type": "React.FunctionComponent<P>",
                "optional": false
              },
              {
                "name": "propsAreEqual",
                "type": "(prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean",
                "optional": true
              }
            ],
            "returnType": "React.NamedExoticComponent<P>",
            "jsdoc": {
              "description": "Lets you skip re-rendering a component when its props are unchanged.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/memo React Docs}"
                },
                {
                  "tagName": "param",
                  "name": "Component",
                  "text": "The component to memoize."
                },
                {
                  "tagName": "param",
                  "name": "propsAreEqual",
                  "text": "A function that will be used to determine if the props have changed."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props: { foo: string }) {\n  // ...\n});\n"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useContext",
            "parameters": [
              {
                "name": "context",
                "type": "React.Context<T>",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "Accepts a context object (the value returned from `React.createContext`) and returns the current\ncontext value, as given by the nearest context provider for the given context.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useContext}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useState",
            "parameters": [
              {
                "name": "initialState",
                "type": "S | (() => S)",
                "optional": false
              }
            ],
            "returnType": "[S, React.Dispatch<React.SetStateAction<S>>]",
            "jsdoc": {
              "description": "Returns a stateful value, and a function to update it.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useState}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useReducer",
            "parameters": [
              {
                "name": "reducer",
                "type": "R",
                "optional": false
              },
              {
                "name": "initializerArg",
                "type": "I",
                "optional": false
              },
              {
                "name": "initializer",
                "type": "(arg: I) => React.ReducerStateWithoutAction<R>",
                "optional": false
              }
            ],
            "returnType": "[React.ReducerStateWithoutAction<R>, React.DispatchWithoutAction]",
            "jsdoc": {
              "description": "An alternative to `useState`.\n\n`useReducer` is usually preferable to `useState` when you have complex state logic that involves\nmultiple sub-values. It also lets you optimize performance for components that trigger deep\nupdates because you can pass `dispatch` down instead of callbacks.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useReducer}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useRef",
            "parameters": [
              {
                "name": "initialValue",
                "type": "T",
                "optional": false
              }
            ],
            "returnType": "React.MutableRefObject<T>",
            "jsdoc": {
              "description": "`useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n(`initialValue`). The returned object will persist for the full lifetime of the component.\n\nNote that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\nvalue around similar to how you’d use instance fields in classes.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useRef}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useLayoutEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\nUse this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n`useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n\nPrefer the standard `useEffect` when possible to avoid blocking visual updates.\n\nIf you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n`componentDidMount` and `componentDidUpdate`.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useLayoutEffect}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Accepts a function that contains imperative, possibly effectful code.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "effect",
                  "text": "Imperative function that can return a cleanup function"
                },
                {
                  "tagName": "param",
                  "name": "deps",
                  "text": "If present, effect will only activate if the values in the list change."
                },
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useEffect}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useImperativeHandle",
            "parameters": [
              {
                "name": "ref",
                "type": "React.Ref<T>",
                "optional": false
              },
              {
                "name": "init",
                "type": "() => R",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "`useImperativeHandle` customizes the instance value that is exposed to parent components when using\n`ref`. As always, imperative code using refs should be avoided in most cases.\n\n`useImperativeHandle` should be used with `React.forwardRef`.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useImperativeHandle}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useCallback",
            "parameters": [
              {
                "name": "callback",
                "type": "T",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "`useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\nhas changed.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useCallback}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useMemo",
            "parameters": [
              {
                "name": "factory",
                "type": "() => T",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "`useMemo` will only recompute the memoized value when one of the `deps` has changed.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useMemo}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useDebugValue",
            "parameters": [
              {
                "name": "value",
                "type": "T",
                "optional": false
              },
              {
                "name": "format",
                "type": "(value: T) => any",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "`useDebugValue` can be used to display a label for custom hooks in React DevTools.\n\nNOTE: We don’t recommend adding debug values to every custom hook.\nIt’s most valuable for custom hooks that are part of shared libraries.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useDebugValue}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useDeferredValue",
            "parameters": [
              {
                "name": "value",
                "type": "T",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "Returns a deferred version of the value that may “lag behind” it.\n\nThis is commonly used to keep the interface responsive when you have something that renders immediately\nbased on user input and something that needs to wait for a data fetch.\n\nA good example of this is a text input.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "value",
                  "text": "The value that is going to be deferred"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useDeferredValue}"
                }
              ]
            },
            "isExported": true
          },
          {
            "name": "useTransition",
            "parameters": [],
            "returnType": "[boolean, React.TransitionStartFunction]",
            "jsdoc": {
              "description": "Allows components to avoid undesirable loading states by waiting for content to load\nbefore transitioning to the next screen. It also allows components to defer slower,\ndata fetching updates until subsequent renders so that more crucial updates can be\nrendered immediately.\n\nThe `useTransition` hook returns two values in an array.\n\nThe first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.\nThe second is a function that takes a callback. We can use it to tell React which state we want to defer.\n\n**If some state update causes a component to suspend, that state update should be wrapped in a transition.**",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useTransition}"
                }
              ]
            },
            "isExported": true
          },
          {
            "name": "useId",
            "parameters": [],
            "returnType": "string",
            "jsdoc": null,
            "xaiDescription": "Generates unique ID for components.",
            "isExported": true
          },
          {
            "name": "useInsertionEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "param",
                  "name": "effect",
                  "text": "Imperative function that can return a cleanup function"
                },
                {
                  "tagName": "param",
                  "name": "deps",
                  "text": "If present, effect will only activate if the values in the list change."
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://github.com/facebook/react/pull/21913}"
                }
              ]
            },
            "xaiDescription": "Runs effect after DOM insertions. Uses React.EffectCallback.",
            "isExported": true
          },
          {
            "name": "useSyncExternalStore",
            "parameters": [
              {
                "name": "subscribe",
                "type": "(onStoreChange: () => void) => () => void",
                "optional": false
              },
              {
                "name": "getSnapshot",
                "type": "() => Snapshot",
                "optional": false
              },
              {
                "name": "getServerSnapshot",
                "type": "() => Snapshot",
                "optional": true
              }
            ],
            "returnType": "Snapshot",
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "param",
                  "name": "subscribe",
                  "text": ""
                },
                {
                  "tagName": "param",
                  "name": "getSnapshot",
                  "text": ""
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://github.com/reactwg/react-18/discussions/86}"
                }
              ]
            },
            "xaiDescription": "Subscribes to external store and retrieves snapshot. Uses Snapshot type.",
            "isExported": true
          },
          {
            "name": "jsxDEV",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": false
              },
              {
                "name": "isStatic",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "source",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/@types/react/ts5.0/v18/jsx-dev-runtime\").JSXSource",
                "optional": true
              },
              {
                "name": "self",
                "type": "unknown",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<any, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "jsx",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<any, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "jsxs",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<any, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "createElement",
            "parameters": [
              {
                "name": "type",
                "type": "\"input\"",
                "optional": false
              },
              {
                "name": "props",
                "type": "React.InputHTMLAttributes<HTMLInputElement> & React.ClassAttributes<HTMLInputElement>",
                "optional": true
              },
              {
                "name": "children",
                "type": "React.ReactNode[]",
                "optional": false
              }
            ],
            "returnType": "React.DetailedReactHTMLElement<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>",
            "jsdoc": null,
            "xaiDescription": "Creates a new React element with given type and props. Uses React.ReactNode for children.",
            "isExported": false
          },
          {
            "name": "cloneElement",
            "parameters": [
              {
                "name": "element",
                "type": "React.DetailedReactHTMLElement<P, T>",
                "optional": false
              },
              {
                "name": "props",
                "type": "P",
                "optional": true
              },
              {
                "name": "children",
                "type": "React.ReactNode[]",
                "optional": false
              }
            ],
            "returnType": "React.DetailedReactHTMLElement<P, T>",
            "jsdoc": null,
            "xaiDescription": "Clones a React element and merges new props. Uses React.ReactNode for children.",
            "isExported": false
          },
          {
            "name": "anonymous",
            "parameters": [
              {
                "name": "child",
                "type": "C",
                "optional": false
              },
              {
                "name": "index",
                "type": "number",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "Maintainer's note: Sync with {@link ReactChildren} until {@link ReactChildren} is removed.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "forwardRef",
            "parameters": [
              {
                "name": "render",
                "type": "React.ForwardRefRenderFunction<T, React.PropsWithoutRef<P>>",
                "optional": false
              }
            ],
            "returnType": "React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<T>>",
            "jsdoc": {
              "description": "Lets your component expose a DOM node to a parent component\nusing a ref.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/forwardRef React Docs}"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}"
                },
                {
                  "tagName": "param",
                  "name": "render",
                  "text": "See the {@link ForwardRefRenderFunction}."
                },
                {
                  "tagName": "template",
                  "name": "",
                  "text": "The type of the DOM node."
                },
                {
                  "tagName": "template",
                  "name": "",
                  "text": "The props the component accepts, if any."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\ninterface Props {\n  children?: ReactNode;\n  type: \"submit\" | \"button\";\n}\n\nexport const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <button ref={ref} className=\"MyClassName\" type={props.type}>\n    {props.children}\n  </button>\n));\n"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "memo",
            "parameters": [
              {
                "name": "Component",
                "type": "React.FunctionComponent<P>",
                "optional": false
              },
              {
                "name": "propsAreEqual",
                "type": "(prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean",
                "optional": true
              }
            ],
            "returnType": "React.NamedExoticComponent<P>",
            "jsdoc": {
              "description": "Lets you skip re-rendering a component when its props are unchanged.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/memo React Docs}"
                },
                {
                  "tagName": "param",
                  "name": "Component",
                  "text": "The component to memoize."
                },
                {
                  "tagName": "param",
                  "name": "propsAreEqual",
                  "text": "A function that will be used to determine if the props have changed."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\nimport { memo } from 'react';\n\nconst SomeComponent = memo(function SomeComponent(props: { foo: string }) {\n  // ...\n});\n"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useContext",
            "parameters": [
              {
                "name": "context",
                "type": "React.Context<T>",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "Accepts a context object (the value returned from `React.createContext`) and returns the current\ncontext value, as given by the nearest context provider for the given context.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useContext}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useState",
            "parameters": [
              {
                "name": "initialState",
                "type": "S | (() => S)",
                "optional": false
              }
            ],
            "returnType": "[S, React.Dispatch<React.SetStateAction<S>>]",
            "jsdoc": {
              "description": "Returns a stateful value, and a function to update it.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useState}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useReducer",
            "parameters": [
              {
                "name": "reducer",
                "type": "R",
                "optional": false
              },
              {
                "name": "initializerArg",
                "type": "I",
                "optional": false
              },
              {
                "name": "initializer",
                "type": "(arg: I) => React.ReducerStateWithoutAction<R>",
                "optional": false
              }
            ],
            "returnType": "[React.ReducerStateWithoutAction<R>, React.DispatchWithoutAction]",
            "jsdoc": {
              "description": "An alternative to `useState`.\n\n`useReducer` is usually preferable to `useState` when you have complex state logic that involves\nmultiple sub-values. It also lets you optimize performance for components that trigger deep\nupdates because you can pass `dispatch` down instead of callbacks.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useReducer}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useRef",
            "parameters": [
              {
                "name": "initialValue",
                "type": "T",
                "optional": false
              }
            ],
            "returnType": "React.MutableRefObject<T>",
            "jsdoc": {
              "description": "`useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n(`initialValue`). The returned object will persist for the full lifetime of the component.\n\nNote that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\nvalue around similar to how you’d use instance fields in classes.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useRef}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useLayoutEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\nUse this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n`useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n\nPrefer the standard `useEffect` when possible to avoid blocking visual updates.\n\nIf you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n`componentDidMount` and `componentDidUpdate`.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useLayoutEffect}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Accepts a function that contains imperative, possibly effectful code.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "effect",
                  "text": "Imperative function that can return a cleanup function"
                },
                {
                  "tagName": "param",
                  "name": "deps",
                  "text": "If present, effect will only activate if the values in the list change."
                },
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useEffect}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useImperativeHandle",
            "parameters": [
              {
                "name": "ref",
                "type": "React.Ref<T>",
                "optional": false
              },
              {
                "name": "init",
                "type": "() => R",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "`useImperativeHandle` customizes the instance value that is exposed to parent components when using\n`ref`. As always, imperative code using refs should be avoided in most cases.\n\n`useImperativeHandle` should be used with `React.forwardRef`.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useImperativeHandle}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useCallback",
            "parameters": [
              {
                "name": "callback",
                "type": "T",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "`useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\nhas changed.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useCallback}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useMemo",
            "parameters": [
              {
                "name": "factory",
                "type": "() => T",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "`useMemo` will only recompute the memoized value when one of the `deps` has changed.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useMemo}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useDebugValue",
            "parameters": [
              {
                "name": "value",
                "type": "T",
                "optional": false
              },
              {
                "name": "format",
                "type": "(value: T) => any",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "`useDebugValue` can be used to display a label for custom hooks in React DevTools.\n\nNOTE: We don’t recommend adding debug values to every custom hook.\nIt’s most valuable for custom hooks that are part of shared libraries.",
              "tags": [
                {
                  "tagName": "version",
                  "name": "",
                  "text": "16.8.0"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useDebugValue}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "useDeferredValue",
            "parameters": [
              {
                "name": "value",
                "type": "T",
                "optional": false
              }
            ],
            "returnType": "T",
            "jsdoc": {
              "description": "Returns a deferred version of the value that may “lag behind” it.\n\nThis is commonly used to keep the interface responsive when you have something that renders immediately\nbased on user input and something that needs to wait for a data fetch.\n\nA good example of this is a text input.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "value",
                  "text": "The value that is going to be deferred"
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useDeferredValue}"
                }
              ]
            },
            "isExported": true
          },
          {
            "name": "useTransition",
            "parameters": [],
            "returnType": "[boolean, React.TransitionStartFunction]",
            "jsdoc": {
              "description": "Allows components to avoid undesirable loading states by waiting for content to load\nbefore transitioning to the next screen. It also allows components to defer slower,\ndata fetching updates until subsequent renders so that more crucial updates can be\nrendered immediately.\n\nThe `useTransition` hook returns two values in an array.\n\nThe first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.\nThe second is a function that takes a callback. We can use it to tell React which state we want to defer.\n\n**If some state update causes a component to suspend, that state update should be wrapped in a transition.**",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useTransition}"
                }
              ]
            },
            "isExported": true
          },
          {
            "name": "useId",
            "parameters": [],
            "returnType": "string",
            "jsdoc": null,
            "xaiDescription": "Generates a unique ID string for React components.",
            "isExported": true
          },
          {
            "name": "useInsertionEffect",
            "parameters": [
              {
                "name": "effect",
                "type": "React.EffectCallback",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "param",
                  "name": "effect",
                  "text": "Imperative function that can return a cleanup function"
                },
                {
                  "tagName": "param",
                  "name": "deps",
                  "text": "If present, effect will only activate if the values in the list change."
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://github.com/facebook/react/pull/21913}"
                }
              ]
            },
            "xaiDescription": "Runs an effect after DOM insertion, useful for CSS-in-JS. Uses React.EffectCallback.",
            "isExported": true
          },
          {
            "name": "useSyncExternalStore",
            "parameters": [
              {
                "name": "subscribe",
                "type": "(onStoreChange: () => void) => () => void",
                "optional": false
              },
              {
                "name": "getSnapshot",
                "type": "() => Snapshot",
                "optional": false
              },
              {
                "name": "getServerSnapshot",
                "type": "() => Snapshot",
                "optional": true
              }
            ],
            "returnType": "Snapshot",
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "param",
                  "name": "subscribe",
                  "text": ""
                },
                {
                  "tagName": "param",
                  "name": "getSnapshot",
                  "text": ""
                },
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://github.com/reactwg/react-18/discussions/86}"
                }
              ]
            },
            "xaiDescription": "Subscribes to an external store and returns its snapshot. Uses callback functions.",
            "isExported": true
          },
          {
            "name": "jsxDEV",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": false
              },
              {
                "name": "isStatic",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "source",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/@types/react/ts5.0/v18/ts5.0/jsx-dev-runtime\").JSXSource",
                "optional": true
              },
              {
                "name": "self",
                "type": "unknown",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<any, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true,
            "xaiDescription": "Creates React element with dev options like React.ElementType; use JSX instead."
          },
          {
            "name": "jsx",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<any, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true,
            "xaiDescription": "Creates single React element using React.ElementType; prefer JSX transpilation."
          },
          {
            "name": "jsxs",
            "parameters": [
              {
                "name": "type",
                "type": "React.ElementType<any, keyof React.JSX.IntrinsicElements>",
                "optional": false
              },
              {
                "name": "props",
                "type": "unknown",
                "optional": false
              },
              {
                "name": "key",
                "type": "React.Key",
                "optional": true
              }
            ],
            "returnType": "React.ReactElement<any, string | React.JSXElementConstructor<any>>",
            "jsdoc": {
              "description": "Create a React element.\n\nYou should not use this function directly. Use JSX and a transpiler instead.",
              "tags": []
            },
            "isExported": true,
            "xaiDescription": "Creates React element with children support using React.ElementType; use JSX."
          }
        ],
        "enums": [],
        "types": [
          {
            "name": "AwaitedReactNode",
            "type": "| React.ReactElement\n    | string\n    | number\n    | bigint\n    | Iterable<React.ReactNode>\n    | React.ReactPortal\n    | boolean\n    | null\n    | undefined\n    | React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES[\n        keyof React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES\n    ]",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | ((radix?: number) => string) | ((radix?: number) => string) | (() => string)",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => boolean) | (() => string) | (() => number) | (() => bigint) | (() => Object)",
                "optional": false
              },
              {
                "name": "toLocaleString",
                "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; } | ((locales?: Intl.LocalesArgument, options?: BigIntToLocaleStringOptions) => string)",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "internal",
                  "name": "",
                  "text": "Use `Awaited<ReactNode>` instead"
                }
              ]
            },
            "xaiDescription": "Union type for awaited React node values. Uses React.ReactElement and primitives.",
            "isExported": false
          },
          {
            "name": "Destructor",
            "type": "() => void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": {
              "description": "The function returned from an effect passed to {@link React.useEffect useEffect},\nwhich can be used to clean up the effect when the component unmounts.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useEffect React Docs}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "ReactManagedAttributes",
            "type": "C extends { defaultProps: infer D } ? Defaultize<P, D>\n    : P",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for merging component props with default props.",
            "isExported": false
          },
          {
            "name": "Booleanish",
            "type": "boolean | \"true\" | \"false\"",
            "properties": [
              {
                "name": "valueOf",
                "type": "(() => boolean) | (() => string)",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "Used to represent DOM API's where users can either pass\ntrue or false as a boolean or as its equivalent strings.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "CrossOrigin",
            "type": "\"anonymous\" | \"use-credentials\" | \"\" | undefined",
            "properties": [
              {
                "name": "toString",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "charAt",
                "type": "(pos: number) => string",
                "optional": false
              },
              {
                "name": "charCodeAt",
                "type": "(index: number) => number",
                "optional": false
              },
              {
                "name": "concat",
                "type": "(...strings: string[]) => string",
                "optional": false
              },
              {
                "name": "indexOf",
                "type": "(searchString: string, position?: number) => number",
                "optional": false
              },
              {
                "name": "lastIndexOf",
                "type": "(searchString: string, position?: number) => number",
                "optional": false
              },
              {
                "name": "localeCompare",
                "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number; (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number; }",
                "optional": false
              },
              {
                "name": "match",
                "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
                "optional": false
              },
              {
                "name": "replace",
                "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string; }",
                "optional": false
              },
              {
                "name": "search",
                "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
                "optional": false
              },
              {
                "name": "slice",
                "type": "(start?: number, end?: number) => string",
                "optional": false
              },
              {
                "name": "split",
                "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
                "optional": false
              },
              {
                "name": "substring",
                "type": "(start: number, end?: number) => string",
                "optional": false
              },
              {
                "name": "toLowerCase",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "toLocaleLowerCase",
                "type": "{ (locales?: string | string[]): string; (locales?: Intl.LocalesArgument): string; }",
                "optional": false
              },
              {
                "name": "toUpperCase",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "toLocaleUpperCase",
                "type": "{ (locales?: string | string[]): string; (locales?: Intl.LocalesArgument): string; }",
                "optional": false
              },
              {
                "name": "trim",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": false
              },
              {
                "name": "substr",
                "type": "(from: number, length?: number) => string",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "codePointAt",
                "type": "(pos: number) => number",
                "optional": false
              },
              {
                "name": "includes",
                "type": "(searchString: string, position?: number) => boolean",
                "optional": false
              },
              {
                "name": "endsWith",
                "type": "(searchString: string, endPosition?: number) => boolean",
                "optional": false
              },
              {
                "name": "normalize",
                "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
                "optional": false
              },
              {
                "name": "repeat",
                "type": "(count: number) => string",
                "optional": false
              },
              {
                "name": "startsWith",
                "type": "(searchString: string, position?: number) => boolean",
                "optional": false
              },
              {
                "name": "anchor",
                "type": "(name: string) => string",
                "optional": false
              },
              {
                "name": "big",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "blink",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "bold",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "fixed",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "fontcolor",
                "type": "(color: string) => string",
                "optional": false
              },
              {
                "name": "fontsize",
                "type": "{ (size: number): string; (size: string): string; }",
                "optional": false
              },
              {
                "name": "italics",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "link",
                "type": "(url: string) => string",
                "optional": false
              },
              {
                "name": "small",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "strike",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "sub",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "sup",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "padStart",
                "type": "(maxLength: number, fillString?: string) => string",
                "optional": false
              },
              {
                "name": "padEnd",
                "type": "(maxLength: number, fillString?: string) => string",
                "optional": false
              },
              {
                "name": "trimEnd",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimStart",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimLeft",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimRight",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "matchAll",
                "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
                "optional": false
              },
              {
                "name": "__@iterator@1179",
                "type": "() => StringIterator<string>",
                "optional": false
              },
              {
                "name": "at",
                "type": "(index: number) => string",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}"
                }
              ]
            },
            "xaiDescription": "String union for cross-origin attribute values.",
            "isExported": false
          },
          {
            "name": "Defaultize",
            "type": "P extends any ? string extends keyof P ? P\n    :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>\n        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type to combine props with defaults. Uses Pick and InexactPartial.",
            "isExported": false
          },
          {
            "name": "InexactPartial",
            "type": "{ [K in keyof T]?: T[K] | undefined }",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Makes all properties of an object optional or undefined.",
            "isExported": false
          },
          {
            "name": "NativeAnimationEvent",
            "type": "AnimationEvent",
            "properties": [
              {
                "name": "animationName",
                "type": "string",
                "optional": false
              },
              {
                "name": "elapsedTime",
                "type": "number",
                "optional": false
              },
              {
                "name": "pseudoElement",
                "type": "string",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Event for CSS animations. Extends EventTarget properties.",
            "isExported": false
          },
          {
            "name": "NativeClipboardEvent",
            "type": "ClipboardEvent",
            "properties": [
              {
                "name": "clipboardData",
                "type": "DataTransfer",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Event for clipboard operations. Includes DataTransfer.",
            "isExported": false
          },
          {
            "name": "NativeCompositionEvent",
            "type": "CompositionEvent",
            "properties": [
              {
                "name": "data",
                "type": "string",
                "optional": false
              },
              {
                "name": "initCompositionEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, dataArg?: string) => void",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Event for text composition. Includes Window and string data.",
            "isExported": false
          },
          {
            "name": "NativeDragEvent",
            "type": "DragEvent",
            "properties": [
              {
                "name": "dataTransfer",
                "type": "DataTransfer",
                "optional": false
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active. Uses string keyArg."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes a mouse event with parameters. Uses Window and EventTarget."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes a UI event. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event path targets. Uses EventTarget."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a basic event."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling."
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for native drag events.",
            "isExported": false
          },
          {
            "name": "NativeFocusEvent",
            "type": "FocusEvent",
            "properties": [
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes a UI event. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event path targets. Uses EventTarget."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a basic event."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling."
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for native focus events.",
            "isExported": false
          },
          {
            "name": "NativeKeyboardEvent",
            "type": "KeyboardEvent",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "charCode",
                "type": "number",
                "optional": false
              },
              {
                "name": "code",
                "type": "string",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "isComposing",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "key",
                "type": "string",
                "optional": false
              },
              {
                "name": "keyCode",
                "type": "number",
                "optional": false
              },
              {
                "name": "location",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "repeat",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active. Uses string keyArg."
              },
              {
                "name": "initKeyboardEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, keyArg?: string, locationArg?: number, ctrlKey?: boolean, altKey?: boolean, shiftKey?: boolean, metaKey?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a keyboard event. Uses Window."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes a UI event. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event path targets. Uses EventTarget."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a basic event."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling."
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for native keyboard events.",
            "isExported": false
          },
          {
            "name": "NativeMouseEvent",
            "type": "MouseEvent",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active. Uses string keyArg."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes a mouse event with parameters. Uses Window and EventTarget."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes a UI event. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event path targets. Uses EventTarget."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a basic event."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling."
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for native mouse events.",
            "isExported": false
          },
          {
            "name": "NativeWheelEvent",
            "type": "WheelEvent",
            "properties": [
              {
                "name": "deltaMode",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaX",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaY",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaZ",
                "type": "number",
                "optional": false
              },
              {
                "name": "DOM_DELTA_PIXEL",
                "type": "0",
                "optional": false
              },
              {
                "name": "DOM_DELTA_LINE",
                "type": "1",
                "optional": false
              },
              {
                "name": "DOM_DELTA_PAGE",
                "type": "2",
                "optional": false
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes a mouse event with given parameters."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes a UI event."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns the event's composed path as EventTarget array."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes an event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a wheel event in the DOM for mouse wheel actions."
          },
          {
            "name": "VoidOrUndefinedOnly",
            "type": "void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Type for void or undefined values only."
          },
          {
            "name": "JSXSource",
            "type": "export interface JSXSource {\n    /**\n     * The source file where the element originates from.\n     */\n    fileName?: string | undefined;\n\n    /**\n     * The line number where the element was created.\n     */\n    lineNumber?: number | undefined;\n\n    /**\n     * The column number where the element was created.\n     */\n    columnNumber?: number | undefined;\n}",
            "properties": [
              {
                "name": "fileName",
                "type": "string",
                "optional": true
              },
              {
                "name": "lineNumber",
                "type": "number",
                "optional": true
              },
              {
                "name": "columnNumber",
                "type": "number",
                "optional": true
              }
            ],
            "extends": [],
            "jsdoc": null,
            "isExported": true,
            "xaiDescription": "Interface for JSX source file information."
          },
          {
            "name": "AnimationEvent",
            "type": "interface AnimationEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event interface for CSS animations."
          },
          {
            "name": "ClipboardEvent",
            "type": "interface ClipboardEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event interface for clipboard operations."
          },
          {
            "name": "CompositionEvent",
            "type": "interface CompositionEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event interface for text composition."
          },
          {
            "name": "DataTransfer",
            "type": "interface DataTransfer {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for data transfer in drag and drop."
          },
          {
            "name": "Document",
            "type": "interface Document {}",
            "properties": [],
            "extends": [
              "Node",
              "DocumentOrShadowRoot",
              "FontFaceSource",
              "GlobalEventHandlers",
              "NonElementParentNode",
              "ParentNode",
              "XPathEvaluatorBase"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents the HTML or XML document."
          },
          {
            "name": "DocumentFragment",
            "type": "interface DocumentFragment {}",
            "properties": [],
            "extends": [
              "Node",
              "NonElementParentNode",
              "ParentNode"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "A lightweight document object."
          },
          {
            "name": "DragEvent",
            "type": "interface DragEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event interface for drag operations."
          },
          {
            "name": "Element",
            "type": "interface Element {}",
            "properties": [],
            "extends": [
              "Node",
              "ARIAMixin",
              "Animatable",
              "ChildNode",
              "NonDocumentTypeChildNode",
              "ParentNode",
              "Slottable"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Base interface for DOM elements."
          },
          {
            "name": "Event",
            "type": "interface Event {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Base interface for all events."
          },
          {
            "name": "EventTarget",
            "type": "interface EventTarget {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Object that can receive events."
          },
          {
            "name": "FocusEvent",
            "type": "interface FocusEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event interface for focus changes."
          },
          {
            "name": "FormData",
            "type": "interface FormData {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents form data for HTTP requests."
          },
          {
            "name": "HTMLAnchorElement",
            "type": "interface HTMLAnchorElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLHyperlinkElementUtils",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an anchor element in HTML."
          },
          {
            "name": "HTMLAreaElement",
            "type": "interface HTMLAreaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLHyperlinkElementUtils",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an area element in HTML maps."
          },
          {
            "name": "HTMLAudioElement",
            "type": "interface HTMLAudioElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLMediaElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an audio element in HTML."
          },
          {
            "name": "HTMLBaseElement",
            "type": "interface HTMLBaseElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a base element in HTML."
          },
          {
            "name": "HTMLBodyElement",
            "type": "interface HTMLBodyElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "WindowEventHandlers",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents the body element in HTML documents."
          },
          {
            "name": "HTMLBRElement",
            "type": "interface HTMLBRElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a line break element."
          },
          {
            "name": "HTMLButtonElement",
            "type": "interface HTMLButtonElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "PopoverInvokerElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a button element in HTML."
          },
          {
            "name": "HTMLCanvasElement",
            "type": "interface HTMLCanvasElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a canvas element for drawing."
          },
          {
            "name": "HTMLDataElement",
            "type": "interface HTMLDataElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a data element in HTML."
          },
          {
            "name": "HTMLDataListElement",
            "type": "interface HTMLDataListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a datalist element."
          },
          {
            "name": "HTMLDetailsElement",
            "type": "interface HTMLDetailsElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a details element for disclosure widgets."
          },
          {
            "name": "HTMLDialogElement",
            "type": "interface HTMLDialogElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a dialog element."
          },
          {
            "name": "HTMLDivElement",
            "type": "interface HTMLDivElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a div element in HTML."
          },
          {
            "name": "HTMLDListElement",
            "type": "interface HTMLDListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a definition list element."
          },
          {
            "name": "HTMLElement",
            "type": "interface HTMLElement extends Element {}",
            "properties": [],
            "extends": [
              "Element",
              "ElementCSSInlineStyle",
              "ElementContentEditable",
              "GlobalEventHandlers",
              "HTMLOrSVGElement",
              "Element",
              "Element"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Base interface for HTML elements."
          },
          {
            "name": "HTMLEmbedElement",
            "type": "interface HTMLEmbedElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an embed element for external content."
          },
          {
            "name": "HTMLFieldSetElement",
            "type": "interface HTMLFieldSetElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a fieldset element in forms."
          },
          {
            "name": "HTMLFormElement",
            "type": "interface HTMLFormElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a form element."
          },
          {
            "name": "HTMLHeadElement",
            "type": "interface HTMLHeadElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents the head element in HTML documents."
          },
          {
            "name": "HTMLHeadingElement",
            "type": "interface HTMLHeadingElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents heading elements like h1-h6."
          },
          {
            "name": "HTMLHRElement",
            "type": "interface HTMLHRElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a horizontal rule element."
          },
          {
            "name": "HTMLHtmlElement",
            "type": "interface HTMLHtmlElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents the root html element."
          },
          {
            "name": "HTMLIFrameElement",
            "type": "interface HTMLIFrameElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an iframe element for embedded documents."
          },
          {
            "name": "HTMLImageElement",
            "type": "interface HTMLImageElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an image element."
          },
          {
            "name": "HTMLInputElement",
            "type": "interface HTMLInputElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "PopoverInvokerElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an input element in forms."
          },
          {
            "name": "HTMLLabelElement",
            "type": "interface HTMLLabelElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a label element for form controls."
          },
          {
            "name": "HTMLLegendElement",
            "type": "interface HTMLLegendElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a legend element in fieldsets."
          },
          {
            "name": "HTMLLIElement",
            "type": "interface HTMLLIElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a list item element."
          },
          {
            "name": "HTMLLinkElement",
            "type": "interface HTMLLinkElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "LinkStyle",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a link element for stylesheets."
          },
          {
            "name": "HTMLMapElement",
            "type": "interface HTMLMapElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a map element for images."
          },
          {
            "name": "HTMLMetaElement",
            "type": "interface HTMLMetaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a meta element for document metadata."
          },
          {
            "name": "HTMLMeterElement",
            "type": "interface HTMLMeterElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a meter element for gauges."
          },
          {
            "name": "HTMLModElement",
            "type": "interface HTMLModElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents modification elements like ins and del."
          },
          {
            "name": "HTMLObjectElement",
            "type": "interface HTMLObjectElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an object element for embedded objects."
          },
          {
            "name": "HTMLOListElement",
            "type": "interface HTMLOListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an ordered list element."
          },
          {
            "name": "HTMLOptGroupElement",
            "type": "interface HTMLOptGroupElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an optgroup element in select menus."
          },
          {
            "name": "HTMLOptionElement",
            "type": "interface HTMLOptionElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an option element in select menus."
          },
          {
            "name": "HTMLOutputElement",
            "type": "interface HTMLOutputElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an output element for form results."
          },
          {
            "name": "HTMLParagraphElement",
            "type": "interface HTMLParagraphElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a paragraph element."
          },
          {
            "name": "HTMLParamElement",
            "type": "interface HTMLParamElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <param> element for passing parameters to objects or applets."
          },
          {
            "name": "HTMLPreElement",
            "type": "interface HTMLPreElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <pre> element for displaying preformatted text."
          },
          {
            "name": "HTMLProgressElement",
            "type": "interface HTMLProgressElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <progress> element for showing task progress."
          },
          {
            "name": "HTMLQuoteElement",
            "type": "interface HTMLQuoteElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <q> or <blockquote> elements for quotations."
          },
          {
            "name": "HTMLScriptElement",
            "type": "interface HTMLScriptElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <script> element for embedding executable code."
          },
          {
            "name": "HTMLSelectElement",
            "type": "interface HTMLSelectElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <select> element for dropdown menus."
          },
          {
            "name": "HTMLSlotElement",
            "type": "interface HTMLSlotElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <slot> element for Web Components content distribution."
          },
          {
            "name": "HTMLSourceElement",
            "type": "interface HTMLSourceElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <source> element for media sources in video/audio."
          },
          {
            "name": "HTMLSpanElement",
            "type": "interface HTMLSpanElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <span> element for inline content grouping."
          },
          {
            "name": "HTMLStyleElement",
            "type": "interface HTMLStyleElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "LinkStyle",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <style> element for embedding CSS styles."
          },
          {
            "name": "HTMLTableColElement",
            "type": "interface HTMLTableColElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <col> element for table column properties."
          },
          {
            "name": "HTMLTableDataCellElement",
            "type": "interface HTMLTableDataCellElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLTableCellElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <td> element for table data cells."
          },
          {
            "name": "HTMLTableElement",
            "type": "interface HTMLTableElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <table> element for tabular data."
          },
          {
            "name": "HTMLTableHeaderCellElement",
            "type": "interface HTMLTableHeaderCellElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLTableCellElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <th> element for table header cells."
          },
          {
            "name": "HTMLTableRowElement",
            "type": "interface HTMLTableRowElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <tr> element for table rows."
          },
          {
            "name": "HTMLTableSectionElement",
            "type": "interface HTMLTableSectionElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <thead>, <tbody>, or <tfoot> elements."
          },
          {
            "name": "HTMLTemplateElement",
            "type": "interface HTMLTemplateElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <template> element for holding client-side content."
          },
          {
            "name": "HTMLTextAreaElement",
            "type": "interface HTMLTextAreaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <textarea> element for multi-line text input."
          },
          {
            "name": "HTMLTimeElement",
            "type": "interface HTMLTimeElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <time> element for date and time values."
          },
          {
            "name": "HTMLTitleElement",
            "type": "interface HTMLTitleElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <title> element for document titles."
          },
          {
            "name": "HTMLTrackElement",
            "type": "interface HTMLTrackElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <track> element for timed text tracks in media."
          },
          {
            "name": "HTMLUListElement",
            "type": "interface HTMLUListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <ul> element for unordered lists."
          },
          {
            "name": "HTMLVideoElement",
            "type": "interface HTMLVideoElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLMediaElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <video> element for embedding video content."
          },
          {
            "name": "HTMLWebViewElement",
            "type": "interface HTMLWebViewElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <webview> element for embedding web content."
          },
          {
            "name": "KeyboardEvent",
            "type": "interface KeyboardEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents keyboard input events in the DOM."
          },
          {
            "name": "MouseEvent",
            "type": "interface MouseEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents mouse-related events in the DOM."
          },
          {
            "name": "PointerEvent",
            "type": "interface PointerEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents pointer device events like mouse or touch."
          },
          {
            "name": "StyleMedia",
            "type": "interface StyleMedia {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Provides information about the style sheet media."
          },
          {
            "name": "SVGCircleElement",
            "type": "interface SVGCircleElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG circle element."
          },
          {
            "name": "SVGClipPathElement",
            "type": "interface SVGClipPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG clipPath element for clipping shapes."
          },
          {
            "name": "SVGDefsElement",
            "type": "interface SVGDefsElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG defs element for definitions."
          },
          {
            "name": "SVGDescElement",
            "type": "interface SVGDescElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG desc element for descriptions."
          },
          {
            "name": "SVGElement",
            "type": "interface SVGElement extends Element {}",
            "properties": [],
            "extends": [
              "Element",
              "ElementCSSInlineStyle",
              "GlobalEventHandlers",
              "HTMLOrSVGElement",
              "Element",
              "Element"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Base interface for all SVG elements in the DOM."
          },
          {
            "name": "SVGEllipseElement",
            "type": "interface SVGEllipseElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG ellipse element."
          },
          {
            "name": "SVGFEBlendElement",
            "type": "interface SVGFEBlendElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feBlend filter element."
          },
          {
            "name": "SVGFEColorMatrixElement",
            "type": "interface SVGFEColorMatrixElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feColorMatrix filter element."
          },
          {
            "name": "SVGFEComponentTransferElement",
            "type": "interface SVGFEComponentTransferElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feComponentTransfer filter element."
          },
          {
            "name": "SVGFECompositeElement",
            "type": "interface SVGFECompositeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feComposite filter element."
          },
          {
            "name": "SVGFEConvolveMatrixElement",
            "type": "interface SVGFEConvolveMatrixElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feConvolveMatrix filter element."
          },
          {
            "name": "SVGFEDiffuseLightingElement",
            "type": "interface SVGFEDiffuseLightingElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feDiffuseLighting filter element."
          },
          {
            "name": "SVGFEDisplacementMapElement",
            "type": "interface SVGFEDisplacementMapElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feDisplacementMap filter element."
          },
          {
            "name": "SVGFEDistantLightElement",
            "type": "interface SVGFEDistantLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feDistantLight filter element."
          },
          {
            "name": "SVGFEDropShadowElement",
            "type": "interface SVGFEDropShadowElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feDropShadow filter element."
          },
          {
            "name": "SVGFEFloodElement",
            "type": "interface SVGFEFloodElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feFlood filter element."
          },
          {
            "name": "SVGFEFuncAElement",
            "type": "interface SVGFEFuncAElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feFuncA transfer function element."
          },
          {
            "name": "SVGFEFuncBElement",
            "type": "interface SVGFEFuncBElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feFuncB transfer function element."
          },
          {
            "name": "SVGFEFuncGElement",
            "type": "interface SVGFEFuncGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feFuncG transfer function element."
          },
          {
            "name": "SVGFEFuncRElement",
            "type": "interface SVGFEFuncRElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feFuncR transfer function element."
          },
          {
            "name": "SVGFEGaussianBlurElement",
            "type": "interface SVGFEGaussianBlurElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feGaussianBlur filter element."
          },
          {
            "name": "SVGFEImageElement",
            "type": "interface SVGFEImageElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feImage filter element."
          },
          {
            "name": "SVGFEMergeElement",
            "type": "interface SVGFEMergeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feMerge filter element."
          },
          {
            "name": "SVGFEMergeNodeElement",
            "type": "interface SVGFEMergeNodeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feMergeNode filter element."
          },
          {
            "name": "SVGFEMorphologyElement",
            "type": "interface SVGFEMorphologyElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feMorphology filter element."
          },
          {
            "name": "SVGFEOffsetElement",
            "type": "interface SVGFEOffsetElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feOffset filter element."
          },
          {
            "name": "SVGFEPointLightElement",
            "type": "interface SVGFEPointLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG fePointLight filter element."
          },
          {
            "name": "SVGFESpecularLightingElement",
            "type": "interface SVGFESpecularLightingElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feSpecularLighting filter element."
          },
          {
            "name": "SVGFESpotLightElement",
            "type": "interface SVGFESpotLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feSpotLight filter element."
          },
          {
            "name": "SVGFETileElement",
            "type": "interface SVGFETileElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feTile filter element."
          },
          {
            "name": "SVGFETurbulenceElement",
            "type": "interface SVGFETurbulenceElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG feTurbulence filter element."
          },
          {
            "name": "SVGFilterElement",
            "type": "interface SVGFilterElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG filter element for graphical effects."
          },
          {
            "name": "SVGForeignObjectElement",
            "type": "interface SVGForeignObjectElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG foreignObject element for embedding HTML."
          },
          {
            "name": "SVGGElement",
            "type": "interface SVGGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG group element for grouping shapes."
          },
          {
            "name": "SVGImageElement",
            "type": "interface SVGImageElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG image element for raster images."
          },
          {
            "name": "SVGLinearGradientElement",
            "type": "interface SVGLinearGradientElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGradientElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG linearGradient element."
          },
          {
            "name": "SVGLineElement",
            "type": "interface SVGLineElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG line element."
          },
          {
            "name": "SVGMarkerElement",
            "type": "interface SVGMarkerElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG marker element for shapes like arrows."
          },
          {
            "name": "SVGMaskElement",
            "type": "interface SVGMaskElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG mask element for masking graphics."
          },
          {
            "name": "SVGMetadataElement",
            "type": "interface SVGMetadataElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents an SVG metadata element for document metadata."
          },
          {
            "name": "SVGPathElement",
            "type": "interface SVGPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG path elements, extending SVGGeometryElement for graphics paths.",
            "isExported": false
          },
          {
            "name": "SVGPatternElement",
            "type": "interface SVGPatternElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG pattern elements, used for repeating patterns in graphics.",
            "isExported": false
          },
          {
            "name": "SVGPolygonElement",
            "type": "interface SVGPolygonElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGAnimatedPoints",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG polygon elements, extending SVGGeometryElement for polygon shapes.",
            "isExported": false
          },
          {
            "name": "SVGPolylineElement",
            "type": "interface SVGPolylineElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGAnimatedPoints",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG polyline elements, extending SVGGeometryElement for polyline paths.",
            "isExported": false
          },
          {
            "name": "SVGRadialGradientElement",
            "type": "interface SVGRadialGradientElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGradientElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG radial gradient elements, extending SVGGradientElement for gradients.",
            "isExported": false
          },
          {
            "name": "SVGRectElement",
            "type": "interface SVGRectElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG rectangle elements, extending SVGGeometryElement for rectangles.",
            "isExported": false
          },
          {
            "name": "SVGSetElement",
            "type": "interface SVGSetElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGAnimationElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG set animation elements, extending SVGAnimationElement for animations.",
            "isExported": false
          },
          {
            "name": "SVGStopElement",
            "type": "interface SVGStopElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG stop elements, used in gradient color stops.",
            "isExported": false
          },
          {
            "name": "SVGSVGElement",
            "type": "interface SVGSVGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGFitToViewBox",
              "WindowEventHandlers",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for the root SVG element, extending SVGGraphicsElement for SVG documents.",
            "isExported": false
          },
          {
            "name": "SVGSwitchElement",
            "type": "interface SVGSwitchElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG switch elements, extending SVGGraphicsElement for conditional rendering.",
            "isExported": false
          },
          {
            "name": "SVGSymbolElement",
            "type": "interface SVGSymbolElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG symbol elements, extending SVGElement for reusable symbols.",
            "isExported": false
          },
          {
            "name": "SVGTextElement",
            "type": "interface SVGTextElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextPositioningElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG text elements, extending SVGTextPositioningElement for text rendering.",
            "isExported": false
          },
          {
            "name": "SVGTextPathElement",
            "type": "interface SVGTextPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextContentElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG text path elements, extending SVGTextContentElement for text along paths.",
            "isExported": false
          },
          {
            "name": "SVGTSpanElement",
            "type": "interface SVGTSpanElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextPositioningElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG tspan elements, extending SVGTextPositioningElement for inline text.",
            "isExported": false
          },
          {
            "name": "SVGUseElement",
            "type": "interface SVGUseElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG use elements, extending SVGGraphicsElement for element referencing.",
            "isExported": false
          },
          {
            "name": "SVGViewElement",
            "type": "interface SVGViewElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for SVG view elements, extending SVGElement for viewport definitions.",
            "isExported": false
          },
          {
            "name": "Text",
            "type": "interface Text {}",
            "properties": [],
            "extends": [
              "CharacterData",
              "Slottable"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for DOM text nodes, extending CharacterData for text content handling.",
            "isExported": false
          },
          {
            "name": "ToggleEvent",
            "type": "interface ToggleEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for toggle actions, extending Event for UI state changes.",
            "isExported": false
          },
          {
            "name": "TouchEvent",
            "type": "interface TouchEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for touch inputs, extending UIEvent for touch interactions.",
            "isExported": false
          },
          {
            "name": "TouchList",
            "type": "interface TouchList {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for a list of touch points in touch events.",
            "isExported": false
          },
          {
            "name": "TransitionEvent",
            "type": "interface TransitionEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for CSS transitions, extending Event for animation events.",
            "isExported": false
          },
          {
            "name": "TrustedHTML",
            "type": "interface TrustedHTML {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for secure HTML strings to prevent XSS attacks.",
            "isExported": false
          },
          {
            "name": "UIEvent",
            "type": "interface UIEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for user interface events, extending Event for UI interactions.",
            "isExported": false
          },
          {
            "name": "WebGL2RenderingContext",
            "type": "interface WebGL2RenderingContext {}",
            "properties": [],
            "extends": [
              "WebGL2RenderingContextBase",
              "WebGL2RenderingContextOverloads",
              "WebGLRenderingContextBase"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for WebGL 2.0 rendering context, extending base WebGL contexts.",
            "isExported": false
          },
          {
            "name": "WebGLRenderingContext",
            "type": "interface WebGLRenderingContext {}",
            "properties": [],
            "extends": [
              "WebGLRenderingContextBase",
              "WebGLRenderingContextOverloads"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for WebGL rendering context, extending base WebGL functionality.",
            "isExported": false
          },
          {
            "name": "WheelEvent",
            "type": "interface WheelEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for wheel events, extending MouseEvent for scrolling actions.",
            "isExported": false
          },
          {
            "name": "Destructor",
            "type": "() => void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": {
              "description": "The function returned from an effect passed to {@link React.useEffect useEffect},\nwhich can be used to clean up the effect when the component unmounts.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useEffect React Docs}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "GlobalJSXElement",
            "type": "interface GlobalJSXElement extends JSX.Element {}",
            "properties": [],
            "extends": [
              "JSX.Element"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX.Element for React component elements.",
            "isExported": false
          },
          {
            "name": "GlobalJSXElementAttributesProperty",
            "type": "interface GlobalJSXElementAttributesProperty extends JSX.ElementAttributesProperty {}",
            "properties": [],
            "extends": [
              "JSX.ElementAttributesProperty"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX.ElementAttributesProperty for element attributes.",
            "isExported": false
          },
          {
            "name": "GlobalJSXElementChildrenAttribute",
            "type": "interface GlobalJSXElementChildrenAttribute extends JSX.ElementChildrenAttribute {}",
            "properties": [],
            "extends": [
              "JSX.ElementChildrenAttribute"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX.ElementChildrenAttribute for child elements.",
            "isExported": false
          },
          {
            "name": "GlobalJSXElementClass",
            "type": "interface GlobalJSXElementClass extends JSX.ElementClass {}",
            "properties": [],
            "extends": [
              "JSX.ElementClass"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX.ElementClass for component classes.",
            "isExported": false
          },
          {
            "name": "GlobalJSXElementType",
            "type": "JSX.ElementType",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | (() => string)",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => string) | (() => Object)",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Type for JSX elements, including string conversion methods.",
            "isExported": false
          },
          {
            "name": "GlobalJSXIntrinsicAttributes",
            "type": "interface GlobalJSXIntrinsicAttributes extends JSX.IntrinsicAttributes {}",
            "properties": [],
            "extends": [
              "JSX.IntrinsicAttributes"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX.IntrinsicAttributes for intrinsic element props.",
            "isExported": false
          },
          {
            "name": "GlobalJSXIntrinsicClassAttributes",
            "type": "interface GlobalJSXIntrinsicClassAttributes<T> extends JSX.IntrinsicClassAttributes<T> {}",
            "properties": [],
            "extends": [
              "JSX.IntrinsicClassAttributes<T>"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX.IntrinsicClassAttributes for class components.",
            "isExported": false
          },
          {
            "name": "GlobalJSXIntrinsicElements",
            "type": "interface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}",
            "properties": [],
            "extends": [
              "JSX.IntrinsicElements"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX.IntrinsicElements for built-in elements.",
            "isExported": false
          },
          {
            "name": "GlobalJSXLibraryManagedAttributes",
            "type": "JSX.LibraryManagedAttributes<C, P>",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for managed attributes in JSX libraries.",
            "isExported": false
          },
          {
            "name": "ReactManagedAttributes",
            "type": "C extends { propTypes: infer T; defaultProps: infer D }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T } ? MergePropTypes<P, PropTypes.InferProps<T>>\n    : C extends { defaultProps: infer D } ? Defaultize<P, D>\n    : P",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for managing React component attributes with prop types and defaults.",
            "isExported": false
          },
          {
            "name": "Booleanish",
            "type": "boolean | \"true\" | \"false\"",
            "properties": [
              {
                "name": "valueOf",
                "type": "(() => boolean) | (() => string)",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "Used to represent DOM API's where users can either pass\ntrue or false as a boolean or as its equivalent strings.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "CrossOrigin",
            "type": "\"anonymous\" | \"use-credentials\" | \"\" | undefined",
            "properties": [
              {
                "name": "toString",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "charAt",
                "type": "(pos: number) => string",
                "optional": false
              },
              {
                "name": "charCodeAt",
                "type": "(index: number) => number",
                "optional": false
              },
              {
                "name": "concat",
                "type": "(...strings: string[]) => string",
                "optional": false
              },
              {
                "name": "indexOf",
                "type": "(searchString: string, position?: number) => number",
                "optional": false
              },
              {
                "name": "lastIndexOf",
                "type": "(searchString: string, position?: number) => number",
                "optional": false
              },
              {
                "name": "localeCompare",
                "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number; (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number; }",
                "optional": false
              },
              {
                "name": "match",
                "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
                "optional": false
              },
              {
                "name": "replace",
                "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string; }",
                "optional": false
              },
              {
                "name": "search",
                "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
                "optional": false
              },
              {
                "name": "slice",
                "type": "(start?: number, end?: number) => string",
                "optional": false
              },
              {
                "name": "split",
                "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
                "optional": false
              },
              {
                "name": "substring",
                "type": "(start: number, end?: number) => string",
                "optional": false
              },
              {
                "name": "toLowerCase",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "toLocaleLowerCase",
                "type": "{ (locales?: string | string[]): string; (locales?: Intl.LocalesArgument): string; }",
                "optional": false
              },
              {
                "name": "toUpperCase",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "toLocaleUpperCase",
                "type": "{ (locales?: string | string[]): string; (locales?: Intl.LocalesArgument): string; }",
                "optional": false
              },
              {
                "name": "trim",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": false
              },
              {
                "name": "substr",
                "type": "(from: number, length?: number) => string",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "codePointAt",
                "type": "(pos: number) => number",
                "optional": false
              },
              {
                "name": "includes",
                "type": "(searchString: string, position?: number) => boolean",
                "optional": false
              },
              {
                "name": "endsWith",
                "type": "(searchString: string, endPosition?: number) => boolean",
                "optional": false
              },
              {
                "name": "normalize",
                "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
                "optional": false
              },
              {
                "name": "repeat",
                "type": "(count: number) => string",
                "optional": false
              },
              {
                "name": "startsWith",
                "type": "(searchString: string, position?: number) => boolean",
                "optional": false
              },
              {
                "name": "anchor",
                "type": "(name: string) => string",
                "optional": false
              },
              {
                "name": "big",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "blink",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "bold",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "fixed",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "fontcolor",
                "type": "(color: string) => string",
                "optional": false
              },
              {
                "name": "fontsize",
                "type": "{ (size: number): string; (size: string): string; }",
                "optional": false
              },
              {
                "name": "italics",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "link",
                "type": "(url: string) => string",
                "optional": false
              },
              {
                "name": "small",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "strike",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "sub",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "sup",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "padStart",
                "type": "(maxLength: number, fillString?: string) => string",
                "optional": false
              },
              {
                "name": "padEnd",
                "type": "(maxLength: number, fillString?: string) => string",
                "optional": false
              },
              {
                "name": "trimEnd",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimStart",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimLeft",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimRight",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "matchAll",
                "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
                "optional": false
              },
              {
                "name": "__@iterator@23163",
                "type": "() => StringIterator<string>",
                "optional": false
              },
              {
                "name": "at",
                "type": "(index: number) => string",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "Defaultize",
            "type": "P extends any ? string extends keyof P ? P\n    :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>\n        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Utility type for defaulting properties in generic types.",
            "isExported": false
          },
          {
            "name": "ExactlyAnyPropertyKeys",
            "type": "{ [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T]",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | ((radix?: number) => string) | (() => string)",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => string) | (() => number) | (() => symbol)",
                "optional": false
              },
              {
                "name": "toLocaleString",
                "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; }",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Type for extracting keys where value is exactly any.",
            "isExported": false
          },
          {
            "name": "InexactPartial",
            "type": "{ [K in keyof T]?: T[K] | undefined }",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for making object properties optional and undefined.",
            "isExported": false
          },
          {
            "name": "IsExactlyAny",
            "type": "boolean extends (T extends never ? true : false) ? true : false",
            "properties": [
              {
                "name": "valueOf",
                "type": "() => boolean",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Type guard to check if a type is exactly any.",
            "isExported": false
          },
          {
            "name": "MergePropTypes",
            "type": "P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n        : string extends keyof P ? P\n            // Prefer declared types which are not exactly any\n        :\n            & Pick<P, NotExactlyAnyPropertyKeys<P>>\n            // For props which are exactly any, use the type inferred from propTypes if present\n            & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n            // Keep leftover props not specified in propTypes\n            & Pick<P, Exclude<keyof P, keyof T>>\n        : never",
            "properties": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Utility type for merging component prop types with declared props."
          },
          {
            "name": "NativeAnimationEvent",
            "type": "AnimationEvent",
            "properties": [
              {
                "name": "animationName",
                "type": "string",
                "optional": false
              },
              {
                "name": "elapsedTime",
                "type": "number",
                "optional": false
              },
              {
                "name": "pseudoElement",
                "type": "string",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns the event's composed path as an array of targets."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes the event with type and optional bubbling settings."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating further immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating to other elements."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event type for CSS animations, extending standard event properties."
          },
          {
            "name": "NativeClipboardEvent",
            "type": "ClipboardEvent",
            "properties": [
              {
                "name": "clipboardData",
                "type": "DataTransfer",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns the event's composed path as an array of targets."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes the event with type and optional bubbling settings."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating further immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating to other elements."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event type for clipboard actions, including data transfer."
          },
          {
            "name": "NativeCompositionEvent",
            "type": "CompositionEvent",
            "properties": [
              {
                "name": "data",
                "type": "string",
                "optional": false
              },
              {
                "name": "initCompositionEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, dataArg?: string) => void",
                "optional": false,
                "xaiDescription": "Initializes composition event with type, bubbles, and data."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with type and other parameters."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns the event's composed path as an array of targets."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes the event with type and optional bubbling settings."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating further immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating to other elements."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event type for text composition, like input methods."
          },
          {
            "name": "NativeDragEvent",
            "type": "DragEvent",
            "properties": [
              {
                "name": "dataTransfer",
                "type": "DataTransfer",
                "optional": false
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes a mouse event with detailed parameters."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with type and other parameters."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns the event's composed path as an array of targets."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes the event with type and optional bubbling settings."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating further immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating to other elements."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event type for drag and drop operations."
          },
          {
            "name": "NativeFocusEvent",
            "type": "FocusEvent",
            "properties": [
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with type and other parameters."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns the event's composed path as an array of targets."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes the event with type and optional bubbling settings."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating further immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating to other elements."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event type for focus changes on elements."
          },
          {
            "name": "NativeKeyboardEvent",
            "type": "KeyboardEvent",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "charCode",
                "type": "number",
                "optional": false
              },
              {
                "name": "code",
                "type": "string",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "isComposing",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "key",
                "type": "string",
                "optional": false
              },
              {
                "name": "keyCode",
                "type": "number",
                "optional": false
              },
              {
                "name": "location",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "repeat",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active."
              },
              {
                "name": "initKeyboardEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, keyArg?: string, locationArg?: number, ctrlKey?: boolean, altKey?: boolean, shiftKey?: boolean, metaKey?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes keyboard event with key details."
              },
              {
                "name": "DOM_KEY_LOCATION_STANDARD",
                "type": "0",
                "optional": false
              },
              {
                "name": "DOM_KEY_LOCATION_LEFT",
                "type": "1",
                "optional": false
              },
              {
                "name": "DOM_KEY_LOCATION_RIGHT",
                "type": "2",
                "optional": false
              },
              {
                "name": "DOM_KEY_LOCATION_NUMPAD",
                "type": "3",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with type and other parameters."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns the event's composed path as an array of targets."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes the event with type and optional bubbling settings."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating further immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating to other elements."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event type for keyboard input and key presses."
          },
          {
            "name": "NativeMouseEvent",
            "type": "MouseEvent",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if modifier key is active. Uses string keyArg."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes MouseEvent with event details. Uses Window and EventTarget."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UIEvent with optional parameters. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in composition path. Uses EventTarget."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event properties."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling or capturing."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native representation of MouseEvent for user mouse interactions."
          },
          {
            "name": "NativePointerEvent",
            "type": "PointerEvent",
            "properties": [
              {
                "name": "altitudeAngle",
                "type": "number",
                "optional": false
              },
              {
                "name": "azimuthAngle",
                "type": "number",
                "optional": false
              },
              {
                "name": "height",
                "type": "number",
                "optional": false
              },
              {
                "name": "isPrimary",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "pointerId",
                "type": "number",
                "optional": false
              },
              {
                "name": "pointerType",
                "type": "string",
                "optional": false
              },
              {
                "name": "pressure",
                "type": "number",
                "optional": false
              },
              {
                "name": "tangentialPressure",
                "type": "number",
                "optional": false
              },
              {
                "name": "tiltX",
                "type": "number",
                "optional": false
              },
              {
                "name": "tiltY",
                "type": "number",
                "optional": false
              },
              {
                "name": "twist",
                "type": "number",
                "optional": false
              },
              {
                "name": "width",
                "type": "number",
                "optional": false
              },
              {
                "name": "getCoalescedEvents",
                "type": "() => PointerEvent[]",
                "optional": false,
                "xaiDescription": "Returns array of coalesced pointer events."
              },
              {
                "name": "getPredictedEvents",
                "type": "() => PointerEvent[]",
                "optional": false,
                "xaiDescription": "Returns array of predicted pointer events."
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if modifier key is active. Uses string keyArg."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes MouseEvent with parameters. Uses Window and EventTarget."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UIEvent with optional parameters. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in path. Uses EventTarget."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event properties."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event behavior."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Halts immediate event propagation."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native representation of PointerEvent for pointer inputs."
          },
          {
            "name": "NativeTouchEvent",
            "type": "TouchEvent",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "changedTouches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "targetTouches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "touches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UIEvent with parameters. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets. Uses EventTarget."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes event with basic properties."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Halts event bubbling."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native representation of TouchEvent for touch inputs."
          },
          {
            "name": "NativeTransitionEvent",
            "type": "TransitionEvent",
            "properties": [
              {
                "name": "elapsedTime",
                "type": "number",
                "optional": false
              },
              {
                "name": "propertyName",
                "type": "string",
                "optional": false
              },
              {
                "name": "pseudoElement",
                "type": "string",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns path of event targets. Uses EventTarget."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Sets up event basics."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Cancels default behavior."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents further event handling."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event from propagating."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native representation of TransitionEvent for CSS transitions."
          },
          {
            "name": "NativeUIEvent",
            "type": "UIEvent",
            "properties": [
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UIEvent with details. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Gets array of event path targets. Uses EventTarget."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes event object."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Immediately stops event propagation."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event from continuing."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native representation of UIEvent for user interface interactions."
          },
          {
            "name": "NativeWheelEvent",
            "type": "WheelEvent",
            "properties": [
              {
                "name": "deltaMode",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaX",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaY",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaZ",
                "type": "number",
                "optional": false
              },
              {
                "name": "DOM_DELTA_PIXEL",
                "type": "0",
                "optional": false
              },
              {
                "name": "DOM_DELTA_LINE",
                "type": "1",
                "optional": false
              },
              {
                "name": "DOM_DELTA_PAGE",
                "type": "2",
                "optional": false
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "DOM interface for wheel events, extending Event."
          },
          {
            "name": "NotExactlyAnyPropertyKeys",
            "type": "Exclude<keyof T, ExactlyAnyPropertyKeys<T>>",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | ((radix?: number) => string) | (() => string)",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => string) | (() => number) | (() => symbol)",
                "optional": false
              },
              {
                "name": "toLocaleString",
                "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; }",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Type excluding keys that are exactly any from T."
          },
          {
            "name": "VoidOrUndefinedOnly",
            "type": "void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Type representing void or undefined values."
          },
          {
            "name": "JSXSource",
            "type": "export interface JSXSource {\n    /**\n     * The source file where the element originates from.\n     */\n    fileName?: string | undefined;\n\n    /**\n     * The line number where the element was created.\n     */\n    lineNumber?: number | undefined;\n\n    /**\n     * The column number where the element was created.\n     */\n    columnNumber?: number | undefined;\n}",
            "properties": [
              {
                "name": "fileName",
                "type": "string",
                "optional": true
              },
              {
                "name": "lineNumber",
                "type": "number",
                "optional": true
              },
              {
                "name": "columnNumber",
                "type": "number",
                "optional": true
              }
            ],
            "extends": [],
            "jsdoc": null,
            "isExported": true,
            "xaiDescription": "Interface for JSX element source file and location data."
          },
          {
            "name": "AnimationEvent",
            "type": "interface AnimationEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event interface for CSS animations, extending Event."
          },
          {
            "name": "ClipboardEvent",
            "type": "interface ClipboardEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event interface for clipboard operations, extending Event."
          },
          {
            "name": "CompositionEvent",
            "type": "interface CompositionEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event interface for text composition, extending UIEvent."
          },
          {
            "name": "DataTransfer",
            "type": "interface DataTransfer {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for handling data transfer in drag and drop."
          },
          {
            "name": "Document",
            "type": "interface Document {}",
            "properties": [],
            "extends": [
              "Node",
              "DocumentOrShadowRoot",
              "FontFaceSource",
              "GlobalEventHandlers",
              "NonElementParentNode",
              "ParentNode",
              "XPathEvaluatorBase"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Core interface for HTML documents, extending multiple DOM nodes."
          },
          {
            "name": "DocumentFragment",
            "type": "interface DocumentFragment {}",
            "properties": [],
            "extends": [
              "Node",
              "NonElementParentNode",
              "ParentNode"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for document fragments, extending Node."
          },
          {
            "name": "DragEvent",
            "type": "interface DragEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event interface for drag operations, extending MouseEvent."
          },
          {
            "name": "Element",
            "type": "interface Element {}",
            "properties": [],
            "extends": [
              "Node",
              "ARIAMixin",
              "Animatable",
              "ChildNode",
              "NonDocumentTypeChildNode",
              "ParentNode",
              "Slottable"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Base interface for DOM elements, extending Node and mixins."
          },
          {
            "name": "Event",
            "type": "interface Event {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Fundamental interface for DOM events."
          },
          {
            "name": "EventTarget",
            "type": "interface EventTarget {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for objects that can receive events."
          },
          {
            "name": "FocusEvent",
            "type": "interface FocusEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event interface for focus changes, extending UIEvent."
          },
          {
            "name": "FormData",
            "type": "interface FormData {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for handling form data entries."
          },
          {
            "name": "HTMLAnchorElement",
            "type": "interface HTMLAnchorElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLHyperlinkElementUtils",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML anchor elements, extending HTMLElement."
          },
          {
            "name": "HTMLAreaElement",
            "type": "interface HTMLAreaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLHyperlinkElementUtils",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML area elements, extending HTMLElement."
          },
          {
            "name": "HTMLAudioElement",
            "type": "interface HTMLAudioElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLMediaElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML audio elements, extending HTMLMediaElement."
          },
          {
            "name": "HTMLBaseElement",
            "type": "interface HTMLBaseElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML base elements, extending HTMLElement."
          },
          {
            "name": "HTMLBodyElement",
            "type": "interface HTMLBodyElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "WindowEventHandlers",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML body elements, extending HTMLElement."
          },
          {
            "name": "HTMLBRElement",
            "type": "interface HTMLBRElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML line break elements, extending HTMLElement."
          },
          {
            "name": "HTMLButtonElement",
            "type": "interface HTMLButtonElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "PopoverInvokerElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML button elements, extending HTMLElement."
          },
          {
            "name": "HTMLCanvasElement",
            "type": "interface HTMLCanvasElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML canvas elements, extending HTMLElement."
          },
          {
            "name": "HTMLDataElement",
            "type": "interface HTMLDataElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML data elements, extending HTMLElement."
          },
          {
            "name": "HTMLDataListElement",
            "type": "interface HTMLDataListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML datalist elements, extending HTMLElement."
          },
          {
            "name": "HTMLDetailsElement",
            "type": "interface HTMLDetailsElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML details elements, extending HTMLElement."
          },
          {
            "name": "HTMLDialogElement",
            "type": "interface HTMLDialogElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML dialog elements, extending HTMLElement."
          },
          {
            "name": "HTMLDivElement",
            "type": "interface HTMLDivElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML div elements, extending HTMLElement."
          },
          {
            "name": "HTMLDListElement",
            "type": "interface HTMLDListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML definition list elements, extending HTMLElement."
          },
          {
            "name": "HTMLElement",
            "type": "interface HTMLElement extends Element {}",
            "properties": [],
            "extends": [
              "Element",
              "ElementCSSInlineStyle",
              "ElementContentEditable",
              "GlobalEventHandlers",
              "HTMLOrSVGElement",
              "Element",
              "Element"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Base interface for HTML elements, extending Element."
          },
          {
            "name": "HTMLEmbedElement",
            "type": "interface HTMLEmbedElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML embed elements, extending HTMLElement."
          },
          {
            "name": "HTMLFieldSetElement",
            "type": "interface HTMLFieldSetElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML fieldset elements, extending HTMLElement."
          },
          {
            "name": "HTMLFormElement",
            "type": "interface HTMLFormElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML form elements, extending HTMLElement."
          },
          {
            "name": "HTMLHeadElement",
            "type": "interface HTMLHeadElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML head elements, extending HTMLElement."
          },
          {
            "name": "HTMLHeadingElement",
            "type": "interface HTMLHeadingElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML heading elements, extending HTMLElement."
          },
          {
            "name": "HTMLHRElement",
            "type": "interface HTMLHRElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML horizontal rule elements, extending HTMLElement."
          },
          {
            "name": "HTMLHtmlElement",
            "type": "interface HTMLHtmlElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML root elements, extending HTMLElement."
          },
          {
            "name": "HTMLIFrameElement",
            "type": "interface HTMLIFrameElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML iframe elements, extending HTMLElement."
          },
          {
            "name": "HTMLImageElement",
            "type": "interface HTMLImageElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML image elements, extending HTMLElement."
          },
          {
            "name": "HTMLInputElement",
            "type": "interface HTMLInputElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "PopoverInvokerElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML input elements, extending HTMLElement."
          },
          {
            "name": "HTMLLabelElement",
            "type": "interface HTMLLabelElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML label elements, extending HTMLElement."
          },
          {
            "name": "HTMLLegendElement",
            "type": "interface HTMLLegendElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML legend elements, extending HTMLElement."
          },
          {
            "name": "HTMLLIElement",
            "type": "interface HTMLLIElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML list item elements, extending HTMLElement."
          },
          {
            "name": "HTMLLinkElement",
            "type": "interface HTMLLinkElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "LinkStyle",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML link elements, extending HTMLElement."
          },
          {
            "name": "HTMLMapElement",
            "type": "interface HTMLMapElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML map elements, extending HTMLElement."
          },
          {
            "name": "HTMLMetaElement",
            "type": "interface HTMLMetaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML meta elements, extending HTMLElement."
          },
          {
            "name": "HTMLMeterElement",
            "type": "interface HTMLMeterElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML meter elements, extending HTMLElement."
          },
          {
            "name": "HTMLModElement",
            "type": "interface HTMLModElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML modification elements, extending HTMLElement."
          },
          {
            "name": "HTMLObjectElement",
            "type": "interface HTMLObjectElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML object elements, extending HTMLElement."
          },
          {
            "name": "HTMLOListElement",
            "type": "interface HTMLOListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML ordered list elements, extending HTMLElement."
          },
          {
            "name": "HTMLOptGroupElement",
            "type": "interface HTMLOptGroupElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for HTML option group elements, extending HTMLElement."
          },
          {
            "name": "HTMLOptionElement",
            "type": "interface HTMLOptionElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <option> element extending HTMLElement for option selections."
          },
          {
            "name": "HTMLOutputElement",
            "type": "interface HTMLOutputElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <output> element extending HTMLElement for form outputs."
          },
          {
            "name": "HTMLParagraphElement",
            "type": "interface HTMLParagraphElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <p> element extending HTMLElement for paragraphs."
          },
          {
            "name": "HTMLParamElement",
            "type": "interface HTMLParamElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <param> element extending HTMLElement for object parameters."
          },
          {
            "name": "HTMLPreElement",
            "type": "interface HTMLPreElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <pre> element extending HTMLElement for preformatted text."
          },
          {
            "name": "HTMLProgressElement",
            "type": "interface HTMLProgressElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <progress> element extending HTMLElement for progress bars."
          },
          {
            "name": "HTMLQuoteElement",
            "type": "interface HTMLQuoteElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <q> or <blockquote> element extending HTMLElement for quotes."
          },
          {
            "name": "HTMLScriptElement",
            "type": "interface HTMLScriptElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <script> element extending HTMLElement for scripts."
          },
          {
            "name": "HTMLSelectElement",
            "type": "interface HTMLSelectElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <select> element extending HTMLElement for dropdowns."
          },
          {
            "name": "HTMLSlotElement",
            "type": "interface HTMLSlotElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <slot> element extending HTMLElement for shadow DOM slots."
          },
          {
            "name": "HTMLSourceElement",
            "type": "interface HTMLSourceElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <source> element extending HTMLElement for media sources."
          },
          {
            "name": "HTMLSpanElement",
            "type": "interface HTMLSpanElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <span> element extending HTMLElement for inline content."
          },
          {
            "name": "HTMLStyleElement",
            "type": "interface HTMLStyleElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "LinkStyle",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <style> element extending HTMLElement and LinkStyle for stylesheets."
          },
          {
            "name": "HTMLTableColElement",
            "type": "interface HTMLTableColElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <col> element extending HTMLElement for table columns."
          },
          {
            "name": "HTMLTableDataCellElement",
            "type": "interface HTMLTableDataCellElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLTableCellElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <td> element extending HTMLTableCellElement for table data cells."
          },
          {
            "name": "HTMLTableElement",
            "type": "interface HTMLTableElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <table> element extending HTMLElement for tables."
          },
          {
            "name": "HTMLTableHeaderCellElement",
            "type": "interface HTMLTableHeaderCellElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLTableCellElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <th> element extending HTMLTableCellElement for table headers."
          },
          {
            "name": "HTMLTableRowElement",
            "type": "interface HTMLTableRowElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <tr> element extending HTMLElement for table rows."
          },
          {
            "name": "HTMLTableSectionElement",
            "type": "interface HTMLTableSectionElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <thead>, <tbody>, or <tfoot> extending HTMLElement for table sections."
          },
          {
            "name": "HTMLTemplateElement",
            "type": "interface HTMLTemplateElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <template> element extending HTMLElement for content templates."
          },
          {
            "name": "HTMLTextAreaElement",
            "type": "interface HTMLTextAreaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <textarea> element extending HTMLElement for text input areas."
          },
          {
            "name": "HTMLTimeElement",
            "type": "interface HTMLTimeElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <time> element extending HTMLElement for date/time values."
          },
          {
            "name": "HTMLTitleElement",
            "type": "interface HTMLTitleElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <title> element extending HTMLElement for document titles."
          },
          {
            "name": "HTMLTrackElement",
            "type": "interface HTMLTrackElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <track> element extending HTMLElement for media tracks."
          },
          {
            "name": "HTMLUListElement",
            "type": "interface HTMLUListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <ul> element extending HTMLElement for unordered lists."
          },
          {
            "name": "HTMLVideoElement",
            "type": "interface HTMLVideoElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLMediaElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents HTML <video> element extending HTMLMediaElement for video playback."
          },
          {
            "name": "HTMLWebViewElement",
            "type": "interface HTMLWebViewElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents web view element extending HTMLElement for embedded web content."
          },
          {
            "name": "KeyboardEvent",
            "type": "interface KeyboardEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents keyboard events extending UIEvent for key presses."
          },
          {
            "name": "MouseEvent",
            "type": "interface MouseEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents mouse events extending UIEvent for mouse interactions."
          },
          {
            "name": "PointerEvent",
            "type": "interface PointerEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents pointer events extending MouseEvent for input devices."
          },
          {
            "name": "StyleMedia",
            "type": "interface StyleMedia {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Provides information about the style sheet media types."
          },
          {
            "name": "SVGCircleElement",
            "type": "interface SVGCircleElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <circle> element extending SVGGeometryElement for circles."
          },
          {
            "name": "SVGClipPathElement",
            "type": "interface SVGClipPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <clipPath> element extending SVGElement for clipping paths."
          },
          {
            "name": "SVGDefsElement",
            "type": "interface SVGDefsElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <defs> element extending SVGGraphicsElement for definitions."
          },
          {
            "name": "SVGDescElement",
            "type": "interface SVGDescElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <desc> element extending SVGElement for descriptions."
          },
          {
            "name": "SVGElement",
            "type": "interface SVGElement extends Element {}",
            "properties": [],
            "extends": [
              "Element",
              "ElementCSSInlineStyle",
              "GlobalEventHandlers",
              "HTMLOrSVGElement",
              "Element",
              "Element"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Base interface for SVG elements extending Element and event handlers."
          },
          {
            "name": "SVGEllipseElement",
            "type": "interface SVGEllipseElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <ellipse> element extending SVGGeometryElement for ellipses."
          },
          {
            "name": "SVGFEBlendElement",
            "type": "interface SVGFEBlendElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feBlend> element extending SVGFilterPrimitiveStandardAttributes for blending."
          },
          {
            "name": "SVGFEColorMatrixElement",
            "type": "interface SVGFEColorMatrixElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feColorMatrix> element extending SVGFilterPrimitiveStandardAttributes for color matrix."
          },
          {
            "name": "SVGFEComponentTransferElement",
            "type": "interface SVGFEComponentTransferElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feComponentTransfer> element extending SVGFilterPrimitiveStandardAttributes for transfers."
          },
          {
            "name": "SVGFECompositeElement",
            "type": "interface SVGFECompositeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feComposite> element extending SVGFilterPrimitiveStandardAttributes for compositing."
          },
          {
            "name": "SVGFEConvolveMatrixElement",
            "type": "interface SVGFEConvolveMatrixElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feConvolveMatrix> element extending SVGFilterPrimitiveStandardAttributes for convolution."
          },
          {
            "name": "SVGFEDiffuseLightingElement",
            "type": "interface SVGFEDiffuseLightingElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feDiffuseLighting> element extending SVGFilterPrimitiveStandardAttributes for lighting."
          },
          {
            "name": "SVGFEDisplacementMapElement",
            "type": "interface SVGFEDisplacementMapElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feDisplacementMap> element extending SVGFilterPrimitiveStandardAttributes for displacement."
          },
          {
            "name": "SVGFEDistantLightElement",
            "type": "interface SVGFEDistantLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feDistantLight> element extending SVGElement for distant light sources."
          },
          {
            "name": "SVGFEDropShadowElement",
            "type": "interface SVGFEDropShadowElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feDropShadow> element extending SVGFilterPrimitiveStandardAttributes for shadows."
          },
          {
            "name": "SVGFEFloodElement",
            "type": "interface SVGFEFloodElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feFlood> element extending SVGFilterPrimitiveStandardAttributes for flood effects."
          },
          {
            "name": "SVGFEFuncAElement",
            "type": "interface SVGFEFuncAElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feFuncA> element extending SVGComponentTransferFunctionElement for alpha transfer."
          },
          {
            "name": "SVGFEFuncBElement",
            "type": "interface SVGFEFuncBElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feFuncB> element extending SVGComponentTransferFunctionElement for blue transfer."
          },
          {
            "name": "SVGFEFuncGElement",
            "type": "interface SVGFEFuncGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feFuncG> element extending SVGComponentTransferFunctionElement for green transfer."
          },
          {
            "name": "SVGFEFuncRElement",
            "type": "interface SVGFEFuncRElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feFuncR> element extending SVGComponentTransferFunctionElement for red transfer."
          },
          {
            "name": "SVGFEGaussianBlurElement",
            "type": "interface SVGFEGaussianBlurElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feGaussianBlur> element extending SVGFilterPrimitiveStandardAttributes for blurring."
          },
          {
            "name": "SVGFEImageElement",
            "type": "interface SVGFEImageElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feImage> element extending SVGFilterPrimitiveStandardAttributes for image filters."
          },
          {
            "name": "SVGFEMergeElement",
            "type": "interface SVGFEMergeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feMerge> element extending SVGFilterPrimitiveStandardAttributes for merging."
          },
          {
            "name": "SVGFEMergeNodeElement",
            "type": "interface SVGFEMergeNodeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feMergeNode> element extending SVGElement for merge nodes."
          },
          {
            "name": "SVGFEMorphologyElement",
            "type": "interface SVGFEMorphologyElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feMorphology> element extending SVGFilterPrimitiveStandardAttributes for morphology."
          },
          {
            "name": "SVGFEOffsetElement",
            "type": "interface SVGFEOffsetElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feOffset> element extending SVGFilterPrimitiveStandardAttributes for offsets."
          },
          {
            "name": "SVGFEPointLightElement",
            "type": "interface SVGFEPointLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <fePointLight> element extending SVGElement for point lights."
          },
          {
            "name": "SVGFESpecularLightingElement",
            "type": "interface SVGFESpecularLightingElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feSpecularLighting> element extending SVGFilterPrimitiveStandardAttributes for lighting."
          },
          {
            "name": "SVGFESpotLightElement",
            "type": "interface SVGFESpotLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feSpotLight> element extending SVGElement for spot lights."
          },
          {
            "name": "SVGFETileElement",
            "type": "interface SVGFETileElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feTile> element extending SVGFilterPrimitiveStandardAttributes for tiling."
          },
          {
            "name": "SVGFETurbulenceElement",
            "type": "interface SVGFETurbulenceElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <feTurbulence> element extending SVGFilterPrimitiveStandardAttributes for turbulence."
          },
          {
            "name": "SVGFilterElement",
            "type": "interface SVGFilterElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <filter> element extending SVGURIReference for filter effects."
          },
          {
            "name": "SVGForeignObjectElement",
            "type": "interface SVGForeignObjectElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <foreignObject> element extending SVGGraphicsElement for foreign content."
          },
          {
            "name": "SVGGElement",
            "type": "interface SVGGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <g> element extending SVGGraphicsElement for groups."
          },
          {
            "name": "SVGImageElement",
            "type": "interface SVGImageElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <image> element extending SVGGraphicsElement for images."
          },
          {
            "name": "SVGLinearGradientElement",
            "type": "interface SVGLinearGradientElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGradientElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <linearGradient> element extending SVGGradientElement for gradients."
          },
          {
            "name": "SVGLineElement",
            "type": "interface SVGLineElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents SVG <line> element extending SVGGeometryElement for lines."
          },
          {
            "name": "SVGMarkerElement",
            "type": "interface SVGMarkerElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for marker elements, extending SVGElement and SVGFitToViewBox.",
            "isExported": false
          },
          {
            "name": "SVGMaskElement",
            "type": "interface SVGMaskElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for mask elements, extending SVGElement.",
            "isExported": false
          },
          {
            "name": "SVGMetadataElement",
            "type": "interface SVGMetadataElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for metadata elements, extending SVGElement.",
            "isExported": false
          },
          {
            "name": "SVGPathElement",
            "type": "interface SVGPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for path elements, extending SVGGeometryElement.",
            "isExported": false
          },
          {
            "name": "SVGPatternElement",
            "type": "interface SVGPatternElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for pattern elements, extending SVGElement and SVGFitToViewBox.",
            "isExported": false
          },
          {
            "name": "SVGPolygonElement",
            "type": "interface SVGPolygonElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGAnimatedPoints",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for polygon elements, extending SVGGeometryElement and SVGAnimatedPoints.",
            "isExported": false
          },
          {
            "name": "SVGPolylineElement",
            "type": "interface SVGPolylineElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGAnimatedPoints",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for polyline elements, extending SVGGeometryElement and SVGAnimatedPoints.",
            "isExported": false
          },
          {
            "name": "SVGRadialGradientElement",
            "type": "interface SVGRadialGradientElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGradientElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for radial gradient elements, extending SVGGradientElement.",
            "isExported": false
          },
          {
            "name": "SVGRectElement",
            "type": "interface SVGRectElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for rectangle elements, extending SVGGeometryElement.",
            "isExported": false
          },
          {
            "name": "SVGSetElement",
            "type": "interface SVGSetElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGAnimationElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for set animation elements, extending SVGAnimationElement.",
            "isExported": false
          },
          {
            "name": "SVGStopElement",
            "type": "interface SVGStopElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for gradient stop elements, extending SVGElement.",
            "isExported": false
          },
          {
            "name": "SVGSVGElement",
            "type": "interface SVGSVGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGFitToViewBox",
              "WindowEventHandlers",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for SVG root elements, extending SVGGraphicsElement and WindowEventHandlers.",
            "isExported": false
          },
          {
            "name": "SVGSwitchElement",
            "type": "interface SVGSwitchElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for switch elements, extending SVGGraphicsElement.",
            "isExported": false
          },
          {
            "name": "SVGSymbolElement",
            "type": "interface SVGSymbolElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for symbol elements, extending SVGElement and SVGFitToViewBox.",
            "isExported": false
          },
          {
            "name": "SVGTextElement",
            "type": "interface SVGTextElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextPositioningElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for text elements, extending SVGTextPositioningElement.",
            "isExported": false
          },
          {
            "name": "SVGTextPathElement",
            "type": "interface SVGTextPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextContentElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for text path elements, extending SVGTextContentElement and SVGURIReference.",
            "isExported": false
          },
          {
            "name": "SVGTSpanElement",
            "type": "interface SVGTSpanElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextPositioningElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for tspan elements, extending SVGTextPositioningElement.",
            "isExported": false
          },
          {
            "name": "SVGUseElement",
            "type": "interface SVGUseElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for use elements, extending SVGGraphicsElement and SVGURIReference.",
            "isExported": false
          },
          {
            "name": "SVGViewElement",
            "type": "interface SVGViewElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for view elements, extending SVGElement and SVGFitToViewBox.",
            "isExported": false
          },
          {
            "name": "Text",
            "type": "interface Text {}",
            "properties": [],
            "extends": [
              "CharacterData",
              "Slottable"
            ],
            "jsdoc": null,
            "xaiDescription": "DOM interface for text nodes, extending CharacterData and Slottable.",
            "isExported": false
          },
          {
            "name": "ToggleEvent",
            "type": "interface ToggleEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for toggle actions, extending Event.",
            "isExported": false
          },
          {
            "name": "TouchEvent",
            "type": "interface TouchEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for touch inputs, extending UIEvent.",
            "isExported": false
          },
          {
            "name": "TouchList",
            "type": "interface TouchList {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for lists of touch points.",
            "isExported": false
          },
          {
            "name": "TransitionEvent",
            "type": "interface TransitionEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for CSS transitions, extending Event.",
            "isExported": false
          },
          {
            "name": "TrustedHTML",
            "type": "interface TrustedHTML {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for trusted HTML strings.",
            "isExported": false
          },
          {
            "name": "UIEvent",
            "type": "interface UIEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for user interface events, extending Event.",
            "isExported": false
          },
          {
            "name": "WebGL2RenderingContext",
            "type": "interface WebGL2RenderingContext {}",
            "properties": [],
            "extends": [
              "WebGL2RenderingContextBase",
              "WebGL2RenderingContextOverloads",
              "WebGLRenderingContextBase"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for WebGL 2 rendering context, extending WebGL base contexts.",
            "isExported": false
          },
          {
            "name": "WebGLRenderingContext",
            "type": "interface WebGLRenderingContext {}",
            "properties": [],
            "extends": [
              "WebGLRenderingContextBase",
              "WebGLRenderingContextOverloads"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for WebGL rendering context, extending base and overloads.",
            "isExported": false
          },
          {
            "name": "WheelEvent",
            "type": "interface WheelEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for wheel actions, extending MouseEvent.",
            "isExported": false
          },
          {
            "name": "Destructor",
            "type": "() => void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": {
              "description": "The function returned from an effect passed to {@link React.useEffect useEffect},\nwhich can be used to clean up the effect when the component unmounts.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useEffect React Docs}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "GlobalJSXElement",
            "type": "interface GlobalJSXElement extends JSX.Element {}",
            "properties": [],
            "extends": [
              "JSX.Element"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX.Element for React components.",
            "isExported": false
          },
          {
            "name": "GlobalJSXElementAttributesProperty",
            "type": "interface GlobalJSXElementAttributesProperty extends JSX.ElementAttributesProperty {}",
            "properties": [],
            "extends": [
              "JSX.ElementAttributesProperty"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX element attributes property.",
            "isExported": false
          },
          {
            "name": "GlobalJSXElementChildrenAttribute",
            "type": "interface GlobalJSXElementChildrenAttribute extends JSX.ElementChildrenAttribute {}",
            "properties": [],
            "extends": [
              "JSX.ElementChildrenAttribute"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX element children attribute.",
            "isExported": false
          },
          {
            "name": "GlobalJSXElementClass",
            "type": "interface GlobalJSXElementClass extends JSX.ElementClass {}",
            "properties": [],
            "extends": [
              "JSX.ElementClass"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX.ElementClass for components.",
            "isExported": false
          },
          {
            "name": "GlobalJSXIntrinsicAttributes",
            "type": "interface GlobalJSXIntrinsicAttributes extends JSX.IntrinsicAttributes {}",
            "properties": [],
            "extends": [
              "JSX.IntrinsicAttributes"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX intrinsic attributes.",
            "isExported": false
          },
          {
            "name": "GlobalJSXIntrinsicClassAttributes",
            "type": "interface GlobalJSXIntrinsicClassAttributes<T> extends JSX.IntrinsicClassAttributes<T> {}",
            "properties": [],
            "extends": [
              "JSX.IntrinsicClassAttributes<T>"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX intrinsic class attributes for type T.",
            "isExported": false
          },
          {
            "name": "GlobalJSXIntrinsicElements",
            "type": "interface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}",
            "properties": [],
            "extends": [
              "JSX.IntrinsicElements"
            ],
            "jsdoc": null,
            "xaiDescription": "Global interface extending JSX intrinsic elements.",
            "isExported": false
          },
          {
            "name": "GlobalJSXLibraryManagedAttributes",
            "type": "JSX.LibraryManagedAttributes<C, P>",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for managed attributes in JSX library.",
            "isExported": false
          },
          {
            "name": "ReactManagedAttributes",
            "type": "C extends { propTypes: infer T; defaultProps: infer D }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T } ? MergePropTypes<P, PropTypes.InferProps<T>>\n    : C extends { defaultProps: infer D } ? Defaultize<P, D>\n    : P",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for React managed attributes with prop types and defaults.",
            "isExported": false
          },
          {
            "name": "Booleanish",
            "type": "boolean | \"true\" | \"false\"",
            "properties": [
              {
                "name": "valueOf",
                "type": "(() => boolean) | (() => string)",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "Used to represent DOM API's where users can either pass\ntrue or false as a boolean or as its equivalent strings.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "CrossOrigin",
            "type": "\"anonymous\" | \"use-credentials\" | \"\" | undefined",
            "properties": [
              {
                "name": "toString",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "charAt",
                "type": "(pos: number) => string",
                "optional": false
              },
              {
                "name": "charCodeAt",
                "type": "(index: number) => number",
                "optional": false
              },
              {
                "name": "concat",
                "type": "(...strings: string[]) => string",
                "optional": false
              },
              {
                "name": "indexOf",
                "type": "(searchString: string, position?: number) => number",
                "optional": false
              },
              {
                "name": "lastIndexOf",
                "type": "(searchString: string, position?: number) => number",
                "optional": false
              },
              {
                "name": "localeCompare",
                "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number; (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number; }",
                "optional": false
              },
              {
                "name": "match",
                "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
                "optional": false
              },
              {
                "name": "replace",
                "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string; }",
                "optional": false
              },
              {
                "name": "search",
                "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
                "optional": false
              },
              {
                "name": "slice",
                "type": "(start?: number, end?: number) => string",
                "optional": false
              },
              {
                "name": "split",
                "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
                "optional": false
              },
              {
                "name": "substring",
                "type": "(start: number, end?: number) => string",
                "optional": false
              },
              {
                "name": "toLowerCase",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "toLocaleLowerCase",
                "type": "{ (locales?: string | string[]): string; (locales?: Intl.LocalesArgument): string; }",
                "optional": false
              },
              {
                "name": "toUpperCase",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "toLocaleUpperCase",
                "type": "{ (locales?: string | string[]): string; (locales?: Intl.LocalesArgument): string; }",
                "optional": false
              },
              {
                "name": "trim",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": false
              },
              {
                "name": "substr",
                "type": "(from: number, length?: number) => string",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "codePointAt",
                "type": "(pos: number) => number",
                "optional": false
              },
              {
                "name": "includes",
                "type": "(searchString: string, position?: number) => boolean",
                "optional": false
              },
              {
                "name": "endsWith",
                "type": "(searchString: string, endPosition?: number) => boolean",
                "optional": false
              },
              {
                "name": "normalize",
                "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
                "optional": false
              },
              {
                "name": "repeat",
                "type": "(count: number) => string",
                "optional": false
              },
              {
                "name": "startsWith",
                "type": "(searchString: string, position?: number) => boolean",
                "optional": false
              },
              {
                "name": "anchor",
                "type": "(name: string) => string",
                "optional": false
              },
              {
                "name": "big",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "blink",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "bold",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "fixed",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "fontcolor",
                "type": "(color: string) => string",
                "optional": false
              },
              {
                "name": "fontsize",
                "type": "{ (size: number): string; (size: string): string; }",
                "optional": false
              },
              {
                "name": "italics",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "link",
                "type": "(url: string) => string",
                "optional": false
              },
              {
                "name": "small",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "strike",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "sub",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "sup",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "padStart",
                "type": "(maxLength: number, fillString?: string) => string",
                "optional": false
              },
              {
                "name": "padEnd",
                "type": "(maxLength: number, fillString?: string) => string",
                "optional": false
              },
              {
                "name": "trimEnd",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimStart",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimLeft",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimRight",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "matchAll",
                "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
                "optional": false
              },
              {
                "name": "__@iterator@34294",
                "type": "() => StringIterator<string>",
                "optional": false
              },
              {
                "name": "at",
                "type": "(index: number) => string",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "Defaultize",
            "type": "P extends any ? string extends keyof P ? P\n    :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>\n        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Utility type for defaulting props in React components.",
            "isExported": false
          },
          {
            "name": "ExactlyAnyPropertyKeys",
            "type": "{ [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T]",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | ((radix?: number) => string) | (() => string)",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => string) | (() => number) | (() => symbol)",
                "optional": false
              },
              {
                "name": "toLocaleString",
                "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; }",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Type for keys where value is exactly any.",
            "isExported": false
          },
          {
            "name": "InexactPartial",
            "type": "{ [K in keyof T]?: T[K] | undefined }",
            "properties": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Type for partial object of T with optional and undefined properties."
          },
          {
            "name": "IsExactlyAny",
            "type": "boolean extends (T extends never ? true : false) ? true : false",
            "properties": [
              {
                "name": "valueOf",
                "type": "() => boolean",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Type checking if T is exactly any, returning boolean."
          },
          {
            "name": "MergePropTypes",
            "type": "P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n        : string extends keyof P ? P\n            // Prefer declared types which are not exactly any\n        :\n            & Pick<P, NotExactlyAnyPropertyKeys<P>>\n            // For props which are exactly any, use the type inferred from propTypes if present\n            & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n            // Keep leftover props not specified in propTypes\n            & Pick<P, Exclude<keyof P, keyof T>>\n        : never",
            "properties": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Utility type to merge prop types P and T, prioritizing declared types."
          },
          {
            "name": "NativeAnimationEvent",
            "type": "AnimationEvent",
            "properties": [
              {
                "name": "animationName",
                "type": "string",
                "optional": false
              },
              {
                "name": "elapsedTime",
                "type": "number",
                "optional": false
              },
              {
                "name": "pseudoElement",
                "type": "string",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for native animation events, extending AnimationEvent type."
          },
          {
            "name": "NativeClipboardEvent",
            "type": "ClipboardEvent",
            "properties": [
              {
                "name": "clipboardData",
                "type": "DataTransfer",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for native clipboard events, extending ClipboardEvent type."
          },
          {
            "name": "NativeCompositionEvent",
            "type": "CompositionEvent",
            "properties": [
              {
                "name": "data",
                "type": "string",
                "optional": false
              },
              {
                "name": "initCompositionEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, dataArg?: string) => void",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for native composition events, extending CompositionEvent type."
          },
          {
            "name": "NativeDragEvent",
            "type": "DragEvent",
            "properties": [
              {
                "name": "dataTransfer",
                "type": "DataTransfer",
                "optional": false
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for native drag events, extending DragEvent type."
          },
          {
            "name": "NativeFocusEvent",
            "type": "FocusEvent",
            "properties": [
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for native focus events, extending FocusEvent type."
          },
          {
            "name": "NativeKeyboardEvent",
            "type": "KeyboardEvent",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "charCode",
                "type": "number",
                "optional": false
              },
              {
                "name": "code",
                "type": "string",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "isComposing",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "key",
                "type": "string",
                "optional": false
              },
              {
                "name": "keyCode",
                "type": "number",
                "optional": false
              },
              {
                "name": "location",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "repeat",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active. Uses string keyArg."
              },
              {
                "name": "initKeyboardEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, keyArg?: string, locationArg?: number, ctrlKey?: boolean, altKey?: boolean, shiftKey?: boolean, metaKey?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a KeyboardEvent with type and optional parameters."
              },
              {
                "name": "DOM_KEY_LOCATION_STANDARD",
                "type": "0",
                "optional": false
              },
              {
                "name": "DOM_KEY_LOCATION_LEFT",
                "type": "1",
                "optional": false
              },
              {
                "name": "DOM_KEY_LOCATION_RIGHT",
                "type": "2",
                "optional": false
              },
              {
                "name": "DOM_KEY_LOCATION_NUMPAD",
                "type": "3",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes a UIEvent with type and optional event details."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in the propagation path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a basic Event with type and bubbling options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up the DOM tree."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native DOM interface for keyboard events."
          },
          {
            "name": "NativeMouseEvent",
            "type": "MouseEvent",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active. Uses string keyArg."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes a MouseEvent with coordinates and modifiers."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes a UIEvent with type and optional event details."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in the propagation path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a basic Event with type and bubbling options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up the DOM tree."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native DOM interface for mouse events."
          },
          {
            "name": "NativePointerEvent",
            "type": "PointerEvent",
            "properties": [
              {
                "name": "altitudeAngle",
                "type": "number",
                "optional": false
              },
              {
                "name": "azimuthAngle",
                "type": "number",
                "optional": false
              },
              {
                "name": "height",
                "type": "number",
                "optional": false
              },
              {
                "name": "isPrimary",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "pointerId",
                "type": "number",
                "optional": false
              },
              {
                "name": "pointerType",
                "type": "string",
                "optional": false
              },
              {
                "name": "pressure",
                "type": "number",
                "optional": false
              },
              {
                "name": "tangentialPressure",
                "type": "number",
                "optional": false
              },
              {
                "name": "tiltX",
                "type": "number",
                "optional": false
              },
              {
                "name": "tiltY",
                "type": "number",
                "optional": false
              },
              {
                "name": "twist",
                "type": "number",
                "optional": false
              },
              {
                "name": "width",
                "type": "number",
                "optional": false
              },
              {
                "name": "getCoalescedEvents",
                "type": "() => PointerEvent[]",
                "optional": false,
                "xaiDescription": "Returns coalesced pointer events array."
              },
              {
                "name": "getPredictedEvents",
                "type": "() => PointerEvent[]",
                "optional": false,
                "xaiDescription": "Returns predicted pointer events array."
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active. Uses string keyArg."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes a MouseEvent with coordinates and modifiers."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes a UIEvent with type and optional event details."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in the propagation path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a basic Event with type and bubbling options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up the DOM tree."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native DOM interface for pointer events."
          },
          {
            "name": "NativeTouchEvent",
            "type": "TouchEvent",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "changedTouches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "targetTouches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "touches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes a UIEvent with type and optional event details."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in the propagation path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a basic Event with type and bubbling options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up the DOM tree."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native DOM interface for touch events."
          },
          {
            "name": "NativeTransitionEvent",
            "type": "TransitionEvent",
            "properties": [
              {
                "name": "elapsedTime",
                "type": "number",
                "optional": false
              },
              {
                "name": "propertyName",
                "type": "string",
                "optional": false
              },
              {
                "name": "pseudoElement",
                "type": "string",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in the propagation path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes a basic Event with type and bubbling options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up the DOM tree."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native DOM interface for CSS transition events."
          },
          {
            "name": "NativePointerEvent",
            "type": "PointerEvent",
            "properties": [
              {
                "name": "altitudeAngle",
                "type": "number",
                "optional": false
              },
              {
                "name": "azimuthAngle",
                "type": "number",
                "optional": false
              },
              {
                "name": "height",
                "type": "number",
                "optional": false
              },
              {
                "name": "isPrimary",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "pointerId",
                "type": "number",
                "optional": false
              },
              {
                "name": "pointerType",
                "type": "string",
                "optional": false
              },
              {
                "name": "pressure",
                "type": "number",
                "optional": false
              },
              {
                "name": "tangentialPressure",
                "type": "number",
                "optional": false
              },
              {
                "name": "tiltX",
                "type": "number",
                "optional": false
              },
              {
                "name": "tiltY",
                "type": "number",
                "optional": false
              },
              {
                "name": "twist",
                "type": "number",
                "optional": false
              },
              {
                "name": "width",
                "type": "number",
                "optional": false
              },
              {
                "name": "getCoalescedEvents",
                "type": "() => PointerEvent[]",
                "optional": false,
                "xaiDescription": "Returns array of coalesced pointer events. Uses PointerEvent[]."
              },
              {
                "name": "getPredictedEvents",
                "type": "() => PointerEvent[]",
                "optional": false,
                "xaiDescription": "Returns array of predicted pointer events. Uses PointerEvent[]."
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if modifier key is active. Takes string keyArg."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes mouse event with parameters. Uses Window and EventTarget."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with optional parameters. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event path elements. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Represents native pointer event for input devices like mouse or touch.",
            "isExported": false
          },
          {
            "name": "NativeToggleEvent",
            "type": "ToggleEvent",
            "properties": [
              {
                "name": "newState",
                "type": "string",
                "optional": false
              },
              {
                "name": "oldState",
                "type": "string",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event path elements. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Represents toggle event for state changes like checkboxes.",
            "isExported": false
          },
          {
            "name": "NativeTouchEvent",
            "type": "TouchEvent",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "changedTouches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "targetTouches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "touches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with optional parameters. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event path elements. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Represents native touch event for multi-touch interactions.",
            "isExported": false
          },
          {
            "name": "NativeTransitionEvent",
            "type": "TransitionEvent",
            "properties": [
              {
                "name": "elapsedTime",
                "type": "number",
                "optional": false
              },
              {
                "name": "propertyName",
                "type": "string",
                "optional": false
              },
              {
                "name": "pseudoElement",
                "type": "string",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event path elements. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Represents CSS transition end event.",
            "isExported": false
          },
          {
            "name": "NativeUIEvent",
            "type": "UIEvent",
            "properties": [
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with optional parameters. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event path elements. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handlers."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Represents user interface events like key presses.",
            "isExported": false
          },
          {
            "name": "NativeUIEvent",
            "type": "UIEvent",
            "properties": [
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with type, bubbles, cancelable, view, and detail parameters. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in the propagation path. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes event with type, bubbles, and cancelable options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further propagation of the event immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops the event from propagating further."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a native UI event extending UIEvent."
          },
          {
            "name": "NativeWheelEvent",
            "type": "WheelEvent",
            "properties": [
              {
                "name": "deltaMode",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaX",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaY",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaZ",
                "type": "number",
                "optional": false
              },
              {
                "name": "DOM_DELTA_PIXEL",
                "type": "0",
                "optional": false
              },
              {
                "name": "DOM_DELTA_LINE",
                "type": "1",
                "optional": false
              },
              {
                "name": "DOM_DELTA_PAGE",
                "type": "2",
                "optional": false
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes a mouse event with detailed parameters. Uses Window and EventTarget."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with type, bubbles, cancelable, view, and detail."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in propagation path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes event with type, bubbles, and cancelable."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Halts immediate event propagation."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a native wheel event extending WheelEvent."
          },
          {
            "name": "NotExactlyAnyPropertyKeys",
            "type": "Exclude<keyof T, ExactlyAnyPropertyKeys<T>>",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | ((radix?: number) => string) | (() => string)",
                "optional": false,
                "xaiDescription": "Returns string representation of the object."
              },
              {
                "name": "valueOf",
                "type": "(() => string) | (() => number) | (() => symbol)",
                "optional": false,
                "xaiDescription": "Returns primitive value of the object."
              },
              {
                "name": "toLocaleString",
                "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; }",
                "optional": false,
                "xaiDescription": "Returns locale-specific string representation."
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Excludes keys that are exactly any from T."
          },
          {
            "name": "VoidOrUndefinedOnly",
            "type": "void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "JSXSource",
            "type": "export interface JSXSource {\n    /**\n     * The source file where the element originates from.\n     */\n    fileName?: string | undefined;\n\n    /**\n     * The line number where the element was created.\n     */\n    lineNumber?: number | undefined;\n\n    /**\n     * The column number where the element was created.\n     */\n    columnNumber?: number | undefined;\n}",
            "properties": [
              {
                "name": "fileName",
                "type": "string",
                "optional": true
              },
              {
                "name": "lineNumber",
                "type": "number",
                "optional": true
              },
              {
                "name": "columnNumber",
                "type": "number",
                "optional": true
              }
            ],
            "extends": [],
            "jsdoc": null,
            "isExported": true,
            "xaiDescription": "Provides source information for JSX elements."
          },
          {
            "name": "NativeWheelEvent",
            "type": "WheelEvent",
            "properties": [
              {
                "name": "deltaMode",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaX",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaY",
                "type": "number",
                "optional": false
              },
              {
                "name": "deltaZ",
                "type": "number",
                "optional": false
              },
              {
                "name": "DOM_DELTA_PIXEL",
                "type": "0",
                "optional": false
              },
              {
                "name": "DOM_DELTA_LINE",
                "type": "1",
                "optional": false
              },
              {
                "name": "DOM_DELTA_PAGE",
                "type": "2",
                "optional": false
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if specified modifier key is active."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes mouse event with parameters. Uses Window and EventTarget."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with optional parameters. Uses Window."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of EventTarget objects in event path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling or capturing."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for wheel events, handling mouse wheel interactions.",
            "isExported": false
          },
          {
            "name": "VoidOrUndefinedOnly",
            "type": "void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for void or undefined values only.",
            "isExported": false
          },
          {
            "name": "VoidOrUndefinedOnly",
            "type": "void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for void or undefined values only.",
            "isExported": false
          },
          {
            "name": "VoidOrUndefinedOnly",
            "type": "void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for void or undefined values only.",
            "isExported": false
          },
          {
            "name": "AnimationEvent",
            "type": "interface AnimationEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for CSS animations.",
            "isExported": false
          },
          {
            "name": "ClipboardEvent",
            "type": "interface ClipboardEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event for clipboard operations like copy and paste.",
            "isExported": false
          },
          {
            "name": "CompositionEvent",
            "type": "interface CompositionEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event for text composition, like input methods.",
            "isExported": false
          },
          {
            "name": "DataTransfer",
            "type": "interface DataTransfer {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Object for handling data during drag and drop.",
            "isExported": false
          },
          {
            "name": "Document",
            "type": "interface Document {}",
            "properties": [],
            "extends": [
              "Node",
              "DocumentOrShadowRoot",
              "FontFaceSource",
              "GlobalEventHandlers",
              "NonElementParentNode",
              "ParentNode",
              "XPathEvaluatorBase"
            ],
            "jsdoc": null,
            "xaiDescription": "Represents the HTML or XML document.",
            "isExported": false
          },
          {
            "name": "DocumentFragment",
            "type": "interface DocumentFragment {}",
            "properties": [],
            "extends": [
              "Node",
              "NonElementParentNode",
              "ParentNode"
            ],
            "jsdoc": null,
            "xaiDescription": "Lightweight document object for DOM fragments.",
            "isExported": false
          },
          {
            "name": "DragEvent",
            "type": "interface DragEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event for drag and drop operations.",
            "isExported": false
          },
          {
            "name": "Element",
            "type": "interface Element {}",
            "properties": [],
            "extends": [
              "Node",
              "ARIAMixin",
              "Animatable",
              "ChildNode",
              "NonDocumentTypeChildNode",
              "ParentNode",
              "Slottable"
            ],
            "jsdoc": null,
            "xaiDescription": "Base interface for DOM elements.",
            "isExported": false
          },
          {
            "name": "Event",
            "type": "interface Event {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "xaiDescription": "Fundamental interface for DOM events.",
            "isExported": false
          },
          {
            "name": "EventTarget",
            "type": "interface EventTarget {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "xaiDescription": "Object that can receive events.",
            "isExported": false
          },
          {
            "name": "FocusEvent",
            "type": "interface FocusEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event for focus changes on elements.",
            "isExported": false
          },
          {
            "name": "FormData",
            "type": "interface FormData {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "xaiDescription": "Represents form data for HTTP requests.",
            "isExported": false
          },
          {
            "name": "HTMLAnchorElement",
            "type": "interface HTMLAnchorElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLHyperlinkElementUtils",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for hyperlinks.",
            "isExported": false
          },
          {
            "name": "HTMLAreaElement",
            "type": "interface HTMLAreaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLHyperlinkElementUtils",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for clickable areas in images.",
            "isExported": false
          },
          {
            "name": "HTMLAudioElement",
            "type": "interface HTMLAudioElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLMediaElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for embedding audio.",
            "isExported": false
          },
          {
            "name": "HTMLBaseElement",
            "type": "interface HTMLBaseElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for base URL of page.",
            "isExported": false
          },
          {
            "name": "HTMLBodyElement",
            "type": "interface HTMLBodyElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "WindowEventHandlers",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for the document body.",
            "isExported": false
          },
          {
            "name": "HTMLBRElement",
            "type": "interface HTMLBRElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for line breaks.",
            "isExported": false
          },
          {
            "name": "HTMLButtonElement",
            "type": "interface HTMLButtonElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "PopoverInvokerElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for buttons.",
            "isExported": false
          },
          {
            "name": "HTMLCanvasElement",
            "type": "interface HTMLCanvasElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for drawing graphics via scripting.",
            "isExported": false
          },
          {
            "name": "HTMLDataElement",
            "type": "interface HTMLDataElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for machine-readable data.",
            "isExported": false
          },
          {
            "name": "HTMLDataListElement",
            "type": "interface HTMLDataListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for datalist options.",
            "isExported": false
          },
          {
            "name": "HTMLDetailsElement",
            "type": "interface HTMLDetailsElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for interactive details disclosure.",
            "isExported": false
          },
          {
            "name": "HTMLDialogElement",
            "type": "interface HTMLDialogElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for dialogs and popups.",
            "isExported": false
          },
          {
            "name": "HTMLDivElement",
            "type": "interface HTMLDivElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for generic content division.",
            "isExported": false
          },
          {
            "name": "HTMLDListElement",
            "type": "interface HTMLDListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for definition lists.",
            "isExported": false
          },
          {
            "name": "HTMLElement",
            "type": "interface HTMLElement extends Element {}",
            "properties": [],
            "extends": [
              "Element",
              "ElementCSSInlineStyle",
              "ElementContentEditable",
              "GlobalEventHandlers",
              "HTMLOrSVGElement",
              "Element"
            ],
            "jsdoc": null,
            "xaiDescription": "Base interface for HTML elements.",
            "isExported": false
          },
          {
            "name": "HTMLEmbedElement",
            "type": "interface HTMLEmbedElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for embedding external content.",
            "isExported": false
          },
          {
            "name": "HTMLFieldSetElement",
            "type": "interface HTMLFieldSetElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for grouping form controls.",
            "isExported": false
          },
          {
            "name": "HTMLFormElement",
            "type": "interface HTMLFormElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for HTML forms.",
            "isExported": false
          },
          {
            "name": "HTMLHeadElement",
            "type": "interface HTMLHeadElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for document metadata.",
            "isExported": false
          },
          {
            "name": "HTMLHeadingElement",
            "type": "interface HTMLHeadingElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for headings.",
            "isExported": false
          },
          {
            "name": "HTMLHRElement",
            "type": "interface HTMLHRElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for thematic breaks.",
            "isExported": false
          },
          {
            "name": "HTMLHtmlElement",
            "type": "interface HTMLHtmlElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Root element of an HTML document.",
            "isExported": false
          },
          {
            "name": "HTMLIFrameElement",
            "type": "interface HTMLIFrameElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for embedded browsing contexts.",
            "isExported": false
          },
          {
            "name": "HTMLImageElement",
            "type": "interface HTMLImageElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for images.",
            "isExported": false
          },
          {
            "name": "HTMLInputElement",
            "type": "interface HTMLInputElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "PopoverInvokerElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for input controls.",
            "isExported": false
          },
          {
            "name": "HTMLLabelElement",
            "type": "interface HTMLLabelElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for labels associated with controls.",
            "isExported": false
          },
          {
            "name": "HTMLLegendElement",
            "type": "interface HTMLLegendElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for fieldset legends.",
            "isExported": false
          },
          {
            "name": "HTMLLIElement",
            "type": "interface HTMLLIElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for list items.",
            "isExported": false
          },
          {
            "name": "HTMLLinkElement",
            "type": "interface HTMLLinkElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "LinkStyle",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for linking external resources.",
            "isExported": false
          },
          {
            "name": "HTMLMapElement",
            "type": "interface HTMLMapElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for client-side image maps.",
            "isExported": false
          },
          {
            "name": "HTMLMetaElement",
            "type": "interface HTMLMetaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for metadata.",
            "isExported": false
          },
          {
            "name": "HTMLMeterElement",
            "type": "interface HTMLMeterElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for gauges.",
            "isExported": false
          },
          {
            "name": "HTMLModElement",
            "type": "interface HTMLModElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for document modifications.",
            "isExported": false
          },
          {
            "name": "HTMLObjectElement",
            "type": "interface HTMLObjectElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for embedded objects.",
            "isExported": false
          },
          {
            "name": "HTMLOListElement",
            "type": "interface HTMLOListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for ordered lists.",
            "isExported": false
          },
          {
            "name": "HTMLOptGroupElement",
            "type": "interface HTMLOptGroupElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for grouping options in select.",
            "isExported": false
          },
          {
            "name": "HTMLOptionElement",
            "type": "interface HTMLOptionElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for options in select elements.",
            "isExported": false
          },
          {
            "name": "HTMLOutputElement",
            "type": "interface HTMLOutputElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for form output.",
            "isExported": false
          },
          {
            "name": "HTMLParagraphElement",
            "type": "interface HTMLParagraphElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for paragraphs.",
            "isExported": false
          },
          {
            "name": "HTMLParamElement",
            "type": "interface HTMLParamElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for object parameters.",
            "isExported": false
          },
          {
            "name": "HTMLPreElement",
            "type": "interface HTMLPreElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for preformatted text.",
            "isExported": false
          },
          {
            "name": "HTMLProgressElement",
            "type": "interface HTMLProgressElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for progress bars.",
            "isExported": false
          },
          {
            "name": "HTMLQuoteElement",
            "type": "interface HTMLQuoteElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for quotations.",
            "isExported": false
          },
          {
            "name": "HTMLScriptElement",
            "type": "interface HTMLScriptElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for client-side scripts.",
            "isExported": false
          },
          {
            "name": "HTMLSelectElement",
            "type": "interface HTMLSelectElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Element for selection lists.",
            "isExported": false
          },
          {
            "name": "HTMLSlotElement",
            "type": "interface HTMLSlotElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element for projecting content in shadow DOM slots."
          },
          {
            "name": "HTMLSourceElement",
            "type": "interface HTMLSourceElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Media element for specifying sources in audio/video."
          },
          {
            "name": "HTMLSpanElement",
            "type": "interface HTMLSpanElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Generic inline container for phrasing content."
          },
          {
            "name": "HTMLStyleElement",
            "type": "interface HTMLStyleElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "LinkStyle",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element for embedding CSS stylesheets in documents."
          },
          {
            "name": "HTMLTableColElement",
            "type": "interface HTMLTableColElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element for defining table columns."
          },
          {
            "name": "HTMLTableDataCellElement",
            "type": "interface HTMLTableDataCellElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLTableCellElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Table cell element for data in HTML tables."
          },
          {
            "name": "HTMLTableElement",
            "type": "interface HTMLTableElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Root element for creating HTML tables."
          },
          {
            "name": "HTMLTableHeaderCellElement",
            "type": "interface HTMLTableHeaderCellElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLTableCellElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Table header cell element for labels."
          },
          {
            "name": "HTMLTableRowElement",
            "type": "interface HTMLTableRowElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element representing a row in HTML tables."
          },
          {
            "name": "HTMLTableSectionElement",
            "type": "interface HTMLTableSectionElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element for grouping rows in HTML tables."
          },
          {
            "name": "HTMLTemplateElement",
            "type": "interface HTMLTemplateElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Container for holding client-side content templates."
          },
          {
            "name": "HTMLTextAreaElement",
            "type": "interface HTMLTextAreaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element for multi-line text input fields."
          },
          {
            "name": "HTMLTimeElement",
            "type": "interface HTMLTimeElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element for representing date or time values."
          },
          {
            "name": "HTMLTitleElement",
            "type": "interface HTMLTitleElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Document title element for metadata."
          },
          {
            "name": "HTMLTrackElement",
            "type": "interface HTMLTrackElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element for timed text tracks in media."
          },
          {
            "name": "HTMLUListElement",
            "type": "interface HTMLUListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element for unordered lists in HTML."
          },
          {
            "name": "HTMLVideoElement",
            "type": "interface HTMLVideoElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLMediaElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element for embedding video content. Extends HTMLMediaElement."
          },
          {
            "name": "HTMLWebViewElement",
            "type": "interface HTMLWebViewElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Element for embedding web content in applications."
          },
          {
            "name": "KeyboardEvent",
            "type": "interface KeyboardEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event for keyboard interactions. Extends UIEvent."
          },
          {
            "name": "MouseEvent",
            "type": "interface MouseEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event for mouse actions. Extends UIEvent."
          },
          {
            "name": "PointerEvent",
            "type": "interface PointerEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Event for pointer devices. Extends MouseEvent."
          },
          {
            "name": "StyleMedia",
            "type": "interface StyleMedia {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Interface for querying style media types."
          },
          {
            "name": "SVGCircleElement",
            "type": "interface SVGCircleElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for drawing circles. Extends SVGGeometryElement."
          },
          {
            "name": "SVGClipPathElement",
            "type": "interface SVGClipPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for clipping paths."
          },
          {
            "name": "SVGDefsElement",
            "type": "interface SVGDefsElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for definitions and reusable content."
          },
          {
            "name": "SVGDescElement",
            "type": "interface SVGDescElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for descriptive text."
          },
          {
            "name": "SVGElement",
            "type": "interface SVGElement extends Element {}",
            "properties": [],
            "extends": [
              "Element",
              "ElementCSSInlineStyle",
              "GlobalEventHandlers",
              "HTMLOrSVGElement",
              "Element"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Base interface for SVG elements. Extends Element and others."
          },
          {
            "name": "SVGEllipseElement",
            "type": "interface SVGEllipseElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for drawing ellipses. Extends SVGGeometryElement."
          },
          {
            "name": "SVGFEBlendElement",
            "type": "interface SVGFEBlendElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for blending effects."
          },
          {
            "name": "SVGFEColorMatrixElement",
            "type": "interface SVGFEColorMatrixElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for color matrix transformations."
          },
          {
            "name": "SVGFEComponentTransferElement",
            "type": "interface SVGFEComponentTransferElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for component-wise transfers."
          },
          {
            "name": "SVGFECompositeElement",
            "type": "interface SVGFECompositeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for compositing operations."
          },
          {
            "name": "SVGFEConvolveMatrixElement",
            "type": "interface SVGFEConvolveMatrixElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for convolution matrices."
          },
          {
            "name": "SVGFEDiffuseLightingElement",
            "type": "interface SVGFEDiffuseLightingElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for diffuse lighting effects."
          },
          {
            "name": "SVGFEDisplacementMapElement",
            "type": "interface SVGFEDisplacementMapElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for displacement mapping."
          },
          {
            "name": "SVGFEDistantLightElement",
            "type": "interface SVGFEDistantLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for distant light sources in filters."
          },
          {
            "name": "SVGFEDropShadowElement",
            "type": "interface SVGFEDropShadowElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for drop shadow effects."
          },
          {
            "name": "SVGFEFloodElement",
            "type": "interface SVGFEFloodElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for flood fill operations."
          },
          {
            "name": "SVGFEFuncAElement",
            "type": "interface SVGFEFuncAElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for alpha channel transfer functions."
          },
          {
            "name": "SVGFEFuncBElement",
            "type": "interface SVGFEFuncBElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for blue channel transfer functions."
          },
          {
            "name": "SVGFEFuncGElement",
            "type": "interface SVGFEFuncGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for green channel transfer functions."
          },
          {
            "name": "SVGFEFuncRElement",
            "type": "interface SVGFEFuncRElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for red channel transfer functions."
          },
          {
            "name": "SVGFEGaussianBlurElement",
            "type": "interface SVGFEGaussianBlurElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for Gaussian blur effects."
          },
          {
            "name": "SVGFEImageElement",
            "type": "interface SVGFEImageElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGURIReference",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for image inputs. Uses SVGURIReference."
          },
          {
            "name": "SVGFEMergeElement",
            "type": "interface SVGFEMergeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for merging inputs."
          },
          {
            "name": "SVGFEMergeNodeElement",
            "type": "interface SVGFEMergeNodeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for nodes in merge filters."
          },
          {
            "name": "SVGFEMorphologyElement",
            "type": "interface SVGFEMorphologyElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for morphological operations."
          },
          {
            "name": "SVGFEOffsetElement",
            "type": "interface SVGFEOffsetElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for offsetting content."
          },
          {
            "name": "SVGFEPointLightElement",
            "type": "interface SVGFEPointLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for point light sources."
          },
          {
            "name": "SVGFESpecularLightingElement",
            "type": "interface SVGFESpecularLightingElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for specular lighting."
          },
          {
            "name": "SVGFESpotLightElement",
            "type": "interface SVGFESpotLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for spot light sources."
          },
          {
            "name": "SVGFETileElement",
            "type": "interface SVGFETileElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for tiling effects."
          },
          {
            "name": "SVGFETurbulenceElement",
            "type": "interface SVGFETurbulenceElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG filter element for generating turbulence."
          },
          {
            "name": "SVGFilterElement",
            "type": "interface SVGFilterElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGURIReference",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for defining filters. Uses SVGURIReference."
          },
          {
            "name": "SVGForeignObjectElement",
            "type": "interface SVGForeignObjectElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for embedding foreign objects."
          },
          {
            "name": "SVGGElement",
            "type": "interface SVGGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for grouping graphics."
          },
          {
            "name": "SVGImageElement",
            "type": "interface SVGImageElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGURIReference",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for raster images. Uses SVGURIReference."
          },
          {
            "name": "SVGLinearGradientElement",
            "type": "interface SVGLinearGradientElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGradientElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for linear gradients."
          },
          {
            "name": "SVGLineElement",
            "type": "interface SVGLineElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for straight lines. Extends SVGGeometryElement."
          },
          {
            "name": "SVGMarkerElement",
            "type": "interface SVGMarkerElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for markers on paths."
          },
          {
            "name": "SVGMaskElement",
            "type": "interface SVGMaskElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for masking graphics."
          },
          {
            "name": "SVGMetadataElement",
            "type": "interface SVGMetadataElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for metadata information."
          },
          {
            "name": "SVGPathElement",
            "type": "interface SVGPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for paths. Extends SVGGeometryElement."
          },
          {
            "name": "SVGPatternElement",
            "type": "interface SVGPatternElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGURIReference",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for patterns. Uses SVGFitToViewBox and SVGURIReference."
          },
          {
            "name": "SVGPolygonElement",
            "type": "interface SVGPolygonElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGAnimatedPoints",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for polygons. Uses SVGAnimatedPoints."
          },
          {
            "name": "SVGPolylineElement",
            "type": "interface SVGPolylineElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGAnimatedPoints",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for polylines. Uses SVGAnimatedPoints."
          },
          {
            "name": "SVGRadialGradientElement",
            "type": "interface SVGRadialGradientElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGradientElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for radial gradients."
          },
          {
            "name": "SVGRectElement",
            "type": "interface SVGRectElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for rectangles. Extends SVGGeometryElement."
          },
          {
            "name": "SVGSetElement",
            "type": "interface SVGSetElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGAnimationElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG animation element for setting attributes."
          },
          {
            "name": "SVGStopElement",
            "type": "interface SVGStopElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for gradient stops."
          },
          {
            "name": "SVGSVGElement",
            "type": "interface SVGSVGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGFitToViewBox",
              "WindowEventHandlers",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Root SVG element. Extends SVGGraphicsElement and others."
          },
          {
            "name": "SVGSwitchElement",
            "type": "interface SVGSwitchElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for conditional rendering."
          },
          {
            "name": "SVGSymbolElement",
            "type": "interface SVGSymbolElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for symbols. Uses SVGFitToViewBox."
          },
          {
            "name": "SVGTextElement",
            "type": "interface SVGTextElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextPositioningElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for text elements, extending SVGElement.",
            "isExported": false
          },
          {
            "name": "SVGTextPathElement",
            "type": "interface SVGTextPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextContentElement",
              "SVGURIReference",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for text path elements, extending SVGElement.",
            "isExported": false
          },
          {
            "name": "SVGTSpanElement",
            "type": "interface SVGTSpanElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextPositioningElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for tspan elements, extending SVGElement.",
            "isExported": false
          },
          {
            "name": "SVGUseElement",
            "type": "interface SVGUseElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGURIReference",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for use elements, extending SVGElement.",
            "isExported": false
          },
          {
            "name": "SVGViewElement",
            "type": "interface SVGViewElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for view elements, extending SVGElement.",
            "isExported": false
          },
          {
            "name": "Text",
            "type": "interface Text {}",
            "properties": [],
            "extends": [
              "CharacterData",
              "Slottable"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for text nodes in the DOM.",
            "isExported": false
          },
          {
            "name": "ToggleEvent",
            "type": "interface ToggleEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for toggle actions, extending Event.",
            "isExported": false
          },
          {
            "name": "TouchEvent",
            "type": "interface TouchEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for touch interactions, extending UIEvent.",
            "isExported": false
          },
          {
            "name": "TouchList",
            "type": "interface TouchList {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for a list of touch points.",
            "isExported": false
          },
          {
            "name": "TransitionEvent",
            "type": "interface TransitionEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for CSS transitions, extending Event.",
            "isExported": false
          },
          {
            "name": "TrustedHTML",
            "type": "interface TrustedHTML {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for trusted HTML strings.",
            "isExported": false
          },
          {
            "name": "UIEvent",
            "type": "interface UIEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Base interface for user interface events, extending Event.",
            "isExported": false
          },
          {
            "name": "WebGL2RenderingContext",
            "type": "interface WebGL2RenderingContext {}",
            "properties": [],
            "extends": [
              "WebGL2RenderingContextBase",
              "WebGL2RenderingContextOverloads",
              "WebGLRenderingContextBase"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for WebGL 2.0 rendering context.",
            "isExported": false
          },
          {
            "name": "WebGLRenderingContext",
            "type": "interface WebGLRenderingContext {}",
            "properties": [],
            "extends": [
              "WebGLRenderingContextBase",
              "WebGLRenderingContextOverloads"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for WebGL rendering context.",
            "isExported": false
          },
          {
            "name": "WheelEvent",
            "type": "interface WheelEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for wheel actions, extending MouseEvent.",
            "isExported": false
          },
          {
            "name": "JSXSource",
            "type": "export interface JSXSource {\n    /**\n     * The source file where the element originates from.\n     */\n    fileName?: string | undefined;\n\n    /**\n     * The line number where the element was created.\n     */\n    lineNumber?: number | undefined;\n\n    /**\n     * The column number where the element was created.\n     */\n    columnNumber?: number | undefined;\n}",
            "properties": [
              {
                "name": "fileName",
                "type": "string",
                "optional": true
              },
              {
                "name": "lineNumber",
                "type": "number",
                "optional": true
              },
              {
                "name": "columnNumber",
                "type": "number",
                "optional": true
              }
            ],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for JSX source metadata with optional file, line, and column properties.",
            "isExported": true
          },
          {
            "name": "VoidOrUndefinedOnly",
            "type": "void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for void or undefined values only.",
            "isExported": false
          },
          {
            "name": "VoidOrUndefinedOnly",
            "type": "void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for void or undefined values only.",
            "isExported": false
          },
          {
            "name": "AnimationEvent",
            "type": "interface AnimationEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for animations, extending Event.",
            "isExported": false
          },
          {
            "name": "ClipboardEvent",
            "type": "interface ClipboardEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for clipboard operations, extending Event.",
            "isExported": false
          },
          {
            "name": "CompositionEvent",
            "type": "interface CompositionEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for text composition, extending UIEvent.",
            "isExported": false
          },
          {
            "name": "DataTransfer",
            "type": "interface DataTransfer {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for data transfer operations.",
            "isExported": false
          },
          {
            "name": "Document",
            "type": "interface Document {}",
            "properties": [],
            "extends": [
              "Node",
              "DocumentOrShadowRoot",
              "FontFaceSource",
              "GlobalEventHandlers",
              "NonElementParentNode",
              "ParentNode",
              "XPathEvaluatorBase"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for the root document node.",
            "isExported": false
          },
          {
            "name": "DocumentFragment",
            "type": "interface DocumentFragment {}",
            "properties": [],
            "extends": [
              "Node",
              "NonElementParentNode",
              "ParentNode"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for document fragments.",
            "isExported": false
          },
          {
            "name": "DragEvent",
            "type": "interface DragEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for drag operations, extending MouseEvent.",
            "isExported": false
          },
          {
            "name": "Element",
            "type": "interface Element {}",
            "properties": [],
            "extends": [
              "Node",
              "ARIAMixin",
              "Animatable",
              "ChildNode",
              "NonDocumentTypeChildNode",
              "ParentNode",
              "Slottable"
            ],
            "jsdoc": null,
            "xaiDescription": "Base interface for DOM elements.",
            "isExported": false
          },
          {
            "name": "Event",
            "type": "interface Event {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "xaiDescription": "Base interface for DOM events.",
            "isExported": false
          },
          {
            "name": "EventTarget",
            "type": "interface EventTarget {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for objects that can receive events.",
            "isExported": false
          },
          {
            "name": "FocusEvent",
            "type": "interface FocusEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for focus changes, extending UIEvent.",
            "isExported": false
          },
          {
            "name": "FormData",
            "type": "interface FormData {}",
            "properties": [],
            "extends": [
              "{}"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for form data entries.",
            "isExported": false
          },
          {
            "name": "HTMLAnchorElement",
            "type": "interface HTMLAnchorElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLHyperlinkElementUtils",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML anchor elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLAreaElement",
            "type": "interface HTMLAreaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLHyperlinkElementUtils",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML area elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLAudioElement",
            "type": "interface HTMLAudioElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLMediaElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML audio elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLBaseElement",
            "type": "interface HTMLBaseElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML base elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLBodyElement",
            "type": "interface HTMLBodyElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "WindowEventHandlers",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML body elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLBRElement",
            "type": "interface HTMLBRElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML line break elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLButtonElement",
            "type": "interface HTMLButtonElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "PopoverInvokerElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML button elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLCanvasElement",
            "type": "interface HTMLCanvasElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML canvas elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLDataElement",
            "type": "interface HTMLDataElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML data elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLDataListElement",
            "type": "interface HTMLDataListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML datalist elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLDetailsElement",
            "type": "interface HTMLDetailsElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML details elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLDialogElement",
            "type": "interface HTMLDialogElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML dialog elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLDivElement",
            "type": "interface HTMLDivElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML div elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLDListElement",
            "type": "interface HTMLDListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML definition list elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLElement",
            "type": "interface HTMLElement extends Element {}",
            "properties": [],
            "extends": [
              "Element",
              "ElementCSSInlineStyle",
              "ElementContentEditable",
              "GlobalEventHandlers",
              "HTMLOrSVGElement",
              "Element",
              "Element"
            ],
            "jsdoc": null,
            "xaiDescription": "Base interface for HTML elements, extending Element.",
            "isExported": false
          },
          {
            "name": "HTMLEmbedElement",
            "type": "interface HTMLEmbedElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML embed elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLFieldSetElement",
            "type": "interface HTMLFieldSetElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML fieldset elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLFormElement",
            "type": "interface HTMLFormElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML form elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLHeadElement",
            "type": "interface HTMLHeadElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML head elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLHeadingElement",
            "type": "interface HTMLHeadingElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML heading elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLHRElement",
            "type": "interface HTMLHRElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML horizontal rule elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLHtmlElement",
            "type": "interface HTMLHtmlElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML html elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLIFrameElement",
            "type": "interface HTMLIFrameElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML iframe elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLImageElement",
            "type": "interface HTMLImageElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML image elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLInputElement",
            "type": "interface HTMLInputElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "PopoverInvokerElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML input elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLLabelElement",
            "type": "interface HTMLLabelElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML label elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLLegendElement",
            "type": "interface HTMLLegendElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML legend elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLLIElement",
            "type": "interface HTMLLIElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML list item elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLLinkElement",
            "type": "interface HTMLLinkElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "LinkStyle",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML link elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLMapElement",
            "type": "interface HTMLMapElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML map elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLMetaElement",
            "type": "interface HTMLMetaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML meta elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLMeterElement",
            "type": "interface HTMLMeterElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML meter elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLModElement",
            "type": "interface HTMLModElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML modification elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLObjectElement",
            "type": "interface HTMLObjectElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML object elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLOListElement",
            "type": "interface HTMLOListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML ordered list elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLOptGroupElement",
            "type": "interface HTMLOptGroupElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML optgroup elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLOptionElement",
            "type": "interface HTMLOptionElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML option elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLOutputElement",
            "type": "interface HTMLOutputElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML output elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLParagraphElement",
            "type": "interface HTMLParagraphElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML paragraph elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLParamElement",
            "type": "interface HTMLParamElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML param elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLPreElement",
            "type": "interface HTMLPreElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML preformatted elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLProgressElement",
            "type": "interface HTMLProgressElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML progress elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLQuoteElement",
            "type": "interface HTMLQuoteElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML quote elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLScriptElement",
            "type": "interface HTMLScriptElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML script elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLSelectElement",
            "type": "interface HTMLSelectElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Interface for HTML select elements, extending HTMLElement.",
            "isExported": false
          },
          {
            "name": "HTMLSlotElement",
            "type": "interface HTMLSlotElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a slot for inserting content in web components."
          },
          {
            "name": "HTMLSourceElement",
            "type": "interface HTMLSourceElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Specifies multiple media resources for media elements."
          },
          {
            "name": "HTMLSpanElement",
            "type": "interface HTMLSpanElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Generic inline container for phrasing content."
          },
          {
            "name": "HTMLStyleElement",
            "type": "interface HTMLStyleElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "LinkStyle",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines style information for a document or part."
          },
          {
            "name": "HTMLTableColElement",
            "type": "interface HTMLTableColElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a column in an HTML table."
          },
          {
            "name": "HTMLTableDataCellElement",
            "type": "interface HTMLTableDataCellElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLTableCellElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Data cell in an HTML table, extending table cell."
          },
          {
            "name": "HTMLTableElement",
            "type": "interface HTMLTableElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Root of an HTML table structure."
          },
          {
            "name": "HTMLTableHeaderCellElement",
            "type": "interface HTMLTableHeaderCellElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLTableCellElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Header cell in an HTML table, extending table cell."
          },
          {
            "name": "HTMLTableRowElement",
            "type": "interface HTMLTableRowElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a row in an HTML table."
          },
          {
            "name": "HTMLTableSectionElement",
            "type": "interface HTMLTableSectionElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Section of an HTML table, like thead or tbody."
          },
          {
            "name": "HTMLTemplateElement",
            "type": "interface HTMLTemplateElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Declares fragment of HTML that can be cloned."
          },
          {
            "name": "HTMLTextAreaElement",
            "type": "interface HTMLTextAreaElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Multi-line text input field."
          },
          {
            "name": "HTMLTimeElement",
            "type": "interface HTMLTimeElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents a date or time value in HTML."
          },
          {
            "name": "HTMLTitleElement",
            "type": "interface HTMLTitleElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines the document title."
          },
          {
            "name": "HTMLTrackElement",
            "type": "interface HTMLTrackElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Adds timed text tracks to media elements."
          },
          {
            "name": "HTMLUListElement",
            "type": "interface HTMLUListElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Unordered list element in HTML."
          },
          {
            "name": "HTMLVideoElement",
            "type": "interface HTMLVideoElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLMediaElement",
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Embeds video content, extending media element."
          },
          {
            "name": "HTMLWebViewElement",
            "type": "interface HTMLWebViewElement extends HTMLElement {}",
            "properties": [],
            "extends": [
              "HTMLElement",
              "HTMLElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Hosts web content within a page."
          },
          {
            "name": "KeyboardEvent",
            "type": "interface KeyboardEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Fires on keyboard input, extending UIEvent."
          },
          {
            "name": "MouseEvent",
            "type": "interface MouseEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents mouse-related events, extending UIEvent."
          },
          {
            "name": "PointerEvent",
            "type": "interface PointerEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Handles pointer input, extending MouseEvent."
          },
          {
            "name": "StyleMedia",
            "type": "interface StyleMedia {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Provides information about the style sheet media."
          },
          {
            "name": "SVGCircleElement",
            "type": "interface SVGCircleElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for drawing circles."
          },
          {
            "name": "SVGClipPathElement",
            "type": "interface SVGClipPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines a clipping path for SVG elements."
          },
          {
            "name": "SVGDefsElement",
            "type": "interface SVGDefsElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Container for definitions in SVG graphics."
          },
          {
            "name": "SVGDescElement",
            "type": "interface SVGDescElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Provides a description for SVG elements."
          },
          {
            "name": "SVGElement",
            "type": "interface SVGElement extends Element {}",
            "properties": [],
            "extends": [
              "Element",
              "ElementCSSInlineStyle",
              "GlobalEventHandlers",
              "HTMLOrSVGElement",
              "Element",
              "Element"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Base interface for all SVG elements, extending Element."
          },
          {
            "name": "SVGEllipseElement",
            "type": "interface SVGEllipseElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "SVG element for drawing ellipses."
          },
          {
            "name": "SVGFEBlendElement",
            "type": "interface SVGFEBlendElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Filter effect for blending SVG graphics."
          },
          {
            "name": "SVGFEColorMatrixElement",
            "type": "interface SVGFEColorMatrixElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Applies color matrix filter to SVG elements."
          },
          {
            "name": "SVGFEComponentTransferElement",
            "type": "interface SVGFEComponentTransferElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Performs component-wise transfer on SVG filters."
          },
          {
            "name": "SVGFECompositeElement",
            "type": "interface SVGFECompositeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Composites images using SVG filter operations."
          },
          {
            "name": "SVGFEConvolveMatrixElement",
            "type": "interface SVGFEConvolveMatrixElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Applies convolution matrix filter in SVG."
          },
          {
            "name": "SVGFEDiffuseLightingElement",
            "type": "interface SVGFEDiffuseLightingElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Simulates diffuse lighting in SVG filters."
          },
          {
            "name": "SVGFEDisplacementMapElement",
            "type": "interface SVGFEDisplacementMapElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Displaces pixels using a map in SVG filters."
          },
          {
            "name": "SVGFEDistantLightElement",
            "type": "interface SVGFEDistantLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines distant light source for SVG filters."
          },
          {
            "name": "SVGFEDropShadowElement",
            "type": "interface SVGFEDropShadowElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Adds drop shadow effect to SVG elements."
          },
          {
            "name": "SVGFEFloodElement",
            "type": "interface SVGFEFloodElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Fills area with color in SVG filters."
          },
          {
            "name": "SVGFEFuncAElement",
            "type": "interface SVGFEFuncAElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Transfer function for alpha channel in SVG."
          },
          {
            "name": "SVGFEFuncBElement",
            "type": "interface SVGFEFuncBElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Transfer function for blue channel in SVG."
          },
          {
            "name": "SVGFEFuncGElement",
            "type": "interface SVGFEFuncGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Transfer function for green channel in SVG."
          },
          {
            "name": "SVGFEFuncRElement",
            "type": "interface SVGFEFuncRElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGComponentTransferFunctionElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Transfer function for red channel in SVG."
          },
          {
            "name": "SVGFEGaussianBlurElement",
            "type": "interface SVGFEGaussianBlurElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Applies Gaussian blur filter to SVG elements."
          },
          {
            "name": "SVGFEImageElement",
            "type": "interface SVGFEImageElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Inserts an image into SVG filter effects."
          },
          {
            "name": "SVGFEMergeElement",
            "type": "interface SVGFEMergeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Merges multiple inputs in SVG filters."
          },
          {
            "name": "SVGFEMergeNodeElement",
            "type": "interface SVGFEMergeNodeElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Node for merging in SVG filter effects."
          },
          {
            "name": "SVGFEMorphologyElement",
            "type": "interface SVGFEMorphologyElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Applies morphological operations in SVG."
          },
          {
            "name": "SVGFEOffsetElement",
            "type": "interface SVGFEOffsetElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Offsets graphical elements in SVG filters."
          },
          {
            "name": "SVGFEPointLightElement",
            "type": "interface SVGFEPointLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines point light source for SVG lighting."
          },
          {
            "name": "SVGFESpecularLightingElement",
            "type": "interface SVGFESpecularLightingElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Simulates specular lighting in SVG filters."
          },
          {
            "name": "SVGFESpotLightElement",
            "type": "interface SVGFESpotLightElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines spot light source for SVG effects."
          },
          {
            "name": "SVGFETileElement",
            "type": "interface SVGFETileElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Tiles an input image in SVG filters."
          },
          {
            "name": "SVGFETurbulenceElement",
            "type": "interface SVGFETurbulenceElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFilterPrimitiveStandardAttributes",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Generates turbulence patterns in SVG."
          },
          {
            "name": "SVGFilterElement",
            "type": "interface SVGFilterElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines a filter effect for SVG elements."
          },
          {
            "name": "SVGForeignObjectElement",
            "type": "interface SVGForeignObjectElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Embeds foreign content in SVG graphics."
          },
          {
            "name": "SVGGElement",
            "type": "interface SVGGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Group container for SVG elements."
          },
          {
            "name": "SVGImageElement",
            "type": "interface SVGImageElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Embeds raster images in SVG."
          },
          {
            "name": "SVGLinearGradientElement",
            "type": "interface SVGLinearGradientElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGradientElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines linear gradients for SVG fills."
          },
          {
            "name": "SVGLineElement",
            "type": "interface SVGLineElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Draws straight lines in SVG."
          },
          {
            "name": "SVGMarkerElement",
            "type": "interface SVGMarkerElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines markers for SVG paths."
          },
          {
            "name": "SVGMaskElement",
            "type": "interface SVGMaskElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Applies masking to SVG elements."
          },
          {
            "name": "SVGMetadataElement",
            "type": "interface SVGMetadataElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Holds metadata for SVG documents."
          },
          {
            "name": "SVGPathElement",
            "type": "interface SVGPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Represents paths in SVG graphics."
          },
          {
            "name": "SVGPatternElement",
            "type": "interface SVGPatternElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines patterns for filling SVG shapes."
          },
          {
            "name": "SVGPolygonElement",
            "type": "interface SVGPolygonElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGAnimatedPoints",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Draws polygons using points in SVG."
          },
          {
            "name": "SVGPolylineElement",
            "type": "interface SVGPolylineElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGAnimatedPoints",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Draws polylines using points in SVG."
          },
          {
            "name": "SVGRadialGradientElement",
            "type": "interface SVGRadialGradientElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGradientElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Defines radial gradients for SVG fills."
          },
          {
            "name": "SVGRectElement",
            "type": "interface SVGRectElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGeometryElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Draws rectangles in SVG graphics."
          },
          {
            "name": "SVGSetElement",
            "type": "interface SVGSetElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGAnimationElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for set element animation, extending SVGAnimationElement.",
            "isExported": false
          },
          {
            "name": "SVGStopElement",
            "type": "interface SVGStopElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for stop gradient element.",
            "isExported": false
          },
          {
            "name": "SVGSVGElement",
            "type": "interface SVGSVGElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGFitToViewBox",
              "WindowEventHandlers",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "Main SVG container interface, extending SVGGraphicsElement and others.",
            "isExported": false
          },
          {
            "name": "SVGSwitchElement",
            "type": "interface SVGSwitchElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for switch element, extending SVGGraphicsElement.",
            "isExported": false
          },
          {
            "name": "SVGSymbolElement",
            "type": "interface SVGSymbolElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for symbol element, supporting viewBox fitting.",
            "isExported": false
          },
          {
            "name": "SVGTextElement",
            "type": "interface SVGTextElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextPositioningElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for text element, extending text positioning.",
            "isExported": false
          },
          {
            "name": "SVGTextPathElement",
            "type": "interface SVGTextPathElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextContentElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for text along a path, using URI references.",
            "isExported": false
          },
          {
            "name": "SVGTSpanElement",
            "type": "interface SVGTSpanElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGTextPositioningElement",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for inline text span, extending text positioning.",
            "isExported": false
          },
          {
            "name": "SVGUseElement",
            "type": "interface SVGUseElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGGraphicsElement",
              "SVGURIReference",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for reusing elements via URI.",
            "isExported": false
          },
          {
            "name": "SVGViewElement",
            "type": "interface SVGViewElement extends SVGElement {}",
            "properties": [],
            "extends": [
              "SVGElement",
              "SVGFitToViewBox",
              "SVGElement",
              "SVGElement"
            ],
            "jsdoc": null,
            "xaiDescription": "SVG interface for defining views with viewBox.",
            "isExported": false
          },
          {
            "name": "Text",
            "type": "interface Text {}",
            "properties": [],
            "extends": [
              "CharacterData",
              "Slottable"
            ],
            "jsdoc": null,
            "xaiDescription": "DOM interface for text nodes, extending CharacterData.",
            "isExported": false
          },
          {
            "name": "ToggleEvent",
            "type": "interface ToggleEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for toggle actions.",
            "isExported": false
          },
          {
            "name": "TouchEvent",
            "type": "interface TouchEvent extends Event {}",
            "properties": [],
            "extends": [
              "UIEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for touch inputs, extending UIEvent.",
            "isExported": false
          },
          {
            "name": "TouchList",
            "type": "interface TouchList {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Collection interface for touch points.",
            "isExported": false
          },
          {
            "name": "TransitionEvent",
            "type": "interface TransitionEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for CSS transitions.",
            "isExported": false
          },
          {
            "name": "TrustedHTML",
            "type": "interface TrustedHTML {}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for safe HTML strings.",
            "isExported": false
          },
          {
            "name": "UIEvent",
            "type": "interface UIEvent extends Event {}",
            "properties": [],
            "extends": [
              "Event",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Base interface for user interface events.",
            "isExported": false
          },
          {
            "name": "WebGL2RenderingContext",
            "type": "interface WebGL2RenderingContext {}",
            "properties": [],
            "extends": [
              "WebGL2RenderingContextBase",
              "WebGL2RenderingContextOverloads",
              "WebGLRenderingContextBase"
            ],
            "jsdoc": null,
            "xaiDescription": "WebGL 2.0 rendering context interface.",
            "isExported": false
          },
          {
            "name": "WebGLRenderingContext",
            "type": "interface WebGLRenderingContext {}",
            "properties": [],
            "extends": [
              "WebGLRenderingContextBase",
              "WebGLRenderingContextOverloads"
            ],
            "jsdoc": null,
            "xaiDescription": "WebGL 1.0 rendering context interface.",
            "isExported": false
          },
          {
            "name": "WheelEvent",
            "type": "interface WheelEvent extends Event {}",
            "properties": [],
            "extends": [
              "MouseEvent",
              "Event",
              "Event"
            ],
            "jsdoc": null,
            "xaiDescription": "Event interface for wheel actions, extending MouseEvent.",
            "isExported": false
          },
          {
            "name": "AwaitedReactNode",
            "type": "| React.ReactElement\n    | string\n    | number\n    | bigint\n    | Iterable<React.ReactNode>\n    | React.ReactPortal\n    | boolean\n    | null\n    | undefined\n    | React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES[\n        keyof React.DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES\n    ]",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | ((radix?: number) => string) | ((radix?: number) => string) | (() => string)",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => boolean) | (() => string) | (() => number) | (() => bigint) | (() => Object)",
                "optional": false
              },
              {
                "name": "toLocaleString",
                "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; } | ((locales?: Intl.LocalesArgument, options?: BigIntToLocaleStringOptions) => string)",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "internal",
                  "name": "",
                  "text": "Use `Awaited<ReactNode>` instead"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "Destructor",
            "type": "() => void | { [UNDEFINED_VOID_ONLY]: never }",
            "properties": [],
            "jsdoc": {
              "description": "The function returned from an effect passed to {@link React.useEffect useEffect},\nwhich can be used to clean up the effect when the component unmounts.",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://react.dev/reference/react/useEffect React Docs}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "ReactManagedAttributes",
            "type": "C extends { defaultProps: infer D } ? Defaultize<P, D>\n    : P",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for managing React component props with defaults.",
            "isExported": false
          },
          {
            "name": "Booleanish",
            "type": "boolean | \"true\" | \"false\"",
            "properties": [
              {
                "name": "valueOf",
                "type": "(() => boolean) | (() => string)",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "Used to represent DOM API's where users can either pass\ntrue or false as a boolean or as its equivalent strings.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "CrossOrigin",
            "type": "\"anonymous\" | \"use-credentials\" | \"\" | undefined",
            "properties": [
              {
                "name": "toString",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "charAt",
                "type": "(pos: number) => string",
                "optional": false
              },
              {
                "name": "charCodeAt",
                "type": "(index: number) => number",
                "optional": false
              },
              {
                "name": "concat",
                "type": "(...strings: string[]) => string",
                "optional": false
              },
              {
                "name": "indexOf",
                "type": "(searchString: string, position?: number) => number",
                "optional": false
              },
              {
                "name": "lastIndexOf",
                "type": "(searchString: string, position?: number) => number",
                "optional": false
              },
              {
                "name": "localeCompare",
                "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number; (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number; }",
                "optional": false
              },
              {
                "name": "match",
                "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
                "optional": false
              },
              {
                "name": "replace",
                "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string; (searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string; }",
                "optional": false
              },
              {
                "name": "search",
                "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
                "optional": false
              },
              {
                "name": "slice",
                "type": "(start?: number, end?: number) => string",
                "optional": false
              },
              {
                "name": "split",
                "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
                "optional": false
              },
              {
                "name": "substring",
                "type": "(start: number, end?: number) => string",
                "optional": false
              },
              {
                "name": "toLowerCase",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "toLocaleLowerCase",
                "type": "{ (locales?: string | string[]): string; (locales?: Intl.LocalesArgument): string; }",
                "optional": false
              },
              {
                "name": "toUpperCase",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "toLocaleUpperCase",
                "type": "{ (locales?: string | string[]): string; (locales?: Intl.LocalesArgument): string; }",
                "optional": false
              },
              {
                "name": "trim",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "length",
                "type": "number",
                "optional": false
              },
              {
                "name": "substr",
                "type": "(from: number, length?: number) => string",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "codePointAt",
                "type": "(pos: number) => number",
                "optional": false
              },
              {
                "name": "includes",
                "type": "(searchString: string, position?: number) => boolean",
                "optional": false
              },
              {
                "name": "endsWith",
                "type": "(searchString: string, endPosition?: number) => boolean",
                "optional": false
              },
              {
                "name": "normalize",
                "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
                "optional": false
              },
              {
                "name": "repeat",
                "type": "(count: number) => string",
                "optional": false
              },
              {
                "name": "startsWith",
                "type": "(searchString: string, position?: number) => boolean",
                "optional": false
              },
              {
                "name": "anchor",
                "type": "(name: string) => string",
                "optional": false
              },
              {
                "name": "big",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "blink",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "bold",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "fixed",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "fontcolor",
                "type": "(color: string) => string",
                "optional": false
              },
              {
                "name": "fontsize",
                "type": "{ (size: number): string; (size: string): string; }",
                "optional": false
              },
              {
                "name": "italics",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "link",
                "type": "(url: string) => string",
                "optional": false
              },
              {
                "name": "small",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "strike",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "sub",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "sup",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "padStart",
                "type": "(maxLength: number, fillString?: string) => string",
                "optional": false
              },
              {
                "name": "padEnd",
                "type": "(maxLength: number, fillString?: string) => string",
                "optional": false
              },
              {
                "name": "trimEnd",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimStart",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimLeft",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "trimRight",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "matchAll",
                "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
                "optional": false
              },
              {
                "name": "__@iterator@12171",
                "type": "() => StringIterator<string>",
                "optional": false
              },
              {
                "name": "at",
                "type": "(index: number) => string",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "",
              "tags": [
                {
                  "tagName": "see",
                  "name": "",
                  "text": "{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}"
                }
              ]
            },
            "isExported": false
          },
          {
            "name": "Defaultize",
            "type": "P extends any ? string extends keyof P ? P\n    :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>\n        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Utility type for merging props with defaults.",
            "isExported": false
          },
          {
            "name": "InexactPartial",
            "type": "{ [K in keyof T]?: T[K] | undefined }",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Type for partial object with optional properties.",
            "isExported": false
          },
          {
            "name": "NativeAnimationEvent",
            "type": "AnimationEvent",
            "properties": [
              {
                "name": "animationName",
                "type": "string",
                "optional": false
              },
              {
                "name": "elapsedTime",
                "type": "number",
                "optional": false
              },
              {
                "name": "pseudoElement",
                "type": "string",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Native interface for animation events.",
            "isExported": false
          },
          {
            "name": "NativeClipboardEvent",
            "type": "ClipboardEvent",
            "properties": [
              {
                "name": "clipboardData",
                "type": "DataTransfer",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Native interface for clipboard events.",
            "isExported": false
          },
          {
            "name": "NativeCompositionEvent",
            "type": "CompositionEvent",
            "xaiDescription": "Event for text composition input, such as IME.",
            "properties": [
              {
                "name": "data",
                "type": "string",
                "optional": false
              },
              {
                "name": "initCompositionEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, dataArg?: string) => void",
                "optional": false,
                "xaiDescription": "Initializes CompositionEvent with type and options."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UIEvent with type and UI properties."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of EventTarget in the event path. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic Event with type and bubbling options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling or capturing."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "NativeDragEvent",
            "type": "DragEvent",
            "xaiDescription": "Event for drag and drop operations in the DOM.",
            "properties": [
              {
                "name": "dataTransfer",
                "type": "DataTransfer",
                "optional": false
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes MouseEvent with detailed mouse properties. Uses Window and EventTarget."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UIEvent with type and UI properties."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of EventTarget in the event path. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic Event with type and bubbling options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling or capturing."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "NativeFocusEvent",
            "type": "FocusEvent",
            "xaiDescription": "Event for focus changes on elements.",
            "properties": [
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UIEvent with type and UI properties."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of EventTarget in the event path. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic Event with type and bubbling options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling or capturing."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "NativeKeyboardEvent",
            "type": "KeyboardEvent",
            "xaiDescription": "Event for keyboard interactions and key presses.",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "charCode",
                "type": "number",
                "optional": false
              },
              {
                "name": "code",
                "type": "string",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "isComposing",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "key",
                "type": "string",
                "optional": false
              },
              {
                "name": "keyCode",
                "type": "number",
                "optional": false
              },
              {
                "name": "location",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "repeat",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active."
              },
              {
                "name": "initKeyboardEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, keyArg?: string, locationArg?: number, ctrlKey?: boolean, altKey?: boolean, shiftKey?: boolean, metaKey?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes KeyboardEvent with key details. Uses Window."
              },
              {
                "name": "DOM_KEY_LOCATION_STANDARD",
                "type": "0",
                "optional": false
              },
              {
                "name": "DOM_KEY_LOCATION_LEFT",
                "type": "1",
                "optional": false
              },
              {
                "name": "DOM_KEY_LOCATION_RIGHT",
                "type": "2",
                "optional": false
              },
              {
                "name": "DOM_KEY_LOCATION_NUMPAD",
                "type": "3",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UIEvent with type and UI properties."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of EventTarget in the event path. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic Event with type and bubbling options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling or capturing."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "NativeMouseEvent",
            "type": "MouseEvent",
            "xaiDescription": "Event for mouse actions like clicks and movements.",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if a modifier key is active."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes MouseEvent with detailed mouse properties. Uses Window and EventTarget."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UIEvent with type and UI properties."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of EventTarget in the event path. Uses EventTarget[]."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic Event with type and bubbling options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents the default action of the event."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops further event propagation immediately."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling or capturing."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "NativePointerEvent",
            "type": "PointerEvent",
            "properties": [
              {
                "name": "altitudeAngle",
                "type": "number",
                "optional": false
              },
              {
                "name": "azimuthAngle",
                "type": "number",
                "optional": false
              },
              {
                "name": "height",
                "type": "number",
                "optional": false
              },
              {
                "name": "isPrimary",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "pointerId",
                "type": "number",
                "optional": false
              },
              {
                "name": "pointerType",
                "type": "string",
                "optional": false
              },
              {
                "name": "pressure",
                "type": "number",
                "optional": false
              },
              {
                "name": "tangentialPressure",
                "type": "number",
                "optional": false
              },
              {
                "name": "tiltX",
                "type": "number",
                "optional": false
              },
              {
                "name": "tiltY",
                "type": "number",
                "optional": false
              },
              {
                "name": "twist",
                "type": "number",
                "optional": false
              },
              {
                "name": "width",
                "type": "number",
                "optional": false
              },
              {
                "name": "getCoalescedEvents",
                "type": "() => PointerEvent[]",
                "optional": false,
                "xaiDescription": "Returns array of coalesced pointer events."
              },
              {
                "name": "getPredictedEvents",
                "type": "() => PointerEvent[]",
                "optional": false,
                "xaiDescription": "Returns array of predicted pointer events."
              },
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "button",
                "type": "number",
                "optional": false
              },
              {
                "name": "buttons",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientX",
                "type": "number",
                "optional": false
              },
              {
                "name": "clientY",
                "type": "number",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "layerX",
                "type": "number",
                "optional": false
              },
              {
                "name": "layerY",
                "type": "number",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "movementX",
                "type": "number",
                "optional": false
              },
              {
                "name": "movementY",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetX",
                "type": "number",
                "optional": false
              },
              {
                "name": "offsetY",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageX",
                "type": "number",
                "optional": false
              },
              {
                "name": "pageY",
                "type": "number",
                "optional": false
              },
              {
                "name": "relatedTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "screenX",
                "type": "number",
                "optional": false
              },
              {
                "name": "screenY",
                "type": "number",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "x",
                "type": "number",
                "optional": false
              },
              {
                "name": "y",
                "type": "number",
                "optional": false
              },
              {
                "name": "getModifierState",
                "type": "(keyArg: string) => boolean",
                "optional": false,
                "xaiDescription": "Checks if modifier key is active."
              },
              {
                "name": "initMouseEvent",
                "type": "(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget) => void",
                "optional": false,
                "xaiDescription": "Initializes mouse event with specified parameters."
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with optional parameters."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in composition path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handling."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native PointerEvent for handling pointer inputs like mouse and touch."
          },
          {
            "name": "NativeToggleEvent",
            "type": "ToggleEvent",
            "properties": [
              {
                "name": "newState",
                "type": "string",
                "optional": false
              },
              {
                "name": "oldState",
                "type": "string",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in composition path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handling."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native ToggleEvent for state change notifications."
          },
          {
            "name": "NativeTouchEvent",
            "type": "TouchEvent",
            "properties": [
              {
                "name": "altKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "changedTouches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "ctrlKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "metaKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "shiftKey",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "targetTouches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "touches",
                "type": "TouchList",
                "optional": false
              },
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with optional parameters."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in composition path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handling."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native TouchEvent for handling touch inputs."
          },
          {
            "name": "NativeTransitionEvent",
            "type": "TransitionEvent",
            "properties": [
              {
                "name": "elapsedTime",
                "type": "number",
                "optional": false
              },
              {
                "name": "propertyName",
                "type": "string",
                "optional": false
              },
              {
                "name": "pseudoElement",
                "type": "string",
                "optional": false
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in composition path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handling."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native TransitionEvent for CSS transitions."
          },
          {
            "name": "NativeUIEvent",
            "type": "UIEvent",
            "properties": [
              {
                "name": "detail",
                "type": "number",
                "optional": false
              },
              {
                "name": "view",
                "type": "Window",
                "optional": false
              },
              {
                "name": "which",
                "type": "number",
                "optional": false
              },
              {
                "name": "initUIEvent",
                "type": "(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window, detailArg?: number) => void",
                "optional": false,
                "xaiDescription": "Initializes UI event with optional parameters."
              },
              {
                "name": "bubbles",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelBubble",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "cancelable",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "composed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "currentTarget",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "defaultPrevented",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "eventPhase",
                "type": "number",
                "optional": false
              },
              {
                "name": "isTrusted",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "returnValue",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "srcElement",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "target",
                "type": "EventTarget",
                "optional": false
              },
              {
                "name": "timeStamp",
                "type": "number",
                "optional": false
              },
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "composedPath",
                "type": "() => EventTarget[]",
                "optional": false,
                "xaiDescription": "Returns array of event targets in composition path."
              },
              {
                "name": "initEvent",
                "type": "(type: string, bubbles?: boolean, cancelable?: boolean) => void",
                "optional": false,
                "xaiDescription": "Initializes basic event with type and options."
              },
              {
                "name": "preventDefault",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Prevents default event action."
              },
              {
                "name": "stopImmediatePropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event propagation and handling."
              },
              {
                "name": "stopPropagation",
                "type": "() => void",
                "optional": false,
                "xaiDescription": "Stops event bubbling up."
              },
              {
                "name": "NONE",
                "type": "0",
                "optional": false
              },
              {
                "name": "CAPTURING_PHASE",
                "type": "1",
                "optional": false
              },
              {
                "name": "AT_TARGET",
                "type": "2",
                "optional": false
              },
              {
                "name": "BUBBLING_PHASE",
                "type": "3",
                "optional": false
              }
            ],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Native UIEvent for user interface interactions."
          }
        ],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": true
    }
  ]
}