{
  "functions": [
    {
      "name": "default",
      "parameters": [
        {
          "name": "_url",
          "type": "string",
          "optional": true
        },
        {
          "name": "_options",
          "type": "WretchOptions",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": null,
      "xaiDescription": "Creates a new Wretch instance with optional URL and options."
    },
    {
      "name": "options",
      "parameters": [
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Sets Wretch options, optionally replacing existing ones."
    },
    {
      "name": "errorType",
      "parameters": [
        {
          "name": "errorType",
          "type": "ErrorType",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Sets the error type for Wretch responses."
    },
    {
      "name": "polyfills",
      "parameters": [
        {
          "name": "polyfills",
          "type": "object",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Applies polyfills to Wretch, optionally replacing existing ones."
    },
    {
      "name": "default.options",
      "parameters": [
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Sets options for the default Wretch instance, optionally replacing existing ones."
    },
    {
      "name": "default.errorType",
      "parameters": [
        {
          "name": "errorType",
          "type": "ErrorType",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Sets the error type for the default Wretch instance."
    },
    {
      "name": "default.polyfills",
      "parameters": [
        {
          "name": "polyfills",
          "type": "object",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Applies polyfills to the default Wretch instance, optionally replacing existing ones."
    },
    {
      "name": "default.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "default.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "default.default",
      "parameters": [
        {
          "name": "_url",
          "type": "string",
          "optional": true
        },
        {
          "name": "_options",
          "type": "WretchOptions",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": null,
      "xaiDescription": "Creates a new default Wretch instance with optional URL and options."
    },
    {
      "name": "factory",
      "parameters": [
        {
          "name": "_url",
          "type": "string",
          "optional": true
        },
        {
          "name": "_options",
          "type": "WretchOptions",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Creates a new wretch instance with a base url and base\n[fetch options](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch).\n\nts\nimport wretch from \"wretch\"\n\n// Reusable instance\nconst w = wretch(\"https://domain.com\", { mode: \"cors\" })\n",
        "params": [
          {
            "name": "_url",
            "description": "The base url"
          },
          {
            "name": "_options",
            "description": "The base fetch options"
          }
        ],
        "returns": "A fresh wretch instance",
        "deprecated": false
      }
    },
    {
      "name": "factory.options",
      "parameters": [
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Sets options for the factory Wretch instance, optionally replacing existing ones."
    },
    {
      "name": "factory.errorType",
      "parameters": [
        {
          "name": "errorType",
          "type": "ErrorType",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Sets the error type for the factory Wretch instance."
    },
    {
      "name": "factory.polyfills",
      "parameters": [
        {
          "name": "polyfills",
          "type": "object",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Applies polyfills to the factory Wretch instance, optionally replacing existing ones."
    },
    {
      "name": "factory.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "factory.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "factory.default",
      "parameters": [
        {
          "name": "_url",
          "type": "string",
          "optional": true
        },
        {
          "name": "_options",
          "type": "WretchOptions",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": null,
      "xaiDescription": "Creates a new factory Wretch instance with optional URL and options."
    },
    {
      "name": "abort",
      "parameters": [],
      "returnType": "WretchAddon<AbortWretch, AbortResolver>",
      "jsdoc": null,
      "xaiDescription": "Adds abort functionality to Wretch requests."
    },
    {
      "name": "beforeRequest",
      "parameters": [
        {
          "name": "wretch",
          "type": "T & Wretch<T, C, R>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "state",
          "type": "Record<any, any>",
          "optional": false
        }
      ],
      "returnType": "T & Wretch<T, C, R>",
      "jsdoc": null,
      "xaiDescription": "Executes before each Wretch request to modify the request."
    },
    {
      "name": "default.beforeRequest",
      "parameters": [
        {
          "name": "wretch",
          "type": "T & Wretch<T, C, R>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "state",
          "type": "Record<any, any>",
          "optional": false
        }
      ],
      "returnType": "T & Wretch<T, C, R>",
      "jsdoc": null,
      "xaiDescription": "Executes before each request on the default Wretch instance."
    },
    {
      "name": "default.basicAuth",
      "parameters": [
        {
          "name": "username",
          "type": "string",
          "optional": false
        },
        {
          "name": "password",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "BasicAuthAddon",
      "jsdoc": {
        "description": "Sets the `Authorization` header to `Basic ` + <base64 encoded credentials>.\nAdditionally, allows using URLs with credentials in them.\n\njs\nconst user = \"user\"\nconst pass = \"pass\"\n\n// Automatically sets the Authorization header to \"Basic \" + <base64 encoded credentials>\nwretch(\"...\").addon(BasicAuthAddon).basicAuth(user, pass).get()\n\n// Allows using URLs with credentials in them\nwretch(`https://${user}:${pass}@...`).addon(BasicAuthAddon).get()\n",
        "params": [
          {
            "name": "username",
            "description": "- Username to use for basic auth"
          },
          {
            "name": "password",
            "description": "- Password to use for basic auth"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "basicAuth.beforeRequest",
      "parameters": [
        {
          "name": "wretch",
          "type": "T & Wretch<T, C, R>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "state",
          "type": "Record<any, any>",
          "optional": false
        }
      ],
      "returnType": "T & Wretch<T, C, R>",
      "jsdoc": null,
      "xaiDescription": "Executes before each request with BasicAuth addon."
    },
    {
      "name": "basicAuth.basicAuth",
      "parameters": [
        {
          "name": "username",
          "type": "string",
          "optional": false
        },
        {
          "name": "password",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "BasicAuthAddon",
      "jsdoc": {
        "description": "Sets the `Authorization` header to `Basic ` + <base64 encoded credentials>.\nAdditionally, allows using URLs with credentials in them.\n\njs\nconst user = \"user\"\nconst pass = \"pass\"\n\n// Automatically sets the Authorization header to \"Basic \" + <base64 encoded credentials>\nwretch(\"...\").addon(BasicAuthAddon).basicAuth(user, pass).get()\n\n// Allows using URLs with credentials in them\nwretch(`https://${user}:${pass}@...`).addon(BasicAuthAddon).get()\n",
        "params": [
          {
            "name": "username",
            "description": "- Username to use for basic auth"
          },
          {
            "name": "password",
            "description": "- Password to use for basic auth"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.formData",
      "parameters": [
        {
          "name": "formObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "recursive",
          "type": "boolean | string[]",
          "optional": true
        }
      ],
      "returnType": "FormDataAddon",
      "jsdoc": {
        "description": "Converts the javascript object to a FormData and sets the request body.\n\njs\nconst form = {\n  hello: \"world\",\n  duck: \"Muscovy\",\n};\n\nwretch(\"...\").addons(FormDataAddon).formData(form).post();\n\n\nThe `recursive` argument when set to `true` will enable recursion through all\nnested objects and produce `object[key]` keys. It can be set to an array of\nstring to exclude specific keys.\n\n> Warning: Be careful to exclude `Blob` instances in the Browser, and\n> `ReadableStream` and `Buffer` instances when using the node.js compatible\n> `form-data` package.\n\njs\nconst form = {\n  duck: \"Muscovy\",\n  duckProperties: {\n    beak: {\n      color: \"yellow\",\n    },\n    legs: 2,\n  },\n  ignored: {\n    key: 0,\n  },\n};\n\n// Will append the following keys to the FormData payload:\n// \"duck\", \"duckProperties[beak][color]\", \"duckProperties[legs]\"\nwretch(\"...\").addons(FormDataAddon).formData(form, [\"ignored\"]).post();\n\n\n> Note: This addon does not support specifying a custom `filename`.\n> If you need to do so, you can use the `body` method directly:\n> js\n> const form = new FormData();\n> form.append(\"hello\", \"world\", \"hello.txt\");\n> wretch(\"...\").body(form).post();\n> \n> See: https://developer.mozilla.org/en-US/docs/Web/API/FormData/append#example",
        "params": [
          {
            "name": "formObject",
            "description": "- An object which will be converted to a FormData"
          },
          {
            "name": "recursive",
            "description": "- If `true`, will recurse through all nested objects. Can be set as an array of string to exclude specific keys."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "formData.beforeRequest",
      "parameters": [
        {
          "name": "wretch",
          "type": "T & Wretch<T, C, R>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "state",
          "type": "Record<any, any>",
          "optional": false
        }
      ],
      "returnType": "T & Wretch<T, C, R>",
      "jsdoc": null,
      "xaiDescription": "Executes before each request with FormData addon."
    },
    {
      "name": "formData.formData",
      "parameters": [
        {
          "name": "formObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "recursive",
          "type": "boolean | string[]",
          "optional": true
        }
      ],
      "returnType": "FormDataAddon",
      "jsdoc": {
        "description": "Converts the javascript object to a FormData and sets the request body.\n\njs\nconst form = {\n  hello: \"world\",\n  duck: \"Muscovy\",\n};\n\nwretch(\"...\").addons(FormDataAddon).formData(form).post();\n\n\nThe `recursive` argument when set to `true` will enable recursion through all\nnested objects and produce `object[key]` keys. It can be set to an array of\nstring to exclude specific keys.\n\n> Warning: Be careful to exclude `Blob` instances in the Browser, and\n> `ReadableStream` and `Buffer` instances when using the node.js compatible\n> `form-data` package.\n\njs\nconst form = {\n  duck: \"Muscovy\",\n  duckProperties: {\n    beak: {\n      color: \"yellow\",\n    },\n    legs: 2,\n  },\n  ignored: {\n    key: 0,\n  },\n};\n\n// Will append the following keys to the FormData payload:\n// \"duck\", \"duckProperties[beak][color]\", \"duckProperties[legs]\"\nwretch(\"...\").addons(FormDataAddon).formData(form, [\"ignored\"]).post();\n\n\n> Note: This addon does not support specifying a custom `filename`.\n> If you need to do so, you can use the `body` method directly:\n> js\n> const form = new FormData();\n> form.append(\"hello\", \"world\", \"hello.txt\");\n> wretch(\"...\").body(form).post();\n> \n> See: https://developer.mozilla.org/en-US/docs/Web/API/FormData/append#example",
        "params": [
          {
            "name": "formObject",
            "description": "- An object which will be converted to a FormData"
          },
          {
            "name": "recursive",
            "description": "- If `true`, will recurse through all nested objects. Can be set as an array of string to exclude specific keys."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.formUrl",
      "parameters": [
        {
          "name": "input",
          "type": "string | object",
          "optional": false
        }
      ],
      "returnType": "FormUrlAddon",
      "jsdoc": {
        "description": "Converts the input parameter to an url encoded string and sets the content-type\nheader and body. If the input argument is already a string, skips the conversion\npart.\n\njs\nconst form = { a: 1, b: { c: 2 } };\nconst alreadyEncodedForm = \"a=1&b=%7B%22c%22%3A2%7D\";\n\n// Automatically sets the content-type header to \"application/x-www-form-urlencoded\"\nwretch(\"...\").addon(FormUrlAddon).formUrl(form).post();\nwretch(\"...\").addon(FormUrlAddon).formUrl(alreadyEncodedForm).post();\n",
        "params": [
          {
            "name": "input",
            "description": "- An object to convert into an url encoded string or an already encoded string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "formUrl.beforeRequest",
      "parameters": [
        {
          "name": "wretch",
          "type": "T & Wretch<T, C, R>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "state",
          "type": "Record<any, any>",
          "optional": false
        }
      ],
      "returnType": "T & Wretch<T, C, R>",
      "jsdoc": null,
      "xaiDescription": "Executes before each request with FormUrl addon."
    },
    {
      "name": "formUrl.formUrl",
      "parameters": [
        {
          "name": "input",
          "type": "string | object",
          "optional": false
        }
      ],
      "returnType": "FormUrlAddon",
      "jsdoc": {
        "description": "Converts the input parameter to an url encoded string and sets the content-type\nheader and body. If the input argument is already a string, skips the conversion\npart.\n\njs\nconst form = { a: 1, b: { c: 2 } };\nconst alreadyEncodedForm = \"a=1&b=%7B%22c%22%3A2%7D\";\n\n// Automatically sets the content-type header to \"application/x-www-form-urlencoded\"\nwretch(\"...\").addon(FormUrlAddon).formUrl(form).post();\nwretch(\"...\").addon(FormUrlAddon).formUrl(alreadyEncodedForm).post();\n",
        "params": [
          {
            "name": "input",
            "description": "- An object to convert into an url encoded string or an already encoded string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "abortAddon",
      "parameters": [],
      "returnType": "WretchAddon<AbortWretch, AbortResolver>",
      "jsdoc": null,
      "xaiDescription": "Adds abort functionality to Wretch requests."
    },
    {
      "name": "basicAuthAddon.beforeRequest",
      "parameters": [
        {
          "name": "wretch",
          "type": "T & Wretch<T, C, R>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "state",
          "type": "Record<any, any>",
          "optional": false
        }
      ],
      "returnType": "T & Wretch<T, C, R>",
      "jsdoc": null,
      "xaiDescription": "Executes before each request with BasicAuth addon."
    },
    {
      "name": "basicAuthAddon.basicAuth",
      "parameters": [
        {
          "name": "username",
          "type": "string",
          "optional": false
        },
        {
          "name": "password",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "BasicAuthAddon",
      "jsdoc": {
        "description": "Sets the `Authorization` header to `Basic ` + <base64 encoded credentials>.\nAdditionally, allows using URLs with credentials in them.\n\njs\nconst user = \"user\"\nconst pass = \"pass\"\n\n// Automatically sets the Authorization header to \"Basic \" + <base64 encoded credentials>\nwretch(\"...\").addon(BasicAuthAddon).basicAuth(user, pass).get()\n\n// Allows using URLs with credentials in them\nwretch(`https://${user}:${pass}@...`).addon(BasicAuthAddon).get()\n",
        "params": [
          {
            "name": "username",
            "description": "- Username to use for basic auth"
          },
          {
            "name": "password",
            "description": "- Password to use for basic auth"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "formDataAddon.beforeRequest",
      "parameters": [
        {
          "name": "wretch",
          "type": "T & Wretch<T, C, R>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "state",
          "type": "Record<any, any>",
          "optional": false
        }
      ],
      "returnType": "T & Wretch<T, C, R>",
      "jsdoc": null,
      "xaiDescription": "Executes before each request with FormData addon."
    },
    {
      "name": "formDataAddon.formData",
      "parameters": [
        {
          "name": "formObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "recursive",
          "type": "boolean | string[]",
          "optional": true
        }
      ],
      "returnType": "FormDataAddon",
      "jsdoc": {
        "description": "Converts the javascript object to a FormData and sets the request body.\n\njs\nconst form = {\n  hello: \"world\",\n  duck: \"Muscovy\",\n};\n\nwretch(\"...\").addons(FormDataAddon).formData(form).post();\n\n\nThe `recursive` argument when set to `true` will enable recursion through all\nnested objects and produce `object[key]` keys. It can be set to an array of\nstring to exclude specific keys.\n\n> Warning: Be careful to exclude `Blob` instances in the Browser, and\n> `ReadableStream` and `Buffer` instances when using the node.js compatible\n> `form-data` package.\n\njs\nconst form = {\n  duck: \"Muscovy\",\n  duckProperties: {\n    beak: {\n      color: \"yellow\",\n    },\n    legs: 2,\n  },\n  ignored: {\n    key: 0,\n  },\n};\n\n// Will append the following keys to the FormData payload:\n// \"duck\", \"duckProperties[beak][color]\", \"duckProperties[legs]\"\nwretch(\"...\").addons(FormDataAddon).formData(form, [\"ignored\"]).post();\n\n\n> Note: This addon does not support specifying a custom `filename`.\n> If you need to do so, you can use the `body` method directly:\n> js\n> const form = new FormData();\n> form.append(\"hello\", \"world\", \"hello.txt\");\n> wretch(\"...\").body(form).post();\n> \n> See: https://developer.mozilla.org/en-US/docs/Web/API/FormData/append#example",
        "params": [
          {
            "name": "formObject",
            "description": "- An object which will be converted to a FormData"
          },
          {
            "name": "recursive",
            "description": "- If `true`, will recurse through all nested objects. Can be set as an array of string to exclude specific keys."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "formUrlAddon.beforeRequest",
      "parameters": [
        {
          "name": "wretch",
          "type": "T & Wretch<T, C, R>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "state",
          "type": "Record<any, any>",
          "optional": false
        }
      ],
      "returnType": "T & Wretch<T, C, R>",
      "jsdoc": null,
      "xaiDescription": "Executes before each request with FormUrl addon."
    },
    {
      "name": "formUrlAddon.formUrl",
      "parameters": [
        {
          "name": "input",
          "type": "string | object",
          "optional": false
        }
      ],
      "returnType": "FormUrlAddon",
      "jsdoc": {
        "description": "Converts the input parameter to an url encoded string and sets the content-type\nheader and body. If the input argument is already a string, skips the conversion\npart.\n\njs\nconst form = { a: 1, b: { c: 2 } };\nconst alreadyEncodedForm = \"a=1&b=%7B%22c%22%3A2%7D\";\n\n// Automatically sets the content-type header to \"application/x-www-form-urlencoded\"\nwretch(\"...\").addon(FormUrlAddon).formUrl(form).post();\nwretch(\"...\").addon(FormUrlAddon).formUrl(alreadyEncodedForm).post();\n",
        "params": [
          {
            "name": "input",
            "description": "- An object to convert into an url encoded string or an already encoded string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "perfsAddon",
      "parameters": [],
      "returnType": "WretchAddon<unknown, PerfsAddon>",
      "jsdoc": null,
      "xaiDescription": "Adds performance monitoring to Wretch requests."
    },
    {
      "name": "queryStringAddon.beforeRequest",
      "parameters": [
        {
          "name": "wretch",
          "type": "T & Wretch<T, C, R>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "state",
          "type": "Record<any, any>",
          "optional": false
        }
      ],
      "returnType": "T & Wretch<T, C, R>",
      "jsdoc": null,
      "xaiDescription": "Executes before each request with QueryString addon."
    },
    {
      "name": "queryStringAddon.query",
      "parameters": [
        {
          "name": "qp",
          "type": "string | object",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "omitUndefinedOrNullValues",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "QueryStringAddon",
      "jsdoc": {
        "description": "Converts a javascript object to query parameters, then appends this query string\nto the current url. String values are used as the query string verbatim.\n\nPass `true` as the second argument to replace existing query parameters.\nPass `true` as the third argument to completely omit the key=value pair for undefined or null values.\n\n\nimport QueryAddon from \"wretch/addons/queryString\"\n\nlet w = wretch(\"http://example.com\").addon(QueryStringAddon);\n// url is http://example.com\nw = w.query({ a: 1, b: 2 });\n// url is now http://example.com?a=1&b=2\nw = w.query({ c: 3, d: [4, 5] });\n// url is now http://example.com?a=1&b=2c=3&d=4&d=5\nw = w.query(\"five&six&seven=eight\");\n// url is now http://example.com?a=1&b=2c=3&d=4&d=5&five&six&seven=eight\nw = w.query({ reset: true }, true);\n// url is now  http://example.com?reset=true\n\n\n##### **Note that .query is not meant to handle complex cases with nested objects.**\n\nFor this kind of usage, you can use `wretch` in conjunction with other libraries\n(like [`qs`](https://github.com/ljharb/qs)).\n\njs\n// Using wretch with qs\n\nconst queryObject = { some: { nested: \"objects\" } };\nconst w = wretch(\"https://example.com/\").addon(QueryStringAddon)\n\n// Use .qs inside .query :\n\nw.query(qs.stringify(queryObject));\n\n// Use .defer :\n\nconst qsWretch = w.defer((w, url, { qsQuery, qsOptions }) => (\n  qsQuery ? w.query(qs.stringify(qsQuery, qsOptions)) : w\n));\n\nqsWretch\n  .url(\"https://example.com/\")\n  .options({ qs: { query: queryObject } });\n",
        "params": [
          {
            "name": "qp",
            "description": "- An object which will be converted, or a string which will be used verbatim."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "progressAddon",
      "parameters": [],
      "returnType": "WretchAddon<unknown, ProgressResolver>",
      "jsdoc": null,
      "xaiDescription": "Adds progress tracking to Wretch requests."
    },
    {
      "name": "perfs",
      "parameters": [],
      "returnType": "WretchAddon<unknown, PerfsAddon>",
      "jsdoc": null,
      "xaiDescription": "Enhances Wretch with performance monitoring capabilities."
    },
    {
      "name": "progress",
      "parameters": [],
      "returnType": "WretchAddon<unknown, ProgressResolver>",
      "jsdoc": null,
      "xaiDescription": "Adds progress tracking to Wretch requests."
    },
    {
      "name": "default.query",
      "parameters": [
        {
          "name": "qp",
          "type": "string | object",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "omitUndefinedOrNullValues",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "QueryStringAddon",
      "jsdoc": {
        "description": "Converts a javascript object to query parameters, then appends this query string\nto the current url. String values are used as the query string verbatim.\n\nPass `true` as the second argument to replace existing query parameters.\nPass `true` as the third argument to completely omit the key=value pair for undefined or null values.\n\n\nimport QueryAddon from \"wretch/addons/queryString\"\n\nlet w = wretch(\"http://example.com\").addon(QueryStringAddon);\n// url is http://example.com\nw = w.query({ a: 1, b: 2 });\n// url is now http://example.com?a=1&b=2\nw = w.query({ c: 3, d: [4, 5] });\n// url is now http://example.com?a=1&b=2c=3&d=4&d=5\nw = w.query(\"five&six&seven=eight\");\n// url is now http://example.com?a=1&b=2c=3&d=4&d=5&five&six&seven=eight\nw = w.query({ reset: true }, true);\n// url is now  http://example.com?reset=true\n\n\n##### **Note that .query is not meant to handle complex cases with nested objects.**\n\nFor this kind of usage, you can use `wretch` in conjunction with other libraries\n(like [`qs`](https://github.com/ljharb/qs)).\n\njs\n// Using wretch with qs\n\nconst queryObject = { some: { nested: \"objects\" } };\nconst w = wretch(\"https://example.com/\").addon(QueryStringAddon)\n\n// Use .qs inside .query :\n\nw.query(qs.stringify(queryObject));\n\n// Use .defer :\n\nconst qsWretch = w.defer((w, url, { qsQuery, qsOptions }) => (\n  qsQuery ? w.query(qs.stringify(qsQuery, qsOptions)) : w\n));\n\nqsWretch\n  .url(\"https://example.com/\")\n  .options({ qs: { query: queryObject } });\n",
        "params": [
          {
            "name": "qp",
            "description": "- An object which will be converted, or a string which will be used verbatim."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "queryString.beforeRequest",
      "parameters": [
        {
          "name": "wretch",
          "type": "T & Wretch<T, C, R>",
          "optional": false
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "state",
          "type": "Record<any, any>",
          "optional": false
        }
      ],
      "returnType": "T & Wretch<T, C, R>",
      "jsdoc": null,
      "xaiDescription": "Modifies Wretch request before it's sent."
    },
    {
      "name": "queryString.query",
      "parameters": [
        {
          "name": "qp",
          "type": "string | object",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "omitUndefinedOrNullValues",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "QueryStringAddon",
      "jsdoc": {
        "description": "Converts a javascript object to query parameters, then appends this query string\nto the current url. String values are used as the query string verbatim.\n\nPass `true` as the second argument to replace existing query parameters.\nPass `true` as the third argument to completely omit the key=value pair for undefined or null values.\n\n\nimport QueryAddon from \"wretch/addons/queryString\"\n\nlet w = wretch(\"http://example.com\").addon(QueryStringAddon);\n// url is http://example.com\nw = w.query({ a: 1, b: 2 });\n// url is now http://example.com?a=1&b=2\nw = w.query({ c: 3, d: [4, 5] });\n// url is now http://example.com?a=1&b=2c=3&d=4&d=5\nw = w.query(\"five&six&seven=eight\");\n// url is now http://example.com?a=1&b=2c=3&d=4&d=5&five&six&seven=eight\nw = w.query({ reset: true }, true);\n// url is now  http://example.com?reset=true\n\n\n##### **Note that .query is not meant to handle complex cases with nested objects.**\n\nFor this kind of usage, you can use `wretch` in conjunction with other libraries\n(like [`qs`](https://github.com/ljharb/qs)).\n\njs\n// Using wretch with qs\n\nconst queryObject = { some: { nested: \"objects\" } };\nconst w = wretch(\"https://example.com/\").addon(QueryStringAddon)\n\n// Use .qs inside .query :\n\nw.query(qs.stringify(queryObject));\n\n// Use .defer :\n\nconst qsWretch = w.defer((w, url, { qsQuery, qsOptions }) => (\n  qsQuery ? w.query(qs.stringify(qsQuery, qsOptions)) : w\n));\n\nqsWretch\n  .url(\"https://example.com/\")\n  .options({ qs: { query: queryObject } });\n",
        "params": [
          {
            "name": "qp",
            "description": "- An object which will be converted, or a string which will be used verbatim."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "setOptions",
      "parameters": [
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Sets the default fetch options that will be stored internally when instantiating wretch objects.\n\njs\nimport wretch from \"wretch\"\n\nwretch.options({ headers: { \"Accept\": \"application/json\" } });\n\n// The fetch request is sent with both headers.\nwretch(\"...\", { headers: { \"X-Custom\": \"Header\" } }).get().res();\n",
        "params": [
          {
            "name": "options",
            "description": "Default options"
          },
          {
            "name": "replace",
            "description": "If true, completely replaces the existing options instead of mixing in"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "setPolyfills",
      "parameters": [
        {
          "name": "polyfills",
          "type": "object",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Sets the default polyfills that will be stored internally when instantiating wretch objects.\nUseful for browserless environments like `node.js`.\n\nNeeded for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n\njs\nimport wretch from \"wretch\"\n\nwretch.polyfills({\n  fetch: require(\"node-fetch\"),\n  FormData: require(\"form-data\"),\n  URLSearchParams: require(\"url\").URLSearchParams,\n});\n\n// Uses the above polyfills.\nwretch(\"...\").get().res();\n",
        "params": [
          {
            "name": "polyfills",
            "description": "An object containing the polyfills"
          },
          {
            "name": "replace",
            "description": "If true, replaces the current polyfills instead of mixing in"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "setErrorType",
      "parameters": [
        {
          "name": "errorType",
          "type": "ErrorType",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Sets the default method (text, json, …) used to parse the data contained in the response body in case of an HTTP error.\nAs with other static methods, it will affect wretch instances created after calling this function.\n\n_Note: if the response Content-Type header is set to \"application/json\", the body will be parsed as json regardless of the errorType._\n\njs\nimport wretch from \"wretch\"\n\nwretch.errorType(\"json\")\n\nwretch(\"http://server/which/returns/an/error/with/a/json/body\")\n  .get()\n  .res()\n  .catch(error => {\n    // error[errorType] (here, json) contains the parsed body\n    console.log(error.json)\n  })\n\n\nIf null, defaults to \"text\".",
        "deprecated": false
      }
    },
    {
      "name": "polyfill",
      "parameters": [
        {
          "name": "p",
          "type": "\"fetch\"",
          "optional": false
        },
        {
          "name": "doThrow",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "{ (input: RequestInfo | URL, init?: RequestInit): Promise<Response>; (input: string | Request | URL, init?: RequestInit): Promise<...>; }",
      "jsdoc": null,
      "xaiDescription": "Provides polyfill for fetch API."
    },
    {
      "name": "default.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "default.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "default.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "default.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "default.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "default.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "default.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "default.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "default.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "default.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "default.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.accept",
      "parameters": [
        {
          "name": "headerValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Shortcut to set the \"Accept\" header.\n\njs\nwretch(\"...\").accept(\"application/json\");\n",
        "params": [
          {
            "name": "headerValue",
            "description": "- Header value"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Sets the Accept header for the request."
    },
    {
      "name": "core.content",
      "parameters": [
        {
          "name": "headerValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Shortcut to set the \"Content-Type\" header.\n\njs\nwretch(\"...\").content(\"application/json\");\n",
        "params": [
          {
            "name": "headerValue",
            "description": "- Header value"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Sets the Content-Type header for the request."
    },
    {
      "name": "core.auth",
      "parameters": [
        {
          "name": "headerValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Shortcut to set the \"Authorization\" header.\n\njs\nwretch(\"...\").auth(\"Basic d3JldGNoOnJvY2tz\");\n",
        "params": [
          {
            "name": "headerValue",
            "description": "- Header value"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Sets the Authorization header for the request."
    },
    {
      "name": "core.catcher",
      "parameters": [
        {
          "name": "errorId",
          "type": "string | number | symbol",
          "optional": false
        },
        {
          "name": "catcher",
          "type": "(error: WretchError, originalRequest: Wretch<unknown, unknown, undefined>) => any",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Adds a [catcher](https://github.com/elbywan/wretch#catchers) which will be\ncalled on every subsequent request error.\n\nVery useful when you need to perform a repetitive action on a specific error\ncode.\n\njs\nconst w = wretch()\n  .catcher(404, err => redirect(\"/routes/notfound\", err.message))\n  .catcher(500, err => flashMessage(\"internal.server.error\"))\n\n// No need to catch the 404 or 500 codes, they are already taken care of.\nw.get(\"http://myapi.com/get/something\").json()\n\n// Default catchers can be overridden if needed.\nw\n.get(\"http://myapi.com/get/something\")\n.notFound(err =>\n  // overrides the default 'redirect' catcher\n )\n.json()\n\n\nThe original request is passed along the error and can be used in order to\nperform an additional request.\n\njs\nconst reAuthOn401 = wretch()\n.catcher(401, async (error, request) => {\n  // Renew credentials\n  const token = await wretch(\"/renewtoken\").get().text();\n  storeToken(token);\n  // Replay the original request with new credentials\n  return request.auth(token).fetch().unauthorized((err) => {\n    throw err;\n  }).json();\n});\n\nreAuthOn401\n.get(\"/resource\")\n.json() // <- Will only be called for the original promise\n.then(callback); // <- Will be called for the original OR the replayed promise result\n",
        "params": [
          {
            "name": "errorId",
            "description": "- Error code or name"
          },
          {
            "name": "catcher",
            "description": "- The catcher method"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Adds a catcher for handling specific request errors."
    },
    {
      "name": "core.catcherFallback",
      "parameters": [
        {
          "name": "catcher",
          "type": "(error: WretchError, originalRequest: Wretch<unknown, unknown, undefined>) => any",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "A fallback catcher that will be called for any error thrown - if uncaught by other means.\n\njs\nwretch(url)\n  .catcher(404, err => redirect(\"/routes/notfound\", err.message))\n  .catcher(500, err => flashMessage(\"internal.server.error\"))\n  // this fallback will trigger for any error except the ones caught above (404 and 505)\n  .catcherFallback(err => {\n    log(\"Uncaught error:\", err)\n    throw err\n  })\n",
        "params": [
          {
            "name": "catcher",
            "description": "- The catcher method"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Sets a fallback catcher for any uncaught request errors."
    },
    {
      "name": "core.defer",
      "parameters": [
        {
          "name": "callback",
          "type": "WretchDeferredCallback<unknown, unknown, undefined>",
          "optional": false
        },
        {
          "name": "clear",
          "type": "Clear",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Defer one or multiple request chain methods that will get called just before the request is sent.\n\njs\n// Small fictional example: deferred authentication\n\n// If you cannot retrieve the auth token while configuring the wretch object you can use .defer to postpone the call\nconst api = wretch(\"http://some-domain.com\").defer((w, url, options) => {\n  // If we are hitting the route /user…\n  if (/\\/user/.test(url)) {\n    const { token } = options.context;\n    return w.auth(token);\n  }\n  return w;\n});\n\n// ... //\n\nconst token = await getToken(request.session.user);\n\n// .auth gets called here automatically\napi.options({\n  context: { token },\n}).get(\"/user/1\").res();\n",
        "params": [
          {
            "name": "callback",
            "description": "- Exposes the wretch instance, url and options to program deferred methods."
          },
          {
            "name": "clear",
            "description": "- Replace the existing deferred methods if true instead of pushing to the existing list."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Defers request chain methods to be called before sending the request."
    },
    {
      "name": "core.resolve",
      "parameters": [
        {
          "name": "resolver",
          "type": "(chain: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, Clear extends true ? undefined : undefined>) => ResolverReturn",
          "optional": false
        },
        {
          "name": "clear",
          "type": "Clear",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, ResolverReturn>",
      "jsdoc": {
        "description": "Programs a resolver to perform response chain tasks automatically.\n\nVery useful when you need to perform repetitive actions on the wretch response.\n\n_The clear argument, if set to true, removes previously defined resolvers._\n\njs\n// Program \"response\" chain actions early on\nconst w = wretch()\n  .addon(PerfsAddon())\n  .resolve(resolver => resolver\n    // monitor every request…\n    .perfs(console.log)\n    // automatically parse and return json…\n    .json()\n  )\n\n const myJson = await w.url(\"http://a.com\").get()\n // Equivalent to:\n // w.url(\"http://a.com\")\n //  .get()\n //  <- the resolver chain is automatically injected here !\n //  .perfs(console.log)\n //  .json()\n ",
        "params": [
          {
            "name": "resolver",
            "description": "- Resolver callback"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Programs a resolver to automatically perform response chain tasks."
    },
    {
      "name": "core.middlewares",
      "parameters": [
        {
          "name": "middlewares",
          "type": "ConfiguredMiddleware[]",
          "optional": false
        },
        {
          "name": "clear",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Add middlewares to intercept a request before being sent.\n\njavascript\n// A simple delay middleware.\nconst delayMiddleware = delay => next => (url, opts) => {\n  return new Promise(res => setTimeout(() => res(next(url, opts)), delay))\n}\n\n// The request will be delayed by 1 second.\nwretch(\"...\").middlewares([\n  delayMiddleware(1000)\n]).get().res()\n",
        "params": [],
        "deprecated": false
      },
      "xaiDescription": "Adds middlewares to intercept and modify requests before sending."
    },
    {
      "name": "core.body",
      "parameters": [
        {
          "name": "contents",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Sets the request body with any content.\n\njs\nwretch(\"...\").body(\"hello\").put();\n// Note that calling put/post methods with a non-object argument is equivalent:\nwretch(\"...\").put(\"hello\");\n",
        "params": [
          {
            "name": "contents",
            "description": "- The body contents"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Sets the request body with any content."
    },
    {
      "name": "core.json",
      "parameters": [
        {
          "name": "jsObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "contentType",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Sets the \"Content-Type\" header, stringifies an object and sets the request body.\n\njs\nconst jsonObject = { a: 1, b: 2, c: 3 };\nwretch(\"...\").json(jsonObject).post();\n// Note that calling an 'http verb' method with an object argument is equivalent:\nwretch(\"...\").post(jsonObject);\n",
        "params": [
          {
            "name": "jsObject",
            "description": "- An object which will be serialized into a JSON"
          },
          {
            "name": "contentType",
            "description": "- A custom content type."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Sets the Content-Type header, stringifies an object, and sets the request body."
    },
    {
      "name": "core.fetch",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": true
        },
        {
          "name": "url",
          "type": "string",
          "optional": true
        },
        {
          "name": "body",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "WretchResponseChain<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Sends the request using the accumulated fetch options.\n\nCan be used to replay requests.\n\njs\nconst reAuthOn401 = wretch()\n.catcher(401, async (error, request) => {\n  // Renew credentials\n  const token = await wretch(\"/renewtoken\").get().text();\n  storeToken(token);\n  // Replay the original request with new credentials\n  return request.auth(token).fetch().unauthorized((err) => {\n    throw err;\n  }).json();\n});\n\nreAuthOn401\n.get(\"/resource\")\n.json() // <- Will only be called for the original promise\n.then(callback); // <- Will be called for the original OR the replayed promise result\n",
        "params": [
          {
            "name": "method",
            "description": "- The HTTP method to use"
          },
          {
            "name": "url",
            "description": "- Some url to append"
          },
          {
            "name": "body",
            "description": "- Set the body. Behaviour varies depending on the argument type, an object is considered as json."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Sends the request using accumulated fetch options."
    },
    {
      "name": "CATCHER_FALLBACK.__@toPrimitive@20931",
      "parameters": [
        {
          "name": "hint",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Converts a Symbol object to a symbol.",
        "deprecated": false,
        "xaiDescription": "Converts Symbol to symbol using hint."
      }
    },
    {
      "name": "core.__@iterator@20988",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "Provides iteration over strings."
      }
    },
    {
      "name": "default.__@iterator@26008",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "Default string iterator."
      }
    },
    {
      "name": "config.__@iterator@26008",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "Configures string iteration."
      }
    },
    {
      "name": "__@iterator@26156",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "General string iterator."
      }
    },
    {
      "name": "JSON_MIME.__@iterator@26156",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "Iterates JSON MIME strings."
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.__@iterator@26156",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "Iterates content type headers."
      }
    },
    {
      "name": "__@toPrimitive@26292",
      "parameters": [
        {
          "name": "hint",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Converts a Symbol object to a symbol.",
        "deprecated": false,
        "xaiDescription": "Converts Symbol to symbol using hint."
      }
    },
    {
      "name": "FETCH_ERROR.__@iterator@26156",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "Iterates fetch error strings."
      }
    },
    {
      "name": "FETCH_ERROR.__@toPrimitive@26292",
      "parameters": [
        {
          "name": "hint",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Converts a Symbol object to a symbol.",
        "deprecated": false,
        "xaiDescription": "Converts fetch error to symbol using hint."
      }
    },
    {
      "name": "CATCHER_FALLBACK.__@iterator@26156",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "Iterates catcher fallback strings."
      }
    },
    {
      "name": "CATCHER_FALLBACK.__@toPrimitive@26292",
      "parameters": [
        {
          "name": "hint",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Converts a Symbol object to a symbol.",
        "deprecated": false,
        "xaiDescription": "Converts catcher fallback to symbol using hint."
      }
    },
    {
      "name": "core.__@iterator@26349",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "Core string iterator."
      }
    },
    {
      "name": "default.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "default.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "default.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "default.__@iterator@2304",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "default.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns the character at the specified index in the string."
      }
    },
    {
      "name": "default.polyfill",
      "parameters": [
        {
          "name": "p",
          "type": "\"fetch\"",
          "optional": false
        },
        {
          "name": "doThrow",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "{ (input: RequestInfo | URL, init?: RequestInit): Promise<Response>; (input: string | Request | URL, init?: RequestInit): Promise<...>; }",
      "jsdoc": {
        "xaiDescription": "Adds polyfill for the specified function, throws error if not supported."
      }
    },
    {
      "name": "config.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "config.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "config.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "config.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "config.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "config.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "config.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "config.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "config.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "config.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "config.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default is \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "__@iterator@2452",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Returns the character at the specified index in the string."
    },
    {
      "name": "JSON_MIME.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the searchValue is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of searchValue is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end. If this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end. If end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default is \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "JSON_MIME.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.__@iterator@2452",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "JSON_MIME.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Returns the character at the specified index."
    },
    {
      "name": "CONTENT_TYPE_HEADER.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes trailing whitespace and line terminators from a string.",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Trims right side of string."
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Finds all matches of a regex in a string."
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.__@iterator@2452",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "Provides iteration over string characters."
      }
    },
    {
      "name": "CONTENT_TYPE_HEADER.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "xaiDescription": "Accesses character at given index."
      }
    },
    {
      "name": "__@toPrimitive@2588",
      "parameters": [
        {
          "name": "hint",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Converts a Symbol object to a symbol.",
        "deprecated": false,
        "xaiDescription": "Converts object to primitive value."
      }
    },
    {
      "name": "FETCH_ERROR.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "deprecated": false,
        "xaiDescription": "Converts object to string."
      }
    },
    {
      "name": "FETCH_ERROR.valueOf",
      "parameters": [],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false,
        "xaiDescription": "Gets primitive value of object."
      }
    },
    {
      "name": "FETCH_ERROR.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Gets character at given position."
      }
    },
    {
      "name": "FETCH_ERROR.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Gets Unicode value of character."
      }
    },
    {
      "name": "FETCH_ERROR.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Joins multiple strings into one."
      }
    },
    {
      "name": "FETCH_ERROR.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Finds first occurrence of substring."
      }
    },
    {
      "name": "FETCH_ERROR.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Finds last occurrence of substring."
      }
    },
    {
      "name": "FETCH_ERROR.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Compares strings based on locale."
      }
    },
    {
      "name": "FETCH_ERROR.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Matches string against regex, returns array."
      }
    },
    {
      "name": "FETCH_ERROR.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Replaces text in string."
      }
    },
    {
      "name": "FETCH_ERROR.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Finds first regex match in string."
      }
    },
    {
      "name": "FETCH_ERROR.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Extracts section of string."
      }
    },
    {
      "name": "FETCH_ERROR.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Splits string into array of substrings."
      }
    },
    {
      "name": "FETCH_ERROR.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Extracts substring from string."
      }
    },
    {
      "name": "FETCH_ERROR.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false,
        "xaiDescription": "Converts string to lowercase."
      }
    },
    {
      "name": "FETCH_ERROR.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false,
        "xaiDescription": "Converts string to lowercase with locale."
      }
    },
    {
      "name": "FETCH_ERROR.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false,
        "xaiDescription": "Converts string to uppercase."
      }
    },
    {
      "name": "FETCH_ERROR.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false,
        "xaiDescription": "Converts string to uppercase with locale."
      }
    },
    {
      "name": "FETCH_ERROR.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false,
        "xaiDescription": "Removes whitespace from string ends."
      }
    },
    {
      "name": "FETCH_ERROR.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true,
        "xaiDescription": "Extracts substring from string."
      }
    },
    {
      "name": "FETCH_ERROR.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false,
        "xaiDescription": "Gets Unicode code point at position."
      }
    },
    {
      "name": "FETCH_ERROR.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Checks if string contains substring."
      }
    },
    {
      "name": "FETCH_ERROR.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
        "deprecated": false,
        "xaiDescription": "Checks if string ends with substring."
      }
    },
    {
      "name": "FETCH_ERROR.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default is \"NFC\""
          }
        ],
        "deprecated": false,
        "xaiDescription": "Normalizes string according to Unicode."
      }
    },
    {
      "name": "FETCH_ERROR.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Repeats string a specified number of times."
      }
    },
    {
      "name": "FETCH_ERROR.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
        "deprecated": false,
        "xaiDescription": "Checks if string starts with substring."
      }
    },
    {
      "name": "FETCH_ERROR.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true,
        "xaiDescription": "Creates HTML anchor element."
      }
    },
    {
      "name": "FETCH_ERROR.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML big element."
      }
    },
    {
      "name": "FETCH_ERROR.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML blink element."
      }
    },
    {
      "name": "FETCH_ERROR.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML bold element."
      }
    },
    {
      "name": "FETCH_ERROR.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML fixed-width element."
      }
    },
    {
      "name": "FETCH_ERROR.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML font element with color."
      }
    },
    {
      "name": "FETCH_ERROR.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML font element with size."
      }
    },
    {
      "name": "FETCH_ERROR.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML italics element."
      }
    },
    {
      "name": "FETCH_ERROR.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML link element."
      }
    },
    {
      "name": "FETCH_ERROR.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML small element."
      }
    },
    {
      "name": "FETCH_ERROR.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML strike element."
      }
    },
    {
      "name": "FETCH_ERROR.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML subscript element."
      }
    },
    {
      "name": "FETCH_ERROR.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Creates HTML superscript element."
      }
    },
    {
      "name": "FETCH_ERROR.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Pads string at start to given length."
      }
    },
    {
      "name": "FETCH_ERROR.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Pads string at end to given length."
      }
    },
    {
      "name": "FETCH_ERROR.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false,
        "xaiDescription": "Removes trailing whitespace from string."
      }
    },
    {
      "name": "FETCH_ERROR.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false,
        "xaiDescription": "Removes leading whitespace from string."
      }
    },
    {
      "name": "FETCH_ERROR.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Removes leading whitespace from string."
      }
    },
    {
      "name": "FETCH_ERROR.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true,
        "xaiDescription": "Removes trailing whitespace from string."
      }
    },
    {
      "name": "FETCH_ERROR.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Finds all matches of regex in string."
      }
    },
    {
      "name": "FETCH_ERROR.__@iterator@2452",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false,
        "xaiDescription": "Provides iteration over string characters."
      }
    },
    {
      "name": "FETCH_ERROR.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "xaiDescription": "Accesses character at given index."
      }
    },
    {
      "name": "FETCH_ERROR.__@toPrimitive@2588",
      "parameters": [
        {
          "name": "hint",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Converts a Symbol object to a symbol.",
        "deprecated": false,
        "xaiDescription": "Converts object to primitive value."
      }
    },
    {
      "name": "CATCHER_FALLBACK.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "deprecated": false,
        "xaiDescription": "Converts object to string."
      }
    },
    {
      "name": "CATCHER_FALLBACK.valueOf",
      "parameters": [],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false,
        "xaiDescription": "Gets primitive value of object."
      }
    },
    {
      "name": "CATCHER_FALLBACK.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Gets character at given position."
      }
    },
    {
      "name": "CATCHER_FALLBACK.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Gets Unicode value of character."
      }
    },
    {
      "name": "CATCHER_FALLBACK.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Joins multiple strings into one."
      }
    },
    {
      "name": "CATCHER_FALLBACK.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Finds first occurrence of substring."
      }
    },
    {
      "name": "CATCHER_FALLBACK.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Finds last occurrence of substring."
      }
    },
    {
      "name": "CATCHER_FALLBACK.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Compares strings based on locale."
      }
    },
    {
      "name": "CATCHER_FALLBACK.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Matches string against regex, returns array."
      }
    },
    {
      "name": "CATCHER_FALLBACK.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Replaces text in string."
      }
    },
    {
      "name": "CATCHER_FALLBACK.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Finds first regex match in string."
      }
    },
    {
      "name": "CATCHER_FALLBACK.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end. If this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Extracts section of string."
      }
    },
    {
      "name": "CATCHER_FALLBACK.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Splits string into array of substrings."
      }
    },
    {
      "name": "CATCHER_FALLBACK.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "CATCHER_FALLBACK.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.__@iterator@2452",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "CATCHER_FALLBACK.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "xaiDescription": "Gets character at given index in string."
      }
    },
    {
      "name": "CATCHER_FALLBACK.__@toPrimitive@2588",
      "parameters": [
        {
          "name": "hint",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "symbol",
      "jsdoc": {
        "description": "Converts a Symbol object to a symbol.",
        "deprecated": false
      }
    },
    {
      "name": "addon",
      "parameters": [
        {
          "name": "addon",
          "type": "WretchAddon<W, R>",
          "optional": false
        }
      ],
      "returnType": "W & Wretch<W, R, undefined>",
      "jsdoc": {
        "description": "Register an Addon to enhance the wretch or response objects.",
        "params": [
          {
            "name": "addon",
            "description": "- A Wretch addon to register"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Adds functionality to Wretch instance."
      }
    },
    {
      "name": "url",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "replace",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Appends or replaces the url.",
        "params": [
          {
            "name": "url",
            "description": "- Url segment"
          },
          {
            "name": "replace",
            "description": "- If true, replaces the current url instead of appending"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Modifies URL for Wretch request."
      }
    },
    {
      "name": "headers",
      "parameters": [
        {
          "name": "headerValues",
          "type": "HeadersInit",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Sets the request headers.",
        "params": [
          {
            "name": "headerValues",
            "description": "- An object containing header keys and values"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Configures HTTP headers for request."
      }
    },
    {
      "name": "accept",
      "parameters": [
        {
          "name": "headerValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Shortcut to set the \"Accept\" header.",
        "params": [
          {
            "name": "headerValue",
            "description": "- Header value"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Sets 'Accept' header for request."
      }
    },
    {
      "name": "content",
      "parameters": [
        {
          "name": "headerValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Shortcut to set the \"Content-Type\" header.",
        "params": [
          {
            "name": "headerValue",
            "description": "- Header value"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Sets 'Content-Type' header for request."
      }
    },
    {
      "name": "auth",
      "parameters": [
        {
          "name": "headerValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Shortcut to set the \"Authorization\" header.",
        "params": [
          {
            "name": "headerValue",
            "description": "- Header value"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Sets 'Authorization' header for request."
      }
    },
    {
      "name": "catcher",
      "parameters": [
        {
          "name": "errorId",
          "type": "string | number | symbol",
          "optional": false
        },
        {
          "name": "catcher",
          "type": "(error: WretchError, originalRequest: Wretch<unknown, unknown, undefined>) => any",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Adds a catcher which will be called on every subsequent request error.",
        "params": [
          {
            "name": "errorId",
            "description": "- Error code or name"
          },
          {
            "name": "catcher",
            "description": "- The catcher method"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Handles specific errors in Wretch requests."
      }
    },
    {
      "name": "catcherFallback",
      "parameters": [
        {
          "name": "catcher",
          "type": "(error: WretchError, originalRequest: Wretch<unknown, unknown, undefined>) => any",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "A fallback catcher that will be called for any error thrown - if uncaught by other means.",
        "params": [
          {
            "name": "catcher",
            "description": "- The catcher method"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Handles uncaught errors in Wretch requests."
      }
    },
    {
      "name": "defer",
      "parameters": [
        {
          "name": "callback",
          "type": "WretchDeferredCallback<unknown, unknown, undefined>",
          "optional": false
        },
        {
          "name": "clear",
          "type": "Clear",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Defer one or multiple request chain methods that will get called just before the request is sent.",
        "params": [
          {
            "name": "callback",
            "description": "- Exposes the wretch instance, url and options to program deferred methods."
          },
          {
            "name": "clear",
            "description": "- Replace the existing deferred methods if true instead of pushing to the existing list."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Delays execution of Wretch request methods."
      }
    },
    {
      "name": "resolve",
      "parameters": [
        {
          "name": "resolver",
          "type": "(chain: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, Clear extends true ? undefined : undefined>) => ResolverReturn",
          "optional": false
        },
        {
          "name": "clear",
          "type": "Clear",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, ResolverReturn>",
      "jsdoc": {
        "description": "Programs a resolver to perform response chain tasks automatically.",
        "params": [
          {
            "name": "resolver",
            "description": "- Resolver callback"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Automates response handling in Wretch requests."
      }
    },
    {
      "name": "middlewares",
      "parameters": [
        {
          "name": "middlewares",
          "type": "ConfiguredMiddleware[]",
          "optional": false
        },
        {
          "name": "clear",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Add middlewares to intercept a request before being sent.",
        "params": [],
        "deprecated": false,
        "xaiDescription": "Intercepts and modifies Wretch requests."
      }
    },
    {
      "name": "body",
      "parameters": [
        {
          "name": "contents",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Sets the request body with any content.",
        "params": [
          {
            "name": "contents",
            "description": "- The body contents"
          }
        ],
        "deprecated": false,
        "xaiDescription": "Sets the body content for Wretch request."
      }
    },
    {
      "name": "json",
      "parameters": [
        {
          "name": "jsObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "contentType",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Wretch<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Sets the \"Content-Type\" header, stringifies an object and sets the request body.",
        "params": [
          {
            "name": "jsObject",
            "description": "- An object which will be serialized into a JSON"
          },
          {
            "name": "contentType",
            "description": "- A custom content type."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Prepares JSON data for Wretch request body."
      }
    },
    {
      "name": "fetch",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": true
        },
        {
          "name": "url",
          "type": "string",
          "optional": true
        },
        {
          "name": "body",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "WretchResponseChain<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Sends the request using the accumulated fetch options.\n\nCan be used to replay requests.\n\njs\nconst reAuthOn401 = wretch()\n.catcher(401, async (error, request) => {\n  // Renew credentials\n  const token = await wretch(\"/renewtoken\").get().text();\n  storeToken(token);\n  // Replay the original request with new credentials\n  return request.auth(token).fetch().unauthorized((err) => {\n    throw err;\n  }).json();\n});\n\nreAuthOn401\n.get(\"/resource\")\n.json() // <- Will only be called for the original promise\n.then(callback); // <- Will be called for the original OR the replayed promise result\n",
        "params": [
          {
            "name": "method",
            "description": "- The HTTP method to use"
          },
          {
            "name": "url",
            "description": "- Some url to append"
          },
          {
            "name": "body",
            "description": "- Set the body. Behaviour varies depending on the argument type, an object is considered as json."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "get",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "WretchResponseChain<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Performs a [GET](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request.\n\njs\nwretch(\"...\").get();\n",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "delete",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "WretchResponseChain<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Performs a [DELETE](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request.\n\njs\nwretch(\"...\").delete();\n",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "put",
      "parameters": [
        {
          "name": "body",
          "type": "any",
          "optional": true
        },
        {
          "name": "url",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "WretchResponseChain<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Performs a [PUT](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) request.\n\njs\nwretch(\"...\").json({...}).put()\n",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "post",
      "parameters": [
        {
          "name": "body",
          "type": "any",
          "optional": true
        },
        {
          "name": "url",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "WretchResponseChain<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Performs a [POST](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request.\n\njs\nwretch(\"...\").json({...}).post()\n",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "patch",
      "parameters": [
        {
          "name": "body",
          "type": "any",
          "optional": true
        },
        {
          "name": "url",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "WretchResponseChain<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Performs a [PATCH](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) request.\n\njs\nwretch(\"...\").json({...}).patch()\n",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "head",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "WretchResponseChain<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Performs a [HEAD](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD) request.\n\njs\nwretch(\"...\").head();\n",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "opts",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "WretchResponseChain<unknown, unknown, undefined>",
      "jsdoc": {
        "description": "Performs an [OPTIONS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS) request.\n\njs\nwretch(\"...\").opts();\n",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "core.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "core.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "core.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "core.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "core.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "core.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "core.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "core.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "core.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "core.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "core.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "core.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "core.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "core.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "core.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "core.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "core.__@iterator@2645",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "core.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Returns the character at the specified index in the string."
    },
    {
      "name": "core.polyfill",
      "parameters": [
        {
          "name": "p",
          "type": "\"fetch\"",
          "optional": false
        },
        {
          "name": "doThrow",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "{ (input: RequestInfo | URL, init?: RequestInit): Promise<Response>; (input: string | Request | URL, init?: RequestInit): Promise<...>; }",
      "jsdoc": null,
      "xaiDescription": "Polyfills the fetch function if not supported, throws if doThrow is true."
    },
    {
      "name": "core.clear",
      "parameters": [],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Clears the internal state of the object."
    },
    {
      "name": "core.delete",
      "parameters": [
        {
          "name": "key",
          "type": "string | number | symbol",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "",
        "params": [],
        "returns": "true if an element in the Map existed and has been removed, or false if the element does not exist.",
        "deprecated": false
      }
    },
    {
      "name": "core.forEach",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(value: (error: WretchError, originalRequest: Wretch<unknown, unknown, undefined>) => void, key: string | number | symbol, map: Map<string | number | symbol, (error: WretchError, originalRequest: Wretch<...>) => void>) => void",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Executes a provided function once per each key/value pair in the Map, in insertion order.",
        "deprecated": false
      }
    },
    {
      "name": "core.get",
      "parameters": [
        {
          "name": "key",
          "type": "string | number | symbol",
          "optional": false
        }
      ],
      "returnType": "(error: WretchError, originalRequest: Wretch<unknown, unknown, undefined>) => void",
      "jsdoc": {
        "description": "Returns a specified element from the Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map.",
        "params": [],
        "returns": "Returns the element associated with the specified key. If no element is associated with the specified key, undefined is returned.",
        "deprecated": false
      }
    },
    {
      "name": "core.has",
      "parameters": [
        {
          "name": "key",
          "type": "string | number | symbol",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "",
        "params": [],
        "returns": "boolean indicating whether an element with the specified key exists or not.",
        "deprecated": false
      }
    },
    {
      "name": "core.set",
      "parameters": [
        {
          "name": "key",
          "type": "string | number | symbol",
          "optional": false
        },
        {
          "name": "value",
          "type": "(error: WretchError, originalRequest: Wretch<unknown, unknown, undefined>) => void",
          "optional": false
        }
      ],
      "returnType": "Map<string | number | symbol, (error: WretchError, originalRequest: Wretch<unknown, unknown, undefined>) => void>",
      "jsdoc": {
        "description": "Adds a new element with a specified key and value to the Map. If an element with the same key already exists, the element will be updated.",
        "deprecated": false
      }
    },
    {
      "name": "core.entries",
      "parameters": [],
      "returnType": "MapIterator<[string | number | symbol, (error: WretchError, originalRequest: Wretch<unknown, unknown, undefined>) => void]>",
      "jsdoc": {
        "description": "Returns an iterable of key, value pairs for every entry in the map.",
        "deprecated": false
      }
    },
    {
      "name": "core.keys",
      "parameters": [],
      "returnType": "MapIterator<string | number | symbol>",
      "jsdoc": {
        "description": "Returns an iterable of keys in the map",
        "deprecated": false
      },
      "xaiDescription": "Retrieves keys from a map object."
    },
    {
      "name": "core.values",
      "parameters": [],
      "returnType": "MapIterator<(error: WretchError, originalRequest: Wretch<unknown, unknown, undefined>) => void>",
      "jsdoc": {
        "description": "Returns an iterable of values in the map",
        "deprecated": false
      },
      "xaiDescription": "Retrieves values from a map object."
    },
    {
      "name": "core.toLocaleString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
        "deprecated": false
      },
      "xaiDescription": "Converts array elements to localized string representation."
    },
    {
      "name": "core.pop",
      "parameters": [],
      "returnType": "(resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any",
      "jsdoc": {
        "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
        "deprecated": false
      },
      "xaiDescription": "Removes and returns the last element of an array."
    },
    {
      "name": "core.push",
      "parameters": [
        {
          "name": "items",
          "type": "((resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any)[]",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Appends new elements to the end of an array, and returns the new length of the array.",
        "params": [
          {
            "name": "items",
            "description": "New elements to add to the array."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Adds elements to the end of an array."
    },
    {
      "name": "core.join",
      "parameters": [
        {
          "name": "separator",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Adds all the elements of an array into a string, separated by the specified separator string.",
        "params": [
          {
            "name": "separator",
            "description": "A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Concatenates array elements into a string with a separator."
    },
    {
      "name": "core.reverse",
      "parameters": [],
      "returnType": "((resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any)[]",
      "jsdoc": {
        "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
        "deprecated": false
      },
      "xaiDescription": "Reverses the order of elements in an array."
    },
    {
      "name": "core.shift",
      "parameters": [],
      "returnType": "(resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any",
      "jsdoc": {
        "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
        "deprecated": false
      },
      "xaiDescription": "Removes and returns the first element of an array."
    },
    {
      "name": "core.sort",
      "parameters": [
        {
          "name": "compareFn",
          "type": "(a: (resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any, b: (resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<...>) => any) => number",
          "optional": true
        }
      ],
      "returnType": "((resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any)[]",
      "jsdoc": {
        "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.",
        "params": [
          {
            "name": "compareFn",
            "description": "Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, UTF-16 code unit order.\nts\n[11,2,22,1].sort((a, b) => a - b)\n"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Sorts an array in place, optionally using a comparison function."
    },
    {
      "name": "core.splice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "deleteCount",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "((resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any)[]",
      "jsdoc": {
        "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based location in the array from which to start removing elements."
          },
          {
            "name": "deleteCount",
            "description": "The number of elements to remove."
          }
        ],
        "returns": "An array containing the elements that were deleted.",
        "deprecated": false
      },
      "xaiDescription": "Removes and/or adds elements to an array."
    },
    {
      "name": "core.unshift",
      "parameters": [
        {
          "name": "items",
          "type": "((resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any)[]",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Inserts new elements at the start of an array, and returns the new length of the array.",
        "params": [
          {
            "name": "items",
            "description": "Elements to insert at the start of the array."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Adds elements to the beginning of an array."
    },
    {
      "name": "core.every",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: (resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any, index: number, array: ((resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<...>) => any)[]) => value is S",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether all the members of an array satisfy the specified test.",
        "params": [
          {
            "name": "predicate",
            "description": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Checks if all elements pass the test implemented by the provided function."
    },
    {
      "name": "core.some",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: (resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any, index: number, array: ((resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<...>) => any)[]) => unknown",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether the specified callback function returns true for any element of an array.",
        "params": [
          {
            "name": "predicate",
            "description": "A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Checks if at least one element passes the test implemented by the provided function."
    },
    {
      "name": "core.map",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(value: (resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any, index: number, array: ((resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<...>) => any)[]) => U",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "U[]",
      "jsdoc": {
        "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
        "params": [
          {
            "name": "callbackfn",
            "description": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Creates a new array with the results of calling a provided function on every element."
    },
    {
      "name": "core.filter",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: (resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any, index: number, array: ((resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<...>) => any)[]) => value is S",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "S[]",
      "jsdoc": {
        "description": "Returns the elements of an array that meet the condition specified in a callback function.",
        "params": [
          {
            "name": "predicate",
            "description": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Creates a new array with all elements that pass the test implemented by the provided function."
    },
    {
      "name": "core.reduce",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(previousValue: (resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any, currentValue: (resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<...>) => any, currentIndex: number, array: ((resolver: WretchResponseChain<...>...",
          "optional": false
        }
      ],
      "returnType": "(resolver: WretchResponseChain<unknown, unknown, undefined>, originalRequest: Wretch<unknown, unknown, undefined>) => any",
      "jsdoc": {
        "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
        "params": [
          {
            "name": "callbackfn",
            "description": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
          },
          {
            "name": "initialValue",
            "description": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Reduces the array to a single value using the provided callback function."
    }
  ],
  "enums": [],
  "types": [
    {
      "name": "AbortWretch",
      "type": "AbortWretch",
      "properties": [
        {
          "name": "signal",
          "type": "<T extends AbortWretch, C, R>(this: T & Wretch<T, C, R>, controller: AbortController) => AbortWretch",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Manages abort signals for Wretch requests. Uses AbortController."
      },
      "isExported": false
    },
    {
      "name": "AbortResolver",
      "type": "AbortResolver",
      "properties": [
        {
          "name": "setTimeout",
          "type": "<T, C extends AbortResolver, R>(this: C & WretchResponseChain<T, C, R>, time: number, controller?: AbortController) => AbortResolver",
          "optional": false
        },
        {
          "name": "controller",
          "type": "<T, C extends AbortResolver, R>(this: C & WretchResponseChain<T, C, R>) => [any, AbortResolver]",
          "optional": false
        },
        {
          "name": "onAbort",
          "type": "<T, C extends AbortResolver, R>(this: C & WretchResponseChain<T, C, R>, cb: WretchErrorCallback<T, C, R>) => AbortResolver",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Handles abort operations for Wretch responses. Uses AbortController."
      },
      "isExported": false
    },
    {
      "name": "BasicAuthAddon",
      "type": "BasicAuthAddon",
      "properties": [
        {
          "name": "basicAuth",
          "type": "<T extends BasicAuthAddon, C, R>(this: T & Wretch<T, C, R>, username: string, password: string) => BasicAuthAddon",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Adds basic authentication to Wretch requests."
      },
      "isExported": false
    },
    {
      "name": "FormDataAddon",
      "type": "FormDataAddon",
      "properties": [
        {
          "name": "formData",
          "type": "<T extends FormDataAddon, C, R>(this: T & Wretch<T, C, R>, formObject: object, recursive?: boolean | string[]) => FormDataAddon",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Adds FormData support to Wretch requests."
      },
      "isExported": false
    },
    {
      "name": "FormUrlAddon",
      "type": "FormUrlAddon",
      "properties": [
        {
          "name": "formUrl",
          "type": "<T extends FormUrlAddon, C, R>(this: T & Wretch<T, C, R>, input: string | object) => FormUrlAddon",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Adds form URL encoding to Wretch requests."
      },
      "isExported": false
    },
    {
      "name": "PerfCallback",
      "type": "PerfCallback",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Callback for performance metrics in Wretch."
      },
      "isExported": false
    },
    {
      "name": "PerfsAddon",
      "type": "PerfsAddon",
      "properties": [
        {
          "name": "perfs",
          "type": "<T, C extends PerfsAddon, R>(this: C & WretchResponseChain<T, C, R>, cb?: PerfCallback) => PerfsAddon",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Adds performance tracking to Wretch responses."
      },
      "isExported": false
    },
    {
      "name": "ProgressResolver",
      "type": "ProgressResolver",
      "properties": [
        {
          "name": "progress",
          "type": "<T, C extends ProgressResolver, R>(this: C & WretchResponseChain<T, C, R>, onProgress: (loaded: number, total: number) => void) => ProgressResolver",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Tracks progress of Wretch requests."
      },
      "isExported": false
    },
    {
      "name": "QueryStringAddon",
      "type": "QueryStringAddon",
      "properties": [
        {
          "name": "query",
          "type": "<T extends QueryStringAddon, C, R>(this: T & Wretch<T, C, R>, qp: string | object, replace?: boolean, omitUndefinedOrNullValues?: boolean) => QueryStringAddon",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Adds query string manipulation to Wretch requests."
      },
      "isExported": false
    },
    {
      "name": "DedupeSkipFunction",
      "type": "DedupeSkipFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to skip deduplication."
      },
      "isExported": false
    },
    {
      "name": "DedupeKeyFunction",
      "type": "DedupeKeyFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to generate deduplication key."
      },
      "isExported": false
    },
    {
      "name": "DedupeResolverFunction",
      "type": "DedupeResolverFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to resolve deduplicated responses."
      },
      "isExported": false
    },
    {
      "name": "DedupeOptions",
      "type": "DedupeOptions",
      "properties": [
        {
          "name": "skip",
          "type": "DedupeSkipFunction",
          "optional": true
        },
        {
          "name": "key",
          "type": "DedupeKeyFunction",
          "optional": true
        },
        {
          "name": "resolver",
          "type": "DedupeResolverFunction",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Options for request deduplication."
      },
      "isExported": false
    },
    {
      "name": "DedupeMiddleware",
      "type": "DedupeMiddleware",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "## Dedupe middleware\n\n#### Prevents having multiple identical requests on the fly at the same time.\n\n**Options**\n\n- *skip* `(url, opts) => boolean`\n\n> If skip returns true, then the dedupe check is skipped.\n\n- *key* `(url, opts) => string`\n\n> Returns a key that is used to identify the request.\n\n- *resolver* `(response: Response) => Response`\n\n> This function is called when resolving the fetch response from duplicate calls.\nBy default it clones the response to allow reading the body from multiple sources.",
        "deprecated": false,
        "xaiDescription": "Middleware to deduplicate requests."
      },
      "isExported": false
    },
    {
      "name": "DelayMiddleware",
      "type": "DelayMiddleware",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "##  Delay middleware\n\n### Delays the request by a specific amount of time.\n\n**Options**\n\n- *time* `milliseconds`\n\n> The request will be delayed by that amount of time.",
        "deprecated": false,
        "xaiDescription": "Middleware to delay requests."
      },
      "isExported": false
    },
    {
      "name": "DelayRampFunction",
      "type": "DelayRampFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to adjust delay times."
      },
      "isExported": false
    },
    {
      "name": "UntilFunction",
      "type": "UntilFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to determine when to stop retrying."
      },
      "isExported": false
    },
    {
      "name": "OnRetryFunctionResponse",
      "type": "{ url?: string; options?: WretchOptions; }",
      "properties": [
        {
          "name": "url",
          "type": "string",
          "optional": true
        },
        {
          "name": "options",
          "type": "WretchOptions",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Response object for retry function."
      },
      "isExported": false
    },
    {
      "name": "OnRetryFunction",
      "type": "OnRetryFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function called on retry attempts."
      },
      "isExported": false
    },
    {
      "name": "SkipFunction",
      "type": "SkipFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to determine if retry should be skipped."
      },
      "isExported": false
    },
    {
      "name": "RetryOptions",
      "type": "RetryOptions",
      "properties": [
        {
          "name": "delayTimer",
          "type": "number",
          "optional": true
        },
        {
          "name": "delayRamp",
          "type": "DelayRampFunction",
          "optional": true
        },
        {
          "name": "maxAttempts",
          "type": "number",
          "optional": true
        },
        {
          "name": "until",
          "type": "UntilFunction",
          "optional": true
        },
        {
          "name": "onRetry",
          "type": "OnRetryFunction",
          "optional": true
        },
        {
          "name": "retryOnNetworkError",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "resolveWithLatestResponse",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "skip",
          "type": "SkipFunction",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Options for request retry mechanism."
      },
      "isExported": false
    },
    {
      "name": "RetryMiddleware",
      "type": "RetryMiddleware",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "## Retry middleware\n\n#### Retries a request multiple times in case of an error (or until a custom condition is true).\n\n> **💡 By default, the request will be retried if the response status is not in the 2xx range.**\n>\n> js\n> // Replace the default condition with a custom one to avoid retrying on 4xx errors:\n> until: (response, error) => response && (response.ok || (response.status >= 400 && response.status < 500))\n> \n\nts\nimport wretch from 'wretch'\nimport { retry } from 'wretch/middlewares'\n\nwretch().middlewares([\n  retry({\n    // Options - defaults below\n    delayTimer: 500,\n    delayRamp: (delay, nbOfAttempts) => delay * nbOfAttempts,\n    maxAttempts: 10,\n    until: (response, error) => response && response.ok,\n    onRetry: null,\n    retryOnNetworkError: false,\n    resolveWithLatestResponse: false,\n    skip: undefined\n  })\n])\n\n// You can also return a Promise, which is useful if you want to inspect the body:\nwretch().middlewares([\n  retry({\n    until: response =>\n      response.clone().json().then(body =>\n        body.field === 'something'\n      )\n  })\n])\n",
        "deprecated": false,
        "xaiDescription": "Middleware to retry failed requests."
      },
      "isExported": false
    },
    {
      "name": "ThrottlingCacheSkipFunction",
      "type": "ThrottlingCacheSkipFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to skip throttling cache."
      },
      "isExported": false
    },
    {
      "name": "ThrottlingCacheKeyFunction",
      "type": "ThrottlingCacheKeyFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to generate throttling cache key."
      },
      "isExported": false
    },
    {
      "name": "ThrottlingCacheClearFunction",
      "type": "ThrottlingCacheClearFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to clear throttling cache."
      },
      "isExported": false
    },
    {
      "name": "ThrottlingCacheInvalidateFunction",
      "type": "ThrottlingCacheInvalidateFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to invalidate throttling cache."
      },
      "isExported": false
    },
    {
      "name": "ThrottlingCacheConditionFunction",
      "type": "ThrottlingCacheConditionFunction",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Function to check throttling cache condition."
      },
      "isExported": false
    },
    {
      "name": "ThrottlingCacheOptions",
      "type": "ThrottlingCacheOptions",
      "properties": [
        {
          "name": "throttle",
          "type": "number",
          "optional": true
        },
        {
          "name": "skip",
          "type": "ThrottlingCacheSkipFunction",
          "optional": true
        },
        {
          "name": "key",
          "type": "ThrottlingCacheKeyFunction",
          "optional": true
        },
        {
          "name": "clear",
          "type": "ThrottlingCacheClearFunction",
          "optional": true
        },
        {
          "name": "invalidate",
          "type": "ThrottlingCacheInvalidateFunction",
          "optional": true
        },
        {
          "name": "condition",
          "type": "ThrottlingCacheConditionFunction",
          "optional": true
        },
        {
          "name": "flagResponseOnCacheHit",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Options for throttling cache mechanism."
      },
      "isExported": false
    },
    {
      "name": "ThrottlingCacheMiddleware",
      "type": "ThrottlingCacheMiddleware",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "## Throttling cache middleware\n\n#### A throttling cache which stores and serves server responses for a certain amount of time.\n\n**Options**\n\n- *throttle* `milliseconds`\n\n> the response will be stored for this amount of time before being deleted from the cache.\n\n- *skip* `(url, opts) => boolean`\n\n> If skip returns true, then the request is performed even if present in the cache.\n\n- *key* `(url, opts) => string`\n\n> Returns a key that is used to identify the request.\n\n- *clear* `(url, opts) => boolean`\n\n> Clears the cache if true.\n\n- *invalidate* `(url, opts) => string | RegExp | null`\n\n> Removes url(s) matching the string/RegExp from the cache.\n\n- *condition* `response => boolean`\n\n> If false then the response will not be added to the cache.\n\n- *flagResponseOnCacheHit* `string`\n\n> If set, a Response returned from the cache whill be flagged with a property name equal to this option.",
        "deprecated": false,
        "xaiDescription": "Middleware for throttling cache."
      },
      "isExported": false
    },
    {
      "name": "Wretch",
      "type": "Wretch<Self, Chain, Resolver>",
      "properties": [
        {
          "name": "_url",
          "type": "string",
          "optional": false
        },
        {
          "name": "_options",
          "type": "WretchOptions",
          "optional": false
        },
        {
          "name": "_config",
          "type": "Config",
          "optional": false
        },
        {
          "name": "_catchers",
          "type": "Map<string | number | symbol, (error: WretchError, originalRequest: Wretch<Self, Chain, Resolver>) => void>",
          "optional": false
        },
        {
          "name": "_resolvers",
          "type": "((resolver: Resolver extends undefined ? Chain & WretchResponseChain<Self, Chain, undefined> : Resolver, originalRequest: Wretch<...>) => any)[]",
          "optional": false
        },
        {
          "name": "_deferred",
          "type": "WretchDeferredCallback<Self, Chain, Resolver>[]",
          "optional": false
        },
        {
          "name": "_middlewares",
          "type": "ConfiguredMiddleware[]",
          "optional": false
        },
        {
          "name": "_addons",
          "type": "WretchAddon<unknown, Chain>[]",
          "optional": false
        },
        {
          "name": "addon",
          "type": "<W, R>(addon: WretchAddon<W, R>) => W & Self & Wretch<Self & W, Chain & R, Resolver>",
          "optional": false
        },
        {
          "name": "errorType",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, method: ErrorType) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "polyfills",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, polyfills: object, replace?: boolean) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "url",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, url: string, replace?: boolean) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "options",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, options: WretchOptions, replace?: boolean) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "headers",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, headerValues: HeadersInit) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "accept",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, headerValue: string) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "content",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, headerValue: string) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "auth",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, headerValue: string) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "catcher",
          "type": "(this: Self & Wretch<...>, errorId: string | number | symbol, catcher: (error: WretchError, originalRequest: Wretch<Self, Chain, Resolver>) => any) => Wretch<...>",
          "optional": false
        },
        {
          "name": "catcherFallback",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, catcher: (error: WretchError, originalRequest: Wretch<Self, Chain, Resolver>) => any) => Wretch<...>",
          "optional": false
        },
        {
          "name": "defer",
          "type": "<Clear extends boolean = false>(this: Self & Wretch<Self, Chain, Resolver>, callback: WretchDeferredCallback<Self, Chain, Resolver>, clear?: Clear) => Wretch<...>",
          "optional": false
        },
        {
          "name": "resolve",
          "type": "<ResolverReturn, Clear extends boolean = false>(this: Self & Wretch<...>, resolver: (chain: Resolver extends undefined ? Chain & WretchResponseChain<Self, Chain, undefined> : Clear extends true ? Chain & WretchResponseChain<...> : Resolver, originalRequest: Self & Wretch<...>) => ResolverReturn, clear?: Clear) => Se...",
          "optional": false
        },
        {
          "name": "middlewares",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, middlewares: ConfiguredMiddleware[], clear?: boolean) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "body",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, contents: any) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "json",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, jsObject: object, contentType?: string) => Wretch<Self, Chain, Resolver>",
          "optional": false
        },
        {
          "name": "fetch",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, method?: string, url?: string, body?: any) => Resolver extends undefined ? Chain & WretchResponseChain<...> : Resolver",
          "optional": false
        },
        {
          "name": "get",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, url?: string) => Resolver extends undefined ? Chain & WretchResponseChain<Self, Chain, Resolver> : Resolver",
          "optional": false
        },
        {
          "name": "delete",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, url?: string) => Resolver extends undefined ? Chain & WretchResponseChain<Self, Chain, Resolver> : Resolver",
          "optional": false
        },
        {
          "name": "put",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, body?: any, url?: string) => Resolver extends undefined ? Chain & WretchResponseChain<...> : Resolver",
          "optional": false
        },
        {
          "name": "post",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, body?: any, url?: string) => Resolver extends undefined ? Chain & WretchResponseChain<...> : Resolver",
          "optional": false
        },
        {
          "name": "patch",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, body?: any, url?: string) => Resolver extends undefined ? Chain & WretchResponseChain<...> : Resolver",
          "optional": false
        },
        {
          "name": "head",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, url?: string) => Resolver extends undefined ? Chain & WretchResponseChain<Self, Chain, Resolver> : Resolver",
          "optional": false
        },
        {
          "name": "opts",
          "type": "(this: Self & Wretch<Self, Chain, Resolver>, url?: string) => Resolver extends undefined ? Chain & WretchResponseChain<Self, Chain, Resolver> : Resolver",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "The Wretch object used to perform easy fetch requests.\n\nts\nimport wretch from \"wretch\"\n\n// Reusable wretch instance\nconst w = wretch(\"https://domain.com\", { mode: \"cors\" })\n\n\nImmutability : almost every method of this class return a fresh Wretch object.",
        "deprecated": false,
        "xaiDescription": "Core Wretch object for easy fetch requests."
      },
      "isExported": false
    },
    {
      "name": "WretchResponseChain",
      "type": "WretchResponseChain<T, Self, R>",
      "properties": [
        {
          "name": "_wretchReq",
          "type": "Wretch<T, Self, R>",
          "optional": false
        },
        {
          "name": "_fetchReq",
          "type": "Promise<WretchResponse>",
          "optional": false
        },
        {
          "name": "_sharedState",
          "type": "Record<any, any>",
          "optional": false
        },
        {
          "name": "res",
          "type": "<Result = WretchResponse>(cb?: (type: WretchResponse) => Result | Promise<Result>) => Promise<Awaited<Result>>",
          "optional": false,
          "xaiDescription": "Processes response with callback, returns promise."
        },
        {
          "name": "json",
          "type": "<Result = unknown>(cb?: (type: any) => Result | Promise<Result>) => Promise<Awaited<Result>>",
          "optional": false,
          "xaiDescription": "Parses JSON response, uses callback, returns promise."
        },
        {
          "name": "blob",
          "type": "<Result = Blob>(cb?: (type: Blob) => Result | Promise<Result>) => Promise<Awaited<Result>>",
          "optional": false,
          "xaiDescription": "Retrieves blob data, uses callback, returns promise."
        },
        {
          "name": "formData",
          "type": "<Result = FormData>(cb?: (type: FormData) => Result | Promise<Result>) => Promise<Awaited<Result>>",
          "optional": false,
          "xaiDescription": "Processes FormData, uses callback, returns promise."
        },
        {
          "name": "arrayBuffer",
          "type": "<Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result | Promise<Result>) => Promise<Awaited<Result>>",
          "optional": false,
          "xaiDescription": "Retrieves array buffer, uses callback, returns promise."
        },
        {
          "name": "text",
          "type": "<Result = string>(cb?: (type: string) => Result | Promise<Result>) => Promise<Awaited<Result>>",
          "optional": false,
          "xaiDescription": "Retrieves text response, uses callback, returns promise."
        },
        {
          "name": "error",
          "type": "(this: Self & WretchResponseChain<T, Self, R>, code: string | number | symbol, cb: WretchErrorCallback<T, Self, R>) => WretchResponseChain<...>",
          "optional": false,
          "xaiDescription": "Handles specific error code, uses callback."
        },
        {
          "name": "badRequest",
          "type": "(this: Self & WretchResponseChain<T, Self, R>, cb: WretchErrorCallback<T, Self, R>) => WretchResponseChain<T, Self, R>",
          "optional": false,
          "xaiDescription": "Handles 400 error, uses callback."
        },
        {
          "name": "unauthorized",
          "type": "(this: Self & WretchResponseChain<T, Self, R>, cb: WretchErrorCallback<T, Self, R>) => WretchResponseChain<T, Self, R>",
          "optional": false,
          "xaiDescription": "Handles 401 error, uses callback."
        },
        {
          "name": "forbidden",
          "type": "(this: Self & WretchResponseChain<T, Self, R>, cb: WretchErrorCallback<T, Self, R>) => WretchResponseChain<T, Self, R>",
          "optional": false,
          "xaiDescription": "Handles 403 error, uses callback."
        },
        {
          "name": "notFound",
          "type": "(this: Self & WretchResponseChain<T, Self, R>, cb: WretchErrorCallback<T, Self, R>) => WretchResponseChain<T, Self, R>",
          "optional": false,
          "xaiDescription": "Handles 404 error, uses callback."
        },
        {
          "name": "timeout",
          "type": "(this: Self & WretchResponseChain<T, Self, R>, cb: WretchErrorCallback<T, Self, R>) => WretchResponseChain<T, Self, R>",
          "optional": false,
          "xaiDescription": "Handles timeout error, uses callback."
        },
        {
          "name": "internalError",
          "type": "(this: Self & WretchResponseChain<T, Self, R>, cb: WretchErrorCallback<T, Self, R>) => WretchResponseChain<T, Self, R>",
          "optional": false,
          "xaiDescription": "Handles 500 error, uses callback."
        },
        {
          "name": "fetchError",
          "type": "(this: Self & WretchResponseChain<T, Self, R>, cb: WretchErrorCallback<T, Self, R>) => WretchResponseChain<T, Self, R>",
          "optional": false,
          "xaiDescription": "Handles fetch errors, uses callback."
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "The resolver interface to chaining catchers and extra methods after the request has been sent.\nUltimately returns a Promise.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Interface for chaining response handlers and catchers."
    },
    {
      "name": "ErrorType",
      "type": "ErrorType",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@4704",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Type representing error handling methods."
    },
    {
      "name": "Config",
      "type": "Config",
      "properties": [
        {
          "name": "options",
          "type": "object",
          "optional": false
        },
        {
          "name": "errorType",
          "type": "ErrorType",
          "optional": false
        },
        {
          "name": "polyfills",
          "type": "object",
          "optional": false
        },
        {
          "name": "polyfill",
          "type": "{ (p: \"fetch\", doThrow?: boolean): { (input: RequestInfo | URL, init?: RequestInit): Promise<Response>; (input: string | Request | URL, init?: RequestInit): Promise<...>; }; (p: \"FormData\", doThrow: boolean, instance: true, form?: HTMLFormElement, submitter?: HTMLElement): FormData; (p: \"FormData\", doThrow?: boolean...",
          "optional": false,
          "xaiDescription": "Provides polyfills for fetch and FormData."
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Configuration object.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Configuration settings for Wretch."
    },
    {
      "name": "WretchOptions",
      "type": "WretchOptions",
      "properties": [
        {
          "name": "body",
          "type": "BodyInit",
          "optional": true
        },
        {
          "name": "cache",
          "type": "RequestCache",
          "optional": true
        },
        {
          "name": "credentials",
          "type": "RequestCredentials",
          "optional": true
        },
        {
          "name": "headers",
          "type": "HeadersInit",
          "optional": true
        },
        {
          "name": "integrity",
          "type": "string",
          "optional": true
        },
        {
          "name": "keepalive",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "method",
          "type": "string",
          "optional": true
        },
        {
          "name": "mode",
          "type": "RequestMode",
          "optional": true
        },
        {
          "name": "priority",
          "type": "RequestPriority",
          "optional": true
        },
        {
          "name": "redirect",
          "type": "RequestRedirect",
          "optional": true
        },
        {
          "name": "referrer",
          "type": "string",
          "optional": true
        },
        {
          "name": "referrerPolicy",
          "type": "ReferrerPolicy",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        },
        {
          "name": "window",
          "type": "null",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Fetch Request options with additional properties.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Options for customizing fetch requests."
    },
    {
      "name": "WretchError",
      "type": "WretchError",
      "properties": [
        {
          "name": "status",
          "type": "number",
          "optional": false
        },
        {
          "name": "response",
          "type": "WretchResponse",
          "optional": false
        },
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": true
        },
        {
          "name": "json",
          "type": "any",
          "optional": true
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": false
        },
        {
          "name": "stack",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [
        "Error"
      ],
      "jsdoc": {
        "description": "An Error enhanced with status, text and body.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Custom error type for Wretch responses."
    },
    {
      "name": "WretchErrorCallback",
      "type": "WretchErrorCallback<T, C, R>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "Callback provided to catchers on error. Contains the original wretch instance used to perform the request.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Callback for handling Wretch errors."
    },
    {
      "name": "WretchResponse",
      "type": "WretchResponse",
      "properties": [
        {
          "name": "headers",
          "type": "Headers",
          "optional": false
        },
        {
          "name": "ok",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "redirected",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "status",
          "type": "number",
          "optional": false
        },
        {
          "name": "statusText",
          "type": "string",
          "optional": false
        },
        {
          "name": "type",
          "type": "ResponseType",
          "optional": false
        },
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "clone",
          "type": "() => Response",
          "optional": false,
          "xaiDescription": "Creates a clone of the response."
        },
        {
          "name": "body",
          "type": "ReadableStream<Uint8Array<ArrayBufferLike>>",
          "optional": false
        },
        {
          "name": "bodyUsed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "arrayBuffer",
          "type": "() => Promise<ArrayBuffer>",
          "optional": false,
          "xaiDescription": "Returns response as an array buffer."
        },
        {
          "name": "blob",
          "type": "() => Promise<Blob>",
          "optional": false,
          "xaiDescription": "Returns response as a blob."
        },
        {
          "name": "bytes",
          "type": "() => Promise<Uint8Array<ArrayBufferLike>>",
          "optional": false,
          "xaiDescription": "Returns response as a byte array."
        },
        {
          "name": "formData",
          "type": "() => Promise<FormData>",
          "optional": false,
          "xaiDescription": "Returns response as FormData."
        },
        {
          "name": "json",
          "type": "() => Promise<any>",
          "optional": false,
          "xaiDescription": "Parses response as JSON."
        },
        {
          "name": "text",
          "type": "() => Promise<string>",
          "optional": false,
          "xaiDescription": "Returns response as text."
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Fetch Response object with additional properties.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Extended response object for Wretch."
    },
    {
      "name": "WretchDeferredCallback",
      "type": "WretchDeferredCallback<T, C, R>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "Callback provided to the defer function allowing to chain deferred actions that will be stored and applied just before the request is sent.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Callback for deferred actions in Wretch."
    },
    {
      "name": "Middleware",
      "type": "Middleware",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "Shape of a typical middleware.\nExpects options and returns a ConfiguredMiddleware that can then be registered using the .middlewares function.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Defines the structure for Wretch middleware."
    },
    {
      "name": "ConfiguredMiddleware",
      "type": "ConfiguredMiddleware",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "A ready to use middleware which is called before the request is sent.\nInput is the next middleware in the chain, then url and options.\nOutput is a promise.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Middleware ready to be applied to Wretch requests."
    },
    {
      "name": "FetchLike",
      "type": "FetchLike",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "Any function having the same shape as fetch().",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Type for functions similar to fetch."
    },
    {
      "name": "WretchAddon",
      "type": "WretchAddon<W, R>",
      "properties": [
        {
          "name": "beforeRequest",
          "type": "<T, C, R>(wretch: T & Wretch<T, C, R>, options: WretchOptions, state: Record<any, any>) => T & Wretch<T, C, R>",
          "optional": true,
          "xaiDescription": "Modifies request before sending."
        },
        {
          "name": "wretch",
          "type": "W",
          "optional": true
        },
        {
          "name": "resolver",
          "type": "R | (<T, C>(_: C & WretchResponseChain<T, C, R>) => R)",
          "optional": true,
          "xaiDescription": "Modifies response handling."
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "An addon enhancing either the request or response chain (or both).",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Extends Wretch's request or response handling."
    }
  ],
  "classes": [
    {
      "name": "WretchError",
      "constructors": [],
      "methods": [],
      "properties": [
        {
          "name": "status",
          "type": "number",
          "optional": false
        },
        {
          "name": "response",
          "type": "WretchResponse",
          "optional": false
        },
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": true
        },
        {
          "name": "json",
          "type": "any",
          "optional": true
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": false
        },
        {
          "name": "stack",
          "type": "string",
          "optional": true
        }
      ],
      "extends": "Error",
      "implements": [
        "WretchErrorType"
      ],
      "jsdoc": {
        "description": "This class inheriting from Error is thrown when the fetch response is not \"ok\".\nIt extends Error and adds status, text and body fields.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Custom error class for Wretch, extends Error."
    }
  ],
  "constants": [],
  "namespaces": [
    {
      "name": "wretch",
      "contents": {
        "functions": [
          {
            "name": "default",
            "parameters": [
              {
                "name": "_url",
                "type": "string",
                "optional": true
              },
              {
                "name": "_options",
                "type": "WretchOptions",
                "optional": true
              }
            ],
            "returnType": "Wretch<unknown, unknown, undefined>",
            "jsdoc": null,
            "xaiDescription": "Creates a new Wretch instance."
          },
          {
            "name": "options",
            "parameters": [
              {
                "name": "options",
                "type": "WretchOptions",
                "optional": false
              },
              {
                "name": "replace",
                "type": "boolean",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": null,
            "xaiDescription": "Sets global Wretch options."
          },
          {
            "name": "errorType",
            "parameters": [
              {
                "name": "errorType",
                "type": "ErrorType",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": null,
            "xaiDescription": "Sets global error type for Wretch."
          },
          {
            "name": "polyfills",
            "parameters": [
              {
                "name": "polyfills",
                "type": "object",
                "optional": false
              },
              {
                "name": "replace",
                "type": "boolean",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": null,
            "xaiDescription": "Sets global polyfills for Wretch."
          },
          {
            "name": "default.options",
            "parameters": [
              {
                "name": "options",
                "type": "WretchOptions",
                "optional": false
              },
              {
                "name": "replace",
                "type": "boolean",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": null,
            "xaiDescription": "Sets default options for Wretch."
          },
          {
            "name": "default.errorType",
            "parameters": [
              {
                "name": "errorType",
                "type": "ErrorType",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": null,
            "xaiDescription": "Sets default error type for Wretch."
          },
          {
            "name": "default.polyfills",
            "parameters": [
              {
                "name": "polyfills",
                "type": "object",
                "optional": false
              },
              {
                "name": "replace",
                "type": "boolean",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": null,
            "xaiDescription": "Sets default polyfills for Wretch."
          },
          {
            "name": "default.captureStackTrace",
            "parameters": [
              {
                "name": "targetObject",
                "type": "object",
                "optional": false
              },
              {
                "name": "constructorOpt",
                "type": "Function",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Create .stack property on a target object",
              "deprecated": false
            },
            "xaiDescription": "Adds stack trace to an object."
          },
          {
            "name": "default.prepareStackTrace",
            "parameters": [
              {
                "name": "err",
                "type": "Error",
                "optional": false
              },
              {
                "name": "stackTraces",
                "type": "CallSite[]",
                "optional": false
              }
            ],
            "returnType": "any",
            "jsdoc": {
              "description": "Optional override for formatting stack traces",
              "params": [],
              "deprecated": false
            },
            "xaiDescription": "Customizes stack trace formatting."
          },
          {
            "name": "default.default",
            "parameters": [
              {
                "name": "_url",
                "type": "string",
                "optional": true
              },
              {
                "name": "_options",
                "type": "WretchOptions",
                "optional": true
              }
            ],
            "returnType": "Wretch<unknown, unknown, undefined>",
            "jsdoc": null,
            "xaiDescription": "Creates a new Wretch instance."
          }
        ],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": true,
      "xaiDescription": "Namespace for Wretch-related functions."
    },
    {
      "name": "factory",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Namespace for Wretch factory functions."
    }
  ],
  "version": "2.11.0"
}