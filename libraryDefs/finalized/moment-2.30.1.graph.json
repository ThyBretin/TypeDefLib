{
  "version": "2.30.1",
  "functions": [
    {
      "name": "utc",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "Converts input to UTC time.",
        "params": [
          {
            "name": "strict",
            "description": "Strict parsing disables fallback to native Date constructor when parsing a string."
          }
        ],
        "deprecated": false,
        "xaiDescription": "Converts input to UTC time, with optional strict parsing."
      }
    },
    {
      "name": "unix",
      "parameters": [
        {
          "name": "timestamp",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "Creates a moment from a Unix timestamp.",
        "deprecated": false,
        "xaiDescription": "Creates a moment from a Unix timestamp."
      }
    },
    {
      "name": "invalid",
      "parameters": [
        {
          "name": "flags",
          "type": "MomentParsingFlagsOpt",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "Creates an invalid moment object.",
        "deprecated": false,
        "xaiDescription": "Creates an invalid moment object with optional parsing flags."
      }
    },
    {
      "name": "isMoment",
      "parameters": [
        {
          "name": "m",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if the given object is a moment object.",
        "deprecated": false,
        "xaiDescription": "Checks if the given object is a moment object."
      }
    },
    {
      "name": "isDate",
      "parameters": [
        {
          "name": "m",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if the given object is a date object.",
        "deprecated": false,
        "xaiDescription": "Checks if the given object is a date object."
      }
    },
    {
      "name": "isDuration",
      "parameters": [
        {
          "name": "d",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Checks if the given object is a duration object.",
        "deprecated": false,
        "xaiDescription": "Checks if the given object is a duration object."
      }
    },
    {
      "name": "lang",
      "parameters": [
        {
          "name": "language",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets or sets the language of the moment object.",
        "deprecated": true,
        "xaiDescription": "Gets or sets the language of the moment object (deprecated, use locale instead)."
      }
    },
    {
      "name": "locale",
      "parameters": [
        {
          "name": "language",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets or sets the locale of the moment object.",
        "deprecated": false,
        "xaiDescription": "Gets or sets the locale of the moment object."
      }
    },
    {
      "name": "localeData",
      "parameters": [
        {
          "name": "key",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "Locale",
      "jsdoc": {
        "description": "Gets locale-specific data.",
        "deprecated": false,
        "xaiDescription": "Gets locale-specific data for the given key."
      }
    },
    {
      "name": "duration",
      "parameters": [
        {
          "name": "inp",
          "type": "DurationInputArg1",
          "optional": true
        },
        {
          "name": "unit",
          "type": "DurationConstructor",
          "optional": true
        }
      ],
      "returnType": "Duration",
      "jsdoc": {
        "description": "Creates a duration object.",
        "deprecated": false,
        "xaiDescription": "Creates a duration object with optional input and unit."
      }
    },
    {
      "name": "parseZone",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "format",
          "type": "MomentFormatSpecification",
          "optional": true
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "Parses a string in a specific time zone.",
        "deprecated": false,
        "xaiDescription": "Parses a string in a specific time zone with optional format and strict parsing."
      }
    },
    {
      "name": "months",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns an array of month names.",
        "deprecated": false,
        "xaiDescription": "Returns an array of month names."
      }
    },
    {
      "name": "monthsShort",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns an array of abbreviated month names.",
        "deprecated": false,
        "xaiDescription": "Returns an array of abbreviated month names."
      }
    },
    {
      "name": "weekdays",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns an array of weekday names.",
        "deprecated": false,
        "xaiDescription": "Returns an array of weekday names."
      }
    },
    {
      "name": "weekdaysShort",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns an array of abbreviated weekday names.",
        "deprecated": false,
        "xaiDescription": "Returns an array of abbreviated weekday names."
      }
    },
    {
      "name": "weekdaysMin",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns an array of minimal weekday names.",
        "deprecated": false,
        "xaiDescription": "Returns an array of minimal weekday names."
      }
    },
    {
      "name": "min",
      "parameters": [
        {
          "name": "moments",
          "type": "Moment[]",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "Returns the earliest of the given moments.",
        "deprecated": false,
        "xaiDescription": "Returns the earliest moment from the given array of moments."
      }
    },
    {
      "name": "max",
      "parameters": [
        {
          "name": "moments",
          "type": "Moment[]",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "Returns the latest of the given moments.",
        "deprecated": false,
        "xaiDescription": "Returns the latest moment from the given array of moments."
      }
    },
    {
      "name": "now",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the current Unix timestamp.",
        "deprecated": false,
        "xaiDescription": "Returns the current Unix timestamp in milliseconds."
      }
    },
    {
      "name": "defineLocale",
      "parameters": [
        {
          "name": "language",
          "type": "string",
          "optional": false
        },
        {
          "name": "localeSpec",
          "type": "void | LocaleSpecification",
          "optional": false
        }
      ],
      "returnType": "Locale",
      "jsdoc": {
        "description": "Defines a new locale.",
        "deprecated": false,
        "xaiDescription": "Defines a new locale with the given language and specifications."
      }
    },
    {
      "name": "updateLocale",
      "parameters": [
        {
          "name": "language",
          "type": "string",
          "optional": false
        },
        {
          "name": "localeSpec",
          "type": "void | LocaleSpecification",
          "optional": false
        }
      ],
      "returnType": "Locale",
      "jsdoc": {
        "description": "Updates an existing locale.",
        "deprecated": false,
        "xaiDescription": "Updates an existing locale with the given language and specifications."
      }
    },
    {
      "name": "locales",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns an array of available locales.",
        "deprecated": false,
        "xaiDescription": "Returns an array of available locales."
      }
    },
    {
      "name": "normalizeUnits",
      "parameters": [
        {
          "name": "unit",
          "type": "All",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Normalizes a unit of time.",
        "deprecated": false,
        "xaiDescription": "Normalizes a unit of time to a standard format."
      }
    },
    {
      "name": "relativeTimeThreshold",
      "parameters": [
        {
          "name": "threshold",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number | boolean",
      "jsdoc": {
        "description": "Gets or sets the threshold for relative time.",
        "deprecated": false,
        "xaiDescription": "Gets or sets the threshold for relative time formatting."
      }
    },
    {
      "name": "relativeTimeRounding",
      "parameters": [
        {
          "name": "fn",
          "type": "(num: number) => number",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Sets the rounding function for relative time.",
        "deprecated": false,
        "xaiDescription": "Sets the rounding function for relative time calculations."
      }
    },
    {
      "name": "calendarFormat",
      "parameters": [
        {
          "name": "m",
          "type": "Moment",
          "optional": false
        },
        {
          "name": "now",
          "type": "Moment",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Formats a moment as a calendar string.",
        "deprecated": false,
        "xaiDescription": "Formats a moment as a calendar string relative to another moment."
      }
    },
    {
      "name": "parseTwoDigitYear",
      "parameters": [
        {
          "name": "input",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Parses a two-digit year into a four-digit year.",
        "deprecated": false,
        "xaiDescription": "Parses a two-digit year into a four-digit year."
      }
    },
    {
      "name": "toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of the object.",
        "deprecated": false,
        "xaiDescription": "Returns a string representation of the object."
      }
    },
    {
      "name": "charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "deprecated": false,
        "xaiDescription": "Returns the character at the specified index in the string."
      }
    },
    {
      "name": "charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified index.",
        "deprecated": false,
        "xaiDescription": "Returns the Unicode value of the character at the specified index."
      }
    },
    {
      "name": "concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Concatenates the given strings with the current string.",
        "deprecated": false,
        "xaiDescription": "Concatenates the given strings with the current string."
      }
    },
    {
      "name": "indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the index of the first occurrence of the specified value.",
        "deprecated": false,
        "xaiDescription": "Returns the index of the first occurrence of the specified value."
      }
    },
    {
      "name": "lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the index of the last occurrence of the specified value.",
        "deprecated": false,
        "xaiDescription": "Returns the index of the last occurrence of the specified value."
      }
    },
    {
      "name": "localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Compares two strings in the current locale.",
        "deprecated": false,
        "xaiDescription": "Compares two strings in the current locale."
      }
    },
    {
      "name": "match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string against a regular expression.",
        "deprecated": false,
        "xaiDescription": "Matches a string against a regular expression."
      }
    },
    {
      "name": "replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces a specified value with another value in the string.",
        "deprecated": false,
        "xaiDescription": "Replaces a specified value with another value in the string."
      }
    },
    {
      "name": "search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Searches for a specified value within the string.",
        "deprecated": false,
        "xaiDescription": "Searches for a specified value within the string."
      }
    },
    {
      "name": "slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Extracts a section of a string and returns it as a new string.",
        "deprecated": false,
        "xaiDescription": "Extracts a section of a string and returns it as a new string."
      }
    },
    {
      "name": "split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Splits a string into an array of substrings.",
        "deprecated": false,
        "xaiDescription": "Splits a string into an array of substrings."
      }
    },
    {
      "name": "substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a string.",
        "deprecated": false,
        "xaiDescription": "Returns the substring at the specified location within a string."
      }
    },
    {
      "name": "toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a string to lowercase.",
        "deprecated": false,
        "xaiDescription": "Converts a string to lowercase."
      }
    },
    {
      "name": "toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a string to lowercase using the specified locale.",
        "deprecated": false,
        "xaiDescription": "Converts a string to lowercase using the specified locale."
      }
    },
    {
      "name": "toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a string to uppercase.",
        "deprecated": false,
        "xaiDescription": "Converts a string to uppercase."
      }
    },
    {
      "name": "toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a string to uppercase using the specified locale.",
        "deprecated": false,
        "xaiDescription": "Converts a string to uppercase using the specified locale."
      }
    },
    {
      "name": "trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes whitespace from both ends of a string.",
        "deprecated": false,
        "xaiDescription": "Removes whitespace from both ends of a string."
      }
    },
    {
      "name": "substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Extracts a part of a string starting at the specified position and length.",
        "deprecated": true,
        "xaiDescription": "Extracts a part of a string starting at the specified position and length (deprecated, use substring instead)."
      }
    },
    {
      "name": "valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of a string object.",
        "deprecated": false,
        "xaiDescription": "Returns the primitive value of a string object."
      }
    },
    {
      "name": "codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode code point value of the character at the specified index.",
        "deprecated": false,
        "xaiDescription": "Returns the Unicode code point value of the character at the specified index."
      }
    },
    {
      "name": "includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether a string contains the specified substring.",
        "deprecated": false,
        "xaiDescription": "Determines whether a string contains the specified substring."
      }
    },
    {
      "name": "endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether a string ends with the specified substring.",
        "deprecated": false,
        "xaiDescription": "Determines whether a string ends with the specified substring."
      }
    },
    {
      "name": "normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the Unicode Normalization Form of the string.",
        "deprecated": false,
        "xaiDescription": "Returns the Unicode Normalization Form of the string."
      }
    },
    {
      "name": "repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a new string containing the specified number of copies of the string.",
        "deprecated": false,
        "xaiDescription": "Returns a new string containing the specified number of copies of the string."
      }
    },
    {
      "name": "startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether a string begins with the specified substring.",
        "deprecated": false,
        "xaiDescription": "Determines whether a string begins with the specified substring."
      }
    },
    {
      "name": "anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML anchor element with the specified name.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML anchor element with the specified name (deprecated)."
      }
    },
    {
      "name": "big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML big element.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML big element (deprecated)."
      }
    },
    {
      "name": "blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML blink element.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML blink element (deprecated)."
      }
    },
    {
      "name": "bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML bold element.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML bold element (deprecated)."
      }
    },
    {
      "name": "fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML fixed element.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML fixed element (deprecated)."
      }
    },
    {
      "name": "fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML font element with the specified color.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML font element with the specified color (deprecated)."
      }
    },
    {
      "name": "fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML font element with the specified size.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML font element with the specified size (deprecated)."
      }
    },
    {
      "name": "italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML italics element.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML italics element (deprecated)."
      }
    },
    {
      "name": "link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML link element with the specified URL.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML link element with the specified URL (deprecated)."
      }
    },
    {
      "name": "small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML small element.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML small element (deprecated)."
      }
    },
    {
      "name": "strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML strike element.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML strike element (deprecated)."
      }
    },
    {
      "name": "sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML subscript element.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML subscript element (deprecated)."
      }
    },
    {
      "name": "sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Creates an HTML superscript element.",
        "deprecated": true,
        "xaiDescription": "Creates an HTML superscript element (deprecated)."
      }
    },
    {
      "name": "padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with another string until the resulting string reaches the given length.",
        "deprecated": false,
        "xaiDescription": "Pads the current string with another string until the resulting string reaches the given length."
      }
    },
    {
      "name": "padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with another string until the resulting string reaches the given length.",
        "deprecated": false,
        "xaiDescription": "Pads the current string with another string until the resulting string reaches the given length."
      }
    },
    {
      "name": "trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes whitespace from the end of a string.",
        "deprecated": false,
        "xaiDescription": "Removes whitespace from the end of a string."
      }
    },
    {
      "name": "trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes whitespace from the beginning of a string.",
        "deprecated": false,
        "xaiDescription": "Removes whitespace from the beginning of a string."
      }
    },
    {
      "name": "trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes whitespace from the beginning of a string.",
        "deprecated": true,
        "xaiDescription": "Removes whitespace from the beginning of a string (deprecated, use trimStart instead)."
      }
    },
    {
      "name": "trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes whitespace from the end of a string.",
        "deprecated": true,
        "xaiDescription": "Removes whitespace from the end of a string (deprecated, use trimEnd instead)."
      }
    },
    {
      "name": "matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Returns an iterator of all matches of a string against a regular expression.",
        "deprecated": false,
        "xaiDescription": "Returns an iterator of all matches of a string against a regular expression."
      }
    },
    {
      "name": "__@iterator@89",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Returns an iterator for the string.",
        "deprecated": false,
        "xaiDescription": "Returns an iterator for the string."
      }
    },
    {
      "name": "at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "deprecated": false,
        "xaiDescription": "Returns the character at the specified index in the string."
      }
    },
    {
      "name": "version.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of the version.",
        "deprecated": false,
        "xaiDescription": "Returns a string representation of the version."
      }
    },
    {
      "name": "version.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index of the version string.",
        "deprecated": false,
        "xaiDescription": "Returns the character at the specified index of the version string."
      }
    },
    {
      "name": "version.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified index of the version string.",
        "deprecated": false,
        "xaiDescription": "Returns the Unicode value of the character at the specified index of the version string."
      }
    },
    {
      "name": "version.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Concatenates the given strings with the version string.",
        "deprecated": false,
        "xaiDescription": "Concatenates the given strings with the version string."
      }
    },
    {
      "name": "version.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the index of the first occurrence of the specified value in the version string.",
        "deprecated": false,
        "xaiDescription": "Returns the index of the first occurrence of the specified value in the version string."
      }
    },
    {
      "name": "version.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the index of the last occurrence of the specified value in the version string.",
        "deprecated": false,
        "xaiDescription": "Returns the index of the last occurrence of the specified value in the version string."
      }
    },
    {
      "name": "version.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Compares the version string with another string in the current locale.",
        "deprecated": false,
        "xaiDescription": "Compares the version string with another string in the current locale."
      }
    },
    {
      "name": "version.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches the version string against a regular expression.",
        "deprecated": false,
        "xaiDescription": "Matches the version string against a regular expression."
      }
    },
    {
      "name": "version.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces a specified value with another value in the version string.",
        "deprecated": false,
        "xaiDescription": "Replaces a specified value with another value in the version string."
      }
    },
    {
      "name": "version.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Searches for a specified value within the version string.",
        "deprecated": false,
        "xaiDescription": "Searches for a specified value within the version string."
      }
    },
    {
      "name": "version.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Extracts a section of the version string and returns it as a new string.",
        "deprecated": false,
        "xaiDescription": "Extracts a section of the version string and returns it as a new string."
      }
    },
    {
      "name": "version.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Splits the version string into an array of substrings.",
        "deprecated": false,
        "xaiDescription": "Splits the version string into an array of substrings."
      }
    },
    {
      "name": "version.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within the version string.",
        "deprecated": false,
        "xaiDescription": "Returns the substring at the specified location within the version string."
      }
    },
    {
      "name": "version.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts the version string to lowercase.",
        "deprecated": false,
        "xaiDescription": "Converts the version string to lowercase."
      }
    },
    {
      "name": "version.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts the version string to lowercase using the specified locale.",
        "deprecated": false,
        "xaiDescription": "Converts the version string to lowercase using the specified locale."
      }
    },
    {
      "name": "version.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts the version string to uppercase.",
        "deprecated": false,
        "xaiDescription": "Converts the version string to uppercase."
      }
    },
    {
      "name": "version.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts the version string to uppercase using the specified locale.",
        "deprecated": false,
        "xaiDescription": "Converts the version string to uppercase using the specified locale."
      }
    },
    {
      "name": "version.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes whitespace from both ends of the version string.",
        "deprecated": false,
        "xaiDescription": "Removes whitespace from both ends of the version string."
      }
    },
    {
      "name": "version.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Formats a number using fixed-point notation.",
        "deprecated": false,
        "xaiDescription": "Formats a number using fixed-point notation."
      }
    },
    {
      "name": "version.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Formats a number using exponential notation.",
        "deprecated": false,
        "xaiDescription": "Formats a number using exponential notation."
      }
    },
    {
      "name": "version.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "version.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "version.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "version.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "version.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "version.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "version.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "version.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default is \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "version.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "version.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "version.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "version.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "version.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "version.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "version.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "version.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "version.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "version.__@iterator@89",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "version.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns the character at the specified index in the string."
      }
    },
    {
      "name": "format",
      "parameters": [
        {
          "name": "format",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Formats the date according to the specified format string."
      }
    },
    {
      "name": "startOf",
      "parameters": [
        {
          "name": "unitOfTime",
          "type": "StartOf",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets the date to the start of the specified unit of time."
      }
    },
    {
      "name": "endOf",
      "parameters": [
        {
          "name": "unitOfTime",
          "type": "StartOf",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets the date to the end of the specified unit of time."
      }
    },
    {
      "name": "add",
      "parameters": [
        {
          "name": "amount",
          "type": "DurationInputArg1",
          "optional": true
        },
        {
          "name": "unit",
          "type": "DurationConstructor",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Adds the specified amount of time to the date."
      }
    },
    {
      "name": "subtract",
      "parameters": [
        {
          "name": "amount",
          "type": "DurationInputArg1",
          "optional": true
        },
        {
          "name": "unit",
          "type": "DurationConstructor",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Subtracts the specified amount of time from the date."
      }
    },
    {
      "name": "calendar",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns a string representing the date in a calendar format."
      }
    },
    {
      "name": "clone",
      "parameters": [],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Creates a new instance of the date."
      }
    },
    {
      "name": "local",
      "parameters": [
        {
          "name": "keepLocalTime",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Converts the date to local time."
      }
    },
    {
      "name": "isLocal",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is in local time."
      }
    },
    {
      "name": "isUTC",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is in UTC time."
      }
    },
    {
      "name": "isUtc",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "isValid",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is valid."
      }
    },
    {
      "name": "invalidAt",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Returns the index of the invalid token."
      }
    },
    {
      "name": "hasAlignedHourOffset",
      "parameters": [
        {
          "name": "other",
          "type": "MomentInput",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date has the same hour offset as another date."
      }
    },
    {
      "name": "creationData",
      "parameters": [],
      "returnType": "MomentCreationData",
      "jsdoc": {
        "xaiDescription": "Returns an object containing the date's creation data."
      }
    },
    {
      "name": "parsingFlags",
      "parameters": [],
      "returnType": "MomentParsingFlags",
      "jsdoc": {
        "xaiDescription": "Returns an object containing the date's parsing flags."
      }
    },
    {
      "name": "year",
      "parameters": [
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the year of the date."
      }
    },
    {
      "name": "years",
      "parameters": [
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "quarter",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the quarter of the year for the date."
      }
    },
    {
      "name": "quarters",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the quarter of the year for the date."
      }
    },
    {
      "name": "month",
      "parameters": [
        {
          "name": "M",
          "type": "string | number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the month of the date."
      }
    },
    {
      "name": "day",
      "parameters": [
        {
          "name": "d",
          "type": "string | number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the day of the week for the date."
      }
    },
    {
      "name": "days",
      "parameters": [
        {
          "name": "d",
          "type": "string | number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the day of the week for the date."
      }
    },
    {
      "name": "date",
      "parameters": [
        {
          "name": "d",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the day of the month for the date."
      }
    },
    {
      "name": "dates",
      "parameters": [
        {
          "name": "d",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "hour",
      "parameters": [
        {
          "name": "h",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the hour of the day for the date."
      }
    },
    {
      "name": "hours",
      "parameters": [
        {
          "name": "h",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the hour of the day for the date."
      }
    },
    {
      "name": "minute",
      "parameters": [
        {
          "name": "m",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the minute of the hour for the date."
      }
    },
    {
      "name": "minutes",
      "parameters": [
        {
          "name": "m",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the minute of the hour for the date."
      }
    },
    {
      "name": "second",
      "parameters": [
        {
          "name": "s",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the second of the minute for the date."
      }
    },
    {
      "name": "seconds",
      "parameters": [
        {
          "name": "s",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the second of the minute for the date."
      }
    },
    {
      "name": "millisecond",
      "parameters": [
        {
          "name": "ms",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the millisecond of the second for the date."
      }
    },
    {
      "name": "milliseconds",
      "parameters": [
        {
          "name": "ms",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the millisecond of the second for the date."
      }
    },
    {
      "name": "weekday",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the day of the week for the date."
      }
    },
    {
      "name": "isoWeekday",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the ISO day of the week for the date."
      }
    },
    {
      "name": "weekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the week year for the date."
      }
    },
    {
      "name": "isoWeekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the ISO week year for the date."
      }
    },
    {
      "name": "week",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the week of the year for the date."
      }
    },
    {
      "name": "weeks",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the week of the year for the date."
      }
    },
    {
      "name": "isoWeek",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the ISO week of the year for the date."
      }
    },
    {
      "name": "isoWeeks",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the ISO week of the year for the date."
      }
    },
    {
      "name": "weeksInYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the number of weeks in the year for the date."
      }
    },
    {
      "name": "weeksInWeekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the number of weeks in the week year for the date."
      }
    },
    {
      "name": "isoWeeksInYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the number of ISO weeks in the year for the date."
      }
    },
    {
      "name": "isoWeeksInISOWeekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the number of ISO weeks in the ISO week year for the date."
      }
    },
    {
      "name": "dayOfYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the day of the year for the date."
      }
    },
    {
      "name": "from",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "suffix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Calculates the time difference from another date."
      }
    },
    {
      "name": "to",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "suffix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Calculates the time difference to another date."
      }
    },
    {
      "name": "fromNow",
      "parameters": [
        {
          "name": "withoutSuffix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Calculates the time difference from now."
      }
    },
    {
      "name": "toNow",
      "parameters": [
        {
          "name": "withoutPrefix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Calculates the time difference to now."
      }
    },
    {
      "name": "diff",
      "parameters": [
        {
          "name": "b",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "unitOfTime",
          "type": "Diff",
          "optional": true
        },
        {
          "name": "precise",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Calculates the difference between two dates in the specified unit."
      }
    },
    {
      "name": "toArray",
      "parameters": [],
      "returnType": "number[]",
      "jsdoc": {
        "xaiDescription": "Converts the date to an array of numbers."
      }
    },
    {
      "name": "toDate",
      "parameters": [],
      "returnType": "Date",
      "jsdoc": {
        "xaiDescription": "Converts the date to a JavaScript Date object."
      }
    },
    {
      "name": "toISOString",
      "parameters": [
        {
          "name": "keepOffset",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Converts the date to an ISO 8601 string."
      }
    },
    {
      "name": "inspect",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns a string representation of the date for inspection."
      }
    },
    {
      "name": "toJSON",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Converts the date to a JSON string."
      }
    },
    {
      "name": "isLeapYear",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the year of the date is a leap year."
      }
    },
    {
      "name": "zone",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "utcOffset",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the UTC offset in minutes for the date."
      }
    },
    {
      "name": "isUtcOffset",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date has a UTC offset."
      }
    },
    {
      "name": "daysInMonth",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the number of days in the month for the date."
      }
    },
    {
      "name": "isDST",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is in Daylight Saving Time."
      }
    },
    {
      "name": "zoneAbbr",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Gets the abbreviation of the time zone for the date."
      }
    },
    {
      "name": "zoneName",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Gets the name of the time zone for the date."
      }
    },
    {
      "name": "isBefore",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is before another date."
      }
    },
    {
      "name": "isAfter",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is after another date."
      }
    },
    {
      "name": "isSame",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is the same as another date."
      }
    },
    {
      "name": "isSameOrAfter",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is the same as or after another date."
      }
    },
    {
      "name": "isSameOrBefore",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is the same as or before another date."
      }
    },
    {
      "name": "isBetween",
      "parameters": [
        {
          "name": "a",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "b",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        },
        {
          "name": "inclusivity",
          "type": "\"()\" | \"[)\" | \"(]\" | \"[]\"",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is between two other dates."
      }
    },
    {
      "name": "isDSTShifted",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "get",
      "parameters": [
        {
          "name": "unit",
          "type": "All",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the value of a specified unit of time for the date."
      }
    },
    {
      "name": "set",
      "parameters": [
        {
          "name": "unit",
          "type": "All",
          "optional": false
        },
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets the value of a specified unit of time for the date."
      }
    },
    {
      "name": "toObject",
      "parameters": [],
      "returnType": "MomentObjectOutput",
      "jsdoc": {
        "xaiDescription": "Converts the date to an object representation."
      }
    },
    {
      "name": "toLocaleString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a date converted to a string using the current locale.",
        "deprecated": false
      }
    },
    {
      "name": "hasOwnProperty",
      "parameters": [
        {
          "name": "v",
          "type": "PropertyKey",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether an object has a property with the specified name.",
        "params": [
          {
            "name": "v",
            "description": "A property name."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "isPrototypeOf",
      "parameters": [
        {
          "name": "v",
          "type": "Object",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether an object exists in another object's prototype chain.",
        "params": [
          {
            "name": "v",
            "description": "Another object whose prototype chain is to be checked."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "propertyIsEnumerable",
      "parameters": [
        {
          "name": "v",
          "type": "PropertyKey",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether a specified property is enumerable.",
        "params": [
          {
            "name": "v",
            "description": "A property name."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "fn.format",
      "parameters": [
        {
          "name": "format",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Formats the date according to the specified format string."
      }
    },
    {
      "name": "fn.startOf",
      "parameters": [
        {
          "name": "unitOfTime",
          "type": "StartOf",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets the date to the start of the specified unit of time."
      }
    },
    {
      "name": "fn.endOf",
      "parameters": [
        {
          "name": "unitOfTime",
          "type": "StartOf",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets the date to the end of the specified unit of time."
      }
    },
    {
      "name": "fn.add",
      "parameters": [
        {
          "name": "amount",
          "type": "DurationInputArg1",
          "optional": true
        },
        {
          "name": "unit",
          "type": "DurationConstructor",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Adds the specified amount of time to the date."
      }
    },
    {
      "name": "fn.subtract",
      "parameters": [
        {
          "name": "amount",
          "type": "DurationInputArg1",
          "optional": true
        },
        {
          "name": "unit",
          "type": "DurationConstructor",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Subtracts the specified amount of time from the date."
      }
    },
    {
      "name": "fn.calendar",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns a string representing the date in a calendar format."
      }
    },
    {
      "name": "fn.clone",
      "parameters": [],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Creates a new instance of the date."
      }
    },
    {
      "name": "fn.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "fn.local",
      "parameters": [
        {
          "name": "keepLocalTime",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Converts the date to local time."
      }
    },
    {
      "name": "fn.isLocal",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is in local time."
      }
    },
    {
      "name": "fn.utc",
      "parameters": [
        {
          "name": "keepLocalTime",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Converts the date to UTC time."
      }
    },
    {
      "name": "fn.isUTC",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is in UTC time."
      }
    },
    {
      "name": "fn.isUtc",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "fn.parseZone",
      "parameters": [],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Parses the date's time zone offset."
      }
    },
    {
      "name": "fn.isValid",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date is valid."
      }
    },
    {
      "name": "fn.invalidAt",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Returns the index of the invalid token."
      }
    },
    {
      "name": "fn.hasAlignedHourOffset",
      "parameters": [
        {
          "name": "other",
          "type": "MomentInput",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the date has the same hour offset as another date."
      }
    },
    {
      "name": "fn.creationData",
      "parameters": [],
      "returnType": "MomentCreationData",
      "jsdoc": {
        "xaiDescription": "Returns an object containing the date's creation data."
      }
    },
    {
      "name": "fn.parsingFlags",
      "parameters": [],
      "returnType": "MomentParsingFlags",
      "jsdoc": {
        "xaiDescription": "Returns an object containing the date's parsing flags."
      }
    },
    {
      "name": "fn.year",
      "parameters": [
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the year of the date."
      }
    },
    {
      "name": "fn.years",
      "parameters": [
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "fn.quarter",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the quarter of the year for the date."
      }
    },
    {
      "name": "fn.quarters",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the quarter of the year for the date."
      }
    },
    {
      "name": "fn.month",
      "parameters": [
        {
          "name": "M",
          "type": "string | number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the month of the date."
      }
    },
    {
      "name": "fn.months",
      "parameters": [
        {
          "name": "M",
          "type": "string | number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "fn.day",
      "parameters": [
        {
          "name": "d",
          "type": "string | number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the day of the week for the date."
      }
    },
    {
      "name": "fn.days",
      "parameters": [
        {
          "name": "d",
          "type": "string | number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the day of the week for the date."
      }
    },
    {
      "name": "fn.date",
      "parameters": [
        {
          "name": "d",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the day of the month for the date."
      }
    },
    {
      "name": "fn.dates",
      "parameters": [
        {
          "name": "d",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "fn.hour",
      "parameters": [
        {
          "name": "h",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the hour of the day for the date."
      }
    },
    {
      "name": "fn.hours",
      "parameters": [
        {
          "name": "h",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the hour of the day for the date."
      }
    },
    {
      "name": "fn.minute",
      "parameters": [
        {
          "name": "m",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the minute of the hour for the date."
      }
    },
    {
      "name": "fn.minutes",
      "parameters": [
        {
          "name": "m",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the minute of the hour for the date."
      }
    },
    {
      "name": "fn.second",
      "parameters": [
        {
          "name": "s",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the second of the minute for the date."
      }
    },
    {
      "name": "fn.seconds",
      "parameters": [
        {
          "name": "s",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the second of the minute for the date."
      }
    },
    {
      "name": "fn.millisecond",
      "parameters": [
        {
          "name": "ms",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the millisecond of the second for the date."
      }
    },
    {
      "name": "fn.milliseconds",
      "parameters": [
        {
          "name": "ms",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets or gets the millisecond of the second for the date."
      }
    },
    {
      "name": "fn.weekday",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the day of the week for the date."
      }
    },
    {
      "name": "fn.isoWeekday",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the ISO day of the week for the date."
      }
    },
    {
      "name": "fn.weekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the week year for the date."
      }
    },
    {
      "name": "fn.isoWeekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the ISO week year for the date."
      }
    },
    {
      "name": "fn.week",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the week of the year for the date."
      }
    },
    {
      "name": "fn.weeks",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the week of the year for the date."
      }
    },
    {
      "name": "fn.isoWeek",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the ISO week of the year for the date."
      }
    },
    {
      "name": "fn.isoWeeks",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the ISO week of the year for the date."
      }
    },
    {
      "name": "fn.weeksInYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the number of weeks in the year for the date."
      }
    },
    {
      "name": "fn.weeksInWeekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the number of weeks in the week year for the date."
      }
    },
    {
      "name": "fn.isoWeeksInYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the number of ISO weeks in the year for the date."
      }
    },
    {
      "name": "fn.isoWeeksInISOWeekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the number of ISO weeks in the ISO week year for the date."
      }
    },
    {
      "name": "fn.dayOfYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Gets the day of the year for the date."
      }
    },
    {
      "name": "fn.from",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "suffix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Calculates time difference from given input to now. Uses MomentInput."
    },
    {
      "name": "fn.to",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "suffix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Calculates time difference to given input from now. Uses MomentInput."
    },
    {
      "name": "fn.fromNow",
      "parameters": [
        {
          "name": "withoutSuffix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Calculates time difference from now, optionally without suffix."
    },
    {
      "name": "fn.toNow",
      "parameters": [
        {
          "name": "withoutPrefix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Calculates time difference to now, optionally without prefix."
    },
    {
      "name": "fn.diff",
      "parameters": [
        {
          "name": "b",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "unitOfTime",
          "type": "Diff",
          "optional": true
        },
        {
          "name": "precise",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Calculates time difference between two moments. Uses MomentInput, Diff."
    },
    {
      "name": "fn.toArray",
      "parameters": [],
      "returnType": "number[]",
      "jsdoc": null,
      "xaiDescription": "Converts moment to array of numbers."
    },
    {
      "name": "fn.toDate",
      "parameters": [],
      "returnType": "Date",
      "jsdoc": null,
      "xaiDescription": "Converts moment to JavaScript Date object."
    },
    {
      "name": "fn.toISOString",
      "parameters": [
        {
          "name": "keepOffset",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Converts moment to ISO 8601 string, optionally keeping offset."
    },
    {
      "name": "fn.inspect",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Returns a string representation for debugging."
    },
    {
      "name": "fn.toJSON",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Converts moment to JSON string."
    },
    {
      "name": "fn.unix",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Returns Unix timestamp (seconds since epoch)."
    },
    {
      "name": "fn.isLeapYear",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if the moment's year is a leap year."
    },
    {
      "name": "fn.zone",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Gets the time zone offset in minutes. Deprecated."
    },
    {
      "name": "fn.utcOffset",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets the UTC offset in minutes."
    },
    {
      "name": "fn.isUtcOffset",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if the moment has a UTC offset."
    },
    {
      "name": "fn.daysInMonth",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Returns number of days in the moment's month."
    },
    {
      "name": "fn.isDST",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if the moment is in Daylight Saving Time."
    },
    {
      "name": "fn.zoneAbbr",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Gets the abbreviated time zone name."
    },
    {
      "name": "fn.zoneName",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Gets the full time zone name."
    },
    {
      "name": "fn.isBefore",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is before another. Uses MomentInput, StartOf."
    },
    {
      "name": "fn.isAfter",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is after another. Uses MomentInput, StartOf."
    },
    {
      "name": "fn.isSame",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is the same as another. Uses MomentInput, StartOf."
    },
    {
      "name": "fn.isSameOrAfter",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is the same or after another. Uses MomentInput, StartOf."
    },
    {
      "name": "fn.isSameOrBefore",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is the same or before another. Uses MomentInput, StartOf."
    },
    {
      "name": "fn.isBetween",
      "parameters": [
        {
          "name": "a",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "b",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        },
        {
          "name": "inclusivity",
          "type": "\"()\" | \"[)\" | \"(]\" | \"[]\"",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is between two moments. Uses MomentInput, StartOf."
    },
    {
      "name": "fn.lang",
      "parameters": [
        {
          "name": "language",
          "type": "LocaleSpecifier",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Sets the language for the moment. Deprecated. Uses LocaleSpecifier."
    },
    {
      "name": "fn.locale",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Gets the current locale of the moment."
    },
    {
      "name": "fn.localeData",
      "parameters": [],
      "returnType": "Locale",
      "jsdoc": null,
      "xaiDescription": "Gets the locale data for the moment. Uses Locale."
    },
    {
      "name": "fn.isDSTShifted",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Checks if the moment has been shifted due to DST. Deprecated."
    },
    {
      "name": "fn.max",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "format",
          "type": "MomentFormatSpecification",
          "optional": true
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Returns the maximum of the moment and another. Uses MomentInput, MomentFormatSpecification. Deprecated."
    },
    {
      "name": "fn.min",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "format",
          "type": "MomentFormatSpecification",
          "optional": true
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Returns the minimum of the moment and another. Uses MomentInput, MomentFormatSpecification. Deprecated."
    },
    {
      "name": "fn.get",
      "parameters": [
        {
          "name": "unit",
          "type": "All",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets the value of a unit of time. Uses All."
    },
    {
      "name": "fn.set",
      "parameters": [
        {
          "name": "unit",
          "type": "All",
          "optional": false
        },
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets the value of a unit of time. Uses All."
    },
    {
      "name": "fn.toObject",
      "parameters": [],
      "returnType": "MomentObjectOutput",
      "jsdoc": null,
      "xaiDescription": "Converts moment to an object. Uses MomentObjectOutput."
    },
    {
      "name": "fn.apply",
      "parameters": [
        {
          "name": "thisArg",
          "type": "any",
          "optional": false
        },
        {
          "name": "argArray",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.",
        "params": [
          {
            "name": "thisArg",
            "description": "The object to be used as the this object."
          },
          {
            "name": "argArray",
            "description": "A set of arguments to be passed to the function."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "fn.call",
      "parameters": [
        {
          "name": "thisArg",
          "type": "any",
          "optional": false
        },
        {
          "name": "argArray",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Calls a method of an object, substituting another object for the current object.",
        "params": [
          {
            "name": "thisArg",
            "description": "The object to be used as the current object."
          },
          {
            "name": "argArray",
            "description": "A list of arguments to be passed to the method."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "fn.bind",
      "parameters": [
        {
          "name": "thisArg",
          "type": "any",
          "optional": false
        },
        {
          "name": "argArray",
          "type": "any[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "For a given function, creates a bound function that has the same body as the original function.\nThe this object of the bound function is associated with the specified object, and has the specified initial parameters.",
        "params": [
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer inside the new function."
          },
          {
            "name": "argArray",
            "description": "A list of arguments to be passed to the new function."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "fn.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a function.",
        "deprecated": false
      }
    },
    {
      "name": "fn.__@hasInstance@365",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether the given value inherits from this function if this function was used\nas a constructor function.\n\nA constructor function can control which objects are recognized as its instances by\n'instanceof' by overriding this method.",
        "deprecated": false
      }
    },
    {
      "name": "fn.toLocaleString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a date converted to a string using the current locale.",
        "deprecated": false
      }
    },
    {
      "name": "fn.hasOwnProperty",
      "parameters": [
        {
          "name": "v",
          "type": "PropertyKey",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether an object has a property with the specified name.",
        "params": [
          {
            "name": "v",
            "description": "A property name."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "fn.isPrototypeOf",
      "parameters": [
        {
          "name": "v",
          "type": "Object",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether an object exists in another object's prototype chain.",
        "params": [
          {
            "name": "v",
            "description": "Another object whose prototype chain is to be checked."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "fn.propertyIsEnumerable",
      "parameters": [
        {
          "name": "v",
          "type": "PropertyKey",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether a specified property is enumerable.",
        "params": [
          {
            "name": "v",
            "description": "A property name."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormat.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormat.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormat.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "defaultFormatUtc.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.__@iterator@89",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns the character at the specified index in the string.",
        "params": [
          {
            "name": "index",
            "description": "The index of the character to retrieve."
          }
        ]
      }
    },
    {
      "name": "suppressDeprecationWarnings.valueOf",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "HTML5_FMT.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.__@iterator@89",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "HTML5_FMT.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns the character at the specified index in the string."
      }
    },
    {
      "name": "moment.utc",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "strict",
            "description": "Strict parsing disables the deprecated fallback to the native Date constructor when parsing a string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.unix",
      "parameters": [
        {
          "name": "timestamp",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Creates a moment object from a Unix timestamp."
      }
    },
    {
      "name": "moment.invalid",
      "parameters": [
        {
          "name": "flags",
          "type": "MomentParsingFlagsOpt",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Creates an invalid moment object with optional parsing flags."
      }
    },
    {
      "name": "moment.isMoment",
      "parameters": [
        {
          "name": "m",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the given object is a moment object."
      }
    },
    {
      "name": "moment.isDate",
      "parameters": [
        {
          "name": "m",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the given object is a native Date object."
      }
    },
    {
      "name": "moment.isDuration",
      "parameters": [
        {
          "name": "d",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the given object is a moment duration object."
      }
    },
    {
      "name": "moment.lang",
      "parameters": [
        {
          "name": "language",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.locale",
      "parameters": [
        {
          "name": "language",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Gets or sets the current locale."
      }
    },
    {
      "name": "moment.localeData",
      "parameters": [
        {
          "name": "key",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "Locale",
      "jsdoc": {
        "xaiDescription": "Gets the locale data for the given key(s)."
      }
    },
    {
      "name": "moment.duration",
      "parameters": [
        {
          "name": "inp",
          "type": "DurationInputArg1",
          "optional": true
        },
        {
          "name": "unit",
          "type": "DurationConstructor",
          "optional": true
        }
      ],
      "returnType": "Duration",
      "jsdoc": {
        "xaiDescription": "Creates a duration object from the given input and unit."
      }
    },
    {
      "name": "moment.parseZone",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "format",
          "type": "MomentFormatSpecification",
          "optional": true
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Parses a string with timezone information into a moment object."
      }
    },
    {
      "name": "moment.months",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "xaiDescription": "Returns an array of month names for the current locale."
      }
    },
    {
      "name": "moment.monthsShort",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "xaiDescription": "Returns an array of short month names for the current locale."
      }
    },
    {
      "name": "moment.weekdays",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "xaiDescription": "Returns an array of weekday names for the current locale."
      }
    },
    {
      "name": "moment.weekdaysShort",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "xaiDescription": "Returns an array of short weekday names for the current locale."
      }
    },
    {
      "name": "moment.weekdaysMin",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "xaiDescription": "Returns an array of minimal weekday names for the current locale."
      }
    },
    {
      "name": "moment.min",
      "parameters": [
        {
          "name": "moments",
          "type": "Moment[]",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Returns the earliest moment from the given array of moments."
      }
    },
    {
      "name": "moment.max",
      "parameters": [
        {
          "name": "moments",
          "type": "Moment[]",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Returns the latest moment from the given array of moments."
      }
    },
    {
      "name": "moment.now",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns unix time in milliseconds. Overwrite for profit.",
        "deprecated": false
      }
    },
    {
      "name": "moment.defineLocale",
      "parameters": [
        {
          "name": "language",
          "type": "string",
          "optional": false
        },
        {
          "name": "localeSpec",
          "type": "void | LocaleSpecification",
          "optional": false
        }
      ],
      "returnType": "Locale",
      "jsdoc": {
        "xaiDescription": "Defines a new locale with the given language and locale specification."
      }
    },
    {
      "name": "moment.updateLocale",
      "parameters": [
        {
          "name": "language",
          "type": "string",
          "optional": false
        },
        {
          "name": "localeSpec",
          "type": "void | LocaleSpecification",
          "optional": false
        }
      ],
      "returnType": "Locale",
      "jsdoc": {
        "xaiDescription": "Updates an existing locale with the given language and locale specification."
      }
    },
    {
      "name": "moment.locales",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "xaiDescription": "Returns an array of all available locale names."
      }
    },
    {
      "name": "moment.normalizeUnits",
      "parameters": [
        {
          "name": "unit",
          "type": "All",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Normalizes the given unit of time."
      }
    },
    {
      "name": "moment.relativeTimeThreshold",
      "parameters": [
        {
          "name": "threshold",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number | boolean",
      "jsdoc": {
        "xaiDescription": "Gets or sets the threshold for relative time calculations."
      }
    },
    {
      "name": "moment.relativeTimeRounding",
      "parameters": [
        {
          "name": "fn",
          "type": "(num: number) => number",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Sets the rounding function for relative time calculations."
      }
    },
    {
      "name": "moment.calendarFormat",
      "parameters": [
        {
          "name": "m",
          "type": "Moment",
          "optional": false
        },
        {
          "name": "now",
          "type": "Moment",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns the calendar format string for the given moments."
      }
    },
    {
      "name": "moment.parseTwoDigitYear",
      "parameters": [
        {
          "name": "input",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "xaiDescription": "Parses a two-digit year string into a full year number."
      }
    },
    {
      "name": "moment",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "strict",
            "description": "Strict parsing disables the deprecated fallback to the native Date constructor when parsing a string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "moment.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the searchValue is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of searchValue is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end. If this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end. If end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "moment.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "moment.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "moment.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "moment.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "moment.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "moment.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "moment.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point value of the UTF-16 encoded code point starting at the string element at position pos in the String resulting from converting this object to a String. If there is no element at that position, the result is undefined. If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "moment.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this object to a String, at one or more positions that are greater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at endPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "moment.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default is \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0, the empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the same as the corresponding elements of this object (converted to a String) starting at position. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "moment.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "moment.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded. If this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with. If this string is too long, it will be truncated and the left-most part will be applied. The default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "moment.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "moment.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "moment.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.__@iterator@89",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "moment.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns the character at the specified index in the string."
      }
    },
    {
      "name": "moment.format",
      "parameters": [
        {
          "name": "format",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Formats the moment object according to the given format string."
      }
    },
    {
      "name": "moment.startOf",
      "parameters": [
        {
          "name": "unitOfTime",
          "type": "StartOf",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "xaiDescription": "Sets the moment to the start of the specified unit of time."
      }
    },
    {
      "name": "moment.endOf",
      "parameters": [
        {
          "name": "unitOfTime",
          "type": "StartOf",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets moment to end of specified unit of time. Uses StartOf."
    },
    {
      "name": "moment.add",
      "parameters": [
        {
          "name": "amount",
          "type": "DurationInputArg1",
          "optional": true
        },
        {
          "name": "unit",
          "type": "DurationConstructor",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Adds time to moment. Uses DurationInputArg1, DurationConstructor."
    },
    {
      "name": "moment.subtract",
      "parameters": [
        {
          "name": "amount",
          "type": "DurationInputArg1",
          "optional": true
        },
        {
          "name": "unit",
          "type": "DurationConstructor",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Subtracts time from moment. Uses DurationInputArg1, DurationConstructor."
    },
    {
      "name": "moment.calendar",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Formats moment in calendar format."
    },
    {
      "name": "moment.clone",
      "parameters": [],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Creates a clone of the moment object."
    },
    {
      "name": "moment.local",
      "parameters": [
        {
          "name": "keepLocalTime",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Converts moment to local time. Optionally keeps local time."
    },
    {
      "name": "moment.isLocal",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is in local time."
    },
    {
      "name": "moment.isUTC",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is in UTC."
    },
    {
      "name": "moment.isUtc",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Checks if moment is in UTC. Deprecated."
    },
    {
      "name": "moment.isValid",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is valid."
    },
    {
      "name": "moment.invalidAt",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Returns index of invalid component in moment."
    },
    {
      "name": "moment.hasAlignedHourOffset",
      "parameters": [
        {
          "name": "other",
          "type": "MomentInput",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment has same hour offset as another. Uses MomentInput."
    },
    {
      "name": "moment.creationData",
      "parameters": [],
      "returnType": "MomentCreationData",
      "jsdoc": null,
      "xaiDescription": "Returns creation data of moment. Uses MomentCreationData."
    },
    {
      "name": "moment.parsingFlags",
      "parameters": [],
      "returnType": "MomentParsingFlags",
      "jsdoc": null,
      "xaiDescription": "Returns parsing flags of moment. Uses MomentParsingFlags."
    },
    {
      "name": "moment.year",
      "parameters": [
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets year of moment."
    },
    {
      "name": "moment.years",
      "parameters": [
        {
          "name": "y",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Sets or gets year of moment. Deprecated."
    },
    {
      "name": "moment.quarter",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets quarter of moment."
    },
    {
      "name": "moment.quarters",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets quarter of moment."
    },
    {
      "name": "moment.month",
      "parameters": [
        {
          "name": "M",
          "type": "string | number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets month of moment."
    },
    {
      "name": "moment.day",
      "parameters": [
        {
          "name": "d",
          "type": "string | number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets day of week of moment."
    },
    {
      "name": "moment.days",
      "parameters": [
        {
          "name": "d",
          "type": "string | number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets day of week of moment."
    },
    {
      "name": "moment.date",
      "parameters": [
        {
          "name": "d",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets day of month of moment."
    },
    {
      "name": "moment.dates",
      "parameters": [
        {
          "name": "d",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Sets or gets day of month of moment. Deprecated."
    },
    {
      "name": "moment.hour",
      "parameters": [
        {
          "name": "h",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets hour of moment."
    },
    {
      "name": "moment.hours",
      "parameters": [
        {
          "name": "h",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets hour of moment."
    },
    {
      "name": "moment.minute",
      "parameters": [
        {
          "name": "m",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets minute of moment."
    },
    {
      "name": "moment.minutes",
      "parameters": [
        {
          "name": "m",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets minute of moment."
    },
    {
      "name": "moment.second",
      "parameters": [
        {
          "name": "s",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets second of moment."
    },
    {
      "name": "moment.seconds",
      "parameters": [
        {
          "name": "s",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets second of moment."
    },
    {
      "name": "moment.millisecond",
      "parameters": [
        {
          "name": "ms",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets millisecond of moment."
    },
    {
      "name": "moment.milliseconds",
      "parameters": [
        {
          "name": "ms",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets or gets millisecond of moment."
    },
    {
      "name": "moment.weekday",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets weekday of moment."
    },
    {
      "name": "moment.isoWeekday",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets ISO weekday of moment."
    },
    {
      "name": "moment.weekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets week year of moment."
    },
    {
      "name": "moment.isoWeekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets ISO week year of moment."
    },
    {
      "name": "moment.week",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets week of year of moment."
    },
    {
      "name": "moment.weeks",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets week of year of moment."
    },
    {
      "name": "moment.isoWeek",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets ISO week of year of moment."
    },
    {
      "name": "moment.isoWeeks",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets ISO week of year of moment."
    },
    {
      "name": "moment.weeksInYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets number of weeks in year of moment."
    },
    {
      "name": "moment.weeksInWeekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets number of weeks in week year of moment."
    },
    {
      "name": "moment.isoWeeksInYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets number of ISO weeks in year of moment."
    },
    {
      "name": "moment.isoWeeksInISOWeekYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets number of ISO weeks in ISO week year of moment."
    },
    {
      "name": "moment.dayOfYear",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets day of year of moment."
    },
    {
      "name": "moment.from",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "suffix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Formats time difference from input. Uses MomentInput."
    },
    {
      "name": "moment.to",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "suffix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Formats time difference to input. Uses MomentInput."
    },
    {
      "name": "moment.fromNow",
      "parameters": [
        {
          "name": "withoutSuffix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Formats time difference from now."
    },
    {
      "name": "moment.toNow",
      "parameters": [
        {
          "name": "withoutPrefix",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Formats time difference to now."
    },
    {
      "name": "moment.diff",
      "parameters": [
        {
          "name": "b",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "unitOfTime",
          "type": "Diff",
          "optional": true
        },
        {
          "name": "precise",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Calculates difference between moments. Uses MomentInput, Diff."
    },
    {
      "name": "moment.toArray",
      "parameters": [],
      "returnType": "number[]",
      "jsdoc": null,
      "xaiDescription": "Converts moment to array of numbers."
    },
    {
      "name": "moment.toDate",
      "parameters": [],
      "returnType": "Date",
      "jsdoc": null,
      "xaiDescription": "Converts moment to native Date object."
    },
    {
      "name": "moment.toISOString",
      "parameters": [
        {
          "name": "keepOffset",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Converts moment to ISO 8601 string."
    },
    {
      "name": "moment.inspect",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Returns string representation of moment for debugging."
    },
    {
      "name": "moment.toJSON",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Converts moment to JSON string."
    },
    {
      "name": "moment.isLeapYear",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if year of moment is a leap year."
    },
    {
      "name": "moment.zone",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Gets timezone offset of moment in minutes. Deprecated."
    },
    {
      "name": "moment.utcOffset",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets UTC offset of moment in minutes."
    },
    {
      "name": "moment.isUtcOffset",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment has a UTC offset."
    },
    {
      "name": "moment.daysInMonth",
      "parameters": [],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets number of days in month of moment."
    },
    {
      "name": "moment.isDST",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is in Daylight Saving Time."
    },
    {
      "name": "moment.zoneAbbr",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Gets timezone abbreviation of moment."
    },
    {
      "name": "moment.zoneName",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Gets timezone name of moment."
    },
    {
      "name": "moment.isBefore",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is before input. Uses MomentInput, StartOf."
    },
    {
      "name": "moment.isAfter",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is after input. Uses MomentInput, StartOf."
    },
    {
      "name": "moment.isSame",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is same as input. Uses MomentInput, StartOf."
    },
    {
      "name": "moment.isSameOrAfter",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is same or after input. Uses MomentInput, StartOf."
    },
    {
      "name": "moment.isSameOrBefore",
      "parameters": [
        {
          "name": "inp",
          "type": "MomentInput",
          "optional": true
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is same or before input. Uses MomentInput, StartOf."
    },
    {
      "name": "moment.isBetween",
      "parameters": [
        {
          "name": "a",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "b",
          "type": "MomentInput",
          "optional": false
        },
        {
          "name": "granularity",
          "type": "StartOf",
          "optional": true
        },
        {
          "name": "inclusivity",
          "type": "\"()\" | \"[)\" | \"(]\" | \"[]\"",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if moment is between two inputs. Uses MomentInput, StartOf."
    },
    {
      "name": "moment.isDSTShifted",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Checks if moment is shifted due to DST. Deprecated."
    },
    {
      "name": "moment.get",
      "parameters": [
        {
          "name": "unit",
          "type": "All",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Gets value of specified unit of time. Uses All."
    },
    {
      "name": "moment.set",
      "parameters": [
        {
          "name": "unit",
          "type": "All",
          "optional": false
        },
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Moment",
      "jsdoc": null,
      "xaiDescription": "Sets value of specified unit of time. Uses All."
    },
    {
      "name": "moment.toObject",
      "parameters": [],
      "returnType": "MomentObjectOutput",
      "jsdoc": null,
      "xaiDescription": "Converts moment to plain object. Uses MomentObjectOutput."
    },
    {
      "name": "moment.toLocaleString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a date converted to a string using the current locale.",
        "deprecated": false
      }
    },
    {
      "name": "moment.hasOwnProperty",
      "parameters": [
        {
          "name": "v",
          "type": "PropertyKey",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether an object has a property with the specified name.",
        "params": [
          {
            "name": "v",
            "description": "A property name."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.isPrototypeOf",
      "parameters": [
        {
          "name": "v",
          "type": "Object",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether an object exists in another object's prototype chain.",
        "params": [
          {
            "name": "v",
            "description": "Another object whose prototype chain is to be checked."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "moment.propertyIsEnumerable",
      "parameters": [
        {
          "name": "v",
          "type": "PropertyKey",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether a specified property is enumerable.",
        "params": [
          {
            "name": "v",
            "description": "A property name."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "__@iterator@4054",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "version.__@iterator@4054",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "fn.__@hasInstance@4329",
      "parameters": [
        {
          "name": "value",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether the given value inherits from this function if this function was used\nas a constructor function.\n\nA constructor function can control which objects are recognized as its instances by\n'instanceof' by overriding this method.",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormat.__@iterator@4054",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "defaultFormatUtc.__@iterator@4054",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "deprecationHandler",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "msg",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Handles deprecation warnings with name and message."
    },
    {
      "name": "HTML5_FMT.__@iterator@4054",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "moment.__@iterator@4054",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "moment.deprecationHandler",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "msg",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Handles deprecation warnings for moment with name and message."
    }
  ],
  "enums": [],
  "types": [
    {
      "name": "RelativeTimeKey",
      "type": "RelativeTimeKey",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@89",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Key for relative time formatting."
    },
    {
      "name": "CalendarKey",
      "type": "string",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@89",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Key for calendar formatting."
    },
    {
      "name": "LongDateFormatKey",
      "type": "LongDateFormatKey",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts object to string."
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false,
          "xaiDescription": "Returns character at specified position."
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false,
          "xaiDescription": "Returns Unicode value of character at index."
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false,
          "xaiDescription": "Joins strings and returns new string."
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Searches for string, returns position or -1."
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Searches for string from end, returns position or -1."
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false,
          "xaiDescription": "Compares strings based on locale settings."
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false,
          "xaiDescription": "Finds matches in string using regex."
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false,
          "xaiDescription": "Replaces parts of string with new value."
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false,
          "xaiDescription": "Searches string for regex match, returns position."
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts section of string, returns new string."
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false,
          "xaiDescription": "Splits string into array based on separator."
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts part of string, returns new string."
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts string to lowercase."
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Converts string to lowercase based on locale."
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts string to uppercase."
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Converts string to uppercase based on locale."
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from both ends of string."
        },
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Number of characters in string."
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts part of string from specified position."
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Returns primitive value of string."
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false,
          "xaiDescription": "Returns Unicode code point at given position."
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Checks if string contains another string."
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false,
          "xaiDescription": "Checks if string ends with specified string."
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false,
          "xaiDescription": "Returns Unicode normalized string."
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false,
          "xaiDescription": "Creates new string by repeating string."
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Checks if string starts with specified string."
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false,
          "xaiDescription": "Creates HTML anchor element."
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates HTML <big> element."
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates HTML <blink> element."
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates HTML <b> element."
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates HTML <tt> element."
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false,
          "xaiDescription": "Creates HTML <font> element with color."
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false,
          "xaiDescription": "Creates HTML <font> element with size."
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates HTML <i> element."
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false,
          "xaiDescription": "Creates HTML hyperlink element."
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates HTML <small> element."
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates HTML <strike> element."
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates HTML <sub> element."
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates HTML <sup> element."
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pads string at start to specified length."
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pads string at end to specified length."
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from end of string."
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from start of string."
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from left of string."
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from right of string."
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false,
          "xaiDescription": "Returns all regex matches as iterator."
        },
        {
          "name": "__@iterator@89",
          "type": "() => StringIterator<string>",
          "optional": false,
          "xaiDescription": "Default iterator for string."
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false,
          "xaiDescription": "Returns character at given index."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents keys for long date format."
    },
    {
      "name": "Locale",
      "type": "Locale",
      "properties": [
        {
          "name": "calendar",
          "type": "(key?: string, m?: Moment, now?: Moment) => string",
          "optional": false,
          "xaiDescription": "Formats date relative to now."
        },
        {
          "name": "longDateFormat",
          "type": "(key: LongDateFormatKey) => string",
          "optional": false,
          "xaiDescription": "Returns long date format string."
        },
        {
          "name": "invalidDate",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Returns string for invalid date."
        },
        {
          "name": "ordinal",
          "type": "(n: number) => string",
          "optional": false,
          "xaiDescription": "Returns ordinal suffix for number."
        },
        {
          "name": "preparse",
          "type": "(inp: string) => string",
          "optional": false,
          "xaiDescription": "Prepares input string for parsing."
        },
        {
          "name": "postformat",
          "type": "(inp: string) => string",
          "optional": false,
          "xaiDescription": "Formats output string after parsing."
        },
        {
          "name": "relativeTime",
          "type": "(n: number, withoutSuffix: boolean, key: RelativeTimeKey, isFuture: boolean) => string",
          "optional": false,
          "xaiDescription": "Formats relative time string."
        },
        {
          "name": "pastFuture",
          "type": "(diff: number, absRelTime: string) => string",
          "optional": false,
          "xaiDescription": "Formats past or future time string."
        },
        {
          "name": "set",
          "type": "(config: Object) => void",
          "optional": false,
          "xaiDescription": "Sets locale configuration."
        },
        {
          "name": "months",
          "type": "{ (): string[]; (m: Moment, format?: string): string; }",
          "optional": false,
          "xaiDescription": "Returns array of month names or formats month."
        },
        {
          "name": "monthsShort",
          "type": "{ (): string[]; (m: Moment, format?: string): string; }",
          "optional": false,
          "xaiDescription": "Returns array of short month names or formats."
        },
        {
          "name": "monthsParse",
          "type": "(monthName: string, format: string, strict: boolean) => number",
          "optional": false,
          "xaiDescription": "Parses month name to number."
        },
        {
          "name": "monthsRegex",
          "type": "(strict: boolean) => RegExp",
          "optional": false,
          "xaiDescription": "Returns regex for month names."
        },
        {
          "name": "monthsShortRegex",
          "type": "(strict: boolean) => RegExp",
          "optional": false,
          "xaiDescription": "Returns regex for short month names."
        },
        {
          "name": "week",
          "type": "(m: Moment) => number",
          "optional": false,
          "xaiDescription": "Returns week number of year."
        },
        {
          "name": "firstDayOfYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Returns first day of year."
        },
        {
          "name": "firstDayOfWeek",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Returns first day of week."
        },
        {
          "name": "weekdays",
          "type": "{ (): string[]; (m: Moment, format?: string): string; }",
          "optional": false,
          "xaiDescription": "Returns array of weekday names or formats."
        },
        {
          "name": "weekdaysMin",
          "type": "{ (): string[]; (m: Moment): string; }",
          "optional": false,
          "xaiDescription": "Returns array of minimal weekday names or formats."
        },
        {
          "name": "weekdaysShort",
          "type": "{ (): string[]; (m: Moment): string; }",
          "optional": false,
          "xaiDescription": "Returns array of short weekday names or formats."
        },
        {
          "name": "weekdaysParse",
          "type": "(weekdayName: string, format: string, strict: boolean) => number",
          "optional": false,
          "xaiDescription": "Parses weekday name to number."
        },
        {
          "name": "weekdaysRegex",
          "type": "(strict: boolean) => RegExp",
          "optional": false,
          "xaiDescription": "Returns regex for weekday names."
        },
        {
          "name": "weekdaysShortRegex",
          "type": "(strict: boolean) => RegExp",
          "optional": false,
          "xaiDescription": "Returns regex for short weekday names."
        },
        {
          "name": "weekdaysMinRegex",
          "type": "(strict: boolean) => RegExp",
          "optional": false,
          "xaiDescription": "Returns regex for minimal weekday names."
        },
        {
          "name": "isPM",
          "type": "(input: string) => boolean",
          "optional": false,
          "xaiDescription": "Checks if input is PM."
        },
        {
          "name": "meridiem",
          "type": "(hour: number, minute: number, isLower: boolean) => string",
          "optional": false,
          "xaiDescription": "Returns AM/PM based on time."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Defines locale-specific date and time formatting."
    },
    {
      "name": "StandaloneFormatSpec",
      "type": "StandaloneFormatSpec",
      "properties": [
        {
          "name": "format",
          "type": "string[]",
          "optional": false,
          "xaiDescription": "Array of format strings."
        },
        {
          "name": "standalone",
          "type": "string[]",
          "optional": false,
          "xaiDescription": "Array of standalone strings."
        },
        {
          "name": "isFormat",
          "type": "RegExp",
          "optional": true,
          "xaiDescription": "Regex to check if string is format."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Specifies format and standalone strings."
    },
    {
      "name": "WeekSpec",
      "type": "WeekSpec",
      "properties": [
        {
          "name": "dow",
          "type": "number",
          "optional": false,
          "xaiDescription": "Day of week (0-6, Sunday=0)."
        },
        {
          "name": "doy",
          "type": "number",
          "optional": true,
          "xaiDescription": "Day of year (1-366)."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Specifies week start day and year day."
    },
    {
      "name": "CalendarSpecVal",
      "type": "CalendarSpecVal",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string)",
          "optional": false,
          "xaiDescription": "Converts object to string."
        },
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Length of string representation."
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false,
          "xaiDescription": "Returns primitive value of object."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Value for calendar specification."
    },
    {
      "name": "CalendarSpec",
      "type": "CalendarSpec",
      "properties": [
        {
          "name": "sameDay",
          "type": "CalendarSpecVal",
          "optional": true,
          "xaiDescription": "Format for same day."
        },
        {
          "name": "nextDay",
          "type": "CalendarSpecVal",
          "optional": true,
          "xaiDescription": "Format for next day."
        },
        {
          "name": "lastDay",
          "type": "CalendarSpecVal",
          "optional": true,
          "xaiDescription": "Format for last day."
        },
        {
          "name": "nextWeek",
          "type": "CalendarSpecVal",
          "optional": true,
          "xaiDescription": "Format for next week."
        },
        {
          "name": "lastWeek",
          "type": "CalendarSpecVal",
          "optional": true,
          "xaiDescription": "Format for last week."
        },
        {
          "name": "sameElse",
          "type": "CalendarSpecVal",
          "optional": true,
          "xaiDescription": "Format for other cases."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Specifies calendar format strings."
    },
    {
      "name": "RelativeTimeSpecVal",
      "type": "RelativeTimeSpecVal",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string)",
          "optional": false,
          "xaiDescription": "Converts object to string."
        },
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Length of string representation."
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false,
          "xaiDescription": "Returns primitive value of object."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Value for relative time specification."
    },
    {
      "name": "RelativeTimeFuturePastVal",
      "type": "RelativeTimeFuturePastVal",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string)",
          "optional": false,
          "xaiDescription": "Converts object to string."
        },
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Length of string representation."
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false,
          "xaiDescription": "Returns primitive value of object."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Value for future or past relative time."
    },
    {
      "name": "RelativeTimeSpec",
      "type": "RelativeTimeSpec",
      "properties": [
        {
          "name": "future",
          "type": "RelativeTimeFuturePastVal",
          "optional": true,
          "xaiDescription": "Format for future relative time."
        },
        {
          "name": "past",
          "type": "RelativeTimeFuturePastVal",
          "optional": true,
          "xaiDescription": "Format for past relative time."
        },
        {
          "name": "s",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for seconds."
        },
        {
          "name": "ss",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for seconds plural."
        },
        {
          "name": "m",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for minutes."
        },
        {
          "name": "mm",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for minutes plural."
        },
        {
          "name": "h",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for hours."
        },
        {
          "name": "hh",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for hours plural."
        },
        {
          "name": "d",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for days."
        },
        {
          "name": "dd",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for days plural."
        },
        {
          "name": "w",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for weeks."
        },
        {
          "name": "ww",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for weeks plural."
        },
        {
          "name": "M",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for months."
        },
        {
          "name": "MM",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for months plural."
        },
        {
          "name": "y",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for years."
        },
        {
          "name": "yy",
          "type": "RelativeTimeSpecVal",
          "optional": true,
          "xaiDescription": "Format for years plural."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Specifies relative time format strings."
    },
    {
      "name": "LongDateFormatSpec",
      "type": "LongDateFormatSpec",
      "properties": [
        {
          "name": "LTS",
          "type": "string",
          "optional": false,
          "xaiDescription": "Long time format."
        },
        {
          "name": "LT",
          "type": "string",
          "optional": false,
          "xaiDescription": "Short time format."
        },
        {
          "name": "L",
          "type": "string",
          "optional": false,
          "xaiDescription": "Short date format."
        },
        {
          "name": "LL",
          "type": "string",
          "optional": false,
          "xaiDescription": "Long date format."
        },
        {
          "name": "LLL",
          "type": "string",
          "optional": false,
          "xaiDescription": "Long date and short time format."
        },
        {
          "name": "LLLL",
          "type": "string",
          "optional": false,
          "xaiDescription": "Long date and long time format."
        },
        {
          "name": "lts",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase long time format."
        },
        {
          "name": "lt",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase short time format."
        },
        {
          "name": "l",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase short date format."
        },
        {
          "name": "ll",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase long date format."
        },
        {
          "name": "lll",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase long date and short time format."
        },
        {
          "name": "llll",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase long date and long time format."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Specifies long date format strings."
    },
    {
      "name": "MonthWeekdayFn",
      "type": "MonthWeekdayFn",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Function for month or weekday formatting."
    },
    {
      "name": "WeekdaySimpleFn",
      "type": "WeekdaySimpleFn",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Simple function for weekday formatting."
    },
    {
      "name": "EraSpec",
      "type": "EraSpec",
      "properties": [
        {
          "name": "since",
          "type": "string | number",
          "optional": false,
          "xaiDescription": "Start year of era."
        },
        {
          "name": "until",
          "type": "string | number",
          "optional": false,
          "xaiDescription": "End year of era."
        },
        {
          "name": "offset",
          "type": "number",
          "optional": false,
          "xaiDescription": "Offset for era calculation."
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "xaiDescription": "Full name of era."
        },
        {
          "name": "narrow",
          "type": "string",
          "optional": false,
          "xaiDescription": "Short name of era."
        },
        {
          "name": "abbr",
          "type": "string",
          "optional": false,
          "xaiDescription": "Abbreviation of era."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Specifies era details."
    },
    {
      "name": "LocaleSpecification",
      "type": "LocaleSpecification",
      "properties": [
        {
          "name": "months",
          "type": "string[] | StandaloneFormatSpec | MonthWeekdayFn",
          "optional": true,
          "xaiDescription": "Month names or formatting function."
        },
        {
          "name": "monthsShort",
          "type": "string[] | StandaloneFormatSpec | MonthWeekdayFn",
          "optional": true,
          "xaiDescription": "Short month names or formatting function."
        },
        {
          "name": "weekdays",
          "type": "string[] | StandaloneFormatSpec | MonthWeekdayFn",
          "optional": true,
          "xaiDescription": "Weekday names or formatting function."
        },
        {
          "name": "weekdaysShort",
          "type": "string[] | StandaloneFormatSpec | WeekdaySimpleFn",
          "optional": true,
          "xaiDescription": "Short weekday names or formatting function."
        },
        {
          "name": "weekdaysMin",
          "type": "string[] | StandaloneFormatSpec | WeekdaySimpleFn",
          "optional": true,
          "xaiDescription": "Minimal weekday names or formatting function."
        },
        {
          "name": "meridiemParse",
          "type": "RegExp",
          "optional": true,
          "xaiDescription": "Regex for parsing AM/PM."
        },
        {
          "name": "meridiem",
          "type": "(hour: number, minute: number, isLower: boolean) => string",
          "optional": true,
          "xaiDescription": "Returns AM/PM based on time."
        },
        {
          "name": "isPM",
          "type": "(input: string) => boolean",
          "optional": true,
          "xaiDescription": "Checks if input is PM."
        },
        {
          "name": "longDateFormat",
          "type": "LongDateFormatSpec",
          "optional": true,
          "xaiDescription": "Long date format specification."
        },
        {
          "name": "calendar",
          "type": "CalendarSpec",
          "optional": true,
          "xaiDescription": "Calendar format specification."
        },
        {
          "name": "relativeTime",
          "type": "RelativeTimeSpec",
          "optional": true,
          "xaiDescription": "Relative time format specification."
        },
        {
          "name": "invalidDate",
          "type": "string",
          "optional": true,
          "xaiDescription": "String for invalid date."
        },
        {
          "name": "ordinal",
          "type": "(n: number) => string",
          "optional": true,
          "xaiDescription": "Returns ordinal suffix for number."
        },
        {
          "name": "ordinalParse",
          "type": "RegExp",
          "optional": true,
          "xaiDescription": "Regex for parsing ordinal numbers."
        },
        {
          "name": "week",
          "type": "WeekSpec",
          "optional": true,
          "xaiDescription": "Week specification."
        },
        {
          "name": "eras",
          "type": "EraSpec[]",
          "optional": true,
          "xaiDescription": "Array of era specifications."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Defines locale-specific formatting options."
    },
    {
      "name": "MomentObjectOutput",
      "type": "MomentObjectOutput",
      "properties": [
        {
          "name": "years",
          "type": "number",
          "optional": false,
          "xaiDescription": "Year value."
        },
        {
          "name": "months",
          "type": "number",
          "optional": false,
          "xaiDescription": "Month value (0-11)."
        },
        {
          "name": "date",
          "type": "number",
          "optional": false,
          "xaiDescription": "Day of month."
        },
        {
          "name": "hours",
          "type": "number",
          "optional": false,
          "xaiDescription": "Hour value (0-23)."
        },
        {
          "name": "minutes",
          "type": "number",
          "optional": false,
          "xaiDescription": "Minute value (0-59)."
        },
        {
          "name": "seconds",
          "type": "number",
          "optional": false,
          "xaiDescription": "Second value (0-59)."
        },
        {
          "name": "milliseconds",
          "type": "number",
          "optional": false,
          "xaiDescription": "Millisecond value (0-999)."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Output format for moment object."
    },
    {
      "name": "argThresholdOpts",
      "type": "argThresholdOpts",
      "properties": [
        {
          "name": "ss",
          "type": "number",
          "optional": true,
          "xaiDescription": "Seconds threshold."
        },
        {
          "name": "s",
          "type": "number",
          "optional": true,
          "xaiDescription": "Seconds threshold (singular)."
        },
        {
          "name": "m",
          "type": "number",
          "optional": true,
          "xaiDescription": "Minutes threshold."
        },
        {
          "name": "h",
          "type": "number",
          "optional": true,
          "xaiDescription": "Hours threshold."
        },
        {
          "name": "d",
          "type": "number",
          "optional": true,
          "xaiDescription": "Days threshold."
        },
        {
          "name": "w",
          "type": "number | void",
          "optional": true,
          "xaiDescription": "Weeks threshold or void."
        },
        {
          "name": "M",
          "type": "number",
          "optional": true,
          "xaiDescription": "Months threshold."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Options for relative time thresholds."
    },
    {
      "name": "Duration",
      "type": "Duration",
      "properties": [
        {
          "name": "clone",
          "type": "() => Duration",
          "optional": false,
          "xaiDescription": "Creates a copy of the duration."
        },
        {
          "name": "humanize",
          "type": "{ (argWithSuffix?: boolean, argThresholds?: argThresholdOpts): string; (argThresholds?: argThresholdOpts): string; }",
          "optional": false,
          "xaiDescription": "Converts duration to human-readable string."
        },
        {
          "name": "abs",
          "type": "() => Duration",
          "optional": false,
          "xaiDescription": "Returns absolute value of duration."
        },
        {
          "name": "as",
          "type": "(units: Base) => number",
          "optional": false,
          "xaiDescription": "Converts duration to specified units."
        },
        {
          "name": "get",
          "type": "(units: Base) => number",
          "optional": false,
          "xaiDescription": "Gets value of duration in specified units."
        },
        {
          "name": "milliseconds",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets duration in milliseconds."
        },
        {
          "name": "asMilliseconds",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Converts duration to milliseconds."
        },
        {
          "name": "seconds",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets duration in seconds."
        },
        {
          "name": "asSeconds",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Converts duration to seconds."
        },
        {
          "name": "minutes",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets duration in minutes."
        },
        {
          "name": "asMinutes",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Converts duration to minutes."
        },
        {
          "name": "hours",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets duration in hours."
        },
        {
          "name": "asHours",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Converts duration to hours."
        },
        {
          "name": "days",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets duration in days."
        },
        {
          "name": "asDays",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Converts duration to days."
        },
        {
          "name": "weeks",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets duration in weeks."
        },
        {
          "name": "asWeeks",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Converts duration to weeks."
        },
        {
          "name": "months",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets duration in months."
        },
        {
          "name": "asMonths",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Converts duration to months."
        },
        {
          "name": "years",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets duration in years."
        },
        {
          "name": "asYears",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Converts duration to years."
        },
        {
          "name": "add",
          "type": "(inp?: DurationInputArg1, unit?: DurationConstructor) => Duration",
          "optional": false,
          "xaiDescription": "Adds duration to current duration."
        },
        {
          "name": "subtract",
          "type": "(inp?: DurationInputArg1, unit?: DurationConstructor) => Duration",
          "optional": false,
          "xaiDescription": "Subtracts duration from current duration."
        },
        {
          "name": "locale",
          "type": "{ (): string; (locale: LocaleSpecifier): Duration; }",
          "optional": false,
          "xaiDescription": "Gets or sets the locale for duration."
        },
        {
          "name": "localeData",
          "type": "() => Locale",
          "optional": false,
          "xaiDescription": "Returns locale data for duration."
        },
        {
          "name": "toISOString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts duration to ISO 8601 string."
        },
        {
          "name": "toJSON",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts duration to JSON string."
        },
        {
          "name": "isValid",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Checks if duration is valid."
        },
        {
          "name": "lang",
          "type": "{ (locale: LocaleSpecifier): Moment; (): Locale; }",
          "optional": false,
          "xaiDescription": "Gets or sets the language for duration."
        },
        {
          "name": "toIsoString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts duration to ISO 8601 string."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a time duration."
    },
    {
      "name": "MomentRelativeTime",
      "type": "MomentRelativeTime",
      "properties": [
        {
          "name": "future",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for future time."
        },
        {
          "name": "past",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for past time."
        },
        {
          "name": "s",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for seconds."
        },
        {
          "name": "ss",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for seconds plural."
        },
        {
          "name": "m",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for minutes."
        },
        {
          "name": "mm",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for minutes plural."
        },
        {
          "name": "h",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for hours."
        },
        {
          "name": "hh",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for hours plural."
        },
        {
          "name": "d",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for days."
        },
        {
          "name": "dd",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for days plural."
        },
        {
          "name": "M",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for months."
        },
        {
          "name": "MM",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for months plural."
        },
        {
          "name": "y",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for years."
        },
        {
          "name": "yy",
          "type": "any",
          "optional": false,
          "xaiDescription": "Format for years plural."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Specifies relative time format strings."
    },
    {
      "name": "MomentLongDateFormat",
      "type": "MomentLongDateFormat",
      "properties": [
        {
          "name": "L",
          "type": "string",
          "optional": false,
          "xaiDescription": "Short date format."
        },
        {
          "name": "LL",
          "type": "string",
          "optional": false,
          "xaiDescription": "Long date format."
        },
        {
          "name": "LLL",
          "type": "string",
          "optional": false,
          "xaiDescription": "Long date and short time format."
        },
        {
          "name": "LLLL",
          "type": "string",
          "optional": false,
          "xaiDescription": "Long date and long time format."
        },
        {
          "name": "LT",
          "type": "string",
          "optional": false,
          "xaiDescription": "Short time format."
        },
        {
          "name": "LTS",
          "type": "string",
          "optional": false,
          "xaiDescription": "Long time format."
        },
        {
          "name": "l",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase short date format."
        },
        {
          "name": "ll",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase long date format."
        },
        {
          "name": "lll",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase long date and short time format."
        },
        {
          "name": "llll",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase long date and long time format."
        },
        {
          "name": "lt",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase short time format."
        },
        {
          "name": "lts",
          "type": "string",
          "optional": true,
          "xaiDescription": "Lowercase long time format."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Specifies long date format strings."
    },
    {
      "name": "MomentParsingFlags",
      "type": "MomentParsingFlags",
      "properties": [
        {
          "name": "empty",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Indicates if input is empty."
        },
        {
          "name": "unusedTokens",
          "type": "string[]",
          "optional": false,
          "xaiDescription": "Array of unused tokens."
        },
        {
          "name": "unusedInput",
          "type": "string[]",
          "optional": false,
          "xaiDescription": "Array of unused input."
        },
        {
          "name": "overflow",
          "type": "number",
          "optional": false,
          "xaiDescription": "Indicates overflow type."
        },
        {
          "name": "charsLeftOver",
          "type": "number",
          "optional": false,
          "xaiDescription": "Number of leftover characters."
        },
        {
          "name": "nullInput",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Indicates null input."
        },
        {
          "name": "invalidMonth",
          "type": "string | void",
          "optional": false,
          "xaiDescription": "Invalid month name or void."
        },
        {
          "name": "invalidFormat",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Indicates invalid format."
        },
        {
          "name": "userInvalidated",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Indicates user invalidation."
        },
        {
          "name": "iso",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Indicates ISO format."
        },
        {
          "name": "parsedDateParts",
          "type": "any[]",
          "optional": false,
          "xaiDescription": "Array of parsed date parts."
        },
        {
          "name": "meridiem",
          "type": "string | void",
          "optional": false,
          "xaiDescription": "Meridiem or void."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Flags for moment parsing."
    },
    {
      "name": "MomentParsingFlagsOpt",
      "type": "MomentParsingFlagsOpt",
      "properties": [
        {
          "name": "empty",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Indicates if input is empty."
        },
        {
          "name": "unusedTokens",
          "type": "string[]",
          "optional": true,
          "xaiDescription": "Array of unused tokens."
        },
        {
          "name": "unusedInput",
          "type": "string[]",
          "optional": true,
          "xaiDescription": "Array of unused input."
        },
        {
          "name": "overflow",
          "type": "number",
          "optional": true,
          "xaiDescription": "Indicates overflow type."
        },
        {
          "name": "charsLeftOver",
          "type": "number",
          "optional": true,
          "xaiDescription": "Number of leftover characters."
        },
        {
          "name": "nullInput",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Indicates null input."
        },
        {
          "name": "invalidMonth",
          "type": "string",
          "optional": true,
          "xaiDescription": "Invalid month name."
        },
        {
          "name": "invalidFormat",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Indicates invalid format."
        },
        {
          "name": "userInvalidated",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Indicates user invalidation."
        },
        {
          "name": "iso",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Indicates ISO format."
        },
        {
          "name": "parsedDateParts",
          "type": "any[]",
          "optional": true,
          "xaiDescription": "Array of parsed date parts."
        },
        {
          "name": "meridiem",
          "type": "string",
          "optional": true,
          "xaiDescription": "Meridiem."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Optional flags for moment parsing."
    },
    {
      "name": "MomentBuiltinFormat",
      "type": "MomentBuiltinFormat",
      "properties": [
        {
          "name": "__momentBuiltinFormatBrand",
          "type": "any",
          "optional": false,
          "xaiDescription": "Internal brand for built-in format."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents built-in moment format."
    },
    {
      "name": "MomentFormatSpecification",
      "type": "MomentFormatSpecification",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string) | (() => string)",
          "optional": false,
          "xaiDescription": "Converts object to string."
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false,
          "xaiDescription": "Returns primitive value of object."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Specifies moment format."
    },
    {
      "name": "numberlike",
      "type": "numberlike",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | ((radix?: number) => string)",
          "optional": false,
          "xaiDescription": "Converts number to string."
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => number)",
          "optional": false,
          "xaiDescription": "Returns primitive value of number."
        },
        {
          "name": "toLocaleString",
          "type": "{ (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; } | (() => string)",
          "optional": false,
          "xaiDescription": "Converts number to locale-specific string."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a number-like value."
    },
    {
      "name": "MomentInputObject",
      "type": "MomentInputObject",
      "properties": [
        {
          "name": "years",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Year value."
        },
        {
          "name": "year",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Year value."
        },
        {
          "name": "y",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Year value."
        },
        {
          "name": "months",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Month value (0-11)."
        },
        {
          "name": "month",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Month value (0-11)."
        },
        {
          "name": "M",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Month value (0-11)."
        },
        {
          "name": "days",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day of month."
        },
        {
          "name": "day",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day of month."
        },
        {
          "name": "d",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day of month."
        },
        {
          "name": "dates",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day of month."
        },
        {
          "name": "date",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day of month."
        },
        {
          "name": "D",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day of month."
        },
        {
          "name": "hours",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Hour value (0-23)."
        },
        {
          "name": "hour",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Hour value (0-23)."
        },
        {
          "name": "h",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Hour value (0-23)."
        },
        {
          "name": "minutes",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Minute value (0-59)."
        },
        {
          "name": "minute",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Minute value (0-59)."
        },
        {
          "name": "m",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Minute value (0-59)."
        },
        {
          "name": "seconds",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Second value (0-59)."
        },
        {
          "name": "second",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Second value (0-59)."
        },
        {
          "name": "s",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Second value (0-59)."
        },
        {
          "name": "milliseconds",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Millisecond value (0-999)."
        },
        {
          "name": "millisecond",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Millisecond value (0-999)."
        },
        {
          "name": "ms",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Millisecond value (0-999)."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Input format for moment object."
    },
    {
      "name": "DurationInputObject",
      "type": "DurationInputObject",
      "properties": [
        {
          "name": "quarters",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Quarter value."
        },
        {
          "name": "quarter",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Quarter value."
        },
        {
          "name": "Q",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Quarter value."
        },
        {
          "name": "weeks",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Week value."
        },
        {
          "name": "week",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Week value."
        },
        {
          "name": "w",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Week value."
        },
        {
          "name": "years",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Year value."
        },
        {
          "name": "year",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Year value."
        },
        {
          "name": "y",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Year value."
        },
        {
          "name": "months",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Month value (0-11)."
        },
        {
          "name": "month",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Month value (0-11)."
        },
        {
          "name": "M",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Month value (0-11)."
        },
        {
          "name": "days",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day value."
        },
        {
          "name": "day",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day value."
        },
        {
          "name": "d",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day value."
        },
        {
          "name": "dates",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day value."
        },
        {
          "name": "date",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day value."
        },
        {
          "name": "D",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Day value."
        },
        {
          "name": "hours",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Hour value (0-23)."
        },
        {
          "name": "hour",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Hour value (0-23)."
        },
        {
          "name": "h",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Hour value (0-23)."
        },
        {
          "name": "minutes",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Minute value (0-59)."
        },
        {
          "name": "minute",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Minute value (0-59)."
        },
        {
          "name": "m",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Minute value (0-59)."
        },
        {
          "name": "seconds",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Second value (0-59)."
        },
        {
          "name": "second",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Second value (0-59)."
        },
        {
          "name": "s",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Second value (0-59)."
        },
        {
          "name": "milliseconds",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Millisecond value (0-999)."
        },
        {
          "name": "millisecond",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Millisecond value (0-999)."
        },
        {
          "name": "ms",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Millisecond value (0-999)."
        }
      ],
      "extends": [
        "MomentInputObject"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Input format for duration object."
    },
    {
      "name": "MomentSetObject",
      "type": "MomentSetObject",
      "properties": [
        {
          "name": "weekYears",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set week years. Uses numberlike."
        },
        {
          "name": "weekYear",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set week year. Uses numberlike."
        },
        {
          "name": "gg",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set gg. Uses numberlike."
        },
        {
          "name": "isoWeekYears",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set ISO week years. Uses numberlike."
        },
        {
          "name": "isoWeekYear",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set ISO week year. Uses numberlike."
        },
        {
          "name": "GG",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set GG. Uses numberlike."
        },
        {
          "name": "quarters",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set quarters. Uses numberlike."
        },
        {
          "name": "quarter",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set quarter. Uses numberlike."
        },
        {
          "name": "Q",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set Q. Uses numberlike."
        },
        {
          "name": "weeks",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set weeks. Uses numberlike."
        },
        {
          "name": "week",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set week. Uses numberlike."
        },
        {
          "name": "w",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set w. Uses numberlike."
        },
        {
          "name": "isoWeeks",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set ISO weeks. Uses numberlike."
        },
        {
          "name": "isoWeek",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set ISO week. Uses numberlike."
        },
        {
          "name": "W",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set W. Uses numberlike."
        },
        {
          "name": "dayOfYears",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set day of years. Uses numberlike."
        },
        {
          "name": "dayOfYear",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set day of year. Uses numberlike."
        },
        {
          "name": "DDD",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set DDD. Uses numberlike."
        },
        {
          "name": "weekdays",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set weekdays. Uses numberlike."
        },
        {
          "name": "weekday",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set weekday. Uses numberlike."
        },
        {
          "name": "e",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set e. Uses numberlike."
        },
        {
          "name": "isoWeekdays",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set ISO weekdays. Uses numberlike."
        },
        {
          "name": "isoWeekday",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set ISO weekday. Uses numberlike."
        },
        {
          "name": "E",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set E. Uses numberlike."
        },
        {
          "name": "years",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set years. Uses numberlike."
        },
        {
          "name": "year",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set year. Uses numberlike."
        },
        {
          "name": "y",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set y. Uses numberlike."
        },
        {
          "name": "months",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set months. Uses numberlike."
        },
        {
          "name": "month",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set month. Uses numberlike."
        },
        {
          "name": "M",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set M. Uses numberlike."
        },
        {
          "name": "days",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set days. Uses numberlike."
        },
        {
          "name": "day",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set day. Uses numberlike."
        },
        {
          "name": "d",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set d. Uses numberlike."
        },
        {
          "name": "dates",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set dates. Uses numberlike."
        },
        {
          "name": "date",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set date. Uses numberlike."
        },
        {
          "name": "D",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set D. Uses numberlike."
        },
        {
          "name": "hours",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set hours. Uses numberlike."
        },
        {
          "name": "hour",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set hour. Uses numberlike."
        },
        {
          "name": "h",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set h. Uses numberlike."
        },
        {
          "name": "minutes",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set minutes. Uses numberlike."
        },
        {
          "name": "minute",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set minute. Uses numberlike."
        },
        {
          "name": "m",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set m. Uses numberlike."
        },
        {
          "name": "seconds",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set seconds. Uses numberlike."
        },
        {
          "name": "second",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set second. Uses numberlike."
        },
        {
          "name": "s",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set s. Uses numberlike."
        },
        {
          "name": "milliseconds",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set milliseconds. Uses numberlike."
        },
        {
          "name": "millisecond",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set millisecond. Uses numberlike."
        },
        {
          "name": "ms",
          "type": "numberlike",
          "optional": true,
          "xaiDescription": "Set ms. Uses numberlike."
        }
      ],
      "extends": [
        "MomentInputObject"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Object for setting moment properties. Extends MomentInputObject."
    },
    {
      "name": "FromTo",
      "type": "FromTo",
      "properties": [
        {
          "name": "from",
          "type": "MomentInput",
          "optional": false,
          "xaiDescription": "Start point of range. Uses MomentInput."
        },
        {
          "name": "to",
          "type": "MomentInput",
          "optional": false,
          "xaiDescription": "End point of range. Uses MomentInput."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Defines a range from one moment to another. Uses MomentInput."
    },
    {
      "name": "MomentInput",
      "type": "MomentInput",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Input for moment creation."
    },
    {
      "name": "DurationInputArg1",
      "type": "DurationInputArg1",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "First argument for duration creation."
    },
    {
      "name": "DurationInputArg2",
      "type": "DurationConstructor",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Convert to string."
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false,
          "xaiDescription": "Get character at position."
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false,
          "xaiDescription": "Get Unicode value of character."
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false,
          "xaiDescription": "Concatenate strings."
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Find position of substring."
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Find last position of substring."
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false,
          "xaiDescription": "Compare strings with locale-specific sorting."
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false,
          "xaiDescription": "Match string against a regular expression."
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false,
          "xaiDescription": "Replace substrings in a string."
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false,
          "xaiDescription": "Search for a regular expression in a string."
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extract part of a string."
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false,
          "xaiDescription": "Split string into an array of substrings."
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extract substring from a string."
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Convert to lowercase."
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Convert to locale-specific lowercase."
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Convert to uppercase."
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Convert to locale-specific uppercase."
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Remove whitespace from both ends of a string."
        },
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Length of the string."
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false,
          "xaiDescription": "Extract substring from a string."
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Return primitive value of a string object."
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false,
          "xaiDescription": "Get Unicode value of character at position."
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Check if string contains substring."
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false,
          "xaiDescription": "Check if string ends with substring."
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false,
          "xaiDescription": "Normalize string to specified Unicode form."
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false,
          "xaiDescription": "Repeat string a specified number of times."
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Check if string starts with substring."
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false,
          "xaiDescription": "Create HTML anchor element."
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Create HTML big element."
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Create HTML blink element."
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Create HTML bold element."
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Create HTML fixed element."
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false,
          "xaiDescription": "Create HTML font color element."
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false,
          "xaiDescription": "Create HTML font size element."
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Create HTML italics element."
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false,
          "xaiDescription": "Create HTML link element."
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Create HTML small element."
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Create HTML strike element."
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Create HTML subscript element."
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Create HTML superscript element."
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pad start of string to specified length."
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pad end of string to specified length."
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Remove whitespace from end of string."
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Remove whitespace from start of string."
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Remove whitespace from left of string."
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Remove whitespace from right of string."
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false,
          "xaiDescription": "Match all occurrences of a regular expression in a string."
        },
        {
          "name": "__@iterator@89",
          "type": "() => StringIterator<string>",
          "optional": false,
          "xaiDescription": "Iterator for string."
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false,
          "xaiDescription": "Get character at specified index."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Second argument for duration creation. Includes string methods."
    },
    {
      "name": "LocaleSpecifier",
      "type": "LocaleSpecifier",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string) | (() => string)",
          "optional": false,
          "xaiDescription": "Convert to string."
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => number) | (() => boolean) | (() => Object)",
          "optional": false,
          "xaiDescription": "Return primitive value."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Specifier for locale settings."
    },
    {
      "name": "MomentCreationData",
      "type": "MomentCreationData",
      "properties": [
        {
          "name": "input",
          "type": "MomentInput",
          "optional": false,
          "xaiDescription": "Original input used for moment creation. Uses MomentInput."
        },
        {
          "name": "format",
          "type": "MomentFormatSpecification",
          "optional": true,
          "xaiDescription": "Format used for parsing input. Uses MomentFormatSpecification."
        },
        {
          "name": "locale",
          "type": "Locale",
          "optional": false,
          "xaiDescription": "Locale used for moment creation. Uses Locale."
        },
        {
          "name": "isUTC",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Indicates if moment is in UTC."
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Indicates if strict parsing was used."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Data related to moment creation."
    },
    {
      "name": "Moment",
      "type": "Moment",
      "properties": [
        {
          "name": "format",
          "type": "(format?: string) => string",
          "optional": false,
          "xaiDescription": "Format moment as string."
        },
        {
          "name": "startOf",
          "type": "(unitOfTime: StartOf) => Moment",
          "optional": false,
          "xaiDescription": "Set moment to start of unit. Uses StartOf."
        },
        {
          "name": "endOf",
          "type": "(unitOfTime: StartOf) => Moment",
          "optional": false,
          "xaiDescription": "Set moment to end of unit. Uses StartOf."
        },
        {
          "name": "add",
          "type": "{ (amount?: DurationInputArg1, unit?: DurationConstructor): Moment; (unit: DurationConstructor, amount: string | number): Moment; }",
          "optional": false,
          "xaiDescription": "Add time to moment. Uses DurationInputArg1, DurationConstructor."
        },
        {
          "name": "subtract",
          "type": "{ (amount?: DurationInputArg1, unit?: DurationConstructor): Moment; (unit: DurationConstructor, amount: string | number): Moment; }",
          "optional": false,
          "xaiDescription": "Subtract time from moment. Uses DurationInputArg1, DurationConstructor."
        },
        {
          "name": "calendar",
          "type": "{ (): string; (formats: CalendarSpec): string; (time: MomentInput, formats?: CalendarSpec): string; }",
          "optional": false,
          "xaiDescription": "Format moment as calendar time. Uses CalendarSpec, MomentInput."
        },
        {
          "name": "clone",
          "type": "() => Moment",
          "optional": false,
          "xaiDescription": "Create a clone of the moment."
        },
        {
          "name": "valueOf",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get moment's timestamp."
        },
        {
          "name": "local",
          "type": "(keepLocalTime?: boolean) => Moment",
          "optional": false,
          "xaiDescription": "Convert moment to local time."
        },
        {
          "name": "isLocal",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is in local time."
        },
        {
          "name": "utc",
          "type": "(keepLocalTime?: boolean) => Moment",
          "optional": false,
          "xaiDescription": "Convert moment to UTC."
        },
        {
          "name": "isUTC",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is in UTC."
        },
        {
          "name": "isUtc",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is in UTC."
        },
        {
          "name": "parseZone",
          "type": "() => Moment",
          "optional": false,
          "xaiDescription": "Parse moment with zone information."
        },
        {
          "name": "isValid",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is valid."
        },
        {
          "name": "invalidAt",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get position of invalid input."
        },
        {
          "name": "hasAlignedHourOffset",
          "type": "(other?: MomentInput) => boolean",
          "optional": false,
          "xaiDescription": "Check if moments have aligned hour offsets. Uses MomentInput."
        },
        {
          "name": "creationData",
          "type": "() => MomentCreationData",
          "optional": false,
          "xaiDescription": "Get moment creation data. Uses MomentCreationData."
        },
        {
          "name": "parsingFlags",
          "type": "() => MomentParsingFlags",
          "optional": false,
          "xaiDescription": "Get parsing flags. Uses MomentParsingFlags."
        },
        {
          "name": "year",
          "type": "{ (y: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set year."
        },
        {
          "name": "years",
          "type": "{ (y: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set years."
        },
        {
          "name": "quarter",
          "type": "{ (): number; (q: number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set quarter."
        },
        {
          "name": "quarters",
          "type": "{ (): number; (q: number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set quarters."
        },
        {
          "name": "month",
          "type": "{ (M: string | number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set month."
        },
        {
          "name": "months",
          "type": "{ (M: string | number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set months."
        },
        {
          "name": "day",
          "type": "{ (d: string | number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set day."
        },
        {
          "name": "days",
          "type": "{ (d: string | number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set days."
        },
        {
          "name": "date",
          "type": "{ (d: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set date."
        },
        {
          "name": "dates",
          "type": "{ (d: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set dates."
        },
        {
          "name": "hour",
          "type": "{ (h: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set hour."
        },
        {
          "name": "hours",
          "type": "{ (h: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set hours."
        },
        {
          "name": "minute",
          "type": "{ (m: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set minute."
        },
        {
          "name": "minutes",
          "type": "{ (m: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set minutes."
        },
        {
          "name": "second",
          "type": "{ (s: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set second."
        },
        {
          "name": "seconds",
          "type": "{ (s: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set seconds."
        },
        {
          "name": "millisecond",
          "type": "{ (ms: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set millisecond."
        },
        {
          "name": "milliseconds",
          "type": "{ (ms: number): Moment; (): number; }",
          "optional": false,
          "xaiDescription": "Get or set milliseconds."
        },
        {
          "name": "weekday",
          "type": "{ (): number; (d: number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set weekday."
        },
        {
          "name": "isoWeekday",
          "type": "{ (): number; (d: string | number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set ISO weekday."
        },
        {
          "name": "weekYear",
          "type": "{ (): number; (d: number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set week year."
        },
        {
          "name": "isoWeekYear",
          "type": "{ (): number; (d: number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set ISO week year."
        },
        {
          "name": "week",
          "type": "{ (): number; (d: number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set week."
        },
        {
          "name": "weeks",
          "type": "{ (): number; (d: number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set weeks."
        },
        {
          "name": "isoWeek",
          "type": "{ (): number; (d: number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set ISO week."
        },
        {
          "name": "isoWeeks",
          "type": "{ (): number; (d: number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set ISO weeks."
        },
        {
          "name": "weeksInYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get number of weeks in year."
        },
        {
          "name": "weeksInWeekYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get number of weeks in week year."
        },
        {
          "name": "isoWeeksInYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get number of ISO weeks in year."
        },
        {
          "name": "isoWeeksInISOWeekYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get number of ISO weeks in ISO week year."
        },
        {
          "name": "dayOfYear",
          "type": "{ (): number; (d: number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set day of year."
        },
        {
          "name": "from",
          "type": "(inp: MomentInput, suffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Get relative time from another moment. Uses MomentInput."
        },
        {
          "name": "to",
          "type": "(inp: MomentInput, suffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Get relative time to another moment. Uses MomentInput."
        },
        {
          "name": "fromNow",
          "type": "(withoutSuffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Get relative time from now."
        },
        {
          "name": "toNow",
          "type": "(withoutPrefix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Get relative time to now."
        },
        {
          "name": "diff",
          "type": "(b: MomentInput, unitOfTime?: Diff, precise?: boolean) => number",
          "optional": false,
          "xaiDescription": "Get difference between moments. Uses MomentInput, Diff."
        },
        {
          "name": "toArray",
          "type": "() => number[]",
          "optional": false,
          "xaiDescription": "Convert moment to array of numbers."
        },
        {
          "name": "toDate",
          "type": "() => Date",
          "optional": false,
          "xaiDescription": "Convert moment to Date object."
        },
        {
          "name": "toISOString",
          "type": "(keepOffset?: boolean) => string",
          "optional": false,
          "xaiDescription": "Convert moment to ISO 8601 string."
        },
        {
          "name": "inspect",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Get string representation for debugging."
        },
        {
          "name": "toJSON",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Convert moment to JSON string."
        },
        {
          "name": "unix",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get moment's Unix timestamp."
        },
        {
          "name": "isLeapYear",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if year is a leap year."
        },
        {
          "name": "zone",
          "type": "{ (): number; (b: string | number): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set timezone offset."
        },
        {
          "name": "utcOffset",
          "type": "{ (): number; (b: string | number, keepLocalTime?: boolean): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set UTC offset."
        },
        {
          "name": "isUtcOffset",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if moment has UTC offset."
        },
        {
          "name": "daysInMonth",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get number of days in month."
        },
        {
          "name": "isDST",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is in Daylight Saving Time."
        },
        {
          "name": "zoneAbbr",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Get timezone abbreviation."
        },
        {
          "name": "zoneName",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Get timezone name."
        },
        {
          "name": "isBefore",
          "type": "(inp?: MomentInput, granularity?: StartOf) => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is before another. Uses MomentInput, StartOf."
        },
        {
          "name": "isAfter",
          "type": "(inp?: MomentInput, granularity?: StartOf) => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is after another. Uses MomentInput, StartOf."
        },
        {
          "name": "isSame",
          "type": "(inp?: MomentInput, granularity?: StartOf) => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is same as another. Uses MomentInput, StartOf."
        },
        {
          "name": "isSameOrAfter",
          "type": "(inp?: MomentInput, granularity?: StartOf) => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is same or after another. Uses MomentInput, StartOf."
        },
        {
          "name": "isSameOrBefore",
          "type": "(inp?: MomentInput, granularity?: StartOf) => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is same or before another. Uses MomentInput, StartOf."
        },
        {
          "name": "isBetween",
          "type": "(a: MomentInput, b: MomentInput, granularity?: StartOf, inclusivity?: \"()\" | \"[)\" | \"(]\" | \"[]\") => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is between two others. Uses MomentInput, StartOf."
        },
        {
          "name": "lang",
          "type": "{ (language: LocaleSpecifier): Moment; (): Locale; }",
          "optional": false,
          "xaiDescription": "Get or set language. Uses LocaleSpecifier, Locale."
        },
        {
          "name": "locale",
          "type": "{ (): string; (locale: LocaleSpecifier): Moment; }",
          "optional": false,
          "xaiDescription": "Get or set locale. Uses LocaleSpecifier."
        },
        {
          "name": "localeData",
          "type": "() => Locale",
          "optional": false,
          "xaiDescription": "Get locale data. Uses Locale."
        },
        {
          "name": "isDSTShifted",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if moment was shifted due to DST."
        },
        {
          "name": "max",
          "type": "{ (inp?: MomentInput, format?: MomentFormatSpecification, strict?: boolean): Moment; (inp?: MomentInput, format?: MomentFormatSpecification, language?: string, strict?: boolean): Moment; }",
          "optional": false,
          "xaiDescription": "Get maximum moment. Uses MomentInput, MomentFormatSpecification."
        },
        {
          "name": "min",
          "type": "{ (inp?: MomentInput, format?: MomentFormatSpecification, strict?: boolean): Moment; (inp?: MomentInput, format?: MomentFormatSpecification, language?: string, strict?: boolean): Moment; }",
          "optional": false,
          "xaiDescription": "Get minimum moment. Uses MomentInput, MomentFormatSpecification."
        },
        {
          "name": "get",
          "type": "(unit: All) => number",
          "optional": false,
          "xaiDescription": "Get value of a unit. Uses All."
        },
        {
          "name": "set",
          "type": "{ (unit: All, value: number): Moment; (objectLiteral: MomentSetObject): Moment; }",
          "optional": false,
          "xaiDescription": "Set value of a unit or multiple units. Uses All, MomentSetObject."
        },
        {
          "name": "toObject",
          "type": "() => MomentObjectOutput",
          "optional": false,
          "xaiDescription": "Convert moment to object. Uses MomentObjectOutput."
        },
        {
          "name": "constructor",
          "type": "Function",
          "optional": false,
          "xaiDescription": "Moment constructor function."
        },
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Convert moment to string."
        },
        {
          "name": "toLocaleString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Convert moment to locale-specific string."
        },
        {
          "name": "hasOwnProperty",
          "type": "(v: PropertyKey) => boolean",
          "optional": false,
          "xaiDescription": "Check if property exists on moment object."
        },
        {
          "name": "isPrototypeOf",
          "type": "(v: Object) => boolean",
          "optional": false,
          "xaiDescription": "Check if moment is prototype of an object."
        },
        {
          "name": "propertyIsEnumerable",
          "type": "(v: PropertyKey) => boolean",
          "optional": false,
          "xaiDescription": "Check if property is enumerable on moment object."
        }
      ],
      "extends": [
        "Object"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a moment in time. Extends Object."
    }
  ],
  "classes": [],
  "constants": [],
  "namespaces": []
}