{
  "version": "1.11.13",
  "functions": [
    {
      "name": "tz.guess",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Guesses the user's timezone. Returns a string."
    },
    {
      "name": "tz.setDefault",
      "parameters": [
        {
          "name": "timezone",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Sets the default timezone. Accepts an optional string parameter."
    },
    {
      "name": "Dayjs.clone",
      "parameters": [],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "All Day.js objects are immutable. Still, `dayjs#clone` can create a clone of the current object if you need one.\n\ndayjs().clone()// => Dayjs\ndayjs(dayjs('2019-01-25')) // passing a Dayjs object to a constructor will also clone it\n\nDocs: https://day.js.org/docs/en/parse/dayjs-clone",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.isValid",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This returns a `boolean` indicating whether the Day.js object contains a valid date or not.\n\ndayjs().isValid()// => boolean\n\nDocs: https://day.js.org/docs/en/parse/is-valid",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.year",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the year.\n\ndayjs().year()// => 2020\n\nDocs: https://day.js.org/docs/en/get-set/year",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.year",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the year.\n\ndayjs().year()// => 2020\n\nDocs: https://day.js.org/docs/en/get-set/year",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.month",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the month.\n\nMonths are zero indexed, so January is month 0.\n\ndayjs().month()// => 0-11\n\nDocs: https://day.js.org/docs/en/get-set/month",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.month",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the month.\n\nMonths are zero indexed, so January is month 0.\n\ndayjs().month()// => 0-11\n\nDocs: https://day.js.org/docs/en/get-set/month",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.date",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the date of the month.\n\ndayjs().date()// => 1-31\n\nDocs: https://day.js.org/docs/en/get-set/date",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.date",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the date of the month.\n\ndayjs().date()// => 1-31\n\nDocs: https://day.js.org/docs/en/get-set/date",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.day",
      "parameters": [],
      "returnType": "0 | 1 | 2 | 3 | 4 | 5 | 6",
      "jsdoc": {
        "description": "Get the day of the week.\n\nReturns numbers from 0 (Sunday) to 6 (Saturday).\n\ndayjs().day()// 0-6\n\nDocs: https://day.js.org/docs/en/get-set/day",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.day",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the day of the week.\n\nReturns numbers from 0 (Sunday) to 6 (Saturday).\n\ndayjs().day()// 0-6\n\nDocs: https://day.js.org/docs/en/get-set/day",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.hour",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the hour.\n\ndayjs().hour()// => 0-23\n\nDocs: https://day.js.org/docs/en/get-set/hour",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.hour",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the hour.\n\ndayjs().hour()// => 0-23\n\nDocs: https://day.js.org/docs/en/get-set/hour",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.minute",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the minutes.\n\ndayjs().minute()// => 0-59\n\nDocs: https://day.js.org/docs/en/get-set/minute",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.minute",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the minutes.\n\ndayjs().minute()// => 0-59\n\nDocs: https://day.js.org/docs/en/get-set/minute",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.second",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the seconds.\n\ndayjs().second()// => 0-59\n\nDocs: https://day.js.org/docs/en/get-set/second",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.second",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the seconds.\n\ndayjs().second()// => 0-59\n\nDocs: https://day.js.org/docs/en/get-set/second",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.millisecond",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the milliseconds.\n\ndayjs().millisecond()// => 0-999\n\nDocs: https://day.js.org/docs/en/get-set/millisecond",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.millisecond",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the milliseconds.\n\ndayjs().millisecond()// => 0-999\n\nDocs: https://day.js.org/docs/en/get-set/millisecond",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.set",
      "parameters": [
        {
          "name": "unit",
          "type": "UnitType",
          "optional": false
        },
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Generic setter, accepting unit as first argument, and value as second, returns a new instance with the applied changes.\n\nIn general:\n\ndayjs().set(unit, value) === dayjs()[unit](value)\n\nUnits are case insensitive, and support plural and short forms.\n\ndayjs().set('date', 1)\ndayjs().set('month', 3) // April\ndayjs().set('second', 30)\n\nDocs: https://day.js.org/docs/en/get-set/set",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.set",
      "parameters": [
        {
          "name": "argument",
          "type": "object",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Generic setter, accepting unit as first argument, and value as second, returns a new instance with the applied changes.\n\nIn general:\n\ndayjs().set(unit, value) === dayjs()[unit](value)\n\nUnits are case insensitive, and support plural and short forms.\n\ndayjs().set('date', 1)\ndayjs().set('month', 3) // April\ndayjs().set('second', 30)\n\nDocs: https://day.js.org/docs/en/get-set/set",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.get",
      "parameters": [
        {
          "name": "unit",
          "type": "UnitType",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "String getter, returns the corresponding information getting from Day.js object.\n\nIn general:\n\ndayjs().get(unit) === dayjs()[unit]()\n\nUnits are case insensitive, and support plural and short forms.\n\ndayjs().get('year')\ndayjs().get('month') // start 0\ndayjs().get('date')\n\nDocs: https://day.js.org/docs/en/get-set/get",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.add",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        },
        {
          "name": "unit",
          "type": "ManipulateType",
          "optional": true
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time added.\n\ndayjs().add(7, 'day')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/add",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.add",
      "parameters": [
        {
          "name": "duration",
          "type": "Duration",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time added.\n\ndayjs().add(7, 'day')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/add",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.add",
      "parameters": [
        {
          "name": "argument",
          "type": "object",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time added.\n\ndayjs().add(7, 'day')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/add",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.add",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        },
        {
          "name": "unit",
          "type": "QUnitType",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time added.\n\ndayjs().add(7, 'day')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/add",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.subtract",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        },
        {
          "name": "unit",
          "type": "ManipulateType",
          "optional": true
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time subtracted.\n\ndayjs().subtract(7, 'year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/subtract",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.subtract",
      "parameters": [
        {
          "name": "duration",
          "type": "Duration",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time subtracted.\n\ndayjs().subtract(7, 'year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/subtract",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.subtract",
      "parameters": [
        {
          "name": "argument",
          "type": "object",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time subtracted.\n\ndayjs().subtract(7, 'year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/subtract",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.subtract",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        },
        {
          "name": "unit",
          "type": "QUnitType",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time subtracted.\n\ndayjs().subtract(7, 'year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/subtract",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.startOf",
      "parameters": [
        {
          "name": "unit",
          "type": "OpUnitType",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object and set it to the start of a unit of time.\n\ndayjs().startOf('year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/start-of",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.startOf",
      "parameters": [
        {
          "name": "unit",
          "type": "ISOUnitType",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object and set it to the start of a unit of time.\n\ndayjs().startOf('year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/start-of",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.startOf",
      "parameters": [
        {
          "name": "unit",
          "type": "\"d\" | \"D\" | \"M\" | \"y\" | \"h\" | \"m\" | \"s\" | \"ms\" | \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"day\" | \"month\" | \"year\" | \"date\" | \"milliseconds\" | \"seconds\" | \"minutes\" | \"hours\" | ... 9 more ... | \"Q\"",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object and set it to the start of a unit of time.\n\ndayjs().startOf('year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/start-of",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.endOf",
      "parameters": [
        {
          "name": "unit",
          "type": "OpUnitType",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object and set it to the end of a unit of time.\n\ndayjs().endOf('month')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/end-of",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.endOf",
      "parameters": [
        {
          "name": "unit",
          "type": "ISOUnitType",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object and set it to the end of a unit of time.\n\ndayjs().endOf('month')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/end-of",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.endOf",
      "parameters": [
        {
          "name": "unit",
          "type": "\"d\" | \"D\" | \"M\" | \"y\" | \"h\" | \"m\" | \"s\" | \"ms\" | \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"day\" | \"month\" | \"year\" | \"date\" | \"milliseconds\" | \"seconds\" | \"minutes\" | \"hours\" | ... 9 more ... | \"Q\"",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object and set it to the end of a unit of time.\n\ndayjs().endOf('month')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/end-of",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.format",
      "parameters": [
        {
          "name": "template",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Get the formatted date according to the string of tokens passed in.\n\nTo escape characters, wrap them in square brackets (e.g. [MM]).\n\ndayjs().format()// => current date in ISO8601, without fraction seconds e.g. '2020-04-02T08:02:17-05:00'\ndayjs('2019-01-25').format('[YYYYescape] YYYY-MM-DDTHH:mm:ssZ[Z]')// 'YYYYescape 2019-01-25T00:00:00-02:00Z'\ndayjs('2019-01-25').format('DD/MM/YYYY') // '25/01/2019'\n\nDocs: https://day.js.org/docs/en/display/format",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.diff",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "\"d\" | \"D\" | \"M\" | \"y\" | \"h\" | \"m\" | \"s\" | \"ms\" | \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"day\" | \"month\" | \"year\" | \"date\" | \"milliseconds\" | \"seconds\" | \"minutes\" | \"hours\" | ... 9 more ... | \"Q\"",
          "optional": true
        },
        {
          "name": "float",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "This indicates the difference between two date-time in the specified unit.\n\nTo get the difference in milliseconds, use `dayjs#diff`\n\nconst date1 = dayjs('2019-01-25')\nconst date2 = dayjs('2018-06-05')\ndate1.diff(date2) // 20214000000 default milliseconds\ndate1.diff() // milliseconds to current time\n\n\nTo get the difference in another unit of measurement, pass that measurement as the second argument.\n\nconst date1 = dayjs('2019-01-25')\ndate1.diff('2018-06-05', 'month') // 7\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/display/difference",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "This returns the number of **milliseconds** since the Unix Epoch of the Day.js object.\n\ndayjs('2019-01-25').valueOf() // 1548381600000\n+dayjs(1548381600000) // 1548381600000\n\nTo get a Unix timestamp (the number of seconds since the epoch) from a Day.js object, you should use Unix Timestamp `dayjs#unix()`.\n\nDocs: https://day.js.org/docs/en/display/unix-timestamp-milliseconds",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.unix",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "This returns the Unix timestamp (the number of **seconds** since the Unix Epoch) of the Day.js object.\n\ndayjs('2019-01-25').unix() // 1548381600\n\nThis value is floored to the nearest second, and does not include a milliseconds component.\n\nDocs: https://day.js.org/docs/en/display/unix-timestamp",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.daysInMonth",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the number of days in the current month.\n\ndayjs('2019-01-25').daysInMonth() // 31\n\nDocs: https://day.js.org/docs/en/display/days-in-month",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.toDate",
      "parameters": [],
      "returnType": "Date",
      "jsdoc": {
        "description": "To get a copy of the native `Date` object parsed from the Day.js object use `dayjs#toDate`.\n\ndayjs('2019-01-25').toDate()// => Date\n",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.toJSON",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "To serialize as an ISO 8601 string.\n\ndayjs('2019-01-25').toJSON() // '2019-01-25T02:00:00.000Z'\n\nDocs: https://day.js.org/docs/en/display/as-json",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.toISOString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "To format as an ISO 8601 string.\n\ndayjs('2019-01-25').toISOString() // '2019-01-25T02:00:00.000Z'\n\nDocs: https://day.js.org/docs/en/display/as-iso-string",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of the date.\n\ndayjs('2019-01-25').toString() // 'Fri, 25 Jan 2019 02:00:00 GMT'\n\nDocs: https://day.js.org/docs/en/display/as-string",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.utcOffset",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the UTC offset in minutes.\n\ndayjs().utcOffset()\n\nDocs: https://day.js.org/docs/en/manipulate/utc-offset",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.utcOffset",
      "parameters": [
        {
          "name": "offset",
          "type": "string | number",
          "optional": false
        },
        {
          "name": "keepLocalTime",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the UTC offset in minutes.\n\ndayjs().utcOffset()\n\nDocs: https://day.js.org/docs/en/manipulate/utc-offset",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.isBefore",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "OpUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is before the other supplied date-time.\n\ndayjs().isBefore(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isBefore('2011-01-01', 'year')// => boolean\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/query/is-before",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.isBefore",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "ISOUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is before the other supplied date-time.\n\ndayjs().isBefore(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isBefore('2011-01-01', 'year')// => boolean\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/query/is-before",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.isBefore",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "QUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is before the other supplied date-time.\n\ndayjs().isBefore(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isBefore('2011-01-01', 'year')// => boolean\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/query/is-before",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.isSame",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "OpUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is the same as the other supplied date-time.\n\ndayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isSame('2011-01-01', 'year')// => boolean\n\nDocs: https://day.js.org/docs/en/query/is-same",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.isSame",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "ISOUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is the same as the other supplied date-time.\n\ndayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isSame('2011-01-01', 'year')// => boolean\n\nDocs: https://day.js.org/docs/en/query/is-same",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.isSame",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "QUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is the same as the other supplied date-time.\n\ndayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isSame('2011-01-01', 'year')// => boolean\n\nDocs: https://day.js.org/docs/en/query/is-same",
        "deprecated": false
      }
    },
    {
      "name": "Dayjs.isAfter",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "OpUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is after the other supplied date-time.\n\ndayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isAfter('2011-01-01', 'year')// => boolean\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/query/is-after",
        "deprecated": false
      },
      "xaiDescription": "Checks if Day.js object is after given date-time, with optional unit granularity."
    },
    {
      "name": "Dayjs.isAfter",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "ISOUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is after the other supplied date-time.\n\ndayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isAfter('2011-01-01', 'year')// => boolean\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/query/is-after",
        "deprecated": false
      },
      "xaiDescription": "Checks if Day.js object is after given date-time, with optional ISO unit granularity."
    },
    {
      "name": "Dayjs.isAfter",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "QUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is after the other supplied date-time.\n\ndayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isAfter('2011-01-01', 'year')// => boolean\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/query/is-after",
        "deprecated": false
      },
      "xaiDescription": "Checks if Day.js object is after given date-time, with optional quarter unit granularity."
    },
    {
      "name": "Dayjs.locale",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Gets the current locale string."
    },
    {
      "name": "Dayjs.locale",
      "parameters": [
        {
          "name": "preset",
          "type": "string | ILocale",
          "optional": false
        },
        {
          "name": "object",
          "type": "Partial<ILocale>",
          "optional": true
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": null,
      "xaiDescription": "Sets the locale for the Day.js object."
    },
    {
      "name": "dayjs.extend",
      "parameters": [
        {
          "name": "plugin",
          "type": "PluginFunc<T>",
          "optional": false
        },
        {
          "name": "option",
          "type": "T",
          "optional": true
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": null,
      "xaiDescription": "Extends Day.js with a plugin, optionally with configuration."
    },
    {
      "name": "dayjs.locale",
      "parameters": [
        {
          "name": "preset",
          "type": "string | ILocale",
          "optional": true
        },
        {
          "name": "object",
          "type": "Partial<ILocale>",
          "optional": true
        },
        {
          "name": "isLocal",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Sets or gets the locale, with optional local setting."
    },
    {
      "name": "dayjs.isDayjs",
      "parameters": [
        {
          "name": "d",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if the given value is a Day.js object."
    },
    {
      "name": "dayjs.unix",
      "parameters": [
        {
          "name": "t",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": null,
      "xaiDescription": "Creates a Day.js object from a Unix timestamp."
    },
    {
      "name": "Dayjs.clone",
      "parameters": [],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "All Day.js objects are immutable. Still, `dayjs#clone` can create a clone of the current object if you need one.\n\ndayjs().clone()// => Dayjs\ndayjs(dayjs('2019-01-25')) // passing a Dayjs object to a constructor will also clone it\n\nDocs: https://day.js.org/docs/en/parse/dayjs-clone",
        "deprecated": false
      },
      "xaiDescription": "Creates a clone of the Day.js object."
    },
    {
      "name": "Dayjs.isValid",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This returns a `boolean` indicating whether the Day.js object contains a valid date or not.\n\ndayjs().isValid()// => boolean\n\nDocs: https://day.js.org/docs/en/parse/is-valid",
        "deprecated": false
      },
      "xaiDescription": "Checks if the Day.js object contains a valid date."
    },
    {
      "name": "Dayjs.year",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the year.\n\ndayjs().year()// => 2020\n\nDocs: https://day.js.org/docs/en/get-set/year",
        "deprecated": false
      },
      "xaiDescription": "Gets the year from the Day.js object."
    },
    {
      "name": "Dayjs.year",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the year.\n\ndayjs().year()// => 2020\n\nDocs: https://day.js.org/docs/en/get-set/year",
        "deprecated": false
      },
      "xaiDescription": "Sets the year for the Day.js object."
    },
    {
      "name": "Dayjs.month",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the month.\n\nMonths are zero indexed, so January is month 0.\n\ndayjs().month()// => 0-11\n\nDocs: https://day.js.org/docs/en/get-set/month",
        "deprecated": false
      },
      "xaiDescription": "Gets the month from the Day.js object (0-11)."
    },
    {
      "name": "Dayjs.month",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the month.\n\nMonths are zero indexed, so January is month 0.\n\ndayjs().month()// => 0-11\n\nDocs: https://day.js.org/docs/en/get-set/month",
        "deprecated": false
      },
      "xaiDescription": "Sets the month for the Day.js object (0-11)."
    },
    {
      "name": "Dayjs.date",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the date of the month.\n\ndayjs().date()// => 1-31\n\nDocs: https://day.js.org/docs/en/get-set/date",
        "deprecated": false
      },
      "xaiDescription": "Gets the day of the month from the Day.js object (1-31)."
    },
    {
      "name": "Dayjs.date",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the date of the month.\n\ndayjs().date()// => 1-31\n\nDocs: https://day.js.org/docs/en/get-set/date",
        "deprecated": false
      },
      "xaiDescription": "Sets the day of the month for the Day.js object (1-31)."
    },
    {
      "name": "Dayjs.day",
      "parameters": [],
      "returnType": "0 | 1 | 2 | 3 | 4 | 5 | 6",
      "jsdoc": {
        "description": "Get the day of the week.\n\nReturns numbers from 0 (Sunday) to 6 (Saturday).\n\ndayjs().day()// 0-6\n\nDocs: https://day.js.org/docs/en/get-set/day",
        "deprecated": false
      },
      "xaiDescription": "Gets the day of the week (0-6, Sunday-Saturday)."
    },
    {
      "name": "Dayjs.day",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the day of the week.\n\nReturns numbers from 0 (Sunday) to 6 (Saturday).\n\ndayjs().day()// 0-6\n\nDocs: https://day.js.org/docs/en/get-set/day",
        "deprecated": false
      },
      "xaiDescription": "Sets the day of the week (0-6, Sunday-Saturday)."
    },
    {
      "name": "Dayjs.hour",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the hour.\n\ndayjs().hour()// => 0-23\n\nDocs: https://day.js.org/docs/en/get-set/hour",
        "deprecated": false
      },
      "xaiDescription": "Gets the hour from the Day.js object (0-23)."
    },
    {
      "name": "Dayjs.hour",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the hour.\n\ndayjs().hour()// => 0-23\n\nDocs: https://day.js.org/docs/en/get-set/hour",
        "deprecated": false
      },
      "xaiDescription": "Sets the hour for the Day.js object (0-23)."
    },
    {
      "name": "Dayjs.minute",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the minutes.\n\ndayjs().minute()// => 0-59\n\nDocs: https://day.js.org/docs/en/get-set/minute",
        "deprecated": false
      },
      "xaiDescription": "Gets the minute from the Day.js object (0-59)."
    },
    {
      "name": "Dayjs.minute",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the minutes.\n\ndayjs().minute()// => 0-59\n\nDocs: https://day.js.org/docs/en/get-set/minute",
        "deprecated": false
      },
      "xaiDescription": "Sets the minute for the Day.js object (0-59)."
    },
    {
      "name": "Dayjs.second",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the seconds.\n\ndayjs().second()// => 0-59\n\nDocs: https://day.js.org/docs/en/get-set/second",
        "deprecated": false
      },
      "xaiDescription": "Gets the second from the Day.js object (0-59)."
    },
    {
      "name": "Dayjs.second",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the seconds.\n\ndayjs().second()// => 0-59\n\nDocs: https://day.js.org/docs/en/get-set/second",
        "deprecated": false
      },
      "xaiDescription": "Sets the second for the Day.js object (0-59)."
    },
    {
      "name": "Dayjs.millisecond",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Get the milliseconds.\n\ndayjs().millisecond()// => 0-999\n\nDocs: https://day.js.org/docs/en/get-set/millisecond",
        "deprecated": false
      },
      "xaiDescription": "Gets the millisecond from the Day.js object (0-999)."
    },
    {
      "name": "Dayjs.millisecond",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Get the milliseconds.\n\ndayjs().millisecond()// => 0-999\n\nDocs: https://day.js.org/docs/en/get-set/millisecond",
        "deprecated": false
      },
      "xaiDescription": "Sets the millisecond for the Day.js object (0-999)."
    },
    {
      "name": "Dayjs.set",
      "parameters": [
        {
          "name": "unit",
          "type": "UnitType",
          "optional": false
        },
        {
          "name": "value",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Generic setter, accepting unit as first argument, and value as second, returns a new instance with the applied changes.\n\nIn general:\n\ndayjs().set(unit, value) === dayjs()[unit](value)\n\nUnits are case insensitive, and support plural and short forms.\n\ndayjs().set('date', 1)\ndayjs().set('month', 3) // April\ndayjs().set('second', 30)\n\nDocs: https://day.js.org/docs/en/get-set/set",
        "deprecated": false
      },
      "xaiDescription": "Sets a specific unit of time on the Day.js object."
    },
    {
      "name": "Dayjs.set",
      "parameters": [
        {
          "name": "argument",
          "type": "object",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Generic setter, accepting unit as first argument, and value as second, returns a new instance with the applied changes.\n\nIn general:\n\ndayjs().set(unit, value) === dayjs()[unit](value)\n\nUnits are case insensitive, and support plural and short forms.\n\ndayjs().set('date', 1)\ndayjs().set('month', 3) // April\ndayjs().set('second', 30)\n\nDocs: https://day.js.org/docs/en/get-set/set",
        "deprecated": false
      },
      "xaiDescription": "Sets multiple units of time on the Day.js object using an object."
    },
    {
      "name": "Dayjs.get",
      "parameters": [
        {
          "name": "unit",
          "type": "UnitType",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "String getter, returns the corresponding information getting from Day.js object.\n\nIn general:\n\ndayjs().get(unit) === dayjs()[unit]()\n\nUnits are case insensitive, and support plural and short forms.\n\ndayjs().get('year')\ndayjs().get('month') // start 0\ndayjs().get('date')\n\nDocs: https://day.js.org/docs/en/get-set/get",
        "deprecated": false
      },
      "xaiDescription": "Gets the value of a specific unit of time from the Day.js object."
    },
    {
      "name": "Dayjs.add",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        },
        {
          "name": "unit",
          "type": "ManipulateType",
          "optional": true
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time added.\n\ndayjs().add(7, 'day')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/add",
        "deprecated": false
      },
      "xaiDescription": "Adds time to the Day.js object, returning a new object."
    },
    {
      "name": "Dayjs.add",
      "parameters": [
        {
          "name": "duration",
          "type": "Duration",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time added.\n\ndayjs().add(7, 'day')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/add",
        "deprecated": false
      },
      "xaiDescription": "Adds a Duration to the Day.js object, returning a new object."
    },
    {
      "name": "Dayjs.add",
      "parameters": [
        {
          "name": "argument",
          "type": "object",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time added.\n\ndayjs().add(7, 'day')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/add",
        "deprecated": false
      },
      "xaiDescription": "Adds time using an object to the Day.js object, returning a new object."
    },
    {
      "name": "Dayjs.add",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        },
        {
          "name": "unit",
          "type": "QUnitType",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time added.\n\ndayjs().add(7, 'day')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/add",
        "deprecated": false
      },
      "xaiDescription": "Adds time in quarter units to the Day.js object, returning a new object."
    },
    {
      "name": "Dayjs.subtract",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        },
        {
          "name": "unit",
          "type": "ManipulateType",
          "optional": true
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time subtracted.\n\ndayjs().subtract(7, 'year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/subtract",
        "deprecated": false
      },
      "xaiDescription": "Subtracts time from the Day.js object, returning a new object."
    },
    {
      "name": "Dayjs.subtract",
      "parameters": [
        {
          "name": "duration",
          "type": "Duration",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time subtracted.\n\ndayjs().subtract(7, 'year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/subtract",
        "deprecated": false
      },
      "xaiDescription": "Subtracts a Duration from the Day.js object, returning a new object."
    },
    {
      "name": "Dayjs.subtract",
      "parameters": [
        {
          "name": "argument",
          "type": "object",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time subtracted.\n\ndayjs().subtract(7, 'year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/subtract",
        "deprecated": false
      },
      "xaiDescription": "Subtracts time using an object from the Day.js object, returning a new object."
    },
    {
      "name": "Dayjs.subtract",
      "parameters": [
        {
          "name": "value",
          "type": "number",
          "optional": false
        },
        {
          "name": "unit",
          "type": "QUnitType",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object with a specified amount of time subtracted.\n\ndayjs().subtract(7, 'year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/subtract",
        "deprecated": false
      },
      "xaiDescription": "Subtracts time in quarter units from the Day.js object, returning a new object."
    },
    {
      "name": "Dayjs.startOf",
      "parameters": [
        {
          "name": "unit",
          "type": "OpUnitType",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object and set it to the start of a unit of time.\n\ndayjs().startOf('year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/start-of",
        "deprecated": false
      },
      "xaiDescription": "Sets the Day.js object to the start of a specified time unit."
    },
    {
      "name": "Dayjs.startOf",
      "parameters": [
        {
          "name": "unit",
          "type": "ISOUnitType",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "description": "Returns a cloned Day.js object and set it to the start of a unit of time.\n\ndayjs().startOf('year')// => Dayjs\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/manipulate/start-of",
        "deprecated": false
      },
      "xaiDescription": "Sets the Day.js object to the start of an ISO time unit."
    },
    {
      "name": "Dayjs.isBefore",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "QUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is before the other supplied date-time.\n\ndayjs().isBefore(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isBefore('2011-01-01', 'year')// => boolean\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/query/is-before",
        "deprecated": false,
        "xaiDescription": "Checks if Day.js object is before given date-time, optionally with unit granularity."
      }
    },
    {
      "name": "Dayjs.isSame",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "OpUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is the same as the other supplied date-time.\n\ndayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isSame('2011-01-01', 'year')// => boolean\n\nDocs: https://day.js.org/docs/en/query/is-same",
        "deprecated": false,
        "xaiDescription": "Checks if Day.js object is the same as given date-time, optionally with unit granularity."
      }
    },
    {
      "name": "Dayjs.isSame",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "ISOUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is the same as the other supplied date-time.\n\ndayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isSame('2011-01-01', 'year')// => boolean\n\nDocs: https://day.js.org/docs/en/query/is-same",
        "deprecated": false,
        "xaiDescription": "Checks if Day.js object is the same as given date-time, optionally with unit granularity."
      }
    },
    {
      "name": "Dayjs.isSame",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "QUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is the same as the other supplied date-time.\n\ndayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isSame('2011-01-01', 'year')// => boolean\n\nDocs: https://day.js.org/docs/en/query/is-same",
        "deprecated": false,
        "xaiDescription": "Checks if Day.js object is the same as given date-time, optionally with unit granularity."
      }
    },
    {
      "name": "Dayjs.isAfter",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "OpUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is after the other supplied date-time.\n\ndayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isAfter('2011-01-01', 'year')// => boolean\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/query/is-after",
        "deprecated": false,
        "xaiDescription": "Checks if Day.js object is after given date-time, optionally with unit granularity."
      }
    },
    {
      "name": "Dayjs.isAfter",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "ISOUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is after the other supplied date-time.\n\ndayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isAfter('2011-01-01', 'year')// => boolean\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/query/is-after",
        "deprecated": false,
        "xaiDescription": "Checks if Day.js object is after given date-time, optionally with unit granularity."
      }
    },
    {
      "name": "Dayjs.isAfter",
      "parameters": [
        {
          "name": "date",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "unit",
          "type": "QUnitType",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "This indicates whether the Day.js object is after the other supplied date-time.\n\ndayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n\nIf you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n\ndayjs().isAfter('2011-01-01', 'year')// => boolean\n\nUnits are case insensitive, and support plural and short forms.\n\nDocs: https://day.js.org/docs/en/query/is-after",
        "deprecated": false,
        "xaiDescription": "Checks if Day.js object is after given date-time, optionally with unit granularity."
      }
    },
    {
      "name": "Dayjs.locale",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns the current locale of the Day.js object."
      }
    },
    {
      "name": "Dayjs.locale",
      "parameters": [
        {
          "name": "preset",
          "type": "string | ILocale",
          "optional": false
        },
        {
          "name": "object",
          "type": "Partial<ILocale>",
          "optional": true
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "xaiDescription": "Sets the locale for the Day.js object, using a preset or custom object."
      }
    },
    {
      "name": "dayjs.isDuration",
      "parameters": [
        {
          "name": "d",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the given value is a Day.js duration object."
      }
    },
    {
      "name": "dayjs.isMoment",
      "parameters": [
        {
          "name": "input",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the given value is a Moment.js object."
      }
    },
    {
      "name": "dayjs.weekdays",
      "parameters": [
        {
          "name": "localOrder",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "WeekdayNames",
      "jsdoc": {
        "xaiDescription": "Returns an array of weekday names, optionally in local order."
      }
    },
    {
      "name": "dayjs.weekdaysShort",
      "parameters": [
        {
          "name": "localOrder",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "WeekdayNames",
      "jsdoc": {
        "xaiDescription": "Returns an array of short weekday names, optionally in local order."
      }
    },
    {
      "name": "dayjs.weekdaysMin",
      "parameters": [
        {
          "name": "localOrder",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "WeekdayNames",
      "jsdoc": {
        "xaiDescription": "Returns an array of minimal weekday names, optionally in local order."
      }
    },
    {
      "name": "dayjs.monthsShort",
      "parameters": [],
      "returnType": "MonthNames",
      "jsdoc": {
        "xaiDescription": "Returns an array of short month names."
      }
    },
    {
      "name": "dayjs.months",
      "parameters": [],
      "returnType": "MonthNames",
      "jsdoc": {
        "xaiDescription": "Returns an array of full month names."
      }
    },
    {
      "name": "dayjs.localeData",
      "parameters": [],
      "returnType": "GlobalLocaleDataReturn",
      "jsdoc": {
        "xaiDescription": "Returns locale-specific data used by Day.js."
      }
    },
    {
      "name": "dayjs.max",
      "parameters": [
        {
          "name": "dayjs",
          "type": "[Dayjs, ...Dayjs[]]",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "xaiDescription": "Returns the latest date-time from the given Day.js objects."
      }
    },
    {
      "name": "dayjs.min",
      "parameters": [
        {
          "name": "dayjs",
          "type": "[Dayjs, ...Dayjs[]]",
          "optional": false
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "xaiDescription": "Returns the earliest date-time from the given Day.js objects."
      }
    },
    {
      "name": "dayjs.updateLocale",
      "parameters": [
        {
          "name": "localeName",
          "type": "string",
          "optional": false
        },
        {
          "name": "customConfig",
          "type": "Record<string, unknown>",
          "optional": false
        }
      ],
      "returnType": "Record<string, unknown>",
      "jsdoc": {
        "xaiDescription": "Updates the locale configuration with custom settings."
      }
    },
    {
      "name": "dayjs.utc",
      "parameters": [
        {
          "name": "config",
          "type": "ConfigType",
          "optional": true
        },
        {
          "name": "format",
          "type": "string",
          "optional": true
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "Dayjs",
      "jsdoc": {
        "xaiDescription": "Creates a new Day.js object in UTC mode, optionally with format and strict parsing."
      }
    }
  ],
  "enums": [],
  "types": [
    {
      "name": "ConfigTypeMap",
      "type": "ConfigTypeMap",
      "properties": [
        {
          "name": "default",
          "type": "string | number | Dayjs | Date",
          "optional": false
        },
        {
          "name": "arraySupport",
          "type": "[number?, number?, number?, number?, number?, number?, number?]",
          "optional": false
        },
        {
          "name": "bigIntSupport",
          "type": "BigInt",
          "optional": false
        },
        {
          "name": "objectSupport",
          "type": "{ years?: string | number; year?: string | number; y?: string | number; months?: string | number; month?: string | number; M?: string | number; days?: string | number; day?: string | number; ... 15 more ...; ms?: string | number; }",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Maps different configuration types to their respective formats."
      },
      "isExported": false
    },
    {
      "name": "ConfigType",
      "type": "ConfigType",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | ((radix?: number) => string) | (() => string) | (() => string) | (() => string) | ((radix?: number) => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => number) | (() => number) | (() => number) | (() => Object) | (() => bigint)",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; } | { ...; } | { ...; } | ((locales?: LocalesArgument, options?: BigIntToLocaleStringOptions) => string)",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Defines the interface for different configuration types."
      },
      "isExported": false
    },
    {
      "name": "FormatObject",
      "type": "FormatObject",
      "properties": [
        {
          "name": "locale",
          "type": "string",
          "optional": true
        },
        {
          "name": "format",
          "type": "string",
          "optional": true
        },
        {
          "name": "utc",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Represents formatting options for Day.js objects."
      },
      "isExported": false
    },
    {
      "name": "OptionType",
      "type": "OptionType",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (): string; (locales: string | string[], options?: NumberFormatOptions & DateTimeFormatOptions): string; }",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Defines the interface for option types used in Day.js."
      },
      "isExported": false
    },
    {
      "name": "UnitTypeShort",
      "type": "UnitTypeShort",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@59",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Defines short unit types used in Day.js."
      },
      "isExported": false
    },
    {
      "name": "UnitTypeLong",
      "type": "UnitTypeLong",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@59",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Defines long unit types used in Day.js."
      },
      "isExported": false
    },
    {
      "name": "UnitTypeLongPlural",
      "type": "UnitTypeLongPlural",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false
        },
        {
          "name": "__@iterator@59",
          "type": "() => StringIterator<string>",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Defines long plural unit types used in Day.js."
      },
      "isExported": false
    },
    {
      "name": "UnitType",
      "type": "UnitType",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the UnitType to a string representation."
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false,
          "xaiDescription": "Returns the character at the specified position in the UnitType."
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false,
          "xaiDescription": "Returns the Unicode value of the character at the specified index in the UnitType."
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false,
          "xaiDescription": "Concatenates the UnitType with the provided strings and returns the result."
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the index of the first occurrence of the specified search string within the UnitType."
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the index of the last occurrence of the specified search string within the UnitType."
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false,
          "xaiDescription": "Compares the UnitType with another string and returns a number indicating their relative order based on locale-specific rules."
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false,
          "xaiDescription": "Searches the UnitType for a match against a regular expression or a matcher object and returns the match result."
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false,
          "xaiDescription": "Replaces occurrences of a specified search value in the UnitType with a replacement value or a replacer function."
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false,
          "xaiDescription": "Searches the UnitType for a match against a regular expression or a searcher object and returns the index of the match."
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts a section of the UnitType from the specified start index to the end index and returns it as a new string."
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false,
          "xaiDescription": "Splits the UnitType into an array of substrings based on a specified separator or a splitter object, with an optional limit."
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts the characters from the UnitType between the specified start and end indices and returns them as a new string."
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the UnitType to lowercase and returns the result."
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Converts the UnitType to lowercase using locale-specific rules and returns the result."
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the UnitType to uppercase and returns the result."
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Converts the UnitType to uppercase using locale-specific rules and returns the result."
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from both ends of the UnitType and returns the result."
        },
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Gets the length of the UnitType."
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts the characters from the UnitType starting at the specified index and returns them as a new string."
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Returns the primitive value of the UnitType."
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false,
          "xaiDescription": "Returns the Unicode code point value at the specified position in the UnitType."
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the UnitType contains the specified search string, starting from the specified position."
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the UnitType ends with the specified search string, considering the specified end position."
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false,
          "xaiDescription": "Returns the Unicode normalized form of the UnitType, using the specified normalization form."
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false,
          "xaiDescription": "Constructs and returns a new string by concatenating the UnitType a specified number of times."
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the UnitType starts with the specified search string, considering the specified position."
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML anchor element with the UnitType as its content and the specified name as its name attribute."
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType in a larger font size."
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType with a blinking effect."
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType in bold."
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType in a fixed-width font."
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType with the specified color."
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType with the specified font size."
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType in italics."
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML anchor element with the UnitType as its content and the specified URL as its href attribute."
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType in a smaller font size."
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType with a strikethrough effect."
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType as a subscript."
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the UnitType as a superscript."
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pads the UnitType with a specified string at the start until it reaches the specified length."
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pads the UnitType with a specified string at the end until it reaches the specified length."
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the end of the UnitType and returns the result."
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the start of the UnitType and returns the result."
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the left end of the UnitType and returns the result."
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the right end of the UnitType and returns the result."
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false,
          "xaiDescription": "Returns an iterator containing all matches of a regular expression against the UnitType."
        },
        {
          "name": "__@iterator@59",
          "type": "() => StringIterator<string>",
          "optional": false,
          "xaiDescription": "Returns an iterator for iterating over the characters of the UnitType."
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false,
          "xaiDescription": "Returns the character at the specified index in the UnitType."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a type used for unit manipulation in the library."
    },
    {
      "name": "OpUnitType",
      "type": "OpUnitType",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the OpUnitType to a string representation."
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false,
          "xaiDescription": "Returns the character at the specified position in the OpUnitType."
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false,
          "xaiDescription": "Returns the Unicode value of the character at the specified index in the OpUnitType."
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false,
          "xaiDescription": "Concatenates the OpUnitType with the provided strings and returns the result."
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the index of the first occurrence of the specified search string within the OpUnitType."
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the index of the last occurrence of the specified search string within the OpUnitType."
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false,
          "xaiDescription": "Compares the OpUnitType with another string and returns a number indicating their relative order based on locale-specific rules."
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false,
          "xaiDescription": "Searches the OpUnitType for a match against a regular expression or a matcher object and returns the match result."
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false,
          "xaiDescription": "Replaces occurrences of a specified search value in the OpUnitType with a replacement value or a replacer function."
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false,
          "xaiDescription": "Searches the OpUnitType for a match against a regular expression or a searcher object and returns the index of the match."
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts a section of the OpUnitType from the specified start index to the end index and returns it as a new string."
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false,
          "xaiDescription": "Splits the OpUnitType into an array of substrings based on a specified separator or a splitter object, with an optional limit."
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts the characters from the OpUnitType between the specified start and end indices and returns them as a new string."
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the OpUnitType to lowercase and returns the result."
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Converts the OpUnitType to lowercase using locale-specific rules and returns the result."
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the OpUnitType to uppercase and returns the result."
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Converts the OpUnitType to uppercase using locale-specific rules and returns the result."
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from both ends of the OpUnitType and returns the result."
        },
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Gets the length of the OpUnitType."
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts the characters from the OpUnitType starting at the specified index and returns them as a new string."
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Returns the primitive value of the OpUnitType."
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false,
          "xaiDescription": "Returns the Unicode code point value at the specified position in the OpUnitType."
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the OpUnitType contains the specified search string, starting from the specified position."
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the OpUnitType ends with the specified search string, considering the specified end position."
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false,
          "xaiDescription": "Returns the Unicode normalized form of the OpUnitType, using the specified normalization form."
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false,
          "xaiDescription": "Constructs and returns a new string by concatenating the OpUnitType a specified number of times."
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the OpUnitType starts with the specified search string, considering the specified position."
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML anchor element with the OpUnitType as its content and the specified name as its name attribute."
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType in a larger font size."
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType with a blinking effect."
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType in bold."
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType in a fixed-width font."
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType with the specified color."
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType with the specified font size."
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType in italics."
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML anchor element with the OpUnitType as its content and the specified URL as its href attribute."
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType in a smaller font size."
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType with a strikethrough effect."
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType as a subscript."
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the OpUnitType as a superscript."
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pads the OpUnitType with a specified string at the start until it reaches the specified length."
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pads the OpUnitType with a specified string at the end until it reaches the specified length."
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the end of the OpUnitType and returns the result."
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the start of the OpUnitType and returns the result."
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the left end of the OpUnitType and returns the result."
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the right end of the OpUnitType and returns the result."
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false,
          "xaiDescription": "Returns an iterator containing all matches of a regular expression against the OpUnitType."
        },
        {
          "name": "__@iterator@59",
          "type": "() => StringIterator<string>",
          "optional": false,
          "xaiDescription": "Returns an iterator for iterating over the characters of the OpUnitType."
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false,
          "xaiDescription": "Returns the character at the specified index in the OpUnitType."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a type used for operation unit manipulation in the library."
    },
    {
      "name": "Dayjs",
      "type": "Dayjs",
      "properties": [
        {
          "name": "clone",
          "type": "() => Dayjs",
          "optional": false,
          "xaiDescription": "Creates a deep copy of the Dayjs object. Returns a new Dayjs instance."
        },
        {
          "name": "isValid",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object represents a valid date. Returns true if valid, false otherwise."
        },
        {
          "name": "year",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the year of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "month",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the month of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "date",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the day of the month of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "day",
          "type": "{ (): 0 | 1 | 2 | 3 | 4 | 5 | 6; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the day of the week of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "hour",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the hour of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "minute",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the minute of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "second",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the second of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "millisecond",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the millisecond of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "set",
          "type": "{ (unit: UnitType, value: number): Dayjs; (argument: object): Dayjs; }",
          "optional": false,
          "xaiDescription": "Sets the specified unit or multiple units of the Dayjs object. Returns a new Dayjs instance."
        },
        {
          "name": "get",
          "type": "(unit: UnitType) => number",
          "optional": false,
          "xaiDescription": "Gets the value of the specified unit of the Dayjs object. Returns a number."
        },
        {
          "name": "add",
          "type": "{ (value: number, unit?: ManipulateType): Dayjs; (duration: Duration): Dayjs; (argument: object): Dayjs; (value: number, unit: QUnitType): Dayjs; }",
          "optional": false,
          "xaiDescription": "Adds a value or duration to the Dayjs object. Returns a new Dayjs instance. Uses Duration."
        },
        {
          "name": "subtract",
          "type": "{ (value: number, unit?: ManipulateType): Dayjs; (duration: Duration): Dayjs; (argument: object): Dayjs; (value: number, unit: QUnitType): Dayjs; }",
          "optional": false,
          "xaiDescription": "Subtracts a value or duration from the Dayjs object. Returns a new Dayjs instance. Uses Duration."
        },
        {
          "name": "startOf",
          "type": "{ (unit: OpUnitType): Dayjs; (unit: ISOUnitType): Dayjs; (unit: \"d\" | \"D\" | \"M\" | \"y\" | \"h\" | \"m\" | \"s\" | \"ms\" | \"millisecond\" | \"second\" | \"minute\" | ... 18 more ... | \"Q\"): Dayjs; }",
          "optional": false,
          "xaiDescription": "Returns a new Dayjs instance set to the start of the specified unit."
        },
        {
          "name": "endOf",
          "type": "{ (unit: OpUnitType): Dayjs; (unit: ISOUnitType): Dayjs; (unit: \"d\" | \"D\" | \"M\" | \"y\" | \"h\" | \"m\" | \"s\" | \"ms\" | \"millisecond\" | \"second\" | \"minute\" | ... 18 more ... | \"Q\"): Dayjs; }",
          "optional": false,
          "xaiDescription": "Returns a new Dayjs instance set to the end of the specified unit."
        },
        {
          "name": "format",
          "type": "(template?: string) => string",
          "optional": false,
          "xaiDescription": "Formats the Dayjs object as a string using the specified template. Returns a string."
        },
        {
          "name": "diff",
          "type": "(date?: ConfigType, unit?: \"d\" | \"D\" | \"M\" | \"y\" | \"h\" | \"m\" | \"s\" | \"ms\" | \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"day\" | \"month\" | \"year\" | \"date\" | \"milliseconds\" | ... 12 more ... | \"Q\", float?: boolean) => number",
          "optional": false,
          "xaiDescription": "Calculates the difference between two Dayjs objects. Returns a number."
        },
        {
          "name": "valueOf",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the timestamp value of the Dayjs object. Returns a number."
        },
        {
          "name": "unix",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the Unix timestamp value of the Dayjs object. Returns a number."
        },
        {
          "name": "daysInMonth",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the number of days in the month of the Dayjs object. Returns a number."
        },
        {
          "name": "toDate",
          "type": "() => Date",
          "optional": false,
          "xaiDescription": "Converts the Dayjs object to a native JavaScript Date object. Returns a Date."
        },
        {
          "name": "toJSON",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the Dayjs object to a JSON string. Returns a string."
        },
        {
          "name": "toISOString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the Dayjs object to an ISO 8601 formatted string. Returns a string."
        },
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the Dayjs object to a string representation. Returns a string."
        },
        {
          "name": "utcOffset",
          "type": "{ (): number; (offset: string | number, keepLocalTime?: boolean): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the UTC offset of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "isBefore",
          "type": "{ (date?: ConfigType, unit?: OpUnitType): boolean; (date?: ConfigType, unit?: ISOUnitType): boolean; (date?: ConfigType, unit?: QUnitType): boolean; }",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object is before the specified date. Returns a boolean."
        },
        {
          "name": "isSame",
          "type": "{ (date?: ConfigType, unit?: OpUnitType): boolean; (date?: ConfigType, unit?: ISOUnitType): boolean; (date?: ConfigType, unit?: QUnitType): boolean; }",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object is the same as the specified date. Returns a boolean."
        },
        {
          "name": "isAfter",
          "type": "{ (date?: ConfigType, unit?: OpUnitType): boolean; (date?: ConfigType, unit?: ISOUnitType): boolean; (date?: ConfigType, unit?: QUnitType): boolean; }",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object is after the specified date. Returns a boolean."
        },
        {
          "name": "locale",
          "type": "{ (): string; (preset: string | ILocale, object?: Partial<ILocale>): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the locale of the Dayjs object. Returns string or new Dayjs instance."
        },
        {
          "name": "calendar",
          "type": "(referenceTime?: ConfigType, formats?: object) => string",
          "optional": false,
          "xaiDescription": "Formats the Dayjs object as a calendar string. Returns a string."
        },
        {
          "name": "dayOfYear",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the day of the year of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "isBetween",
          "type": "(a: ConfigType, b: ConfigType, c?: OpUnitType, d?: \"()\" | \"[]\" | \"[)\" | \"(]\") => boolean",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object is between two dates. Returns a boolean."
        },
        {
          "name": "isLeapYear",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Checks if the year of the Dayjs object is a leap year. Returns a boolean."
        },
        {
          "name": "isSameOrAfter",
          "type": "(date?: ConfigType, unit?: OpUnitType) => boolean",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object is the same as or after the specified date. Returns a boolean."
        },
        {
          "name": "isSameOrBefore",
          "type": "(date?: ConfigType, unit?: OpUnitType) => boolean",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object is the same as or before the specified date. Returns a boolean."
        },
        {
          "name": "isToday",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object represents today's date. Returns a boolean."
        },
        {
          "name": "isTomorrow",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object represents tomorrow's date. Returns a boolean."
        },
        {
          "name": "isYesterday",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object represents yesterday's date. Returns a boolean."
        },
        {
          "name": "isoWeekYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the ISO week year of the Dayjs object. Returns a number."
        },
        {
          "name": "isoWeek",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the ISO week of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "isoWeekday",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the ISO weekday of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "isoWeeksInYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the number of ISO weeks in the year of the Dayjs object. Returns a number."
        },
        {
          "name": "localeData",
          "type": "() => InstanceLocaleDataReturn",
          "optional": false,
          "xaiDescription": "Gets the locale data of the Dayjs object. Returns an InstanceLocaleDataReturn."
        },
        {
          "name": "years",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the year of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "months",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the month of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "dates",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the day of the month of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "weeks",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the week of the year of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "days",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the day of the month of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "hours",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the hour of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "minutes",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the minute of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "seconds",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the second of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "milliseconds",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the millisecond of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "quarter",
          "type": "{ (): number; (quarter: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the quarter of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "fromNow",
          "type": "(withoutSuffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Formats the Dayjs object as a string relative to the current time. Returns a string."
        },
        {
          "name": "from",
          "type": "(compared: ConfigType, withoutSuffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Formats the Dayjs object as a string relative to the specified date. Returns a string."
        },
        {
          "name": "toNow",
          "type": "(withoutSuffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Formats the Dayjs object as a string relative to the current time. Returns a string."
        },
        {
          "name": "to",
          "type": "(compared: ConfigType, withoutSuffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Formats the Dayjs object as a string relative to the specified date. Returns a string."
        },
        {
          "name": "tz",
          "type": "(timezone?: string, keepLocalTime?: boolean) => Dayjs",
          "optional": false,
          "xaiDescription": "Converts the Dayjs object to the specified timezone. Returns a new Dayjs instance."
        },
        {
          "name": "offsetName",
          "type": "(type?: \"short\" | \"long\") => string",
          "optional": false,
          "xaiDescription": "Gets the name of the UTC offset of the Dayjs object. Returns a string."
        },
        {
          "name": "toArray",
          "type": "() => number[]",
          "optional": false,
          "xaiDescription": "Converts the Dayjs object to an array of numbers. Returns an array of numbers."
        },
        {
          "name": "toObject",
          "type": "() => DayjsObject",
          "optional": false,
          "xaiDescription": "Converts the Dayjs object to a DayjsObject. Returns a DayjsObject."
        },
        {
          "name": "utc",
          "type": "(keepLocalTime?: boolean) => Dayjs",
          "optional": false,
          "xaiDescription": "Converts the Dayjs object to UTC. Returns a new Dayjs instance."
        },
        {
          "name": "local",
          "type": "() => Dayjs",
          "optional": false,
          "xaiDescription": "Converts the Dayjs object to local time. Returns a new Dayjs instance."
        },
        {
          "name": "isUTC",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Checks if the Dayjs object is in UTC. Returns a boolean."
        },
        {
          "name": "week",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the week of the year of the Dayjs object. Returns number or new Dayjs instance."
        },
        {
          "name": "weekYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the week year of the Dayjs object. Returns a number."
        },
        {
          "name": "weekday",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Gets or sets the weekday of the Dayjs object. Returns number or new Dayjs instance."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a date and time object. Provides methods for date manipulation and formatting."
    },
    {
      "name": "PluginOptions",
      "type": "PluginOptions",
      "properties": [
        {
          "name": "parseTwoDigitYear",
          "type": "(yearString: string) => number",
          "optional": true,
          "xaiDescription": "Function to parse a two-digit year string. Returns the parsed year as a number."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Options for configuring plugins. Used to customize behavior."
    },
    {
      "name": "DurationInputType",
      "type": "DurationInputType",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | ((radix?: number) => string) | (() => string)",
          "optional": false,
          "xaiDescription": "Converts the duration to a string representation. Returns a string."
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => number) | (() => Object)",
          "optional": false,
          "xaiDescription": "Gets the primitive value of the duration. Returns a string, number, or object."
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; }",
          "optional": false,
          "xaiDescription": "Converts the duration to a locale-specific string. Returns a string."
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "isExported": false,
      "xaiDescription": "Type for inputting duration values. Deprecated."
    },
    {
      "name": "DurationAddType",
      "type": "DurationAddType",
      "properties": [
        {
          "name": "toString",
          "type": "((radix?: number) => string) | (() => string) | (() => string)",
          "optional": false,
          "xaiDescription": "Converts the duration to a string representation. Returns a string."
        },
        {
          "name": "valueOf",
          "type": "(() => number) | (() => Object)",
          "optional": false,
          "xaiDescription": "Gets the primitive value of the duration. Returns a number or object."
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; }",
          "optional": false,
          "xaiDescription": "Converts the duration to a locale-specific string. Returns a string."
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "isExported": false,
      "xaiDescription": "Type for adding durations. Deprecated."
    },
    {
      "name": "DurationUnitsObjectType",
      "type": "Partial<{ milliseconds: number; seconds: number; minutes: number; hours: number; days: number; months: number; years: number; weeks: number; }>",
      "properties": [
        {
          "name": "milliseconds",
          "type": "number",
          "optional": true,
          "xaiDescription": "Number of milliseconds in the duration."
        },
        {
          "name": "seconds",
          "type": "number",
          "optional": true,
          "xaiDescription": "Number of seconds in the duration."
        },
        {
          "name": "minutes",
          "type": "number",
          "optional": true,
          "xaiDescription": "Number of minutes in the duration."
        },
        {
          "name": "hours",
          "type": "number",
          "optional": true,
          "xaiDescription": "Number of hours in the duration."
        },
        {
          "name": "days",
          "type": "number",
          "optional": true,
          "xaiDescription": "Number of days in the duration."
        },
        {
          "name": "months",
          "type": "number",
          "optional": true,
          "xaiDescription": "Number of months in the duration."
        },
        {
          "name": "years",
          "type": "number",
          "optional": true,
          "xaiDescription": "Number of years in the duration."
        },
        {
          "name": "weeks",
          "type": "number",
          "optional": true,
          "xaiDescription": "Number of weeks in the duration."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Object representing duration units. Allows partial specification of units."
    },
    {
      "name": "DurationUnitType",
      "type": "DurationUnitType",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the duration unit to a string representation. Returns a string."
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false,
          "xaiDescription": "Gets the character at the specified position in the duration unit string. Returns a string."
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false,
          "xaiDescription": "Gets the Unicode value of the character at the specified index in the duration unit string. Returns a number."
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false,
          "xaiDescription": "Concatenates the duration unit string with other strings. Returns a new string."
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the index of the first occurrence of a specified value in the duration unit string. Returns a number."
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the index of the last occurrence of a specified value in the duration unit string. Returns a number."
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false,
          "xaiDescription": "Compares the duration unit string with another string. Returns a number."
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false,
          "xaiDescription": "Searches the duration unit string for a specified value and returns the matches. Returns a RegExpMatchArray."
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false,
          "xaiDescription": "Searches the duration unit string for a specified value and replaces it with another value. Returns a new string."
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false,
          "xaiDescription": "Searches the duration unit string for a specified value and returns the index of the match. Returns a number."
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts a section of the duration unit string and returns it as a new string."
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false,
          "xaiDescription": "Splits the duration unit string into an array of substrings. Returns an array of strings."
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts the part of the duration unit string between the start and end indexes. Returns a new string."
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the duration unit string to lowercase. Returns a new string."
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Converts the duration unit string to lowercase using the specified locale. Returns a new string."
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the duration unit string to uppercase. Returns a new string."
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Converts the duration unit string to uppercase using the specified locale. Returns a new string."
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from both ends of the duration unit string. Returns a new string."
        },
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Gets the length of the duration unit string. Returns a number."
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts a specified number of characters from the duration unit string. Returns a new string."
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Gets the primitive value of the duration unit string. Returns a string."
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false,
          "xaiDescription": "Returns the Unicode code point value at the specified index in the duration unit string. Returns a number."
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the duration unit string contains the specified substring. Returns a boolean."
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the duration unit string ends with the specified substring. Returns a boolean."
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false,
          "xaiDescription": "Returns the Unicode normalized form of the duration unit string. Returns a new string."
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false,
          "xaiDescription": "Returns a new string containing the specified number of copies of the duration unit string."
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the duration unit string starts with the specified substring. Returns a boolean."
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML anchor element using the duration unit string as the text. Returns a string."
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string in a big font. Returns a string."
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string with a blinking effect. Returns a string."
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string in bold. Returns a string."
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string in a fixed-width font. Returns a string."
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string in the specified color. Returns a string."
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string with the specified font size. Returns a string."
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string in italics. Returns a string."
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML anchor element using the duration unit string as the text and the specified URL as the href. Returns a string."
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string in a small font. Returns a string."
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string with a strikethrough effect. Returns a string."
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string as a subscript. Returns a string."
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the duration unit string as a superscript. Returns a string."
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pads the start of the duration unit string with a specified string. Returns a new string."
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pads the end of the duration unit string with a specified string. Returns a new string."
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the end of the duration unit string. Returns a new string."
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the start of the duration unit string. Returns a new string."
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the left of the duration unit string. Returns a new string."
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the right of the duration unit string. Returns a new string."
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false,
          "xaiDescription": "Returns an iterator containing all matches of a regular expression in the duration unit string."
        },
        {
          "name": "__@iterator@59",
          "type": "() => StringIterator<string>",
          "optional": false,
          "xaiDescription": "Returns an iterator for the duration unit string."
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false,
          "xaiDescription": "Returns the character at the specified index in the duration unit string."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a type for duration units. Provides string manipulation methods."
    },
    {
      "name": "CreateDurationType",
      "type": "CreateDurationType",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Type for creating duration objects."
    },
    {
      "name": "AddDurationType",
      "type": "AddDurationType",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Type for adding durations to other objects."
    },
    {
      "name": "Duration",
      "type": "Duration",
      "properties": [
        {
          "name": "clone",
          "type": "() => Duration",
          "optional": false,
          "xaiDescription": "Creates a deep copy of the Duration object. Returns a new Duration instance."
        },
        {
          "name": "humanize",
          "type": "(withSuffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Converts the Duration object to a human-readable string. Returns a string."
        },
        {
          "name": "milliseconds",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration in milliseconds. Returns a number."
        },
        {
          "name": "asMilliseconds",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration as milliseconds. Returns a number."
        },
        {
          "name": "seconds",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration in seconds. Returns a number."
        },
        {
          "name": "asSeconds",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration as seconds. Returns a number."
        },
        {
          "name": "minutes",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration in minutes. Returns a number."
        },
        {
          "name": "asMinutes",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration as minutes. Returns a number."
        },
        {
          "name": "hours",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration in hours. Returns a number."
        },
        {
          "name": "asHours",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration as hours. Returns a number."
        },
        {
          "name": "days",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration in days. Returns a number."
        },
        {
          "name": "asDays",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration as days. Returns a number."
        },
        {
          "name": "weeks",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration in weeks. Returns a number."
        },
        {
          "name": "asWeeks",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration as weeks. Returns a number."
        },
        {
          "name": "months",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration in months. Returns a number."
        },
        {
          "name": "asMonths",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration as months. Returns a number."
        },
        {
          "name": "years",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration in years. Returns a number."
        },
        {
          "name": "asYears",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Gets the duration as years. Returns a number."
        },
        {
          "name": "as",
          "type": "(unit: DurationUnitType) => number",
          "optional": false,
          "xaiDescription": "Gets the duration as the specified unit. Returns a number. Uses DurationUnitType."
        },
        {
          "name": "get",
          "type": "(unit: DurationUnitType) => number",
          "optional": false,
          "xaiDescription": "Gets the value of the specified unit in the Duration object. Returns a number. Uses DurationUnitType."
        },
        {
          "name": "add",
          "type": "AddDurationType",
          "optional": false,
          "xaiDescription": "Adds a duration to the current Duration object. Uses AddDurationType."
        },
        {
          "name": "subtract",
          "type": "AddDurationType",
          "optional": false,
          "xaiDescription": "Subtracts a duration from the current Duration object. Uses AddDurationType."
        },
        {
          "name": "toJSON",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the Duration object to a JSON string. Returns a string."
        },
        {
          "name": "toISOString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the Duration object to an ISO 8601 formatted string. Returns a string."
        },
        {
          "name": "format",
          "type": "(formatStr?: string) => string",
          "optional": false,
          "xaiDescription": "Formats the Duration object as a string using the specified format. Returns a string."
        },
        {
          "name": "locale",
          "type": "(locale: string) => Duration",
          "optional": false,
          "xaiDescription": "Sets the locale of the Duration object. Returns a new Duration instance."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a duration object. Provides methods for duration manipulation and formatting."
    },
    {
      "name": "ISOUnitType",
      "type": "ISOUnitType",
      "properties": [
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the ISO unit to a string representation. Returns a string."
        },
        {
          "name": "charAt",
          "type": "(pos: number) => string",
          "optional": false,
          "xaiDescription": "Gets the character at the specified position in the ISO unit string. Returns a string."
        },
        {
          "name": "charCodeAt",
          "type": "(index: number) => number",
          "optional": false,
          "xaiDescription": "Gets the Unicode value of the character at the specified index in the ISO unit string. Returns a number."
        },
        {
          "name": "concat",
          "type": "(...strings: string[]) => string",
          "optional": false,
          "xaiDescription": "Concatenates the ISO unit string with other strings. Returns a new string."
        },
        {
          "name": "indexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the index of the first occurrence of a specified value in the ISO unit string. Returns a number."
        },
        {
          "name": "lastIndexOf",
          "type": "(searchString: string, position?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the index of the last occurrence of a specified value in the ISO unit string. Returns a number."
        },
        {
          "name": "localeCompare",
          "type": "{ (that: string): number; (that: string, locales?: string | string[], options?: CollatorOptions): number; (that: string, locales?: LocalesArgument, options?: CollatorOptions): number; }",
          "optional": false,
          "xaiDescription": "Compares the ISO unit string with another string. Returns a number."
        },
        {
          "name": "match",
          "type": "{ (regexp: string | RegExp): RegExpMatchArray; (matcher: { [Symbol.match](string: string): RegExpMatchArray; }): RegExpMatchArray; }",
          "optional": false,
          "xaiDescription": "Searches the ISO unit string for a specified value and returns the matches. Returns a RegExpMatchArray."
        },
        {
          "name": "replace",
          "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
          "optional": false,
          "xaiDescription": "Searches the ISO unit string for a specified value and replaces it with another value. Returns a new string."
        },
        {
          "name": "search",
          "type": "{ (regexp: string | RegExp): number; (searcher: { [Symbol.search](string: string): number; }): number; }",
          "optional": false,
          "xaiDescription": "Searches the ISO unit string for a specified value and returns the index of the match. Returns a number."
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts a section of the ISO unit string and returns it as a new string."
        },
        {
          "name": "split",
          "type": "{ (separator: string | RegExp, limit?: number): string[]; (splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[]; }",
          "optional": false,
          "xaiDescription": "Splits the ISO unit string into an array of substrings. Returns an array of strings."
        },
        {
          "name": "substring",
          "type": "(start: number, end?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts the part of the ISO unit string between the start and end indexes. Returns a new string."
        },
        {
          "name": "toLowerCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the ISO unit string to lowercase. Returns a new string."
        },
        {
          "name": "toLocaleLowerCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Converts the ISO unit string to lowercase using the specified locale. Returns a new string."
        },
        {
          "name": "toUpperCase",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the ISO unit string to uppercase. Returns a new string."
        },
        {
          "name": "toLocaleUpperCase",
          "type": "{ (locales?: string | string[]): string; (locales?: LocalesArgument): string; }",
          "optional": false,
          "xaiDescription": "Converts the ISO unit string to uppercase using the specified locale. Returns a new string."
        },
        {
          "name": "trim",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from both ends of the ISO unit string. Returns a new string."
        },
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Gets the length of the ISO unit string. Returns a number."
        },
        {
          "name": "substr",
          "type": "(from: number, length?: number) => string",
          "optional": false,
          "xaiDescription": "Extracts a specified number of characters from the ISO unit string. Returns a new string."
        },
        {
          "name": "valueOf",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Gets the primitive value of the ISO unit string. Returns a string."
        },
        {
          "name": "codePointAt",
          "type": "(pos: number) => number",
          "optional": false,
          "xaiDescription": "Returns the Unicode code point value at the specified index in the ISO unit string. Returns a number."
        },
        {
          "name": "includes",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the ISO unit string contains the specified substring. Returns a boolean."
        },
        {
          "name": "endsWith",
          "type": "(searchString: string, endPosition?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the ISO unit string ends with the specified substring. Returns a boolean."
        },
        {
          "name": "normalize",
          "type": "{ (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string; (form?: string): string; }",
          "optional": false,
          "xaiDescription": "Returns the Unicode normalized form of the ISO unit string. Returns a new string."
        },
        {
          "name": "repeat",
          "type": "(count: number) => string",
          "optional": false,
          "xaiDescription": "Returns a new string containing the specified number of copies of the ISO unit string."
        },
        {
          "name": "startsWith",
          "type": "(searchString: string, position?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the ISO unit string starts with the specified substring. Returns a boolean."
        },
        {
          "name": "anchor",
          "type": "(name: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML anchor element using the ISO unit string as the text. Returns a string."
        },
        {
          "name": "big",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string in a big font. Returns a string."
        },
        {
          "name": "blink",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string with a blinking effect. Returns a string."
        },
        {
          "name": "bold",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string in bold. Returns a string."
        },
        {
          "name": "fixed",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string in a fixed-width font. Returns a string."
        },
        {
          "name": "fontcolor",
          "type": "(color: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string in the specified color. Returns a string."
        },
        {
          "name": "fontsize",
          "type": "{ (size: number): string; (size: string): string; }",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string with the specified font size. Returns a string."
        },
        {
          "name": "italics",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string in italics. Returns a string."
        },
        {
          "name": "link",
          "type": "(url: string) => string",
          "optional": false,
          "xaiDescription": "Creates an HTML anchor element using the ISO unit string as the text and the specified URL as the href. Returns a string."
        },
        {
          "name": "small",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string in a small font. Returns a string."
        },
        {
          "name": "strike",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string with a strikethrough effect. Returns a string."
        },
        {
          "name": "sub",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string as a subscript. Returns a string."
        },
        {
          "name": "sup",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Creates an HTML element that displays the ISO unit string as a superscript. Returns a string."
        },
        {
          "name": "padStart",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pads the start of the ISO unit string with a specified string. Returns a new string."
        },
        {
          "name": "padEnd",
          "type": "(maxLength: number, fillString?: string) => string",
          "optional": false,
          "xaiDescription": "Pads the end of the ISO unit string with a specified string. Returns a new string."
        },
        {
          "name": "trimEnd",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the end of the ISO unit string. Returns a new string."
        },
        {
          "name": "trimStart",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the start of the ISO unit string. Returns a new string."
        },
        {
          "name": "trimLeft",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the left of the ISO unit string. Returns a new string."
        },
        {
          "name": "trimRight",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Removes whitespace from the right of the ISO unit string. Returns a new string."
        },
        {
          "name": "matchAll",
          "type": "(regexp: RegExp) => RegExpStringIterator<RegExpExecArray>",
          "optional": false,
          "xaiDescription": "Returns an iterator containing all matches of a regular expression in the ISO unit string."
        },
        {
          "name": "__@iterator@59",
          "type": "() => StringIterator<string>",
          "optional": false,
          "xaiDescription": "Returns an iterator for the ISO unit string."
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false,
          "xaiDescription": "Returns the character at the specified index in the ISO unit string."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a type for ISO units. Provides string manipulation methods."
    },
    {
      "name": "WeekdayNames",
      "type": "WeekdayNames",
      "properties": [
        {
          "name": "0",
          "type": "string",
          "optional": false,
          "xaiDescription": "First weekday name"
        },
        {
          "name": "1",
          "type": "string",
          "optional": false,
          "xaiDescription": "Second weekday name"
        },
        {
          "name": "2",
          "type": "string",
          "optional": false,
          "xaiDescription": "Third weekday name"
        },
        {
          "name": "3",
          "type": "string",
          "optional": false,
          "xaiDescription": "Fourth weekday name"
        },
        {
          "name": "4",
          "type": "string",
          "optional": false,
          "xaiDescription": "Fifth weekday name"
        },
        {
          "name": "5",
          "type": "string",
          "optional": false,
          "xaiDescription": "Sixth weekday name"
        },
        {
          "name": "6",
          "type": "string",
          "optional": false,
          "xaiDescription": "Seventh weekday name"
        },
        {
          "name": "length",
          "type": "7",
          "optional": false,
          "xaiDescription": "Number of weekday names"
        },
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Convert to string"
        },
        {
          "name": "toLocaleString",
          "type": "{ (): string; (locales: string | string[], options?: NumberFormatOptions & DateTimeFormatOptions): string; }",
          "optional": false,
          "xaiDescription": "Convert to locale string"
        },
        {
          "name": "pop",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Remove last weekday name"
        },
        {
          "name": "push",
          "type": "(...items: string[]) => number",
          "optional": false,
          "xaiDescription": "Add weekday names, return new length"
        },
        {
          "name": "concat",
          "type": "{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }",
          "optional": false,
          "xaiDescription": "Concatenate weekday names"
        },
        {
          "name": "join",
          "type": "(separator?: string) => string",
          "optional": false,
          "xaiDescription": "Join weekday names"
        },
        {
          "name": "reverse",
          "type": "() => string[]",
          "optional": false,
          "xaiDescription": "Reverse weekday names"
        },
        {
          "name": "shift",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Remove first weekday name"
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string[]",
          "optional": false,
          "xaiDescription": "Extract portion of weekday names"
        },
        {
          "name": "sort",
          "type": "(compareFn?: (a: string, b: string) => number) => WeekdayNames",
          "optional": false,
          "xaiDescription": "Sort weekday names, return WeekdayNames"
        },
        {
          "name": "splice",
          "type": "{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }",
          "optional": false,
          "xaiDescription": "Modify weekday names"
        },
        {
          "name": "unshift",
          "type": "(...items: string[]) => number",
          "optional": false,
          "xaiDescription": "Add weekday names to start, return new length"
        },
        {
          "name": "indexOf",
          "type": "(searchElement: string, fromIndex?: number) => number",
          "optional": false,
          "xaiDescription": "Find weekday name index"
        },
        {
          "name": "lastIndexOf",
          "type": "(searchElement: string, fromIndex?: number) => number",
          "optional": false,
          "xaiDescription": "Find last weekday name index"
        },
        {
          "name": "every",
          "type": "{ <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean; }",
          "optional": false,
          "xaiDescription": "Test all weekday names"
        },
        {
          "name": "some",
          "type": "(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean",
          "optional": false,
          "xaiDescription": "Test any weekday name"
        },
        {
          "name": "forEach",
          "type": "(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void",
          "optional": false,
          "xaiDescription": "Execute function for each weekday name"
        },
        {
          "name": "map",
          "type": "<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]",
          "optional": false,
          "xaiDescription": "Create new array from weekday names"
        },
        {
          "name": "filter",
          "type": "{ <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }",
          "optional": false,
          "xaiDescription": "Filter weekday names"
        },
        {
          "name": "reduce",
          "type": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ...",
          "optional": false,
          "xaiDescription": "Reduce weekday names to single value"
        },
        {
          "name": "reduceRight",
          "type": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ...",
          "optional": false,
          "xaiDescription": "Reduce weekday names from right"
        },
        {
          "name": "find",
          "type": "{ <S extends string>(predicate: (value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }",
          "optional": false,
          "xaiDescription": "Find weekday name"
        },
        {
          "name": "findIndex",
          "type": "(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number",
          "optional": false,
          "xaiDescription": "Find weekday name index"
        },
        {
          "name": "fill",
          "type": "(value: string, start?: number, end?: number) => WeekdayNames",
          "optional": false,
          "xaiDescription": "Fill weekday names, return WeekdayNames"
        },
        {
          "name": "copyWithin",
          "type": "(target: number, start: number, end?: number) => WeekdayNames",
          "optional": false,
          "xaiDescription": "Copy within weekday names, return WeekdayNames"
        },
        {
          "name": "entries",
          "type": "() => ArrayIterator<[number, string]>",
          "optional": false,
          "xaiDescription": "Return iterator of weekday name entries"
        },
        {
          "name": "keys",
          "type": "() => ArrayIterator<number>",
          "optional": false,
          "xaiDescription": "Return iterator of weekday name keys"
        },
        {
          "name": "values",
          "type": "() => ArrayIterator<string>",
          "optional": false,
          "xaiDescription": "Return iterator of weekday name values"
        },
        {
          "name": "includes",
          "type": "(searchElement: string, fromIndex?: number) => boolean",
          "optional": false,
          "xaiDescription": "Check if weekday name exists"
        },
        {
          "name": "flatMap",
          "type": "<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This) => U[]",
          "optional": false,
          "xaiDescription": "Map and flatten weekday names"
        },
        {
          "name": "flat",
          "type": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]",
          "optional": false,
          "xaiDescription": "Flatten weekday names array"
        },
        {
          "name": "__@iterator@59",
          "type": "() => ArrayIterator<string>",
          "optional": false,
          "xaiDescription": "Symbol iterator for weekday names"
        },
        {
          "name": "__@unscopables@102",
          "type": "{ [x: number]: boolean; length?: boolean; toString?: boolean; toLocaleString?: boolean; pop?: boolean; push?: boolean; concat?: boolean; join?: boolean; reverse?: boolean; shift?: boolean; slice?: boolean; sort?: boolean; ... 23 more ...; at?: boolean; }",
          "optional": false,
          "xaiDescription": "Unscopable properties of weekday names"
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false,
          "xaiDescription": "Get weekday name at specific index"
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Array of weekday names"
    },
    {
      "name": "MonthNames",
      "type": "MonthNames",
      "properties": [
        {
          "name": "0",
          "type": "string",
          "optional": false,
          "xaiDescription": "First month name"
        },
        {
          "name": "1",
          "type": "string",
          "optional": false,
          "xaiDescription": "Second month name"
        },
        {
          "name": "2",
          "type": "string",
          "optional": false,
          "xaiDescription": "Third month name"
        },
        {
          "name": "3",
          "type": "string",
          "optional": false,
          "xaiDescription": "Fourth month name"
        },
        {
          "name": "4",
          "type": "string",
          "optional": false,
          "xaiDescription": "Fifth month name"
        },
        {
          "name": "5",
          "type": "string",
          "optional": false,
          "xaiDescription": "Sixth month name"
        },
        {
          "name": "6",
          "type": "string",
          "optional": false,
          "xaiDescription": "Seventh month name"
        },
        {
          "name": "7",
          "type": "string",
          "optional": false,
          "xaiDescription": "Eighth month name"
        },
        {
          "name": "8",
          "type": "string",
          "optional": false,
          "xaiDescription": "Ninth month name"
        },
        {
          "name": "9",
          "type": "string",
          "optional": false,
          "xaiDescription": "Tenth month name"
        },
        {
          "name": "10",
          "type": "string",
          "optional": false,
          "xaiDescription": "Eleventh month name"
        },
        {
          "name": "11",
          "type": "string",
          "optional": false,
          "xaiDescription": "Twelfth month name"
        },
        {
          "name": "length",
          "type": "12",
          "optional": false,
          "xaiDescription": "Number of month names"
        },
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Convert to string"
        },
        {
          "name": "toLocaleString",
          "type": "{ (): string; (locales: string | string[], options?: NumberFormatOptions & DateTimeFormatOptions): string; }",
          "optional": false,
          "xaiDescription": "Convert to locale string"
        },
        {
          "name": "pop",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Remove last month name"
        },
        {
          "name": "push",
          "type": "(...items: string[]) => number",
          "optional": false,
          "xaiDescription": "Add month names, return new length"
        },
        {
          "name": "concat",
          "type": "{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; }",
          "optional": false,
          "xaiDescription": "Concatenate month names"
        },
        {
          "name": "join",
          "type": "(separator?: string) => string",
          "optional": false,
          "xaiDescription": "Join month names"
        },
        {
          "name": "reverse",
          "type": "() => string[]",
          "optional": false,
          "xaiDescription": "Reverse month names"
        },
        {
          "name": "shift",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Remove first month name"
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => string[]",
          "optional": false,
          "xaiDescription": "Extract portion of month names"
        },
        {
          "name": "sort",
          "type": "(compareFn?: (a: string, b: string) => number) => MonthNames",
          "optional": false,
          "xaiDescription": "Sort month names, return MonthNames"
        },
        {
          "name": "splice",
          "type": "{ (start: number, deleteCount?: number): string[]; (start: number, deleteCount: number, ...items: string[]): string[]; }",
          "optional": false,
          "xaiDescription": "Modify month names"
        },
        {
          "name": "unshift",
          "type": "(...items: string[]) => number",
          "optional": false,
          "xaiDescription": "Add month names to start, return new length"
        },
        {
          "name": "indexOf",
          "type": "(searchElement: string, fromIndex?: number) => number",
          "optional": false,
          "xaiDescription": "Find month name index"
        },
        {
          "name": "lastIndexOf",
          "type": "(searchElement: string, fromIndex?: number) => number",
          "optional": false,
          "xaiDescription": "Find last month name index"
        },
        {
          "name": "every",
          "type": "{ <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean; }",
          "optional": false,
          "xaiDescription": "Test all month names"
        },
        {
          "name": "some",
          "type": "(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any) => boolean",
          "optional": false,
          "xaiDescription": "Test any month name"
        },
        {
          "name": "forEach",
          "type": "(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any) => void",
          "optional": false,
          "xaiDescription": "Execute function for each month name"
        },
        {
          "name": "map",
          "type": "<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]",
          "optional": false,
          "xaiDescription": "Create new array from month names"
        },
        {
          "name": "filter",
          "type": "{ <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; }",
          "optional": false,
          "xaiDescription": "Filter month names"
        },
        {
          "name": "reduce",
          "type": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ...",
          "optional": false,
          "xaiDescription": "Reduce month names to single value"
        },
        {
          "name": "reduceRight",
          "type": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ...",
          "optional": false,
          "xaiDescription": "Reduce month names from right"
        },
        {
          "name": "find",
          "type": "{ <S extends string>(predicate: (value: string, index: number, obj: string[]) => value is S, thisArg?: any): S; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string; }",
          "optional": false,
          "xaiDescription": "Find month name"
        },
        {
          "name": "findIndex",
          "type": "(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any) => number",
          "optional": false,
          "xaiDescription": "Find month name index"
        },
        {
          "name": "fill",
          "type": "(value: string, start?: number, end?: number) => MonthNames",
          "optional": false,
          "xaiDescription": "Fill month names, return MonthNames"
        },
        {
          "name": "copyWithin",
          "type": "(target: number, start: number, end?: number) => MonthNames",
          "optional": false,
          "xaiDescription": "Copy within month names, return MonthNames"
        },
        {
          "name": "entries",
          "type": "() => ArrayIterator<[number, string]>",
          "optional": false,
          "xaiDescription": "Return iterator of month name entries"
        },
        {
          "name": "keys",
          "type": "() => ArrayIterator<number>",
          "optional": false,
          "xaiDescription": "Return iterator of month name keys"
        },
        {
          "name": "values",
          "type": "() => ArrayIterator<string>",
          "optional": false,
          "xaiDescription": "Return iterator of month name values"
        },
        {
          "name": "includes",
          "type": "(searchElement: string, fromIndex?: number) => boolean",
          "optional": false,
          "xaiDescription": "Check if month name exists"
        },
        {
          "name": "flatMap",
          "type": "<U, This = undefined>(callback: (this: This, value: string, index: number, array: string[]) => U | readonly U[], thisArg?: This) => U[]",
          "optional": false,
          "xaiDescription": "Map and flatten month names"
        },
        {
          "name": "flat",
          "type": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]",
          "optional": false,
          "xaiDescription": "Flatten month names array"
        },
        {
          "name": "__@iterator@59",
          "type": "() => ArrayIterator<string>",
          "optional": false,
          "xaiDescription": "Symbol iterator for month names"
        },
        {
          "name": "__@unscopables@102",
          "type": "{ [x: number]: boolean; length?: boolean; toString?: boolean; toLocaleString?: boolean; pop?: boolean; push?: boolean; concat?: boolean; join?: boolean; reverse?: boolean; shift?: boolean; slice?: boolean; sort?: boolean; ... 23 more ...; at?: boolean; }",
          "optional": false,
          "xaiDescription": "Unscopable properties of month names"
        },
        {
          "name": "at",
          "type": "(index: number) => string",
          "optional": false,
          "xaiDescription": "Get month name at specific index"
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Array of month names"
    },
    {
      "name": "InstanceLocaleDataReturn",
      "type": "InstanceLocaleDataReturn",
      "properties": [
        {
          "name": "firstDayOfWeek",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get first day of week"
        },
        {
          "name": "weekdays",
          "type": "(instance?: Dayjs) => WeekdayNames",
          "optional": false,
          "xaiDescription": "Get weekdays (Dayjs instance optional)"
        },
        {
          "name": "weekdaysShort",
          "type": "(instance?: Dayjs) => WeekdayNames",
          "optional": false,
          "xaiDescription": "Get short weekdays (Dayjs instance optional)"
        },
        {
          "name": "weekdaysMin",
          "type": "(instance?: Dayjs) => WeekdayNames",
          "optional": false,
          "xaiDescription": "Get minimal weekdays (Dayjs instance optional)"
        },
        {
          "name": "months",
          "type": "(instance?: Dayjs) => MonthNames",
          "optional": false,
          "xaiDescription": "Get months (Dayjs instance optional)"
        },
        {
          "name": "monthsShort",
          "type": "(instance?: Dayjs) => MonthNames",
          "optional": false,
          "xaiDescription": "Get short months (Dayjs instance optional)"
        },
        {
          "name": "longDateFormat",
          "type": "(format: string) => string",
          "optional": false,
          "xaiDescription": "Get long date format string"
        },
        {
          "name": "meridiem",
          "type": "(hour?: number, minute?: number, isLower?: boolean) => string",
          "optional": false,
          "xaiDescription": "Get meridiem string"
        },
        {
          "name": "ordinal",
          "type": "(n: number) => string",
          "optional": false,
          "xaiDescription": "Get ordinal string"
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Locale data return type for Dayjs instance"
    },
    {
      "name": "GlobalLocaleDataReturn",
      "type": "GlobalLocaleDataReturn",
      "properties": [
        {
          "name": "firstDayOfWeek",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get first day of week"
        },
        {
          "name": "weekdays",
          "type": "() => WeekdayNames",
          "optional": false,
          "xaiDescription": "Get weekdays"
        },
        {
          "name": "weekdaysShort",
          "type": "() => WeekdayNames",
          "optional": false,
          "xaiDescription": "Get short weekdays"
        },
        {
          "name": "weekdaysMin",
          "type": "() => WeekdayNames",
          "optional": false,
          "xaiDescription": "Get minimal weekdays"
        },
        {
          "name": "months",
          "type": "() => MonthNames",
          "optional": false,
          "xaiDescription": "Get months"
        },
        {
          "name": "monthsShort",
          "type": "() => MonthNames",
          "optional": false,
          "xaiDescription": "Get short months"
        },
        {
          "name": "longDateFormat",
          "type": "(format: string) => string",
          "optional": false,
          "xaiDescription": "Get long date format string"
        },
        {
          "name": "meridiem",
          "type": "(hour?: number, minute?: number, isLower?: boolean) => string",
          "optional": false,
          "xaiDescription": "Get meridiem string"
        },
        {
          "name": "ordinal",
          "type": "(n: number) => string",
          "optional": false,
          "xaiDescription": "Get ordinal string"
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Locale data return type for global Dayjs"
    },
    {
      "name": "RelativeTimeThreshold",
      "type": "RelativeTimeThreshold",
      "properties": [
        {
          "name": "l",
          "type": "string",
          "optional": false,
          "xaiDescription": "Label for threshold"
        },
        {
          "name": "r",
          "type": "number",
          "optional": true,
          "xaiDescription": "Relative time value"
        },
        {
          "name": "d",
          "type": "string",
          "optional": true,
          "xaiDescription": "Description for threshold"
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Threshold for relative time"
    },
    {
      "name": "RelativeTimeOptions",
      "type": "RelativeTimeOptions",
      "properties": [
        {
          "name": "rounding",
          "type": "(num: number) => number",
          "optional": true,
          "xaiDescription": "Function to round relative time"
        },
        {
          "name": "thresholds",
          "type": "RelativeTimeThreshold[]",
          "optional": true,
          "xaiDescription": "Array of RelativeTimeThreshold objects"
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Options for relative time"
    },
    {
      "name": "DayjsTimezone",
      "type": "DayjsTimezone",
      "properties": [
        {
          "name": "guess",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Guess timezone"
        },
        {
          "name": "setDefault",
          "type": "(timezone?: string) => void",
          "optional": false,
          "xaiDescription": "Set default timezone"
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Timezone handling for Dayjs"
    },
    {
      "name": "DayjsObject",
      "type": "DayjsObject",
      "properties": [
        {
          "name": "years",
          "type": "number",
          "optional": false,
          "xaiDescription": "Year value"
        },
        {
          "name": "months",
          "type": "number",
          "optional": false,
          "xaiDescription": "Month value"
        },
        {
          "name": "date",
          "type": "number",
          "optional": false,
          "xaiDescription": "Date value"
        },
        {
          "name": "hours",
          "type": "number",
          "optional": false,
          "xaiDescription": "Hour value"
        },
        {
          "name": "minutes",
          "type": "number",
          "optional": false,
          "xaiDescription": "Minute value"
        },
        {
          "name": "seconds",
          "type": "number",
          "optional": false,
          "xaiDescription": "Second value"
        },
        {
          "name": "milliseconds",
          "type": "number",
          "optional": false,
          "xaiDescription": "Millisecond value"
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Object representation of Dayjs"
    }
  ],
  "classes": [
    {
      "name": "Dayjs",
      "constructors": [
        {
          "parameters": [
            {
              "name": "config",
              "type": "ConfigType",
              "optional": true
            }
          ],
          "returnType": "Dayjs",
          "xaiDescription": "Create Dayjs instance (ConfigType optional)"
        }
      ],
      "properties": [
        {
          "name": "calendar",
          "type": "(referenceTime?: ConfigType, formats?: object) => string",
          "optional": false,
          "xaiDescription": "Format as calendar string (ConfigType optional)"
        },
        {
          "name": "dayOfYear",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set day of year"
        },
        {
          "name": "isBetween",
          "type": "(a: ConfigType, b: ConfigType, c?: OpUnitType, d?: \"()\" | \"[]\" | \"[)\" | \"(]\") => boolean",
          "optional": false,
          "xaiDescription": "Check if between dates (ConfigType, OpUnitType optional)"
        },
        {
          "name": "isLeapYear",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if leap year"
        },
        {
          "name": "isSameOrAfter",
          "type": "(date?: ConfigType, unit?: OpUnitType) => boolean",
          "optional": false,
          "xaiDescription": "Check if same or after date (ConfigType, OpUnitType optional)"
        },
        {
          "name": "isSameOrBefore",
          "type": "(date?: ConfigType, unit?: OpUnitType) => boolean",
          "optional": false,
          "xaiDescription": "Check if same or before date (ConfigType, OpUnitType optional)"
        },
        {
          "name": "isToday",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if today"
        },
        {
          "name": "isTomorrow",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if tomorrow"
        },
        {
          "name": "isYesterday",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if yesterday"
        },
        {
          "name": "isoWeekYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get ISO week year"
        },
        {
          "name": "isoWeek",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set ISO week"
        },
        {
          "name": "isoWeekday",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set ISO weekday"
        },
        {
          "name": "isoWeeksInYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get ISO weeks in year"
        },
        {
          "name": "localeData",
          "type": "() => InstanceLocaleDataReturn",
          "optional": false,
          "xaiDescription": "Get locale data (InstanceLocaleDataReturn)"
        },
        {
          "name": "years",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set year"
        },
        {
          "name": "months",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set month"
        },
        {
          "name": "dates",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set date"
        },
        {
          "name": "weeks",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set week"
        },
        {
          "name": "days",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set day"
        },
        {
          "name": "hours",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set hour"
        },
        {
          "name": "minutes",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set minute"
        },
        {
          "name": "seconds",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set second"
        },
        {
          "name": "milliseconds",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set millisecond"
        },
        {
          "name": "quarter",
          "type": "{ (): number; (quarter: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set quarter"
        },
        {
          "name": "fromNow",
          "type": "(withoutSuffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Get relative time from now (boolean optional)"
        },
        {
          "name": "from",
          "type": "(compared: ConfigType, withoutSuffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Get relative time from date (ConfigType, boolean optional)"
        },
        {
          "name": "toNow",
          "type": "(withoutSuffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Get relative time to now (boolean optional)"
        },
        {
          "name": "to",
          "type": "(compared: ConfigType, withoutSuffix?: boolean) => string",
          "optional": false,
          "xaiDescription": "Get relative time to date (ConfigType, boolean optional)"
        },
        {
          "name": "tz",
          "type": "(timezone?: string, keepLocalTime?: boolean) => Dayjs",
          "optional": false,
          "xaiDescription": "Convert to timezone (string, boolean optional)"
        },
        {
          "name": "offsetName",
          "type": "(type?: \"short\" | \"long\") => string",
          "optional": false,
          "xaiDescription": "Get offset name (string optional)"
        },
        {
          "name": "toArray",
          "type": "() => number[]",
          "optional": false,
          "xaiDescription": "Convert to array of numbers"
        },
        {
          "name": "toObject",
          "type": "() => DayjsObject",
          "optional": false,
          "xaiDescription": "Convert to DayjsObject"
        },
        {
          "name": "utc",
          "type": "(keepLocalTime?: boolean) => Dayjs",
          "optional": false,
          "xaiDescription": "Convert to UTC (boolean optional)"
        },
        {
          "name": "local",
          "type": "() => Dayjs",
          "optional": false,
          "xaiDescription": "Convert to local time"
        },
        {
          "name": "isUTC",
          "type": "() => boolean",
          "optional": false,
          "xaiDescription": "Check if UTC"
        },
        {
          "name": "week",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set week"
        },
        {
          "name": "weekYear",
          "type": "() => number",
          "optional": false,
          "xaiDescription": "Get week year"
        },
        {
          "name": "weekday",
          "type": "{ (): number; (value: number): Dayjs; }",
          "optional": false,
          "xaiDescription": "Get or set weekday"
        }
      ],
      "implements": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Immutable date-time library"
    }
  ],
  "constants": [],
  "namespaces": []
}