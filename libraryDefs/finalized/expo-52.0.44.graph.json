{
  "version": "52.0.44",
  "functions": [
    {
      "name": "anonymous",
      "parameters": [
        {
          "name": "event",
          "type": "WebSocketMessageEvent",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "This client is for the Expo DevTools Plugins to communicate between the app and the DevTools webpage hosted in a browser.\nAll the code should be both compatible with browsers and React Native.",
        "tags": []
      },
      "isExported": false,
      "xaiDescription": "Facilitates Expo DevTools plugin communication between app and browser, ensuring browser and React Native compatibility."
    },
    {
      "name": "useDevToolsPluginClient",
      "parameters": [
        {
          "name": "pluginName",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").DevToolsPluginClientOptions",
          "optional": true
        }
      ],
      "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/DevToolsPluginClient\").DevToolsPluginClient",
      "jsdoc": {
        "description": "A React hook to get the DevToolsPluginClient instance.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "useDOMImperativeHandle",
      "parameters": [
        {
          "name": "ref",
          "type": "React.Ref<T>",
          "optional": false
        },
        {
          "name": "init",
          "type": "() => T",
          "optional": false
        },
        {
          "name": "deps",
          "type": "React.DependencyList",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "A React `useImperativeHandle` like hook for DOM components.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "getInitialSafeArea",
      "parameters": [],
      "returnType": "{ top: number; bottom: number; left: number; right: number; }",
      "jsdoc": {
        "description": "Get the best estimate safe area before native modules have fully loaded.\nThis is a hack to get the safe area insets without explicitly depending on react-native-safe-area-context.",
        "tags": []
      },
      "isExported": true,
      "xaiDescription": "Estimates safe area insets without relying on react-native-safe-area-context module."
    },
    {
      "name": "useEvent",
      "parameters": [
        {
          "name": "eventEmitter",
          "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo-modules-core/build/ts-declarations/EventEmitter\").EventEmitter<TEventsMap>",
          "optional": false
        },
        {
          "name": "eventName",
          "type": "TEventName",
          "optional": false
        },
        {
          "name": "initialValue",
          "type": "TInitialValue",
          "optional": true
        }
      ],
      "returnType": "InferEventParameter<TEventListener, TInitialValue>",
      "jsdoc": {
        "description": "React hook that listens to events emitted by the given object. The returned value is an event parameter\nthat gets updated whenever a new event is dispatched.",
        "tags": [
          {
            "tagName": "param",
            "name": "eventEmitter",
            "text": "An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter)."
          },
          {
            "tagName": "param",
            "name": "eventName",
            "text": "Name of the event to listen to."
          },
          {
            "tagName": "param",
            "name": "initialValue",
            "text": "An event parameter to use until the event is called for the first time."
          },
          {
            "tagName": "returns",
            "name": "",
            "text": "A parameter of the event listener."
          },
          {
            "tagName": "example",
            "name": "",
            "text": "tsx\nimport { useEvent } from 'expo';\nimport { VideoPlayer } from 'expo-video';\n\nexport function PlayerStatus({ videoPlayer }: { videoPlayer: VideoPlayer }) {\n  const { status } = useEvent(videoPlayer, 'statusChange', { status: videoPlayer.status });\n\n  return <Text>{`Player status: ${status}`}</Text>;\n}\n"
          }
        ]
      },
      "isExported": true,
      "xaiDescription": "React hook to listen to events from an emitter and return updated parameters, using EventEmitter<TEventsMap>."
    },
    {
      "name": "useEventListener",
      "parameters": [
        {
          "name": "eventEmitter",
          "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo-modules-core/build/ts-declarations/EventEmitter\").EventEmitter<TEventsMap>",
          "optional": false
        },
        {
          "name": "eventName",
          "type": "TEventName",
          "optional": false
        },
        {
          "name": "listener",
          "type": "TEventListener",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "React hook that listens to events emitted by the given object and calls the listener function whenever a new event is dispatched.\nThe event listener is automatically added during the first render and removed when the component unmounts.",
        "tags": [
          {
            "tagName": "param",
            "name": "eventEmitter",
            "text": "An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter)."
          },
          {
            "tagName": "param",
            "name": "eventName",
            "text": "Name of the event to listen to."
          },
          {
            "tagName": "param",
            "name": "listener",
            "text": "A function to call when the event is dispatched."
          },
          {
            "tagName": "example",
            "name": "",
            "text": "tsx\nimport { useEventListener } from 'expo';\nimport { useVideoPlayer, VideoView } from 'expo-video';\n\nexport function VideoPlayerView() {\n  const player = useVideoPlayer(videoSource);\n\n  useEventListener(player, 'playingChange', ({ isPlaying }) => {\n    console.log('Player is playing:', isPlaying);\n  });\n\n  return <VideoView player={player} />;\n}\n"
          }
        ]
      },
      "isExported": true,
      "xaiDescription": "React hook to add and auto-remove event listeners from an emitter, using EventEmitter<TEventsMap>."
    },
    {
      "name": "registerRootComponent",
      "parameters": [
        {
          "name": "component",
          "type": "React.ComponentType<P>",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Sets the initial React component to render natively in the app's root React Native view on Android, iOS, tvOS and the web.\n\nThis method does the following:\n- Invokes React Native's `AppRegistry.registerComponent`.\n- Invokes React Native web's `AppRegistry.runApplication` on web to render to the root `index.html` file.\n- Polyfills the `process.nextTick` function globally.\n\nThis method also adds the following dev-only features that are removed in production bundles.\n- Adds the Fast Refresh and bundle splitting indicator to the app.\n- Asserts if the `expo-updates` package is misconfigured.\n- Asserts if `react-native` is not aliased to `react-native-web` when running in the browser.",
        "tags": [
          {
            "tagName": "param",
            "name": "component",
            "text": "The React component class that renders the rest of your app."
          }
        ]
      },
      "isExported": true,
      "xaiDescription": "Registers main React component for app rendering on multiple platforms, using React.ComponentType<P>."
    },
    {
      "name": "convertFormDataAsync",
      "parameters": [
        {
          "name": "formData",
          "type": "FormData",
          "optional": false
        },
        {
          "name": "boundary",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Promise<{ body: Uint8Array<ArrayBufferLike>; boundary: string; }>",
      "jsdoc": {
        "description": "Convert FormData to Uint8Array with a boundary\n\n`uri` is not supported for React Native's FormData.\n`blob` is not supported for standard FormData.",
        "tags": []
      },
      "isExported": true
    }
  ],
  "enums": [],
  "types": [
    {
      "name": "MessageFrame",
      "type": "interface MessageFrame<T extends MessageKeyTypeBase> {\n    messageKey: T;\n    payload?: PayloadType;\n}",
      "properties": [
        {
          "name": "messageKey",
          "type": "T",
          "optional": false
        },
        {
          "name": "payload",
          "type": "PayloadType",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": null,
      "xaiDescription": "Interface for message frame with key of type T and optional payload.",
      "isExported": false
    },
    {
      "name": "MessageKeyTypeBase",
      "type": "string | object",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false
        }
      ],
      "jsdoc": {
        "description": "A message frame packer that serializes a messageKey and a payload into either a JSON string\n(fast path) or a binary format (for complex payloads).\n\nFast Path (JSON.stringify/JSON.parse):\n- For simple payloads (e.g., strings, numbers, null, undefined, or plain objects), the packer\n  uses `JSON.stringify` for serialization and `JSON.parse` for deserialization, ensuring\n  optimal performance.\n\nBinary Format:\n- For more complex payloads (e.g., Uint8Array, ArrayBuffer, Blob), the packer uses a binary\n  format with the following structure:\n\n  +------------------+-------------------+----------------------------+--------------------------+\n  | 4 bytes (Uint32) | Variable length   | 1 byte (Uint8)             | Variable length          |\n  | MessageKeyLength | MessageKey (JSON) | PayloadTypeIndicator (enum)| Payload (binary data)    |\n  +------------------+-------------------+----------------------------+--------------------------+\n\n  1. MessageKeyLength (4 bytes):\n     - A 4-byte unsigned integer indicating the length of the MessageKey JSON string.\n\n  2. MessageKey (Variable length):\n     - The JSON string representing the message key, encoded as UTF-8.\n\n  3. PayloadTypeIndicator (1 byte):\n     - A single byte enum value representing the type of the payload (e.g., Uint8Array, String,\n       Object, ArrayBuffer, Blob).\n\n  4. Payload (Variable length):\n     - The actual payload data, which can vary in type and length depending on the PayloadType.",
        "tags": []
      },
      "isExported": false
    },
    {
      "name": "PayloadType",
      "type": "Uint8Array | string | number | null | undefined | object | ArrayBuffer | Blob",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string) | ((radix?: number) => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object) | (() => number) | (() => Uint8Array<ArrayBufferLike>)",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; } | { (): string; (locales: string | string[], options?: Intl.NumberFormatOptions): string; }",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Type for various payload formats including arrays, strings, and blobs.",
      "isExported": false
    },
    {
      "name": "Options",
      "type": "export interface Options {\n    /**\n     * Reconnect interval in milliseconds.\n     * @default 1500\n     */\n    retriesInterval?: number;\n    /**\n     * The maximum number of retries.\n     * @default 200\n     */\n    maxRetries?: number;\n    /**\n     * The timeout in milliseconds for the WebSocket connecting.\n     */\n    connectTimeout?: number;\n    /**\n     * The error handler.\n     * @default throwing an error\n     */\n    onError?: (error: Error) => void;\n    /**\n     * The callback to be called when the WebSocket is reconnected.\n     * @default no-op\n     */\n    onReconnect?: (reason: string) => void;\n    /**\n     * The [`binaryType`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType).\n     */\n    binaryType?: DevToolsPluginClientOptions['websocketBinaryType'];\n}",
      "properties": [
        {
          "name": "retriesInterval",
          "type": "number",
          "optional": true
        },
        {
          "name": "maxRetries",
          "type": "number",
          "optional": true
        },
        {
          "name": "connectTimeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "onError",
          "type": "(error: Error) => void",
          "optional": true
        },
        {
          "name": "onReconnect",
          "type": "(reason: string) => void",
          "optional": true
        },
        {
          "name": "binaryType",
          "type": "\"arraybuffer\" | \"blob\"",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": null,
      "xaiDescription": "Configuration options for WebSocket connections including retries and error handling.",
      "isExported": true
    },
    {
      "name": "ConnectionInfo",
      "type": "export interface ConnectionInfo {\n    /** Indicates the sender towards the devtools plugin. */\n    sender: 'app' | 'browser';\n    /** Dev server address. */\n    devServer: string;\n    /** The plugin name. */\n    pluginName: string;\n    /**\n     * The backing store for the WebSocket connection. Exposed for testing.\n     * If not provided, the default singleton instance will be used.\n     * @hidden\n     */\n    wsStore?: WebSocketBackingStore;\n    /**\n     * The transport protocol version between the app and the webui.\n     */\n    protocolVersion: number;\n}",
      "properties": [
        {
          "name": "sender",
          "type": "\"app\" | \"browser\"",
          "optional": false
        },
        {
          "name": "devServer",
          "type": "string",
          "optional": false
        },
        {
          "name": "pluginName",
          "type": "string",
          "optional": false
        },
        {
          "name": "wsStore",
          "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/WebSocketBackingStore\").WebSocketBackingStore",
          "optional": true
        },
        {
          "name": "protocolVersion",
          "type": "number",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "The connection info for devtools plugins client.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "DevToolsPluginClientOptions",
      "type": "export interface DevToolsPluginClientOptions {\n    /**\n     * The underlying WebSocket [`binaryType`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType).\n     */\n    websocketBinaryType?: 'arraybuffer' | 'blob';\n}",
      "properties": [
        {
          "name": "websocketBinaryType",
          "type": "\"arraybuffer\" | \"blob\"",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Options for the devtools plugin client.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "HandshakeMessageParams",
      "type": "export interface HandshakeMessageParams {\n    protocolVersion: number;\n    pluginName: string;\n    method: 'handshake' | 'terminateBrowserClient';\n    browserClientId: string;\n}",
      "properties": [
        {
          "name": "protocolVersion",
          "type": "number",
          "optional": false
        },
        {
          "name": "pluginName",
          "type": "string",
          "optional": false
        },
        {
          "name": "method",
          "type": "\"handshake\" | \"terminateBrowserClient\"",
          "optional": false
        },
        {
          "name": "browserClientId",
          "type": "string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "The handshake messages for the devtools plugin client.",
        "tags": [
          {
            "tagName": "hidden",
            "name": "",
            "text": ""
          }
        ]
      },
      "isExported": true
    },
    {
      "name": "BridgeMessage",
      "type": "{\n    type: string;\n    data: TData;\n}",
      "properties": [
        {
          "name": "type",
          "type": "string",
          "optional": false
        },
        {
          "name": "data",
          "type": "TData",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Structure for bridge messages with a type and associated data.",
      "isExported": true
    },
    {
      "name": "DOMImperativeFactory",
      "type": "export interface DOMImperativeFactory {\n    [key: string]: (...args: JSONValue[]) => void;\n}",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "The return type of the init function for `useDOMImperativeHandle`.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "DOMProps",
      "type": "export interface DOMProps extends Omit<RNWebViewProps, 'source'> {\n    /**\n     * Whether to resize the native WebView size based on the DOM content size.\n     * @default false\n     */\n    matchContents?: boolean;\n    /**\n     * Whether to use the `@expo/dom-webview` as the underlying WebView implementation.\n     * @default false\n     */\n    useExpoDOMWebView?: boolean;\n}",
      "properties": [
        {
          "name": "matchContents",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "useExpoDOMWebView",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [
        "Omit<RNWebViewProps, \"source\">"
      ],
      "jsdoc": null,
      "xaiDescription": "Properties for DOM handling, extending RNWebViewProps without source.",
      "isExported": true
    },
    {
      "name": "JSONArray",
      "type": "export interface JSONArray extends Array<JSONValue> {\n}",
      "properties": [],
      "extends": [
        "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/dom/dom.types\").JSONValue[]"
      ],
      "jsdoc": null,
      "xaiDescription": "Array type that extends JSONValue for JSON-compatible arrays.",
      "isExported": true
    },
    {
      "name": "JSONObject",
      "type": "export interface JSONObject {\n    [key: string]: JSONValue | undefined;\n}",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "xaiDescription": "Object type with string keys and JSONValue values.",
      "isExported": true
    },
    {
      "name": "JSONValue",
      "type": "boolean | number | string | null | JSONArray | JSONObject",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | ((radix?: number) => string) | (() => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => number) | (() => boolean) | (() => Object)",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; } | { (): string; (locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Type representing any valid JSON value including primitives and structures.",
      "isExported": true
    },
    {
      "name": "RNWebViewRef",
      "type": "RNWebView",
      "properties": [],
      "jsdoc": null,
      "xaiDescription": "Reference type for RNWebView component.",
      "isExported": false
    },
    {
      "name": "WebViewProps",
      "type": "RNWebViewProps",
      "properties": [],
      "jsdoc": null,
      "xaiDescription": "Properties type for WebView component based on RNWebViewProps.",
      "isExported": true
    },
    {
      "name": "WebViewRef",
      "type": "RNWebViewRef",
      "properties": [],
      "jsdoc": null,
      "xaiDescription": "Reference type for WebView based on RNWebViewRef.",
      "isExported": true
    },
    {
      "name": "UseDebugZeroHeightType",
      "type": "(dom?: DOMProps) => {\n    debugZeroHeightStyle: WebViewProps['containerStyle'] | undefined;\n    debugOnLayout: ViewProps['onLayout'];\n}",
      "properties": [],
      "jsdoc": null,
      "xaiDescription": "Function type for debugging zero height with DOM props.",
      "isExported": false
    },
    {
      "name": "Props",
      "type": "interface Props {\n    dom?: DOMProps;\n    filePath: string;\n}",
      "properties": [
        {
          "name": "dom",
          "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/dom/dom.types\").DOMProps",
          "optional": true
        },
        {
          "name": "filePath",
          "type": "string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": null,
      "xaiDescription": "Interface for props including optional DOM properties and required file path.",
      "isExported": false
    },
    {
      "name": "ExpoGoPackagerOpts",
      "type": "{\n    hostType?: string;\n    dev?: boolean;\n    strict?: boolean;\n    minify?: boolean;\n    urlType?: string;\n    urlRandomness?: string;\n    lanType?: string;\n    [key: string]: any;\n}",
      "properties": [
        {
          "name": "hostType",
          "type": "string",
          "optional": true
        },
        {
          "name": "dev",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "minify",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "urlType",
          "type": "string",
          "optional": true
        },
        {
          "name": "urlRandomness",
          "type": "string",
          "optional": true
        },
        {
          "name": "lanType",
          "type": "string",
          "optional": true
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Options for Expo Go packager configuration.",
      "isExported": true
    },
    {
      "name": "ExpoGoProjectConfig",
      "type": "{\n    mainModuleName?: string;\n    debuggerHost?: string;\n    logUrl?: string;\n    developer?: {\n        tool?: string;\n        [key: string]: any;\n    };\n    packagerOpts?: ExpoGoPackagerOpts;\n}",
      "properties": [
        {
          "name": "mainModuleName",
          "type": "string",
          "optional": true
        },
        {
          "name": "debuggerHost",
          "type": "string",
          "optional": true
        },
        {
          "name": "logUrl",
          "type": "string",
          "optional": true
        },
        {
          "name": "developer",
          "type": "{ [key: string]: any; tool?: string; }",
          "optional": true
        },
        {
          "name": "packagerOpts",
          "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/environment/ExpoGo\").ExpoGoPackagerOpts",
          "optional": true
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Configuration for Expo Go project settings and packager options.",
      "isExported": false
    },
    {
      "name": "AnyEventListener",
      "type": "(...args: any[]) => any",
      "properties": [],
      "jsdoc": null,
      "xaiDescription": "Generic function type for any event listener.",
      "isExported": false
    },
    {
      "name": "InferEventListener",
      "type": "TEventsMap extends Record<TEventName, infer TEventListener extends AnyEventListener> ? TEventListener : never",
      "properties": [],
      "jsdoc": {
        "description": "Type helper that infers the event listener from the emitter's events map.",
        "tags": []
      },
      "isExported": false
    },
    {
      "name": "InferEventName",
      "type": "TEventsMap extends Record<infer TEventName extends keyof TEventsMap, AnyEventListener> ? TEventName : never",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | ((radix?: number) => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => number) | (() => symbol)",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; }",
          "optional": false
        }
      ],
      "jsdoc": {
        "description": "Type helper that infers the event name from the emitter's events map.",
        "tags": []
      },
      "isExported": false
    },
    {
      "name": "InferEventParameter",
      "type": "TInitialValue extends Parameters<TEventListener>[0] ? Parameters<TEventListener>[0] : Parameters<TEventListener>[0] | TInitialValue | null",
      "properties": [],
      "jsdoc": {
        "description": "Type helper that infers the first parameter of the event listener.",
        "tags": []
      },
      "isExported": false
    },
    {
      "name": "InitialProps",
      "type": "{\n    exp?: {\n        notification?: any;\n        manifestString?: string;\n        [key: string]: any;\n    };\n    shell?: boolean;\n    shellManifestUrl?: string;\n    [key: string]: any;\n}",
      "properties": [
        {
          "name": "exp",
          "type": "{ [key: string]: any; notification?: any; manifestString?: string; }",
          "optional": true
        },
        {
          "name": "shell",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "shellManifestUrl",
          "type": "string",
          "optional": true
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Initial properties for app configuration including exp and shell settings.",
      "isExported": false
    },
    {
      "name": "ExpoFormDataPart",
      "type": "{\n    string: string;\n    headers: {\n        [name: string]: string;\n    };\n} | {\n    blob: Blob;\n    headers: {\n        [name: string]: string;\n    };\n    name?: string | undefined;\n    type?: string | undefined;\n} | {\n    uri: string;\n    headers: {\n        [name: string]: string;\n    };\n    name?: string | undefined;\n    type?: string | undefined;\n}",
      "properties": [
        {
          "name": "headers",
          "type": "{ [name: string]: string; } | { [name: string]: string; } | { [name: string]: string; }",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Part of form data with string, blob, or URI and associated headers.",
      "isExported": true
    },
    {
      "name": "ExpoFormDataValue",
      "type": "string | Blob",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string)",
          "optional": false
        },
        {
          "name": "slice",
          "type": "((start?: number, end?: number) => string) | ((start?: number, end?: number, contentType?: string) => Blob)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Value type for form data, either string or blob.",
      "isExported": true
    },
    {
      "name": "AbortSubscriptionCleanupFunction",
      "type": "() => void",
      "properties": [],
      "jsdoc": null,
      "xaiDescription": "Function to clean up aborted subscriptions.",
      "isExported": true
    },
    {
      "name": "NativeHeadersType",
      "type": "[string, string][]",
      "properties": [
        {
          "name": "length",
          "type": "number",
          "optional": false
        },
        {
          "name": "toString",
          "type": "() => string",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "{ (): string; (locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }",
          "optional": false
        },
        {
          "name": "pop",
          "type": "() => [string, string]",
          "optional": false
        },
        {
          "name": "push",
          "type": "(...items: [string, string][]) => number",
          "optional": false
        },
        {
          "name": "concat",
          "type": "{ (...items: ConcatArray<[string, string]>[]): [string, string][]; (...items: ([string, string] | ConcatArray<[string, string]>)[]): [string, string][]; }",
          "optional": false
        },
        {
          "name": "join",
          "type": "(separator?: string) => string",
          "optional": false
        },
        {
          "name": "reverse",
          "type": "() => [string, string][]",
          "optional": false
        },
        {
          "name": "shift",
          "type": "() => [string, string]",
          "optional": false
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => [string, string][]",
          "optional": false
        },
        {
          "name": "sort",
          "type": "(compareFn?: (a: [string, string], b: [string, string]) => number) => import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeHeadersType",
          "optional": false
        },
        {
          "name": "splice",
          "type": "{ (start: number, deleteCount?: number): [string, string][]; (start: number, deleteCount: number, ...items: [string, string][]): [string, string][]; }",
          "optional": false
        },
        {
          "name": "unshift",
          "type": "(...items: [string, string][]) => number",
          "optional": false
        },
        {
          "name": "indexOf",
          "type": "(searchElement: [string, string], fromIndex?: number) => number",
          "optional": false
        },
        {
          "name": "lastIndexOf",
          "type": "(searchElement: [string, string], fromIndex?: number) => number",
          "optional": false
        },
        {
          "name": "every",
          "type": "{ <S>(predicate: (value: [string, string], index: number, array: [string, string][]) => value is S, thisArg?: any): this is S[]; (predicate: (value: [string, string], index: number, array: [string, string][]) => unknown, thisArg?: any): boolean; }",
          "optional": false
        },
        {
          "name": "some",
          "type": "(predicate: (value: [string, string], index: number, array: [string, string][]) => unknown, thisArg?: any) => boolean",
          "optional": false
        },
        {
          "name": "forEach",
          "type": "(callbackfn: (value: [string, string], index: number, array: [string, string][]) => void, thisArg?: any) => void",
          "optional": false
        },
        {
          "name": "map",
          "type": "<U>(callbackfn: (value: [string, string], index: number, array: [string, string][]) => U, thisArg?: any) => U[]",
          "optional": false
        },
        {
          "name": "filter",
          "type": "{ <S>(predicate: (value: [string, string], index: number, array: [string, string][]) => value is S, thisArg?: any): S[]; (predicate: (value: [string, string], index: number, array: [string, string][]) => unknown, thisArg?: any): [string, string][]; }",
          "optional": false
        },
        {
          "name": "reduce",
          "type": "{ (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string]): [string, string]; (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string], initialValue: [string, string]): [string, string]; <U>(callbackfn: (previousValue: U, currentValue: [string, string], currentIndex: number, array: [string, string][]) => U, initialValue: U): U; }",
          "optional": false
        },
        {
          "name": "reduceRight",
          "type": "{ (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string]): [string, string]; (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string], initialValue: [string, string]): [string, string]; <U>(callbackfn: (previousValue: U, currentValue: [string, string], currentIndex: number, array: [string, string][]) => U, initialValue: U): U; }",
          "optional": false
        },
        {
          "name": "find",
          "type": "{ <S>(predicate: (value: [string, string], index: number, obj: [string, string][]) => value is S, thisArg?: any): S; (predicate: (value: [string, string], index: number, obj: [string, string][]) => unknown, thisArg?: any): [string, string]; }",
          "optional": false
        },
        {
          "name": "findIndex",
          "type": "(predicate: (value: [string, string], index: number, obj: [string, string][]) => unknown, thisArg?: any) => number",
          "optional": false
        },
        {
          "name": "fill",
          "type": "(value: [string, string], start?: number, end?: number) => import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeHeadersType",
          "optional": false
        },
        {
          "name": "copyWithin",
          "type": "(target: number, start: number, end?: number) => import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeHeadersType",
          "optional": false
        },
        {
          "name": "entries",
          "type": "() => ArrayIterator<[number, [string, string]]>",
          "optional": false
        },
        {
          "name": "keys",
          "type": "() => ArrayIterator<number>",
          "optional": false
        },
        {
          "name": "values",
          "type": "() => ArrayIterator<[string, string]>",
          "optional": false
        },
        {
          "name": "includes",
          "type": "(searchElement: [string, string], fromIndex?: number) => boolean",
          "optional": false
        },
        {
          "name": "flatMap",
          "type": "<U, This>(callback: (this: This, value: [string, string], index: number, array: [string, string][]) => U | readonly U[], thisArg?: This) => U[]",
          "optional": false
        },
        {
          "name": "flat",
          "type": "<A, D>(this: A, depth?: D) => FlatArray<A, D>[]",
          "optional": false
        },
        {
          "name": "__@iterator@45767",
          "type": "() => ArrayIterator<[string, string]>",
          "optional": false
        },
        {
          "name": "__@unscopables@45769",
          "type": "{ [x: number]: boolean; length?: boolean; toString?: boolean; toLocaleString?: boolean; pop?: boolean; push?: boolean; concat?: boolean; join?: boolean; reverse?: boolean; shift?: boolean; slice?: boolean; sort?: boolean; splice?: boolean; unshift?: boolean; indexOf?: boolean; lastIndexOf?: boolean; every?: boolean; some?: boolean; forEach?: boolean; map?: boolean; filter?: boolean; reduce?: boolean; reduceRight?: boolean; find?: boolean; findIndex?: boolean; fill?: boolean; copyWithin?: boolean; entries?: boolean; keys?: boolean; values?: boolean; includes?: boolean; flatMap?: boolean; flat?: boolean; [Symbol.iterator]?: boolean; readonly [Symbol.unscopables]?: boolean; at?: boolean; }",
          "optional": false
        },
        {
          "name": "at",
          "type": "(index: number) => [string, string]",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Array-like type for HTTP headers using string pairs, with standard array methods.",
      "isExported": true
    },
    {
      "name": "NativeRequestInit",
      "type": "export interface NativeRequestInit {\n    credentials?: RequestCredentials;\n    headers?: NativeHeadersType;\n    method?: string;\n}",
      "properties": [
        {
          "name": "credentials",
          "type": "RequestCredentials",
          "optional": true
        },
        {
          "name": "headers",
          "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeHeadersType",
          "optional": true
        },
        {
          "name": "method",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": null,
      "xaiDescription": "Options for initializing native HTTP requests, including credentials and headers.",
      "isExported": true
    },
    {
      "name": "NativeResponseEvents",
      "type": "{\n    didReceiveResponseData(data: Uint8Array): void;\n    didComplete(): void;\n    didFailWithError(error: string): void;\n    readyForJSFinalization(): void;\n}",
      "properties": [
        {
          "name": "didReceiveResponseData",
          "type": "(data: Uint8Array<ArrayBufferLike>) => void",
          "optional": false
        },
        {
          "name": "didComplete",
          "type": "() => void",
          "optional": false
        },
        {
          "name": "didFailWithError",
          "type": "(error: string) => void",
          "optional": false
        },
        {
          "name": "readyForJSFinalization",
          "type": "() => void",
          "optional": false
        }
      ],
      "jsdoc": null,
      "xaiDescription": "Event handlers for native HTTP responses, including data receipt and error handling.",
      "isExported": true
    },
    {
      "name": "FetchRequestInit",
      "type": "export interface FetchRequestInit {\n    body?: BodyInit;\n    credentials?: RequestCredentials;\n    headers?: HeadersInit;\n    method?: string;\n    signal?: AbortSignal;\n    integrity?: string;\n    keepalive?: boolean;\n    mode?: RequestMode;\n    referrer?: string;\n    window?: any;\n}",
      "properties": [
        {
          "name": "body",
          "type": "BodyInit",
          "optional": true
        },
        {
          "name": "credentials",
          "type": "RequestCredentials",
          "optional": true
        },
        {
          "name": "headers",
          "type": "HeadersInit",
          "optional": true
        },
        {
          "name": "method",
          "type": "string",
          "optional": true
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true
        },
        {
          "name": "integrity",
          "type": "string",
          "optional": true
        },
        {
          "name": "keepalive",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "mode",
          "type": "RequestMode",
          "optional": true
        },
        {
          "name": "referrer",
          "type": "string",
          "optional": true
        },
        {
          "name": "window",
          "type": "any",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "A fetch RequestInit compatible structure.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "Console",
      "type": "interface Console {\n  memory: any;\n  assert(condition?: boolean, message?: string, ...data: any[]): void;\n  clear(): void;\n  count(label?: string): void;\n  debug(message?: any, ...optionalParams: any[]): void;\n  dir(value?: any, ...optionalParams: any[]): void;\n  dirxml(value: any): void;\n  error(message?: any, ...optionalParams: any[]): void;\n  exception(message?: string, ...optionalParams: any[]): void;\n  group(groupTitle?: string, ...optionalParams: any[]): void;\n  groupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;\n  groupEnd(): void;\n  info(message?: any, ...optionalParams: any[]): void;\n  log(message?: any, ...optionalParams: any[]): void;\n  markTimeline(label?: string): void;\n  profile(reportName?: string): void;\n  profileEnd(reportName?: string): void;\n  table(...tabularData: any[]): void;\n  time(label?: string): void;\n  timeEnd(label?: string): void;\n  timeStamp(label?: string): void;\n  timeline(label?: string): void;\n  timelineEnd(label?: string): void;\n  trace(message?: any, ...optionalParams: any[]): void;\n  warn(message?: any, ...optionalParams: any[]): void;\n}",
      "properties": [
        {
          "name": "memory",
          "type": "any",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "This is a more comprehensive declaration of the Console API that JavaScript VMs include.\n\nThis declaration is from https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts",
        "tags": []
      },
      "isExported": false
    }
  ],
  "classes": [
    {
      "name": "DevToolsPluginClient",
      "constructors": [
        {
          "parameters": [
            {
              "name": "connectionInfo",
              "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").ConnectionInfo",
              "optional": false
            },
            {
              "name": "options",
              "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").DevToolsPluginClientOptions",
              "optional": true
            }
          ],
          "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/DevToolsPluginClient\").DevToolsPluginClient"
        }
      ],
      "methods": [
        {
          "name": "DevToolsPluginClient.initAsync",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Initialize the connection.",
            "tags": [
              {
                "tagName": "hidden",
                "name": "",
                "text": ""
              }
            ]
          }
        },
        {
          "name": "DevToolsPluginClient.closeAsync",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Close the connection.",
            "tags": []
          }
        },
        {
          "name": "DevToolsPluginClient.sendMessage",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "params",
              "type": "any",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Send a message to the other end of DevTools.",
            "tags": [
              {
                "tagName": "param",
                "name": "method",
                "text": "A method name."
              },
              {
                "tagName": "param",
                "name": "params",
                "text": "any extra payload."
              }
            ]
          }
        },
        {
          "name": "DevToolsPluginClient.sendMessageLegacy",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "params",
              "type": "any",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "This client is for the Expo DevTools Plugins to communicate between the app and the DevTools webpage hosted in a browser.\nAll the code should be both compatible with browsers and React Native.",
            "tags": []
          },
          "xaiDescription": "Sends message using legacy protocol for app-DevTools communication."
        },
        {
          "name": "DevToolsPluginClient.addMessageListener",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(params: any) => void",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Subscribe to a message from the other end of DevTools.",
            "tags": [
              {
                "tagName": "param",
                "name": "method",
                "text": "Subscribe to a message with a method name."
              },
              {
                "tagName": "param",
                "name": "listener",
                "text": "Listener to be called when a message is received."
              }
            ]
          }
        },
        {
          "name": "DevToolsPluginClient.addMessageListenerOnce",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(params: any) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Subscribe to a message from the other end of DevTools just once.",
            "tags": [
              {
                "tagName": "param",
                "name": "method",
                "text": "Subscribe to a message with a method name."
              },
              {
                "tagName": "param",
                "name": "listener",
                "text": "Listener to be called when a message is received."
              }
            ]
          }
        },
        {
          "name": "DevToolsPluginClient.sendHandshakeMessage",
          "parameters": [
            {
              "name": "params",
              "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").HandshakeMessageParams",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Internal handshake message sender.",
            "tags": [
              {
                "tagName": "hidden",
                "name": "",
                "text": ""
              }
            ]
          }
        },
        {
          "name": "DevToolsPluginClient.addHandskakeMessageListener",
          "parameters": [
            {
              "name": "listener",
              "type": "(params: import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").HandshakeMessageParams) => void",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Internal handshake message listener.",
            "tags": [
              {
                "tagName": "hidden",
                "name": "",
                "text": ""
              }
            ]
          }
        },
        {
          "name": "DevToolsPluginClient.isConnected",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Returns whether the client is connected to the server.",
            "tags": []
          }
        },
        {
          "name": "DevToolsPluginClient.connectAsync",
          "parameters": [],
          "returnType": "Promise<WebSocket>",
          "jsdoc": {
            "description": "The method to create the WebSocket connection.",
            "tags": []
          }
        },
        {
          "name": "DevToolsPluginClient.getWebSocketBackingStore",
          "parameters": [],
          "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/WebSocketBackingStore\").WebSocketBackingStore",
          "jsdoc": {
            "description": "Get the WebSocket backing store. Exposed for testing.",
            "tags": [
              {
                "tagName": "hidden",
                "name": "",
                "text": ""
              }
            ]
          }
        }
      ],
      "properties": [
        {
          "name": "connectionInfo",
          "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").ConnectionInfo",
          "optional": false
        },
        {
          "name": "options",
          "type": "any",
          "optional": false
        },
        {
          "name": "eventEmitter",
          "type": "EventEmitter",
          "optional": false
        },
        {
          "name": "defaultWSStore",
          "type": "any",
          "optional": false
        },
        {
          "name": "wsStore",
          "type": "any",
          "optional": false
        },
        {
          "name": "isClosed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "retries",
          "type": "number",
          "optional": false
        },
        {
          "name": "messageFramePacker",
          "type": "any",
          "optional": false
        },
        {
          "name": "sendMessageImpl",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleMessage",
          "type": "(event: WebSocketMessageEvent) => Promise<void>",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "This client is for the Expo DevTools Plugins to communicate between the app and the DevTools webpage hosted in a browser.\nAll the code should be both compatible with browsers and React Native.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "DevToolsPluginClientImplApp",
      "constructors": [],
      "methods": [
        {
          "name": "DevToolsPluginClientImplApp.initAsync",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Initialize the connection.",
            "tags": [
              {
                "tagName": "hidden",
                "name": "",
                "text": ""
              }
            ]
          }
        },
        {
          "name": "DevToolsPluginClientImplApp.sendMessage",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "params",
              "type": "any",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "The DevToolsPluginClient for the app -> browser communication.",
            "tags": []
          },
          "xaiDescription": "Sends message from app to browser via DevToolsPluginClient."
        }
      ],
      "properties": [
        {
          "name": "browserClientMap",
          "type": "any",
          "optional": false
        },
        {
          "name": "addHandshakeHandler",
          "type": "any",
          "optional": false
        },
        {
          "name": "terminateBrowserClient",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "DevToolsPluginClient",
      "implements": [],
      "jsdoc": {
        "description": "The DevToolsPluginClient for the app -> browser communication.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "DevToolsPluginClientImplBrowser",
      "constructors": [],
      "methods": [
        {
          "name": "DevToolsPluginClientImplBrowser.initAsync",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Initialize the connection.",
            "tags": [
              {
                "tagName": "hidden",
                "name": "",
                "text": ""
              }
            ]
          }
        }
      ],
      "properties": [
        {
          "name": "browserClientId",
          "type": "any",
          "optional": false
        },
        {
          "name": "startHandshake",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "DevToolsPluginClient",
      "implements": [],
      "jsdoc": {
        "description": "The DevToolsPluginClient for the browser -> app communication.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "MessageFramePacker",
      "constructors": [],
      "methods": [
        {
          "name": "MessageFramePacker.pack",
          "parameters": [
            {
              "name": "{ messageKey, payload }",
              "type": "MessageFrame<T>",
              "optional": false
            },
            {
              "name": "useLegacyTransport",
              "type": "boolean",
              "optional": true
            }
          ],
          "returnType": "string | Uint8Array<ArrayBufferLike> | Promise<Uint8Array<ArrayBufferLike>>",
          "jsdoc": null,
          "xaiDescription": "Packs message frame into transportable format, using MessageFrame<T>."
        },
        {
          "name": "MessageFramePacker.unpack",
          "parameters": [
            {
              "name": "packedData",
              "type": "string | ArrayBuffer",
              "optional": false
            }
          ],
          "returnType": "MessageFrame<T>",
          "jsdoc": null,
          "xaiDescription": "Unpacks data into MessageFrame<T> structure."
        }
      ],
      "properties": [
        {
          "name": "textEncoder",
          "type": "any",
          "optional": false
        },
        {
          "name": "textDecoder",
          "type": "any",
          "optional": false
        },
        {
          "name": "isFastPathPayload",
          "type": "any",
          "optional": false
        },
        {
          "name": "payloadToUint8Array",
          "type": "any",
          "optional": false
        },
        {
          "name": "packImpl",
          "type": "any",
          "optional": false
        },
        {
          "name": "deserializePayload",
          "type": "any",
          "optional": false
        },
        {
          "name": "getPayloadTypeIndicator",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": null,
      "xaiDescription": "Utility for packing and unpacking message frames.",
      "isExported": true
    },
    {
      "name": "WebSocketBackingStore",
      "constructors": [
        {
          "parameters": [
            {
              "name": "ws",
              "type": "WebSocket",
              "optional": true
            },
            {
              "name": "refCount",
              "type": "number",
              "optional": true
            }
          ],
          "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/WebSocketBackingStore\").WebSocketBackingStore"
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "ws",
          "type": "WebSocket",
          "optional": false
        },
        {
          "name": "refCount",
          "type": "number",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "The backing store for the WebSocket connection and reference count.\nThis is used for connection multiplexing.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "WebSocketWithReconnect",
      "constructors": [
        {
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/WebSocketWithReconnect\").Options",
              "optional": true
            }
          ],
          "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/WebSocketWithReconnect\").WebSocketWithReconnect"
        }
      ],
      "methods": [
        {
          "name": "WebSocketWithReconnect.close",
          "parameters": [
            {
              "name": "code",
              "type": "number",
              "optional": true
            },
            {
              "name": "reason",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Closes WebSocket connection with optional code and reason."
        },
        {
          "name": "WebSocketWithReconnect.addEventListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"message\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(event: WebSocketMessageEvent) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Adds listener for message events on WebSocket."
        },
        {
          "name": "WebSocketWithReconnect.addEventListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"open\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Adds listener for open events on WebSocket."
        },
        {
          "name": "WebSocketWithReconnect.addEventListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"error\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(event: WebSocketErrorEvent) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Adds listener for error events on WebSocket."
        },
        {
          "name": "WebSocketWithReconnect.addEventListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"close\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(event: WebSocketCloseEvent) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Adds listener for close events on WebSocket."
        },
        {
          "name": "WebSocketWithReconnect.removeEventListener",
          "parameters": [
            {
              "name": "_event",
              "type": "string",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(event: any) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Removes specified event listener from WebSocket."
        },
        {
          "name": "WebSocketWithReconnect.send",
          "parameters": [
            {
              "name": "data",
              "type": "string | ArrayBufferLike | ArrayBufferView<ArrayBufferLike> | Blob",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Sends data over WebSocket connection."
        },
        {
          "name": "WebSocketWithReconnect.ping",
          "parameters": [],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Sends ping to maintain WebSocket connection."
        },
        {
          "name": "WebSocketWithReconnect.dispatchEvent",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null,
          "xaiDescription": "Dispatches an event on the WebSocket."
        }
      ],
      "properties": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "retriesInterval",
          "type": "any",
          "optional": false
        },
        {
          "name": "maxRetries",
          "type": "any",
          "optional": false
        },
        {
          "name": "connectTimeout",
          "type": "any",
          "optional": false
        },
        {
          "name": "onError",
          "type": "any",
          "optional": false
        },
        {
          "name": "onReconnect",
          "type": "any",
          "optional": false
        },
        {
          "name": "ws",
          "type": "any",
          "optional": false
        },
        {
          "name": "retries",
          "type": "any",
          "optional": false
        },
        {
          "name": "connectTimeoutHandle",
          "type": "any",
          "optional": false
        },
        {
          "name": "isClosed",
          "type": "any",
          "optional": false
        },
        {
          "name": "sendQueue",
          "type": "any",
          "optional": false
        },
        {
          "name": "lastCloseEvent",
          "type": "any",
          "optional": false
        },
        {
          "name": "emitter",
          "type": "any",
          "optional": false
        },
        {
          "name": "eventSubscriptions",
          "type": "any",
          "optional": false
        },
        {
          "name": "wsBinaryType",
          "type": "any",
          "optional": false
        },
        {
          "name": "connect",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleOpen",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleMessage",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleError",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleClose",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleConnectTimeout",
          "type": "any",
          "optional": false
        },
        {
          "name": "clearConnectTimeoutIfNeeded",
          "type": "any",
          "optional": false
        },
        {
          "name": "reconnectIfNeeded",
          "type": "any",
          "optional": false
        },
        {
          "name": "wsClose",
          "type": "any",
          "optional": false
        },
        {
          "name": "CONNECTING",
          "type": "0",
          "optional": false
        },
        {
          "name": "OPEN",
          "type": "1",
          "optional": false
        },
        {
          "name": "CLOSING",
          "type": "2",
          "optional": false
        },
        {
          "name": "CLOSED",
          "type": "3",
          "optional": false
        }
      ],
      "implements": [
        "WebSocket"
      ],
      "jsdoc": null,
      "xaiDescription": "WebSocket with automatic reconnect functionality.",
      "isExported": true
    },
    {
      "name": "ExpoFormData",
      "xaiDescription": "Handles form data operations for Expo HTTP requests.",
      "constructors": [
        {
          "parameters": [],
          "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/FormData\").ExpoFormData",
          "xaiDescription": "Creates a new ExpoFormData instance."
        }
      ],
      "methods": [
        {
          "name": "ExpoFormData.append",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Appends a string value to the specified form data key."
        },
        {
          "name": "ExpoFormData.append",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "Blob",
              "optional": false
            },
            {
              "name": "filename",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Appends a Blob value to the form data with optional filename."
        },
        {
          "name": "ExpoFormData.delete",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Removes the value associated with the specified key."
        },
        {
          "name": "ExpoFormData.get",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "FormDataEntryValue",
          "jsdoc": null,
          "xaiDescription": "Retrieves the first value for the specified key."
        },
        {
          "name": "ExpoFormData.getAll",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "FormDataEntryValue[]",
          "jsdoc": null,
          "xaiDescription": "Returns all values for the specified key as an array."
        },
        {
          "name": "ExpoFormData.has",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "jsdoc": null,
          "xaiDescription": "Checks if the specified key exists in the form data."
        },
        {
          "name": "ExpoFormData.set",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Sets a string value for the specified key, overwriting existing."
        },
        {
          "name": "ExpoFormData.set",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "Blob",
              "optional": false
            },
            {
              "name": "filename",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Sets a Blob value for the key with optional filename."
        },
        {
          "name": "ExpoFormData.append",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "{ uri: string; name?: string; type?: string; }",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Appends an object with URI to the form data."
        },
        {
          "name": "ExpoFormData.set",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "{ uri: string; name?: string; type?: string; }",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Sets an object with URI for the specified key."
        },
        {
          "name": "ExpoFormData.forEach",
          "parameters": [
            {
              "name": "callback",
              "type": "(value: FormDataEntryValue, key: string, iterable: FormData) => void",
              "optional": false
            },
            {
              "name": "thisArg",
              "type": "unknown",
              "optional": true
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Executes a callback for each key-value pair in the form data."
        },
        {
          "name": "ExpoFormData.keys",
          "parameters": [],
          "returnType": "IterableIterator<string>",
          "jsdoc": null,
          "xaiDescription": "Returns an iterator over the keys in the form data."
        },
        {
          "name": "ExpoFormData.values",
          "parameters": [],
          "returnType": "IterableIterator<FormDataEntryValue>",
          "jsdoc": null,
          "xaiDescription": "Returns an iterator over the values in the form data."
        },
        {
          "name": "ExpoFormData.entries",
          "parameters": [],
          "returnType": "IterableIterator<[string, FormDataEntryValue]>",
          "jsdoc": null,
          "xaiDescription": "Returns an iterator over the key-value pairs."
        },
        {
          "name": "ExpoFormData.[Symbol.iterator]",
          "parameters": [],
          "returnType": "IterableIterator<[string, FormDataEntryValue]>",
          "jsdoc": null,
          "xaiDescription": "Provides iteration over key-value pairs."
        }
      ],
      "properties": [],
      "implements": [],
      "jsdoc": null,
      "isExported": true
    },
    {
      "name": "TextDecoder",
      "xaiDescription": "Decodes byte streams into strings using specified encoding.",
      "constructors": [
        {
          "parameters": [
            {
              "name": "label",
              "type": "string",
              "optional": true
            },
            {
              "name": "options",
              "type": "{ fatal?: boolean; ignoreBOM?: boolean; }",
              "optional": true
            }
          ],
          "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/TextDecoder\").TextDecoder",
          "xaiDescription": "Initializes a TextDecoder with encoding and options."
        }
      ],
      "methods": [
        {
          "name": "TextDecoder.decode",
          "parameters": [
            {
              "name": "input",
              "type": "ArrayBuffer | DataView<ArrayBufferLike>",
              "optional": true
            },
            {
              "name": "options",
              "type": "{ stream?: boolean; }",
              "optional": true
            }
          ],
          "returnType": "string",
          "jsdoc": null,
          "xaiDescription": "Decodes the input byte array into a string."
        }
      ],
      "properties": [
        {
          "name": "_encoding",
          "type": "any",
          "optional": false,
          "xaiDescription": "Stores the encoding type used."
        },
        {
          "name": "_ignoreBOM",
          "type": "any",
          "optional": false,
          "xaiDescription": "Flag to ignore byte order mark."
        },
        {
          "name": "_errorMode",
          "type": "any",
          "optional": false,
          "xaiDescription": "Error handling mode for decoding."
        },
        {
          "name": "_BOMseen",
          "type": "any",
          "optional": false,
          "xaiDescription": "Indicates if BOM was detected."
        },
        {
          "name": "_doNotFlush",
          "type": "any",
          "optional": false,
          "xaiDescription": "Flag for flushing behavior."
        },
        {
          "name": "_decoder",
          "type": "any",
          "optional": false,
          "xaiDescription": "Internal decoder object."
        },
        {
          "name": "serializeStream",
          "type": "any",
          "optional": false,
          "xaiDescription": "Serializes the stream data."
        }
      ],
      "implements": [],
      "jsdoc": null,
      "isExported": true
    },
    {
      "name": "StubNativeRequest",
      "xaiDescription": "Placeholder for native request implementation.",
      "constructors": [],
      "methods": [],
      "properties": [],
      "implements": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "StubNativeResponse",
      "xaiDescription": "Placeholder for native response implementation.",
      "constructors": [],
      "methods": [],
      "properties": [],
      "implements": [],
      "jsdoc": null,
      "isExported": false
    },
    {
      "name": "FetchError",
      "xaiDescription": "Represents errors in fetch operations.",
      "constructors": [
        {
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "optional": false
            },
            {
              "name": "{ cause, stack }",
              "type": "{ cause?: unknown; stack?: string; }",
              "optional": true
            }
          ],
          "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/FetchErrors\").FetchError",
          "xaiDescription": "Creates a new FetchError instance with message and options."
        }
      ],
      "methods": [
        {
          "name": "FetchError.createFromError",
          "parameters": [
            {
              "name": "error",
              "type": "Error",
              "optional": false
            }
          ],
          "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/FetchErrors\").FetchError",
          "jsdoc": null,
          "xaiDescription": "Creates a FetchError from an existing Error object."
        }
      ],
      "properties": [],
      "implements": [],
      "jsdoc": null,
      "isExported": true
    },
    {
      "name": "FetchResponse",
      "constructors": [
        {
          "parameters": [
            {
              "name": "abortCleanupFunction",
              "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/FetchResponse\").AbortSubscriptionCleanupFunction",
              "optional": false
            }
          ],
          "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/FetchResponse\").FetchResponse",
          "xaiDescription": "Initializes a FetchResponse with abort cleanup function."
        }
      ],
      "methods": [
        {
          "name": "FetchResponse.blob",
          "parameters": [],
          "returnType": "Promise<Blob>",
          "jsdoc": {
            "description": "A response implementation for the `fetch.Response` API.",
            "tags": []
          }
        },
        {
          "name": "FetchResponse.formData",
          "parameters": [],
          "returnType": "Promise<FormData>",
          "jsdoc": {
            "description": "A response implementation for the `fetch.Response` API.",
            "tags": []
          }
        },
        {
          "name": "FetchResponse.json",
          "parameters": [],
          "returnType": "Promise<any>",
          "jsdoc": {
            "description": "A response implementation for the `fetch.Response` API.",
            "tags": []
          }
        },
        {
          "name": "FetchResponse.toString",
          "parameters": [],
          "returnType": "string",
          "jsdoc": {
            "description": "A response implementation for the `fetch.Response` API.",
            "tags": []
          }
        },
        {
          "name": "FetchResponse.toJSON",
          "parameters": [],
          "returnType": "object",
          "jsdoc": {
            "description": "A response implementation for the `fetch.Response` API.",
            "tags": []
          }
        },
        {
          "name": "FetchResponse.clone",
          "parameters": [],
          "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/FetchResponse\").FetchResponse",
          "jsdoc": {
            "description": "A response implementation for the `fetch.Response` API.",
            "tags": []
          }
        }
      ],
      "properties": [
        {
          "name": "abortCleanupFunction",
          "type": "any",
          "optional": false
        },
        {
          "name": "streamingState",
          "type": "any",
          "optional": false
        },
        {
          "name": "bodyStream",
          "type": "any",
          "optional": false
        },
        {
          "name": "type",
          "type": "\"default\"",
          "optional": false
        },
        {
          "name": "finalize",
          "type": "any",
          "optional": false
        }
      ],
      "extends": "NativeResponse",
      "implements": [
        "Response"
      ],
      "jsdoc": {
        "description": "A response implementation for the `fetch.Response` API.",
        "tags": []
      },
      "isExported": true
    },
    {
      "name": "NativeRequest",
      "xaiDescription": "Manages native HTTP requests.",
      "constructors": [
        {
          "xaiDescription": "Initializes a NativeRequest object."
        }
      ],
      "methods": [
        {
          "name": "NativeRequest.start",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "requestInit",
              "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeRequestInit",
              "optional": false
            },
            {
              "name": "requestBody",
              "type": "Uint8Array<ArrayBufferLike>",
              "optional": false
            }
          ],
          "returnType": "Promise<import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeResponse>",
          "jsdoc": null,
          "xaiDescription": "Starts a native HTTP request with URL, init, and body."
        },
        {
          "name": "NativeRequest.cancel",
          "parameters": [],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Cancels the ongoing native request."
        }
      ],
      "properties": [],
      "extends": "SharedObject",
      "implements": [],
      "jsdoc": null,
      "isExported": true
    },
    {
      "name": "NativeResponse",
      "xaiDescription": "Handles native HTTP responses.",
      "constructors": [
        {
          "xaiDescription": "Initializes a NativeResponse object."
        }
      ],
      "methods": [
        {
          "name": "NativeResponse.startStreaming",
          "parameters": [],
          "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
          "jsdoc": null,
          "xaiDescription": "Begins streaming the response body."
        },
        {
          "name": "NativeResponse.cancelStreaming",
          "parameters": [
            {
              "name": "reason",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Cancels streaming with a specified reason."
        },
        {
          "name": "NativeResponse.arrayBuffer",
          "parameters": [],
          "returnType": "Promise<ArrayBuffer>",
          "jsdoc": null,
          "xaiDescription": "Returns the response body as an ArrayBuffer."
        },
        {
          "name": "NativeResponse.text",
          "parameters": [],
          "returnType": "Promise<string>",
          "jsdoc": null,
          "xaiDescription": "Returns the response body as a string."
        }
      ],
      "properties": [
        {
          "name": "bodyUsed",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Indicates if the body has been read."
        },
        {
          "name": "_rawHeaders",
          "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeHeadersType",
          "optional": false,
          "xaiDescription": "Stores the raw response headers."
        },
        {
          "name": "status",
          "type": "number",
          "optional": false,
          "xaiDescription": "HTTP status code of the response."
        },
        {
          "name": "statusText",
          "type": "string",
          "optional": false,
          "xaiDescription": "HTTP status message."
        },
        {
          "name": "url",
          "type": "string",
          "optional": false,
          "xaiDescription": "URL of the response."
        },
        {
          "name": "redirected",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Indicates if the response was redirected."
        }
      ],
      "extends": "SharedObject",
      "implements": [],
      "jsdoc": null,
      "isExported": true
    }
  ],
  "constants": [],
  "namespaces": [
    {
      "name": "expo",
      "contents": {
        "functions": [
          {
            "name": "anonymous",
            "parameters": [
              {
                "name": "event",
                "type": "WebSocketMessageEvent",
                "optional": false
              }
            ],
            "returnType": "Promise<void>",
            "jsdoc": {
              "description": "This client is for the Expo DevTools Plugins to communicate between the app and the DevTools webpage hosted in a browser.\nAll the code should be both compatible with browsers and React Native.",
              "tags": [],
              "xaiDescription": "Facilitates Expo DevTools communication between app and webpage, ensuring browser and React Native compatibility."
            },
            "isExported": false
          },
          {
            "name": "useDevToolsPluginClient",
            "parameters": [
              {
                "name": "pluginName",
                "type": "string",
                "optional": false
              },
              {
                "name": "options",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").DevToolsPluginClientOptions",
                "optional": true
              }
            ],
            "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/DevToolsPluginClient\").DevToolsPluginClient",
            "jsdoc": {
              "description": "A React hook to get the DevToolsPluginClient instance.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "useDOMImperativeHandle",
            "parameters": [
              {
                "name": "ref",
                "type": "React.Ref<T>",
                "optional": false
              },
              {
                "name": "init",
                "type": "() => T",
                "optional": false
              },
              {
                "name": "deps",
                "type": "React.DependencyList",
                "optional": true
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "A React `useImperativeHandle` like hook for DOM components.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "anonymous",
            "parameters": [],
            "returnType": "T",
            "jsdoc": {
              "description": "A React `useImperativeHandle` like hook for DOM components.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "getInitialSafeArea",
            "parameters": [],
            "returnType": "{ top: number; bottom: number; left: number; right: number; }",
            "jsdoc": {
              "description": "Get the best estimate safe area before native modules have fully loaded.\nThis is a hack to get the safe area insets without explicitly depending on react-native-safe-area-context.",
              "tags": [],
              "xaiDescription": "Estimates safe area insets early, without relying on react-native-safe-area-context module."
            },
            "isExported": true
          },
          {
            "name": "useEvent",
            "parameters": [
              {
                "name": "eventEmitter",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo-modules-core/build/ts-declarations/EventEmitter\").EventEmitter<TEventsMap>",
                "optional": false
              },
              {
                "name": "eventName",
                "type": "TEventName",
                "optional": false
              },
              {
                "name": "initialValue",
                "type": "TInitialValue",
                "optional": true
              }
            ],
            "returnType": "InferEventParameter<TEventListener, TInitialValue>",
            "jsdoc": {
              "description": "React hook that listens to events emitted by the given object. The returned value is an event parameter\nthat gets updated whenever a new event is dispatched.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "eventEmitter",
                  "text": "An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter)."
                },
                {
                  "tagName": "param",
                  "name": "eventName",
                  "text": "Name of the event to listen to."
                },
                {
                  "tagName": "param",
                  "name": "initialValue",
                  "text": "An event parameter to use until the event is called for the first time."
                },
                {
                  "tagName": "returns",
                  "name": "",
                  "text": "A parameter of the event listener."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\nimport { useEvent } from 'expo';\nimport { VideoPlayer } from 'expo-video';\n\nexport function PlayerStatus({ videoPlayer }: { videoPlayer: VideoPlayer }) {\n  const { status } = useEvent(videoPlayer, 'statusChange', { status: videoPlayer.status });\n\n  return <Text>{`Player status: ${status}`}</Text>;\n}\n"
                }
              ],
              "xaiDescription": "Hook to listen for events from an emitter, returning updated parameters. Uses EventEmitter<T>."
            },
            "isExported": true
          },
          {
            "name": "useEventListener",
            "parameters": [
              {
                "name": "eventEmitter",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo-modules-core/build/ts-declarations/EventEmitter\").EventEmitter<TEventsMap>",
                "optional": false
              },
              {
                "name": "eventName",
                "type": "TEventName",
                "optional": false
              },
              {
                "name": "listener",
                "type": "TEventListener",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "React hook that listens to events emitted by the given object and calls the listener function whenever a new event is dispatched.\nThe event listener is automatically added during the first render and removed when the component unmounts.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "eventEmitter",
                  "text": "An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter)."
                },
                {
                  "tagName": "param",
                  "name": "eventName",
                  "text": "Name of the event to listen to."
                },
                {
                  "tagName": "param",
                  "name": "listener",
                  "text": "A function to call when the event is dispatched."
                },
                {
                  "tagName": "example",
                  "name": "",
                  "text": "tsx\nimport { useEventListener } from 'expo';\nimport { useVideoPlayer, VideoView } from 'expo-video';\n\nexport function VideoPlayerView() {\n  const player = useVideoPlayer(videoSource);\n\n  useEventListener(player, 'playingChange', ({ isPlaying }) => {\n    console.log('Player is playing:', isPlaying);\n  });\n\n  return <VideoView player={player} />;\n}\n"
                }
              ],
              "xaiDescription": "Hook to add and remove event listeners automatically. Uses EventEmitter<T> for events."
            },
            "isExported": true
          },
          {
            "name": "registerRootComponent",
            "parameters": [
              {
                "name": "component",
                "type": "React.ComponentType<P>",
                "optional": false
              }
            ],
            "returnType": "void",
            "jsdoc": {
              "description": "Sets the initial React component to render natively in the app's root React Native view on Android, iOS, tvOS and the web.\n\nThis method does the following:\n- Invokes React Native's `AppRegistry.registerComponent`.\n- Invokes React Native web's `AppRegistry.runApplication` on web to render to the root `index.html` file.\n- Polyfills the `process.nextTick` function globally.\n\nThis method also adds the following dev-only features that are removed in production bundles.\n- Adds the Fast Refresh and bundle splitting indicator to the app.\n- Asserts if the `expo-updates` package is misconfigured.\n- Asserts if `react-native` is not aliased to `react-native-web` when running in the browser.",
              "tags": [
                {
                  "tagName": "param",
                  "name": "component",
                  "text": "The React component class that renders the rest of your app."
                }
              ],
              "xaiDescription": "Registers main React component for app rendering across platforms, including web and native."
            },
            "isExported": true
          },
          {
            "name": "convertFormDataAsync",
            "parameters": [
              {
                "name": "formData",
                "type": "FormData",
                "optional": false
              },
              {
                "name": "boundary",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "Promise<{ body: Uint8Array<ArrayBufferLike>; boundary: string; }>",
            "jsdoc": {
              "description": "Convert FormData to Uint8Array with a boundary\n\n`uri` is not supported for React Native's FormData.\n`blob` is not supported for standard FormData.",
              "tags": [],
              "xaiDescription": "Converts FormData to Uint8Array, handling boundaries. Note limitations for React Native."
            },
            "isExported": true
          }
        ],
        "enums": [],
        "types": [
          {
            "name": "MessageFrame",
            "type": "interface MessageFrame<T extends MessageKeyTypeBase> {\n    messageKey: T;\n    payload?: PayloadType;\n}",
            "properties": [
              {
                "name": "messageKey",
                "type": "T",
                "optional": false
              },
              {
                "name": "payload",
                "type": "PayloadType",
                "optional": true
              }
            ],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for structuring messages with a key and optional payload.",
            "isExported": false
          },
          {
            "name": "MessageKeyTypeBase",
            "type": "string | object",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | (() => string)",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => string) | (() => Object)",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "A message frame packer that serializes a messageKey and a payload into either a JSON string\n(fast path) or a binary format (for complex payloads).\n\nFast Path (JSON.stringify/JSON.parse):\n- For simple payloads (e.g., strings, numbers, null, undefined, or plain objects), the packer\n  uses `JSON.stringify` for serialization and `JSON.parse` for deserialization, ensuring\n  optimal performance.\n\nBinary Format:\n- For more complex payloads (e.g., Uint8Array, ArrayBuffer, Blob), the packer uses a binary\n  format with the following structure:\n\n  +------------------+-------------------+----------------------------+--------------------------+\n  | 4 bytes (Uint32) | Variable length   | 1 byte (Uint8)             | Variable length          |\n  | MessageKeyLength | MessageKey (JSON) | PayloadTypeIndicator (enum)| Payload (binary data)    |\n  +------------------+-------------------+----------------------------+--------------------------+\n\n  1. MessageKeyLength (4 bytes):\n     - A 4-byte unsigned integer indicating the length of the MessageKey JSON string.\n\n  2. MessageKey (Variable length):\n     - The JSON string representing the message key, encoded as UTF-8.\n\n  3. PayloadTypeIndicator (1 byte):\n     - A single byte enum value representing the type of the payload (e.g., Uint8Array, String,\n       Object, ArrayBuffer, Blob).\n\n  4. Payload (Variable length):\n     - The actual payload data, which can vary in type and length depending on the PayloadType.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "PayloadType",
            "type": "Uint8Array | string | number | null | undefined | object | ArrayBuffer | Blob",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | (() => string) | ((radix?: number) => string) | (() => string)",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => string) | (() => Object) | (() => number) | (() => Uint8Array<ArrayBufferLike>)",
                "optional": false
              },
              {
                "name": "toLocaleString",
                "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; } | { (): string; (locales: string | string[], options?: Intl.NumberFormatOptions): string; }",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Union type for various data payloads including strings, numbers, and binary formats.",
            "isExported": false
          },
          {
            "name": "Options",
            "type": "export interface Options {\n    /**\n     * Reconnect interval in milliseconds.\n     * @default 1500\n     */\n    retriesInterval?: number;\n    /**\n     * The maximum number of retries.\n     * @default 200\n     */\n    maxRetries?: number;\n    /**\n     * The timeout in milliseconds for the WebSocket connecting.\n     */\n    connectTimeout?: number;\n    /**\n     * The error handler.\n     * @default throwing an error\n     */\n    onError?: (error: Error) => void;\n    /**\n     * The callback to be called when the WebSocket is reconnected.\n     * @default no-op\n     */\n    onReconnect?: (reason: string) => void;\n    /**\n     * The [`binaryType`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType).\n     */\n    binaryType?: DevToolsPluginClientOptions['websocketBinaryType'];\n}",
            "properties": [
              {
                "name": "retriesInterval",
                "type": "number",
                "optional": true
              },
              {
                "name": "maxRetries",
                "type": "number",
                "optional": true
              },
              {
                "name": "connectTimeout",
                "type": "number",
                "optional": true
              },
              {
                "name": "onError",
                "type": "(error: Error) => void",
                "optional": true
              },
              {
                "name": "onReconnect",
                "type": "(reason: string) => void",
                "optional": true
              },
              {
                "name": "binaryType",
                "type": "\"arraybuffer\" | \"blob\"",
                "optional": true
              }
            ],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Configuration options for WebSocket connections including retries and error handling.",
            "isExported": true
          },
          {
            "name": "ConnectionInfo",
            "type": "export interface ConnectionInfo {\n    /** Indicates the sender towards the devtools plugin. */\n    sender: 'app' | 'browser';\n    /** Dev server address. */\n    devServer: string;\n    /** The plugin name. */\n    pluginName: string;\n    /**\n     * The backing store for the WebSocket connection. Exposed for testing.\n     * If not provided, the default singleton instance will be used.\n     * @hidden\n     */\n    wsStore?: WebSocketBackingStore;\n    /**\n     * The transport protocol version between the app and the webui.\n     */\n    protocolVersion: number;\n}",
            "properties": [
              {
                "name": "sender",
                "type": "\"app\" | \"browser\"",
                "optional": false
              },
              {
                "name": "devServer",
                "type": "string",
                "optional": false
              },
              {
                "name": "pluginName",
                "type": "string",
                "optional": false
              },
              {
                "name": "wsStore",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/WebSocketBackingStore\").WebSocketBackingStore",
                "optional": true
              },
              {
                "name": "protocolVersion",
                "type": "number",
                "optional": false
              }
            ],
            "extends": [],
            "jsdoc": {
              "description": "The connection info for devtools plugins client.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "DevToolsPluginClientOptions",
            "type": "export interface DevToolsPluginClientOptions {\n    /**\n     * The underlying WebSocket [`binaryType`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType).\n     */\n    websocketBinaryType?: 'arraybuffer' | 'blob';\n}",
            "properties": [
              {
                "name": "websocketBinaryType",
                "type": "\"arraybuffer\" | \"blob\"",
                "optional": true
              }
            ],
            "extends": [],
            "jsdoc": {
              "description": "Options for the devtools plugin client.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "HandshakeMessageParams",
            "type": "export interface HandshakeMessageParams {\n    protocolVersion: number;\n    pluginName: string;\n    method: 'handshake' | 'terminateBrowserClient';\n    browserClientId: string;\n}",
            "properties": [
              {
                "name": "protocolVersion",
                "type": "number",
                "optional": false
              },
              {
                "name": "pluginName",
                "type": "string",
                "optional": false
              },
              {
                "name": "method",
                "type": "\"handshake\" | \"terminateBrowserClient\"",
                "optional": false
              },
              {
                "name": "browserClientId",
                "type": "string",
                "optional": false
              }
            ],
            "extends": [],
            "jsdoc": {
              "description": "The handshake messages for the devtools plugin client.",
              "tags": [
                {
                  "tagName": "hidden",
                  "name": "",
                  "text": ""
                }
              ]
            },
            "isExported": true
          },
          {
            "name": "BridgeMessage",
            "type": "{\n    type: string;\n    data: TData;\n}",
            "properties": [
              {
                "name": "type",
                "type": "string",
                "optional": false
              },
              {
                "name": "data",
                "type": "TData",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Generic structure for messages with a type and associated data.",
            "isExported": true
          },
          {
            "name": "DOMImperativeFactory",
            "type": "export interface DOMImperativeFactory {\n    [key: string]: (...args: JSONValue[]) => void;\n}",
            "properties": [],
            "extends": [],
            "jsdoc": {
              "description": "The return type of the init function for `useDOMImperativeHandle`.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "DOMProps",
            "type": "export interface DOMProps extends Omit<RNWebViewProps, 'source'> {\n    /**\n     * Whether to resize the native WebView size based on the DOM content size.\n     * @default false\n     */\n    matchContents?: boolean;\n    /**\n     * Whether to use the `@expo/dom-webview` as the underlying WebView implementation.\n     * @default false\n     */\n    useExpoDOMWebView?: boolean;\n}",
            "properties": [
              {
                "name": "matchContents",
                "type": "boolean",
                "optional": true
              },
              {
                "name": "useExpoDOMWebView",
                "type": "boolean",
                "optional": true
              }
            ],
            "extends": [
              "Omit<RNWebViewProps, \"source\">"
            ],
            "jsdoc": null,
            "xaiDescription": "Properties for DOM handling, extending RNWebViewProps without source. Uses Omit<RNWebViewProps, 'source'>.",
            "isExported": true
          },
          {
            "name": "JSONArray",
            "type": "export interface JSONArray extends Array<JSONValue> {\n}",
            "properties": [],
            "extends": [
              "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/dom/dom.types\").JSONValue[]"
            ],
            "jsdoc": null,
            "xaiDescription": "Array type that extends JSONValue elements. Uses Array<JSONValue>.",
            "isExported": true
          },
          {
            "name": "JSONObject",
            "type": "export interface JSONObject {\n    [key: string]: JSONValue | undefined;\n}",
            "properties": [],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Object type with string keys and JSONValue values.",
            "isExported": true
          },
          {
            "name": "JSONValue",
            "type": "boolean | number | string | null | JSONArray | JSONObject",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | ((radix?: number) => string) | (() => string) | (() => string)",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => string) | (() => number) | (() => boolean) | (() => Object)",
                "optional": false
              },
              {
                "name": "toLocaleString",
                "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; } | { (): string; (locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Union type for JSON-compatible values including primitives and structures.",
            "isExported": true
          },
          {
            "name": "RNWebViewRef",
            "type": "RNWebView",
            "properties": [],
            "jsdoc": null,
            "isExported": false
          },
          {
            "name": "WebViewProps",
            "type": "RNWebViewProps",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Properties for WebView component, based on RNWebViewProps.",
            "isExported": true
          },
          {
            "name": "WebViewRef",
            "type": "RNWebViewRef",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Reference type for WebView, using RNWebViewRef.",
            "isExported": true
          },
          {
            "name": "UseDebugZeroHeightType",
            "type": "(dom?: DOMProps) => {\n    debugZeroHeightStyle: WebViewProps['containerStyle'] | undefined;\n    debugOnLayout: ViewProps['onLayout'];\n}",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Function for debugging zero-height styles in WebView. Uses DOMProps and WebViewProps.",
            "isExported": false
          },
          {
            "name": "Props",
            "type": "interface Props {\n    dom?: DOMProps;\n    filePath: string;\n}",
            "properties": [
              {
                "name": "dom",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/dom/dom.types\").DOMProps",
                "optional": true
              },
              {
                "name": "filePath",
                "type": "string",
                "optional": false
              }
            ],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Interface for component properties including optional DOM props and file path.",
            "isExported": false
          },
          {
            "name": "ExpoGoPackagerOpts",
            "type": "{\n    hostType?: string;\n    dev?: boolean;\n    strict?: boolean;\n    minify?: boolean;\n    urlType?: string;\n    urlRandomness?: string;\n    lanType?: string;\n    [key: string]: any;\n}",
            "properties": [
              {
                "name": "hostType",
                "type": "string",
                "optional": true
              },
              {
                "name": "dev",
                "type": "boolean",
                "optional": true
              },
              {
                "name": "strict",
                "type": "boolean",
                "optional": true
              },
              {
                "name": "minify",
                "type": "boolean",
                "optional": true
              },
              {
                "name": "urlType",
                "type": "string",
                "optional": true
              },
              {
                "name": "urlRandomness",
                "type": "string",
                "optional": true
              },
              {
                "name": "lanType",
                "type": "string",
                "optional": true
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Options for Expo Go packager configuration.",
            "isExported": true
          },
          {
            "name": "ExpoGoProjectConfig",
            "type": "{\n    mainModuleName?: string;\n    debuggerHost?: string;\n    logUrl?: string;\n    developer?: {\n        tool?: string;\n        [key: string]: any;\n    };\n    packagerOpts?: ExpoGoPackagerOpts;\n}",
            "properties": [
              {
                "name": "mainModuleName",
                "type": "string",
                "optional": true
              },
              {
                "name": "debuggerHost",
                "type": "string",
                "optional": true
              },
              {
                "name": "logUrl",
                "type": "string",
                "optional": true
              },
              {
                "name": "developer",
                "type": "{ [key: string]: any; tool?: string; }",
                "optional": true
              },
              {
                "name": "packagerOpts",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/environment/ExpoGo\").ExpoGoPackagerOpts",
                "optional": true
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Configuration for Expo Go project settings.",
            "isExported": false
          },
          {
            "name": "AnyEventListener",
            "type": "(...args: any[]) => any",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Generic function type for event listeners.",
            "isExported": false
          },
          {
            "name": "InferEventListener",
            "type": "TEventsMap extends Record<TEventName, infer TEventListener extends AnyEventListener> ? TEventListener : never",
            "properties": [],
            "jsdoc": {
              "description": "Type helper that infers the event listener from the emitter's events map.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "InferEventName",
            "type": "TEventsMap extends Record<infer TEventName extends keyof TEventsMap, AnyEventListener> ? TEventName : never",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | ((radix?: number) => string) | (() => string)",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => string) | (() => number) | (() => symbol)",
                "optional": false
              },
              {
                "name": "toLocaleString",
                "type": "(() => string) | { (locales?: string | string[], options?: Intl.NumberFormatOptions): string; (locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string; }",
                "optional": false
              }
            ],
            "jsdoc": {
              "description": "Type helper that infers the event name from the emitter's events map.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "InferEventParameter",
            "type": "TInitialValue extends Parameters<TEventListener>[0] ? Parameters<TEventListener>[0] : Parameters<TEventListener>[0] | TInitialValue | null",
            "properties": [],
            "jsdoc": {
              "description": "Type helper that infers the first parameter of the event listener.",
              "tags": []
            },
            "isExported": false
          },
          {
            "name": "InitialProps",
            "type": "{\n    exp?: {\n        notification?: any;\n        manifestString?: string;\n        [key: string]: any;\n    };\n    shell?: boolean;\n    shellManifestUrl?: string;\n    [key: string]: any;\n}",
            "properties": [
              {
                "name": "exp",
                "type": "{ [key: string]: any; notification?: any; manifestString?: string; }",
                "optional": true
              },
              {
                "name": "shell",
                "type": "boolean",
                "optional": true
              },
              {
                "name": "shellManifestUrl",
                "type": "string",
                "optional": true
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Initial properties for application setup including exp and shell options.",
            "isExported": false
          },
          {
            "name": "ExpoFormDataPart",
            "type": "{\n    string: string;\n    headers: {\n        [name: string]: string;\n    };\n} | {\n    blob: Blob;\n    headers: {\n        [name: string]: string;\n    };\n    name?: string | undefined;\n    type?: string | undefined;\n} | {\n    uri: string;\n    headers: {\n        [name: string]: string;\n    };\n    name?: string | undefined;\n    type?: string | undefined;\n}",
            "properties": [
              {
                "name": "headers",
                "type": "{ [name: string]: string; } | { [name: string]: string; } | { [name: string]: string; }",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Union type for form data parts with string, blob, or URI variants.",
            "isExported": true
          },
          {
            "name": "ExpoFormDataValue",
            "type": "string | Blob",
            "properties": [
              {
                "name": "toString",
                "type": "(() => string) | (() => string)",
                "optional": false
              },
              {
                "name": "slice",
                "type": "((start?: number, end?: number) => string) | ((start?: number, end?: number, contentType?: string) => Blob)",
                "optional": false
              },
              {
                "name": "valueOf",
                "type": "(() => string) | (() => Object)",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Type for form data values as strings or blobs.",
            "isExported": true
          },
          {
            "name": "AbortSubscriptionCleanupFunction",
            "type": "() => void",
            "properties": [],
            "jsdoc": null,
            "xaiDescription": "Function to clean up subscription aborts.",
            "isExported": true
          },
          {
            "name": "NativeHeadersType",
            "type": "[string, string][]",
            "properties": [
              {
                "name": "length",
                "type": "number",
                "optional": false
              },
              {
                "name": "toString",
                "type": "() => string",
                "optional": false
              },
              {
                "name": "toLocaleString",
                "type": "{ (): string; (locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string; }",
                "optional": false
              },
              {
                "name": "pop",
                "type": "() => [string, string]",
                "optional": false
              },
              {
                "name": "push",
                "type": "(...items: [string, string][]) => number",
                "optional": false
              },
              {
                "name": "concat",
                "type": "{ (...items: ConcatArray<[string, string]>[]): [string, string][]; (...items: ([string, string] | ConcatArray<[string, string]>)[]): [string, string][]; }",
                "optional": false
              },
              {
                "name": "join",
                "type": "(separator?: string) => string",
                "optional": false
              },
              {
                "name": "reverse",
                "type": "() => [string, string][]",
                "optional": false
              },
              {
                "name": "shift",
                "type": "() => [string, string]",
                "optional": false
              },
              {
                "name": "slice",
                "type": "(start?: number, end?: number) => [string, string][]",
                "optional": false
              },
              {
                "name": "sort",
                "type": "(compareFn?: (a: [string, string], b: [string, string]) => number) => import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeHeadersType",
                "optional": false
              },
              {
                "name": "splice",
                "type": "{ (start: number, deleteCount?: number): [string, string][]; (start: number, deleteCount: number, ...items: [string, string][]): [string, string][]; }",
                "optional": false
              },
              {
                "name": "unshift",
                "type": "(...items: [string, string][]) => number",
                "optional": false
              },
              {
                "name": "indexOf",
                "type": "(searchElement: [string, string], fromIndex?: number) => number",
                "optional": false
              },
              {
                "name": "lastIndexOf",
                "type": "(searchElement: [string, string], fromIndex?: number) => number",
                "optional": false
              },
              {
                "name": "every",
                "type": "{ <S>(predicate: (value: [string, string], index: number, array: [string, string][]) => value is S, thisArg?: any): this is S[]; (predicate: (value: [string, string], index: number, array: [string, string][]) => unknown, thisArg?: any): boolean; }",
                "optional": false
              },
              {
                "name": "some",
                "type": "(predicate: (value: [string, string], index: number, array: [string, string][]) => unknown, thisArg?: any) => boolean",
                "optional": false
              },
              {
                "name": "forEach",
                "type": "(callbackfn: (value: [string, string], index: number, array: [string, string][]) => void, thisArg?: any) => void",
                "optional": false
              },
              {
                "name": "map",
                "type": "<U>(callbackfn: (value: [string, string], index: number, array: [string, string][]) => U, thisArg?: any) => U[]",
                "optional": false
              },
              {
                "name": "filter",
                "type": "{ <S>(predicate: (value: [string, string], index: number, array: [string, string][]) => value is S, thisArg?: any): S[]; (predicate: (value: [string, string], index: number, array: [string, string][]) => unknown, thisArg?: any): [string, string][]; }",
                "optional": false
              },
              {
                "name": "reduce",
                "type": "{ (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string]): [string, string]; (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string], initialValue: [string, string]): [string, string]; <U>(callbackfn: (previousValue: U, currentValue: [string, string], currentIndex: number, array: [string, string][]) => U, initialValue: U): U; }",
                "optional": false
              },
              {
                "name": "reduceRight",
                "type": "{ (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string]): [string, string]; (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string], initialValue: [string, string]): [string, string]; <U>(callbackfn: (previousValue: U, currentValue: [string, string], currentIndex: number, array: [string, string][]) => U, initialValue: U): U; }",
                "optional": false
              },
              {
                "name": "find",
                "type": "{ <S>(predicate: (value: [string, string], index: number, obj: [string, string][]) => value is S, thisArg?: any): S; (predicate: (value: [string, string], index: number, obj: [string, string][]) => unknown, thisArg?: any): [string, string]; }",
                "optional": false
              },
              {
                "name": "findIndex",
                "type": "(predicate: (value: [string, string], index: number, obj: [string, string][]) => unknown, thisArg?: any) => number",
                "optional": false
              },
              {
                "name": "fill",
                "type": "(value: [string, string], start?: number, end?: number) => import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeHeadersType",
                "optional": false
              },
              {
                "name": "copyWithin",
                "type": "(target: number, start: number, end?: number) => import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeHeadersType",
                "optional": false
              },
              {
                "name": "entries",
                "type": "() => ArrayIterator<[number, [string, string]]>",
                "optional": false
              },
              {
                "name": "keys",
                "type": "() => ArrayIterator<number>",
                "optional": false
              },
              {
                "name": "values",
                "type": "() => ArrayIterator<[string, string]>",
                "optional": false
              },
              {
                "name": "includes",
                "type": "(searchElement: [string, string], fromIndex?: number) => boolean",
                "optional": false
              },
              {
                "name": "flatMap",
                "type": "<U, This>(callback: (this: This, value: [string, string], index: number, array: [string, string][]) => U | readonly U[], thisArg?: This) => U[]",
                "optional": false
              },
              {
                "name": "flat",
                "type": "<A, D>(this: A, depth?: D) => FlatArray<A, D>[]",
                "optional": false
              },
              {
                "name": "__@iterator@45767",
                "type": "() => ArrayIterator<[string, string]>",
                "optional": false
              },
              {
                "name": "__@unscopables@45769",
                "type": "{ [x: number]: boolean; length?: boolean; toString?: boolean; toLocaleString?: boolean; pop?: boolean; push?: boolean; concat?: boolean; join?: boolean; reverse?: boolean; shift?: boolean; slice?: boolean; sort?: boolean; splice?: boolean; unshift?: boolean; indexOf?: boolean; lastIndexOf?: boolean; every?: boolean; some?: boolean; forEach?: boolean; map?: boolean; filter?: boolean; reduce?: boolean; reduceRight?: boolean; find?: boolean; findIndex?: boolean; fill?: boolean; copyWithin?: boolean; entries?: boolean; keys?: boolean; values?: boolean; includes?: boolean; flatMap?: boolean; flat?: boolean; [Symbol.iterator]?: boolean; readonly [Symbol.unscopables]?: boolean; at?: boolean; }",
                "optional": false
              },
              {
                "name": "at",
                "type": "(index: number) => [string, string]",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Array-like type for managing HTTP headers as string pairs.",
            "isExported": true
          },
          {
            "name": "NativeRequestInit",
            "type": "export interface NativeRequestInit {\n    credentials?: RequestCredentials;\n    headers?: NativeHeadersType;\n    method?: string;\n}",
            "properties": [
              {
                "name": "credentials",
                "type": "RequestCredentials",
                "optional": true
              },
              {
                "name": "headers",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeHeadersType",
                "optional": true
              },
              {
                "name": "method",
                "type": "string",
                "optional": true
              }
            ],
            "extends": [],
            "jsdoc": null,
            "xaiDescription": "Configuration options for initializing a native HTTP request.",
            "isExported": true
          },
          {
            "name": "NativeResponseEvents",
            "type": "{\n    didReceiveResponseData(data: Uint8Array): void;\n    didComplete(): void;\n    didFailWithError(error: string): void;\n    readyForJSFinalization(): void;\n}",
            "properties": [
              {
                "name": "didReceiveResponseData",
                "type": "(data: Uint8Array<ArrayBufferLike>) => void",
                "optional": false
              },
              {
                "name": "didComplete",
                "type": "() => void",
                "optional": false
              },
              {
                "name": "didFailWithError",
                "type": "(error: string) => void",
                "optional": false
              },
              {
                "name": "readyForJSFinalization",
                "type": "() => void",
                "optional": false
              }
            ],
            "jsdoc": null,
            "xaiDescription": "Event handlers for native response lifecycle events.",
            "isExported": true
          },
          {
            "name": "FetchRequestInit",
            "type": "export interface FetchRequestInit {\n    body?: BodyInit;\n    credentials?: RequestCredentials;\n    headers?: HeadersInit;\n    method?: string;\n    signal?: AbortSignal;\n    integrity?: string;\n    keepalive?: boolean;\n    mode?: RequestMode;\n    referrer?: string;\n    window?: any;\n}",
            "properties": [
              {
                "name": "body",
                "type": "BodyInit",
                "optional": true
              },
              {
                "name": "credentials",
                "type": "RequestCredentials",
                "optional": true
              },
              {
                "name": "headers",
                "type": "HeadersInit",
                "optional": true
              },
              {
                "name": "method",
                "type": "string",
                "optional": true
              },
              {
                "name": "signal",
                "type": "AbortSignal",
                "optional": true
              },
              {
                "name": "integrity",
                "type": "string",
                "optional": true
              },
              {
                "name": "keepalive",
                "type": "boolean",
                "optional": true
              },
              {
                "name": "mode",
                "type": "RequestMode",
                "optional": true
              },
              {
                "name": "referrer",
                "type": "string",
                "optional": true
              },
              {
                "name": "window",
                "type": "any",
                "optional": true
              }
            ],
            "extends": [],
            "jsdoc": {
              "description": "A fetch RequestInit compatible structure.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "Console",
            "type": "interface Console {\n  memory: any;\n  assert(condition?: boolean, message?: string, ...data: any[]): void;\n  clear(): void;\n  count(label?: string): void;\n  debug(message?: any, ...optionalParams: any[]): void;\n  dir(value?: any, ...optionalParams: any[]): void;\n  dirxml(value: any): void;\n  error(message?: any, ...optionalParams: any[]): void;\n  exception(message?: string, ...optionalParams: any[]): void;\n  group(groupTitle?: string, ...optionalParams: any[]): void;\n  groupCollapsed(groupTitle?: string, ...optionalParams: any[]): void;\n  groupEnd(): void;\n  info(message?: any, ...optionalParams: any[]): void;\n  log(message?: any, ...optionalParams: any[]): void;\n  markTimeline(label?: string): void;\n  profile(reportName?: string): void;\n  profileEnd(reportName?: string): void;\n  table(...tabularData: any[]): void;\n  time(label?: string): void;\n  timeEnd(label?: string): void;\n  timeStamp(label?: string): void;\n  timeline(label?: string): void;\n  timelineEnd(label?: string): void;\n  trace(message?: any, ...optionalParams: any[]): void;\n  warn(message?: any, ...optionalParams: any[]): void;\n}",
            "properties": [
              {
                "name": "memory",
                "type": "any",
                "optional": false
              }
            ],
            "extends": [],
            "jsdoc": {
              "description": "This is a more comprehensive declaration of the Console API that JavaScript VMs include.\n\nThis declaration is from https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts",
              "tags": []
            },
            "isExported": false
          }
        ],
        "classes": [
          {
            "name": "DevToolsPluginClient",
            "constructors": [
              {
                "parameters": [
                  {
                    "name": "connectionInfo",
                    "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").ConnectionInfo",
                    "optional": false
                  },
                  {
                    "name": "options",
                    "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").DevToolsPluginClientOptions",
                    "optional": true
                  }
                ],
                "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/DevToolsPluginClient\").DevToolsPluginClient"
              }
            ],
            "methods": [
              {
                "name": "DevToolsPluginClient.initAsync",
                "parameters": [],
                "returnType": "Promise<void>",
                "jsdoc": {
                  "description": "Initialize the connection.",
                  "tags": [
                    {
                      "tagName": "hidden",
                      "name": "",
                      "text": ""
                    }
                  ]
                }
              },
              {
                "name": "DevToolsPluginClient.closeAsync",
                "parameters": [],
                "returnType": "Promise<void>",
                "jsdoc": {
                  "description": "Close the connection.",
                  "tags": []
                }
              },
              {
                "name": "DevToolsPluginClient.sendMessage",
                "parameters": [
                  {
                    "name": "method",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "params",
                    "type": "any",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": {
                  "description": "Send a message to the other end of DevTools.",
                  "tags": [
                    {
                      "tagName": "param",
                      "name": "method",
                      "text": "A method name."
                    },
                    {
                      "tagName": "param",
                      "name": "params",
                      "text": "any extra payload."
                    }
                  ]
                }
              },
              {
                "name": "DevToolsPluginClient.sendMessageLegacy",
                "parameters": [
                  {
                    "name": "method",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "params",
                    "type": "any",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": {
                  "description": "This client is for the Expo DevTools Plugins to communicate between the app and the DevTools webpage hosted in a browser.\nAll the code should be both compatible with browsers and React Native.",
                  "tags": []
                }
              },
              {
                "name": "DevToolsPluginClient.addMessageListener",
                "parameters": [
                  {
                    "name": "method",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "listener",
                    "type": "(params: any) => void",
                    "optional": false
                  }
                ],
                "returnType": "EventSubscription",
                "jsdoc": {
                  "description": "Subscribe to a message from the other end of DevTools.",
                  "tags": [
                    {
                      "tagName": "param",
                      "name": "method",
                      "text": "Subscribe to a message with a method name."
                    },
                    {
                      "tagName": "param",
                      "name": "listener",
                      "text": "Listener to be called when a message is received."
                    }
                  ]
                }
              },
              {
                "name": "DevToolsPluginClient.addMessageListenerOnce",
                "parameters": [
                  {
                    "name": "method",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "listener",
                    "type": "(params: any) => void",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": {
                  "description": "Subscribe to a message from the other end of DevTools just once.",
                  "tags": [
                    {
                      "tagName": "param",
                      "name": "method",
                      "text": "Subscribe to a message with a method name."
                    },
                    {
                      "tagName": "param",
                      "name": "listener",
                      "text": "Listener to be called when a message is received."
                    }
                  ]
                }
              },
              {
                "name": "DevToolsPluginClient.sendHandshakeMessage",
                "parameters": [
                  {
                    "name": "params",
                    "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").HandshakeMessageParams",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": {
                  "description": "Internal handshake message sender.",
                  "tags": [
                    {
                      "tagName": "hidden",
                      "name": "",
                      "text": ""
                    }
                  ]
                }
              },
              {
                "name": "DevToolsPluginClient.addHandskakeMessageListener",
                "parameters": [
                  {
                    "name": "listener",
                    "type": "(params: import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").HandshakeMessageParams) => void",
                    "optional": false
                  }
                ],
                "returnType": "EventSubscription",
                "jsdoc": {
                  "description": "Internal handshake message listener.",
                  "tags": [
                    {
                      "tagName": "hidden",
                      "name": "",
                      "text": ""
                    }
                  ]
                }
              },
              {
                "name": "DevToolsPluginClient.isConnected",
                "parameters": [],
                "returnType": "boolean",
                "jsdoc": {
                  "description": "Returns whether the client is connected to the server.",
                  "tags": []
                }
              },
              {
                "name": "DevToolsPluginClient.connectAsync",
                "parameters": [],
                "returnType": "Promise<WebSocket>",
                "jsdoc": {
                  "description": "The method to create the WebSocket connection.",
                  "tags": []
                }
              },
              {
                "name": "DevToolsPluginClient.getWebSocketBackingStore",
                "parameters": [],
                "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/WebSocketBackingStore\").WebSocketBackingStore",
                "jsdoc": {
                  "description": "Get the WebSocket backing store. Exposed for testing.",
                  "tags": [
                    {
                      "tagName": "hidden",
                      "name": "",
                      "text": ""
                    }
                  ]
                }
              }
            ],
            "properties": [
              {
                "name": "connectionInfo",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/devtools.types\").ConnectionInfo",
                "optional": false
              },
              {
                "name": "options",
                "type": "any",
                "optional": false
              },
              {
                "name": "eventEmitter",
                "type": "EventEmitter",
                "optional": false
              },
              {
                "name": "defaultWSStore",
                "type": "any",
                "optional": false
              },
              {
                "name": "wsStore",
                "type": "any",
                "optional": false
              },
              {
                "name": "isClosed",
                "type": "boolean",
                "optional": false
              },
              {
                "name": "retries",
                "type": "number",
                "optional": false
              },
              {
                "name": "messageFramePacker",
                "type": "any",
                "optional": false
              },
              {
                "name": "sendMessageImpl",
                "type": "any",
                "optional": false
              },
              {
                "name": "handleMessage",
                "type": "(event: WebSocketMessageEvent) => Promise<void>",
                "optional": false
              }
            ],
            "implements": [],
            "jsdoc": {
              "description": "This client is for the Expo DevTools Plugins to communicate between the app and the DevTools webpage hosted in a browser.\nAll the code should be both compatible with browsers and React Native.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "DevToolsPluginClientImplApp",
            "constructors": [],
            "methods": [
              {
                "name": "DevToolsPluginClientImplApp.initAsync",
                "parameters": [],
                "returnType": "Promise<void>",
                "jsdoc": {
                  "description": "Initialize the connection.",
                  "tags": [
                    {
                      "tagName": "hidden",
                      "name": "",
                      "text": ""
                    }
                  ]
                }
              },
              {
                "name": "DevToolsPluginClientImplApp.sendMessage",
                "parameters": [
                  {
                    "name": "method",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "params",
                    "type": "any",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": {
                  "description": "The DevToolsPluginClient for the app -> browser communication.",
                  "tags": []
                }
              }
            ],
            "properties": [
              {
                "name": "browserClientMap",
                "type": "any",
                "optional": false
              },
              {
                "name": "addHandshakeHandler",
                "type": "any",
                "optional": false
              },
              {
                "name": "terminateBrowserClient",
                "type": "any",
                "optional": false
              }
            ],
            "extends": "DevToolsPluginClient",
            "implements": [],
            "jsdoc": {
              "description": "The DevToolsPluginClient for the app -> browser communication.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "DevToolsPluginClientImplBrowser",
            "constructors": [],
            "methods": [
              {
                "name": "DevToolsPluginClientImplBrowser.initAsync",
                "parameters": [],
                "returnType": "Promise<void>",
                "jsdoc": {
                  "description": "Initialize the connection.",
                  "tags": [
                    {
                      "tagName": "hidden",
                      "name": "",
                      "text": ""
                    }
                  ]
                }
              }
            ],
            "properties": [
              {
                "name": "browserClientId",
                "type": "any",
                "optional": false
              },
              {
                "name": "startHandshake",
                "type": "any",
                "optional": false
              }
            ],
            "extends": "DevToolsPluginClient",
            "implements": [],
            "jsdoc": {
              "description": "The DevToolsPluginClient for the browser -> app communication.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "MessageFramePacker",
            "xaiDescription": "Utility for packing and unpacking message frames with various data types.",
            "constructors": [],
            "methods": [
              {
                "name": "MessageFramePacker.pack",
                "parameters": [
                  {
                    "name": "{ messageKey, payload }",
                    "type": "MessageFrame<T>",
                    "optional": false
                  },
                  {
                    "name": "useLegacyTransport",
                    "type": "boolean",
                    "optional": true
                  }
                ],
                "returnType": "string | Uint8Array<ArrayBufferLike> | Promise<Uint8Array<ArrayBufferLike>>",
                "xaiDescription": "Packs message frame into serialized form using MessageFrame<T>.",
                "jsdoc": null
              },
              {
                "name": "MessageFramePacker.unpack",
                "parameters": [
                  {
                    "name": "packedData",
                    "type": "string | ArrayBuffer",
                    "optional": false
                  }
                ],
                "returnType": "MessageFrame<T>",
                "xaiDescription": "Unpacks serialized data into MessageFrame<T>.",
                "jsdoc": null
              }
            ],
            "properties": [
              {
                "name": "textEncoder",
                "type": "any",
                "optional": false
              },
              {
                "name": "textDecoder",
                "type": "any",
                "optional": false
              },
              {
                "name": "isFastPathPayload",
                "type": "any",
                "optional": false
              },
              {
                "name": "payloadToUint8Array",
                "type": "any",
                "optional": false
              },
              {
                "name": "packImpl",
                "type": "any",
                "optional": false
              },
              {
                "name": "deserializePayload",
                "type": "any",
                "optional": false
              },
              {
                "name": "getPayloadTypeIndicator",
                "type": "any",
                "optional": false
              }
            ],
            "implements": [],
            "jsdoc": null,
            "isExported": true
          },
          {
            "name": "WebSocketBackingStore",
            "constructors": [
              {
                "parameters": [
                  {
                    "name": "ws",
                    "type": "WebSocket",
                    "optional": true
                  },
                  {
                    "name": "refCount",
                    "type": "number",
                    "optional": true
                  }
                ],
                "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/WebSocketBackingStore\").WebSocketBackingStore"
              }
            ],
            "methods": [],
            "properties": [
              {
                "name": "ws",
                "type": "WebSocket",
                "optional": false
              },
              {
                "name": "refCount",
                "type": "number",
                "optional": false
              }
            ],
            "implements": [],
            "jsdoc": {
              "description": "The backing store for the WebSocket connection and reference count.\nThis is used for connection multiplexing.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "WebSocketWithReconnect",
            "xaiDescription": "WebSocket with automatic reconnection and event handling.",
            "constructors": [
              {
                "parameters": [
                  {
                    "name": "url",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "options",
                    "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/WebSocketWithReconnect\").Options",
                    "optional": true
                  }
                ],
                "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/devtools/WebSocketWithReconnect\").WebSocketWithReconnect"
              }
            ],
            "methods": [
              {
                "name": "WebSocketWithReconnect.close",
                "parameters": [
                  {
                    "name": "code",
                    "type": "number",
                    "optional": true
                  },
                  {
                    "name": "reason",
                    "type": "string",
                    "optional": true
                  }
                ],
                "returnType": "void",
                "xaiDescription": "Closes WebSocket connection with optional code and reason."
              },
              {
                "name": "WebSocketWithReconnect.addEventListener",
                "parameters": [
                  {
                    "name": "event",
                    "type": "\"message\"",
                    "optional": false
                  },
                  {
                    "name": "listener",
                    "type": "(event: WebSocketMessageEvent) => void",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "xaiDescription": "Adds listener for WebSocket message event."
              },
              {
                "name": "WebSocketWithReconnect.addEventListener",
                "parameters": [
                  {
                    "name": "event",
                    "type": "\"open\"",
                    "optional": false
                  },
                  {
                    "name": "listener",
                    "type": "() => void",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "xaiDescription": "Adds listener for WebSocket open event."
              },
              {
                "name": "WebSocketWithReconnect.addEventListener",
                "parameters": [
                  {
                    "name": "event",
                    "type": "\"error\"",
                    "optional": false
                  },
                  {
                    "name": "listener",
                    "type": "(event: WebSocketErrorEvent) => void",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "xaiDescription": "Adds listener for WebSocket error event."
              },
              {
                "name": "WebSocketWithReconnect.addEventListener",
                "parameters": [
                  {
                    "name": "event",
                    "type": "\"close\"",
                    "optional": false
                  },
                  {
                    "name": "listener",
                    "type": "(event: WebSocketCloseEvent) => void",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "xaiDescription": "Adds listener for WebSocket close event."
              },
              {
                "name": "WebSocketWithReconnect.removeEventListener",
                "parameters": [
                  {
                    "name": "_event",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "listener",
                    "type": "(event: any) => void",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "xaiDescription": "Removes specified event listener from WebSocket."
              },
              {
                "name": "WebSocketWithReconnect.send",
                "parameters": [
                  {
                    "name": "data",
                    "type": "string | ArrayBufferLike | ArrayBufferView<ArrayBufferLike> | Blob",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "xaiDescription": "Sends data over the WebSocket connection."
              },
              {
                "name": "WebSocketWithReconnect.ping",
                "parameters": [],
                "returnType": "void",
                "xaiDescription": "Sends a ping to maintain WebSocket connection."
              },
              {
                "name": "WebSocketWithReconnect.dispatchEvent",
                "parameters": [
                  {
                    "name": "event",
                    "type": "Event",
                    "optional": false
                  }
                ],
                "returnType": "boolean",
                "xaiDescription": "Dispatches an event on the WebSocket."
              }
            ],
            "properties": [
              {
                "name": "url",
                "type": "string",
                "optional": false
              },
              {
                "name": "retriesInterval",
                "type": "any",
                "optional": false
              },
              {
                "name": "maxRetries",
                "type": "any",
                "optional": false
              },
              {
                "name": "connectTimeout",
                "type": "any",
                "optional": false
              },
              {
                "name": "onError",
                "type": "any",
                "optional": false
              },
              {
                "name": "onReconnect",
                "type": "any",
                "optional": false
              },
              {
                "name": "ws",
                "type": "any",
                "optional": false
              },
              {
                "name": "retries",
                "type": "any",
                "optional": false
              },
              {
                "name": "connectTimeoutHandle",
                "type": "any",
                "optional": false
              },
              {
                "name": "isClosed",
                "type": "any",
                "optional": false
              },
              {
                "name": "sendQueue",
                "type": "any",
                "optional": false
              },
              {
                "name": "lastCloseEvent",
                "type": "any",
                "optional": false
              },
              {
                "name": "emitter",
                "type": "any",
                "optional": false
              },
              {
                "name": "eventSubscriptions",
                "type": "any",
                "optional": false
              },
              {
                "name": "wsBinaryType",
                "type": "any",
                "optional": false
              },
              {
                "name": "connect",
                "type": "any",
                "optional": false
              },
              {
                "name": "handleOpen",
                "type": "any",
                "optional": false
              },
              {
                "name": "handleMessage",
                "type": "any",
                "optional": false
              },
              {
                "name": "handleError",
                "type": "any",
                "optional": false
              },
              {
                "name": "handleClose",
                "type": "any",
                "optional": false
              },
              {
                "name": "handleConnectTimeout",
                "type": "any",
                "optional": false
              },
              {
                "name": "clearConnectTimeoutIfNeeded",
                "type": "any",
                "optional": false
              },
              {
                "name": "reconnectIfNeeded",
                "type": "any",
                "optional": false
              },
              {
                "name": "wsClose",
                "type": "any",
                "optional": false
              },
              {
                "name": "CONNECTING",
                "type": "0",
                "optional": false
              },
              {
                "name": "OPEN",
                "type": "1",
                "optional": false
              },
              {
                "name": "CLOSING",
                "type": "2",
                "optional": false
              },
              {
                "name": "CLOSED",
                "type": "3",
                "optional": false
              }
            ],
            "implements": [
              "WebSocket"
            ],
            "jsdoc": null,
            "isExported": true
          },
          {
            "name": "ExpoFormData",
            "constructors": [
              {
                "parameters": [],
                "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/FormData\").ExpoFormData",
                "xaiDescription": "Constructs a new ExpoFormData instance for form handling."
              }
            ],
            "methods": [
              {
                "name": "ExpoFormData.append",
                "parameters": [
                  {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": null,
                "xaiDescription": "Appends a string value to the specified form data key."
              },
              {
                "name": "ExpoFormData.append",
                "parameters": [
                  {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "value",
                    "type": "Blob",
                    "optional": false
                  },
                  {
                    "name": "filename",
                    "type": "string",
                    "optional": true
                  }
                ],
                "returnType": "void",
                "jsdoc": null,
                "xaiDescription": "Appends a Blob value to the form data key, with optional filename."
              },
              {
                "name": "ExpoFormData.delete",
                "parameters": [
                  {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": null,
                "xaiDescription": "Deletes the value associated with the specified key."
              },
              {
                "name": "ExpoFormData.get",
                "parameters": [
                  {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  }
                ],
                "returnType": "FormDataEntryValue",
                "jsdoc": null,
                "xaiDescription": "Retrieves the first value for the specified key."
              },
              {
                "name": "ExpoFormData.getAll",
                "parameters": [
                  {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  }
                ],
                "returnType": "FormDataEntryValue[]",
                "jsdoc": null,
                "xaiDescription": "Returns an array of all values for the specified key."
              },
              {
                "name": "ExpoFormData.has",
                "parameters": [
                  {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  }
                ],
                "returnType": "boolean",
                "jsdoc": null,
                "xaiDescription": "Checks if the specified key exists in the form data."
              },
              {
                "name": "ExpoFormData.set",
                "parameters": [
                  {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "value",
                    "type": "string",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": null,
                "xaiDescription": "Sets a string value for the specified key, overwriting existing."
              },
              {
                "name": "ExpoFormData.set",
                "parameters": [
                  {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "value",
                    "type": "Blob",
                    "optional": false
                  },
                  {
                    "name": "filename",
                    "type": "string",
                    "optional": true
                  }
                ],
                "returnType": "void",
                "jsdoc": null,
                "xaiDescription": "Sets a Blob value for the key, with optional filename, overwriting."
              },
              {
                "name": "ExpoFormData.append",
                "parameters": [
                  {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "value",
                    "type": "{ uri: string; name?: string; type?: string; }",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": null,
                "xaiDescription": "Appends a URI-based object to the form data key."
              },
              {
                "name": "ExpoFormData.set",
                "parameters": [
                  {
                    "name": "name",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "value",
                    "type": "{ uri: string; name?: string; type?: string; }",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": null,
                "xaiDescription": "Sets a URI-based object for the key, overwriting existing."
              },
              {
                "name": "ExpoFormData.forEach",
                "parameters": [
                  {
                    "name": "callback",
                    "type": "(value: FormDataEntryValue, key: string, iterable: FormData) => void",
                    "optional": false
                  },
                  {
                    "name": "thisArg",
                    "type": "unknown",
                    "optional": true
                  }
                ],
                "returnType": "void",
                "jsdoc": null,
                "xaiDescription": "Executes a callback for each key-value pair in the form data."
              },
              {
                "name": "ExpoFormData.keys",
                "parameters": [],
                "returnType": "IterableIterator<string>",
                "jsdoc": null,
                "xaiDescription": "Returns an iterator over the keys in the form data."
              },
              {
                "name": "ExpoFormData.values",
                "parameters": [],
                "returnType": "IterableIterator<FormDataEntryValue>",
                "jsdoc": null,
                "xaiDescription": "Returns an iterator over the values in the form data."
              },
              {
                "name": "ExpoFormData.entries",
                "parameters": [],
                "returnType": "IterableIterator<[string, FormDataEntryValue]>",
                "jsdoc": null,
                "xaiDescription": "Returns an iterator over the key-value pairs in the form data."
              },
              {
                "name": "ExpoFormData.[Symbol.iterator]",
                "parameters": [],
                "returnType": "IterableIterator<[string, FormDataEntryValue]>",
                "jsdoc": null,
                "xaiDescription": "Provides iteration over key-value pairs using Symbol.iterator."
              }
            ],
            "properties": [
              {
                "name": "_encoding",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal property for encoding configuration."
              },
              {
                "name": "_ignoreBOM",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal flag to ignore BOM in decoding."
              },
              {
                "name": "_errorMode",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal setting for error handling mode."
              },
              {
                "name": "_BOMseen",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal tracker for BOM detection."
              },
              {
                "name": "_doNotFlush",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal flag to prevent flushing."
              },
              {
                "name": "_decoder",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal decoder object."
              },
              {
                "name": "serializeStream",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal method for serializing streams."
              }
            ],
            "implements": [],
            "jsdoc": null,
            "xaiDescription": "Class for managing form data entries in Expo.",
            "isExported": true
          },
          {
            "name": "TextDecoder",
            "constructors": [
              {
                "parameters": [
                  {
                    "name": "label",
                    "type": "string",
                    "optional": true
                  },
                  {
                    "name": "options",
                    "type": "{ fatal?: boolean; ignoreBOM?: boolean; }",
                    "optional": true
                  }
                ],
                "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/TextDecoder\").TextDecoder",
                "xaiDescription": "Constructs a TextDecoder instance with optional label and options."
              }
            ],
            "methods": [
              {
                "name": "TextDecoder.decode",
                "parameters": [
                  {
                    "name": "input",
                    "type": "ArrayBuffer | DataView<ArrayBufferLike>",
                    "optional": true
                  },
                  {
                    "name": "options",
                    "type": "{ stream?: boolean; }",
                    "optional": true
                  }
                ],
                "returnType": "string",
                "jsdoc": null,
                "xaiDescription": "Decodes the input buffer into a string using specified options."
              }
            ],
            "properties": [
              {
                "name": "_encoding",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal property for the encoding used."
              },
              {
                "name": "_ignoreBOM",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal flag for ignoring BOM."
              },
              {
                "name": "_errorMode",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal error handling mode."
              },
              {
                "name": "_BOMseen",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal indicator if BOM was seen."
              },
              {
                "name": "_doNotFlush",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal flag to avoid flushing."
              },
              {
                "name": "_decoder",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal decoder instance."
              },
              {
                "name": "serializeStream",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal serializer for streams."
              }
            ],
            "implements": [],
            "jsdoc": null,
            "xaiDescription": "Class for decoding text from buffers.",
            "isExported": true
          },
          {
            "name": "StubNativeRequest",
            "constructors": [],
            "methods": [],
            "properties": [],
            "implements": [],
            "jsdoc": null,
            "xaiDescription": "Stub class for NativeRequest, used internally.",
            "isExported": false
          },
          {
            "name": "StubNativeResponse",
            "constructors": [],
            "methods": [],
            "properties": [],
            "implements": [],
            "jsdoc": null,
            "xaiDescription": "Stub class for NativeResponse, used internally.",
            "isExported": false
          },
          {
            "name": "FetchError",
            "constructors": [
              {
                "parameters": [
                  {
                    "name": "message",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "{ cause, stack }",
                    "type": "{ cause?: unknown; stack?: string; }",
                    "optional": true
                  }
                ],
                "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/FetchErrors\").FetchError",
                "xaiDescription": "Constructs a FetchError with message and optional cause or stack."
              }
            ],
            "methods": [
              {
                "name": "FetchError.createFromError",
                "parameters": [
                  {
                    "name": "error",
                    "type": "Error",
                    "optional": false
                  }
                ],
                "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/FetchErrors\").FetchError",
                "jsdoc": null,
                "xaiDescription": "Creates a FetchError from an existing Error object."
              }
            ],
            "properties": [],
            "implements": [],
            "jsdoc": null,
            "xaiDescription": "Error class for fetch operations.",
            "isExported": true
          },
          {
            "name": "FetchResponse",
            "constructors": [
              {
                "parameters": [
                  {
                    "name": "abortCleanupFunction",
                    "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/FetchResponse\").AbortSubscriptionCleanupFunction",
                    "optional": false
                  }
                ],
                "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/FetchResponse\").FetchResponse",
                "xaiDescription": "Constructs a FetchResponse with abort cleanup function."
              }
            ],
            "methods": [
              {
                "name": "FetchResponse.blob",
                "parameters": [],
                "returnType": "Promise<Blob>",
                "jsdoc": {
                  "description": "A response implementation for the `fetch.Response` API.",
                  "tags": []
                }
              },
              {
                "name": "FetchResponse.formData",
                "parameters": [],
                "returnType": "Promise<FormData>",
                "jsdoc": {
                  "description": "A response implementation for the `fetch.Response` API.",
                  "tags": []
                }
              },
              {
                "name": "FetchResponse.json",
                "parameters": [],
                "returnType": "Promise<any>",
                "jsdoc": {
                  "description": "A response implementation for the `fetch.Response` API.",
                  "tags": []
                }
              },
              {
                "name": "FetchResponse.toString",
                "parameters": [],
                "returnType": "string",
                "jsdoc": {
                  "description": "A response implementation for the `fetch.Response` API.",
                  "tags": []
                }
              },
              {
                "name": "FetchResponse.toJSON",
                "parameters": [],
                "returnType": "object",
                "jsdoc": {
                  "description": "A response implementation for the `fetch.Response` API.",
                  "tags": []
                }
              },
              {
                "name": "FetchResponse.clone",
                "parameters": [],
                "returnType": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/FetchResponse\").FetchResponse",
                "jsdoc": {
                  "description": "A response implementation for the `fetch.Response` API.",
                  "tags": []
                }
              }
            ],
            "properties": [
              {
                "name": "abortCleanupFunction",
                "type": "any",
                "optional": false,
                "xaiDescription": "Function for cleaning up abort operations."
              },
              {
                "name": "streamingState",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal state for streaming data."
              },
              {
                "name": "bodyStream",
                "type": "any",
                "optional": false,
                "xaiDescription": "Stream for the response body."
              },
              {
                "name": "type",
                "type": "\"default\"",
                "optional": false,
                "xaiDescription": "Type of the response, defaults to 'default'."
              },
              {
                "name": "finalize",
                "type": "any",
                "optional": false,
                "xaiDescription": "Internal finalization method."
              }
            ],
            "extends": "NativeResponse",
            "implements": [
              "Response"
            ],
            "jsdoc": {
              "description": "A response implementation for the `fetch.Response` API.",
              "tags": []
            },
            "isExported": true
          },
          {
            "name": "NativeRequest",
            "constructors": [
              {
                "xaiDescription": "Default constructor for NativeRequest."
              }
            ],
            "methods": [
              {
                "name": "NativeRequest.start",
                "parameters": [
                  {
                    "name": "url",
                    "type": "string",
                    "optional": false
                  },
                  {
                    "name": "requestInit",
                    "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeRequestInit",
                    "optional": false
                  },
                  {
                    "name": "requestBody",
                    "type": "Uint8Array<ArrayBufferLike>",
                    "optional": false
                  }
                ],
                "returnType": "Promise<import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeResponse>",
                "jsdoc": null,
                "xaiDescription": "Starts a native request with URL, init, and body."
              },
              {
                "name": "NativeRequest.cancel",
                "parameters": [],
                "returnType": "void",
                "jsdoc": null,
                "xaiDescription": "Cancels the ongoing native request."
              }
            ],
            "properties": [],
            "extends": "SharedObject",
            "implements": [],
            "jsdoc": null,
            "xaiDescription": "Class for handling native fetch requests.",
            "isExported": true
          },
          {
            "name": "NativeResponse",
            "constructors": [
              {
                "xaiDescription": "Default constructor for NativeResponse."
              }
            ],
            "methods": [
              {
                "name": "NativeResponse.startStreaming",
                "parameters": [],
                "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
                "jsdoc": null,
                "xaiDescription": "Begins streaming the response body."
              },
              {
                "name": "NativeResponse.cancelStreaming",
                "parameters": [
                  {
                    "name": "reason",
                    "type": "string",
                    "optional": false
                  }
                ],
                "returnType": "void",
                "jsdoc": null,
                "xaiDescription": "Cancels streaming with a specified reason."
              },
              {
                "name": "NativeResponse.arrayBuffer",
                "parameters": [],
                "returnType": "Promise<ArrayBuffer>",
                "jsdoc": null,
                "xaiDescription": "Returns the response body as an ArrayBuffer."
              },
              {
                "name": "NativeResponse.text",
                "parameters": [],
                "returnType": "Promise<string>",
                "jsdoc": null,
                "xaiDescription": "Returns the response body as a string."
              }
            ],
            "properties": [
              {
                "name": "bodyUsed",
                "type": "boolean",
                "optional": false,
                "xaiDescription": "Indicates if the response body has been read."
              },
              {
                "name": "_rawHeaders",
                "type": "import(\"/Users/Thy/TypeDefLib/node_modules/expo/build/winter/fetch/NativeRequest\").NativeHeadersType",
                "optional": false,
                "xaiDescription": "Raw headers of the native response."
              },
              {
                "name": "status",
                "type": "number",
                "optional": false,
                "xaiDescription": "HTTP status code of the response."
              },
              {
                "name": "statusText",
                "type": "string",
                "optional": false,
                "xaiDescription": "HTTP status text of the response."
              },
              {
                "name": "url",
                "type": "string",
                "optional": false,
                "xaiDescription": "URL of the response."
              },
              {
                "name": "redirected",
                "type": "boolean",
                "optional": false,
                "xaiDescription": "Indicates if the response was redirected."
              }
            ],
            "extends": "SharedObject",
            "implements": [],
            "jsdoc": null,
            "xaiDescription": "Class for handling native fetch responses.",
            "isExported": true
          }
        ],
        "constants": []
      },
      "jsdoc": null,
      "isExported": true
    }
  ]
}