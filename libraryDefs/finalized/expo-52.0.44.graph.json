{
  "version": "52.0.44",
  "functions": [
    {
      "name": "disableErrorHandling",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Disables error handling for the application."
      }
    },
    {
      "name": "registerRootComponent",
      "parameters": [
        {
          "name": "component",
          "type": "ComponentType<P>",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Registers the root component of the application. Uses ComponentType<P>."
      }
    },
    {
      "name": "isRunningInExpoGo",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Checks if the application is running in Expo Go."
      }
    },
    {
      "name": "getExpoGoProjectConfig",
      "parameters": [],
      "returnType": "ExpoGoProjectConfig",
      "jsdoc": {
        "xaiDescription": "Retrieves the project configuration for Expo Go. Returns ExpoGoProjectConfig."
      }
    },
    {
      "name": "requireNativeModule",
      "parameters": [
        {
          "name": "moduleName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "ModuleType",
      "jsdoc": {
        "xaiDescription": "Requires a native module by name. Returns ModuleType."
      }
    },
    {
      "name": "requireOptionalNativeModule",
      "parameters": [
        {
          "name": "moduleName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "ModuleType",
      "jsdoc": {
        "xaiDescription": "Requires an optional native module by name. Returns ModuleType."
      }
    },
    {
      "name": "requireNativeView",
      "parameters": [
        {
          "name": "viewName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "React.ComponentType<P>",
      "jsdoc": {
        "xaiDescription": "Requires a native view by name. Returns React.ComponentType<P>."
      }
    },
    {
      "name": "registerWebModule",
      "parameters": [
        {
          "name": "moduleImplementation",
          "type": "ModuleType",
          "optional": false
        }
      ],
      "returnType": "ModuleType",
      "jsdoc": {
        "xaiDescription": "Registers a web module implementation. Returns ModuleType."
      }
    },
    {
      "name": "reloadAppAsync",
      "parameters": [
        {
          "name": "reason",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": {
        "xaiDescription": "Reloads the application asynchronously. Optionally provides a reason."
      }
    },
    {
      "name": "useEvent",
      "parameters": [
        {
          "name": "eventEmitter",
          "type": "EventEmitter<TEventsMap>",
          "optional": false
        },
        {
          "name": "eventName",
          "type": "TEventName",
          "optional": false
        },
        {
          "name": "initialValue",
          "type": "TInitialValue",
          "optional": true
        }
      ],
      "returnType": "InferEventParameter<TEventListener, TInitialValue>",
      "jsdoc": {
        "xaiDescription": "Hooks into an event emitter for event handling. Uses EventEmitter<TEventsMap>."
      }
    },
    {
      "name": "useEventListener",
      "parameters": [
        {
          "name": "eventEmitter",
          "type": "EventEmitter<TEventsMap>",
          "optional": false
        },
        {
          "name": "eventName",
          "type": "TEventName",
          "optional": false
        },
        {
          "name": "listener",
          "type": "TEventListener",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Adds an event listener to an event emitter. Uses EventEmitter<TEventsMap>."
      }
    },
    {
      "name": "DevToolsPluginClient.initAsync",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Initialize the connection.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClient.closeAsync",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Close the connection.",
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClient.sendMessage",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "params",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Send a message to the other end of DevTools.",
        "params": [
          {
            "name": "method",
            "description": "A method name."
          },
          {
            "name": "params",
            "description": "any extra payload."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClient.sendMessageLegacy",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "params",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Sends a legacy message to the other end of DevTools."
      }
    },
    {
      "name": "DevToolsPluginClient.addMessageListener",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(params: any) => void",
          "optional": false
        }
      ],
      "returnType": "EventSubscription",
      "jsdoc": {
        "description": "Subscribe to a message from the other end of DevTools.",
        "params": [
          {
            "name": "method",
            "description": "Subscribe to a message with a method name."
          },
          {
            "name": "listener",
            "description": "Listener to be called when a message is received."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClient.addMessageListenerOnce",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(params: any) => void",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Subscribe to a message from the other end of DevTools just once.",
        "params": [
          {
            "name": "method",
            "description": "Subscribe to a message with a method name."
          },
          {
            "name": "listener",
            "description": "Listener to be called when a message is received."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClient.sendHandshakeMessage",
      "parameters": [
        {
          "name": "params",
          "type": "HandshakeMessageParams",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Internal handshake message sender.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClient.addHandskakeMessageListener",
      "parameters": [
        {
          "name": "listener",
          "type": "(params: HandshakeMessageParams) => void",
          "optional": false
        }
      ],
      "returnType": "EventSubscription",
      "jsdoc": {
        "description": "Internal handshake message listener.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClient.isConnected",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns whether the client is connected to the server.",
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClient.connectAsync",
      "parameters": [],
      "returnType": "Promise<WebSocket>",
      "jsdoc": {
        "description": "The method to create the WebSocket connection.",
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClient.getWebSocketBackingStore",
      "parameters": [],
      "returnType": "WebSocketBackingStore",
      "jsdoc": {
        "description": "Get the WebSocket backing store. Exposed for testing.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "createDevToolsPluginClient",
      "parameters": [
        {
          "name": "connectionInfo",
          "type": "ConnectionInfo",
          "optional": false
        },
        {
          "name": "options",
          "type": "DevToolsPluginClientOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<DevToolsPluginClient>",
      "jsdoc": {
        "description": "Factory of DevToolsPluginClient based on sender types.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "getDevToolsPluginClientAsync",
      "parameters": [
        {
          "name": "pluginName",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "DevToolsPluginClientOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<DevToolsPluginClient>",
      "jsdoc": {
        "description": "Public API to get the DevToolsPluginClient instance.",
        "deprecated": false
      }
    },
    {
      "name": "cleanupDevToolsPluginInstances",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "description": "Internal testing API to cleanup all DevToolsPluginClient instances.",
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.initAsync",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Initialize the connection.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.sendMessage",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "params",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Sends a message to the other end of DevTools for the app implementation."
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.closeAsync",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Close the connection.",
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.sendMessageLegacy",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "params",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Sends a legacy message to the other end of DevTools for the app implementation."
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.addMessageListener",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(params: any) => void",
          "optional": false
        }
      ],
      "returnType": "EventSubscription",
      "jsdoc": {
        "description": "Subscribe to a message from the other end of DevTools.",
        "params": [
          {
            "name": "method",
            "description": "Subscribe to a message with a method name."
          },
          {
            "name": "listener",
            "description": "Listener to be called when a message is received."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.addMessageListenerOnce",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(params: any) => void",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Subscribe to a message from the other end of DevTools just once.",
        "params": [
          {
            "name": "method",
            "description": "Subscribe to a message with a method name."
          },
          {
            "name": "listener",
            "description": "Listener to be called when a message is received."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.sendHandshakeMessage",
      "parameters": [
        {
          "name": "params",
          "type": "HandshakeMessageParams",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Internal handshake message sender.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.addHandskakeMessageListener",
      "parameters": [
        {
          "name": "listener",
          "type": "(params: HandshakeMessageParams) => void",
          "optional": false
        }
      ],
      "returnType": "EventSubscription",
      "jsdoc": {
        "description": "Internal handshake message listener.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.isConnected",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns whether the client is connected to the server.",
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.connectAsync",
      "parameters": [],
      "returnType": "Promise<WebSocket>",
      "jsdoc": {
        "description": "The method to create the WebSocket connection.",
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplApp.getWebSocketBackingStore",
      "parameters": [],
      "returnType": "WebSocketBackingStore",
      "jsdoc": {
        "description": "Get the WebSocket backing store. Exposed for testing.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.initAsync",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Initialize the connection.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.closeAsync",
      "parameters": [],
      "returnType": "Promise<void>",
      "jsdoc": {
        "description": "Close the connection.",
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.sendMessage",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "params",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Send a message to the other end of DevTools.",
        "params": [
          {
            "name": "method",
            "description": "A method name."
          },
          {
            "name": "params",
            "description": "any extra payload."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.sendMessageLegacy",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "params",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Sends a legacy message to the other end of DevTools for the browser implementation."
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.addMessageListener",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(params: any) => void",
          "optional": false
        }
      ],
      "returnType": "EventSubscription",
      "jsdoc": {
        "description": "Subscribe to a message from the other end of DevTools.",
        "params": [
          {
            "name": "method",
            "description": "Subscribe to a message with a method name."
          },
          {
            "name": "listener",
            "description": "Listener to be called when a message is received."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.addMessageListenerOnce",
      "parameters": [
        {
          "name": "method",
          "type": "string",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(params: any) => void",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Subscribe to a message from the other end of DevTools just once.",
        "params": [
          {
            "name": "method",
            "description": "Subscribe to a message with a method name."
          },
          {
            "name": "listener",
            "description": "Listener to be called when a message is received."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.sendHandshakeMessage",
      "parameters": [
        {
          "name": "params",
          "type": "HandshakeMessageParams",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Internal handshake message sender.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.addHandskakeMessageListener",
      "parameters": [
        {
          "name": "listener",
          "type": "(params: HandshakeMessageParams) => void",
          "optional": false
        }
      ],
      "returnType": "EventSubscription",
      "jsdoc": {
        "description": "Internal handshake message listener.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.isConnected",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns whether the client is connected to the server.",
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.connectAsync",
      "parameters": [],
      "returnType": "Promise<WebSocket>",
      "jsdoc": {
        "description": "The method to create the WebSocket connection.",
        "deprecated": false
      }
    },
    {
      "name": "DevToolsPluginClientImplBrowser.getWebSocketBackingStore",
      "parameters": [],
      "returnType": "WebSocketBackingStore",
      "jsdoc": {
        "description": "Get the WebSocket backing store. Exposed for testing.",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "MessageFramePacker.pack",
      "parameters": [
        {
          "name": "__0",
          "type": "MessageFrame<T>",
          "optional": false
        },
        {
          "name": "useLegacyTransport",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "string | Uint8Array<ArrayBufferLike> | Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "xaiDescription": "Packs a message frame. Uses MessageFrame<T>."
      }
    },
    {
      "name": "MessageFramePacker.unpack",
      "parameters": [
        {
          "name": "packedData",
          "type": "string | ArrayBuffer",
          "optional": false
        }
      ],
      "returnType": "MessageFrame<T>",
      "jsdoc": {
        "xaiDescription": "Unpacks a message frame. Returns MessageFrame<T>."
      }
    },
    {
      "name": "toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PROTOCOL_VERSION.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PROTOCOL_VERSION.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PROTOCOL_VERSION.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PROTOCOL_VERSION.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PROTOCOL_VERSION.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "PROTOCOL_VERSION.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "WebSocketWithReconnect.close",
      "parameters": [
        {
          "name": "code",
          "type": "number",
          "optional": true
        },
        {
          "name": "reason",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Closes the WebSocket connection with an optional code and reason."
      }
    },
    {
      "name": "WebSocketWithReconnect.addEventListener",
      "parameters": [
        {
          "name": "event",
          "type": "\"message\"",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(event: WebSocketMessageEvent) => void",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Adds an event listener for WebSocket messages."
      }
    },
    {
      "name": "WebSocketWithReconnect.removeEventListener",
      "parameters": [
        {
          "name": "_event",
          "type": "string",
          "optional": false
        },
        {
          "name": "listener",
          "type": "(event: any) => void",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Removes an event listener from the WebSocket."
      }
    },
    {
      "name": "WebSocketWithReconnect.send",
      "parameters": [
        {
          "name": "data",
          "type": "string | ArrayBufferLike | ArrayBufferView<ArrayBufferLike> | Blob",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Sends data over the WebSocket connection."
      }
    },
    {
      "name": "WebSocketWithReconnect.ping",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Sends a ping message to keep the WebSocket connection alive."
      }
    },
    {
      "name": "WebSocketWithReconnect.dispatchEvent",
      "parameters": [
        {
          "name": "event",
          "type": "Event",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "xaiDescription": "Dispatches an event on the WebSocket. Returns a boolean."
      }
    },
    {
      "name": "getConnectionInfo",
      "parameters": [],
      "returnType": "Omit<ConnectionInfo, \"pluginName\">",
      "jsdoc": {
        "xaiDescription": "Retrieves connection info, excluding the plugin name. Returns Omit<ConnectionInfo, \"pluginName\">."
      }
    },
    {
      "name": "useDevToolsPluginClient",
      "parameters": [
        {
          "name": "pluginName",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "DevToolsPluginClientOptions",
          "optional": true
        }
      ],
      "returnType": "DevToolsPluginClient",
      "jsdoc": {
        "description": "A React hook to get the DevToolsPluginClient instance.",
        "deprecated": false
      }
    },
    {
      "name": "setEnableLogging",
      "parameters": [
        {
          "name": "enabled",
          "type": "boolean",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Enables or disables logging based on the provided boolean value."
      }
    },
    {
      "name": "log",
      "parameters": [
        {
          "name": "params",
          "type": "[message?: any, ...optionalParams: any[]]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Logs a message and optional parameters to the console."
      }
    },
    {
      "name": "debug",
      "parameters": [
        {
          "name": "params",
          "type": "[message?: any, ...optionalParams: any[]]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Logs a debug message and optional parameters to the console."
      }
    },
    {
      "name": "info",
      "parameters": [
        {
          "name": "params",
          "type": "[message?: any, ...optionalParams: any[]]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Logs an info message and optional parameters to the console."
      }
    },
    {
      "name": "warn",
      "parameters": [
        {
          "name": "params",
          "type": "[message?: any, ...optionalParams: any[]]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Logs a warning message and optional parameters to the console."
      }
    },
    {
      "name": "getBaseURL",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Get the base URL for the DOM Components HTML",
        "deprecated": false
      }
    },
    {
      "name": "registerDOMComponent",
      "parameters": [
        {
          "name": "AppModule",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Registers a DOM component using the provided AppModule."
      }
    },
    {
      "name": "useDOMImperativeHandle",
      "parameters": [
        {
          "name": "ref",
          "type": "Ref<T>",
          "optional": false
        },
        {
          "name": "init",
          "type": "() => T",
          "optional": false
        },
        {
          "name": "deps",
          "type": "DependencyList",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "A React `useImperativeHandle` like hook for DOM components.",
        "deprecated": false
      }
    },
    {
      "name": "IS_DOM.valueOf",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "_emitGlobalEvent",
      "parameters": [
        {
          "name": "message",
          "type": "BridgeMessage<TData>",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "xaiDescription": "Emits a global event using the provided BridgeMessage<TData>."
      }
    },
    {
      "name": "addGlobalDomEventListener",
      "parameters": [
        {
          "name": "onSubscribe",
          "type": "(message: BridgeMessage<TData>) => void",
          "optional": false
        }
      ],
      "returnType": "() => void",
      "jsdoc": {
        "xaiDescription": "Adds a global DOM event listener. Returns a function to unsubscribe."
      }
    },
    {
      "name": "getInjectBodySizeObserverScript",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Retrieves the script for injecting a body size observer."
      }
    },
    {
      "name": "charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.__@iterator@1656",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "NATIVE_ACTION_RESULT.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns the character at the specified index."
      }
    },
    {
      "name": "DOM_EVENT.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DOM_EVENT.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.__@iterator@6475",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a new string containing the character at the specified index.",
        "xaiDescription": "Returns character at given index in string."
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.compile",
      "parameters": [
        {
          "name": "pattern",
          "type": "string",
          "optional": false
        },
        {
          "name": "flags",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "RegExp",
      "jsdoc": {
        "description": "Compiles a regular expression object.",
        "params": [
          {
            "name": "pattern",
            "description": "The text of the regular expression."
          },
          {
            "name": "flags",
            "description": "If specified, flags can have any combination of the following values: g, i, m, u, y."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.__@match@6458",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with this regular expression, and returns an array containing the results of\nthat search.",
        "params": [
          {
            "name": "string",
            "description": "A string to search within."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.__@replace@6460",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using this regular expression.",
        "params": [
          {
            "name": "string",
            "description": "A String object or string literal whose contents matching against\nthis regular expression will be replaced"
          },
          {
            "name": "replaceValue",
            "description": "A String object or string literal containing the text to replace for every\nsuccessful match of this regular expression."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.__@search@6463",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the position beginning first substring match in a regular expression search\nusing this regular expression.",
        "params": [
          {
            "name": "string",
            "description": "The string to search within."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.__@split@6465",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns an array of substrings that were delimited by strings in the original input that\nmatch against this regular expression.\n\nIf the regular expression contains capturing parentheses, then each time this\nregular expression matches, the results (including any undefined results) of the\ncapturing parentheses are spliced.",
        "params": [
          {
            "name": "string",
            "description": "string value to split"
          },
          {
            "name": "limit",
            "description": "if not undefined, the output array is truncated so that it contains no more\nthan 'limit' elements."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.__@matchAll@6467",
      "parameters": [
        {
          "name": "str",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpMatchArray>",
      "jsdoc": {
        "description": "Matches a string with this regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "string",
            "description": "A string to search within."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "EXPO_DEBUG.valueOf",
      "parameters": [],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "ExpoFormData.set",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "value",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Sets a value for a given name in the form data."
    },
    {
      "name": "ExpoFormData.forEach",
      "parameters": [
        {
          "name": "callback",
          "type": "(value: FormDataEntryValue, key: string, iterable: FormData) => void",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "unknown",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Executes a provided callback function for each key-value pair in the form data."
    },
    {
      "name": "ExpoFormData.keys",
      "parameters": [],
      "returnType": "IterableIterator<string>",
      "jsdoc": null,
      "xaiDescription": "Returns an iterator of the keys in the form data."
    },
    {
      "name": "ExpoFormData.values",
      "parameters": [],
      "returnType": "IterableIterator<FormDataEntryValue>",
      "jsdoc": null,
      "xaiDescription": "Returns an iterator of the values in the form data."
    },
    {
      "name": "ExpoFormData.entries",
      "parameters": [],
      "returnType": "IterableIterator<[string, FormDataEntryValue]>",
      "jsdoc": null,
      "xaiDescription": "Returns an iterator of the key-value pairs in the form data."
    },
    {
      "name": "ExpoFormData.__@iterator@2674",
      "parameters": [],
      "returnType": "IterableIterator<[string, FormDataEntryValue]>",
      "jsdoc": null,
      "xaiDescription": "Returns an iterator of the key-value pairs in the form data."
    },
    {
      "name": "TextDecoder.decode",
      "parameters": [
        {
          "name": "input",
          "type": "ArrayBuffer | DataView<ArrayBufferLike>",
          "optional": true
        },
        {
          "name": "options",
          "type": "{ stream?: boolean; }",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Decodes an ArrayBuffer or DataView into a string."
    },
    {
      "name": "createFromError",
      "parameters": [
        {
          "name": "error",
          "type": "Error",
          "optional": false
        }
      ],
      "returnType": "FetchError",
      "jsdoc": null,
      "xaiDescription": "Creates a FetchError object from a given Error."
    },
    {
      "name": "captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.createFromError",
      "parameters": [
        {
          "name": "error",
          "type": "Error",
          "optional": false
        }
      ],
      "returnType": "FetchError",
      "jsdoc": null,
      "xaiDescription": "Creates a FetchError object from a given Error."
    },
    {
      "name": "FetchError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "FetchError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "FetchError.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "FetchError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "FetchResponse.blob",
      "parameters": [],
      "returnType": "Promise<Blob>",
      "jsdoc": null,
      "xaiDescription": "Returns a promise that resolves with the response body as a Blob."
    },
    {
      "name": "FetchResponse.formData",
      "parameters": [],
      "returnType": "Promise<FormData>",
      "jsdoc": null,
      "xaiDescription": "Returns a promise that resolves with the response body as FormData."
    },
    {
      "name": "FetchResponse.json",
      "parameters": [],
      "returnType": "Promise<any>",
      "jsdoc": null,
      "xaiDescription": "Returns a promise that resolves with the response body parsed as JSON."
    },
    {
      "name": "FetchResponse.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Returns a string representation of the response object."
    },
    {
      "name": "FetchResponse.toJSON",
      "parameters": [],
      "returnType": "object",
      "jsdoc": null,
      "xaiDescription": "Returns a JSON representation of the response object."
    },
    {
      "name": "FetchResponse.clone",
      "parameters": [],
      "returnType": "FetchResponse",
      "jsdoc": null,
      "xaiDescription": "Creates a clone of the FetchResponse object."
    },
    {
      "name": "FetchResponse.startStreaming",
      "parameters": [],
      "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": null,
      "xaiDescription": "Starts streaming the response body as a Uint8Array."
    },
    {
      "name": "FetchResponse.cancelStreaming",
      "parameters": [
        {
          "name": "reason",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Cancels the streaming of the response body with a given reason."
    },
    {
      "name": "FetchResponse.arrayBuffer",
      "parameters": [],
      "returnType": "Promise<ArrayBuffer>",
      "jsdoc": null,
      "xaiDescription": "Returns a promise that resolves with the response body as an ArrayBuffer."
    },
    {
      "name": "FetchResponse.text",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Returns a promise that resolves with the response body as a string."
    },
    {
      "name": "FetchResponse.release",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "description": "A function that detaches the JS and native objects to let the native object deallocate\nbefore the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native\nfunctions of the object will throw an error as it is no longer associated with its native counterpart.\n\nIn most cases, you should never need to use this function, except some specific performance-critical cases when\nmanual memory management makes sense and the native object is known to exclusively retain some native memory\n(such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use\nthis object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase,\nfor example: `useVideoPlayer()` from `expo-video` and `useImage()` from `expo-image`.",
        "deprecated": false
      }
    },
    {
      "name": "FetchResponse.addListener",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        },
        {
          "name": "listener",
          "type": "NativeResponseEvents[EventName]",
          "optional": false
        }
      ],
      "returnType": "EventSubscription",
      "jsdoc": {
        "description": "Adds a listener for the given event name.",
        "deprecated": false
      }
    },
    {
      "name": "FetchResponse.removeListener",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        },
        {
          "name": "listener",
          "type": "NativeResponseEvents[EventName]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Removes a listener for the given event name.",
        "deprecated": false
      }
    },
    {
      "name": "FetchResponse.removeAllListeners",
      "parameters": [
        {
          "name": "eventName",
          "type": "keyof NativeResponseEvents",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Removes all listeners for the given event name.",
        "deprecated": false
      }
    },
    {
      "name": "FetchResponse.emit",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        },
        {
          "name": "args",
          "type": "Parameters<NativeResponseEvents[EventName]>",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Synchronously calls all of the listeners attached to that specific event.\nThe event can include any number of arguments that will be passed to the listeners.",
        "deprecated": false
      }
    },
    {
      "name": "FetchResponse.listenerCount",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a number of listeners added to the given event.",
        "deprecated": false
      }
    },
    {
      "name": "FetchResponse.startObserving",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Function that is automatically invoked when the first listener for an event with the given name is added.\nOverride it in a subclass to perform some additional setup once the event started being observed.",
        "deprecated": false
      }
    },
    {
      "name": "FetchResponse.stopObserving",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Function that is automatically invoked when the last listener for an event with the given name is removed.\nOverride it in a subclass to perform some additional cleanup once the event is no longer observed.",
        "deprecated": false
      }
    },
    {
      "name": "NativeRequest.start",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "requestInit",
          "type": "NativeRequestInit",
          "optional": false
        },
        {
          "name": "requestBody",
          "type": "Uint8Array<ArrayBufferLike>",
          "optional": false
        }
      ],
      "returnType": "Promise<NativeResponse>",
      "jsdoc": null,
      "xaiDescription": "Starts a native request with the given URL, initialization options, and request body."
    },
    {
      "name": "NativeRequest.cancel",
      "parameters": [],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Cancels the ongoing native request."
    },
    {
      "name": "NativeRequest.release",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "description": "A function that detaches the JS and native objects to let the native object deallocate\nbefore the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native\nfunctions of the object will throw an error as it is no longer associated with its native counterpart.\n\nIn most cases, you should never need to use this function, except some specific performance-critical cases when\nmanual memory management makes sense and the native object is known to exclusively retain some native memory\n(such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use\nthis object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase,\nfor example: `useVideoPlayer()` from `expo-video` and `useImage()` from `expo-image`.",
        "deprecated": false
      }
    },
    {
      "name": "NativeRequest.addListener",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        },
        {
          "name": "listener",
          "type": "Record<never, never>[EventName]",
          "optional": false
        }
      ],
      "returnType": "EventSubscription",
      "jsdoc": {
        "description": "Adds a listener for the given event name.",
        "deprecated": false
      }
    },
    {
      "name": "NativeRequest.removeListener",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        },
        {
          "name": "listener",
          "type": "Record<never, never>[EventName]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Removes a listener for the given event name.",
        "deprecated": false
      }
    },
    {
      "name": "NativeRequest.removeAllListeners",
      "parameters": [
        {
          "name": "eventName",
          "type": "never",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Removes all listeners for the given event name.",
        "deprecated": false
      }
    },
    {
      "name": "NativeRequest.emit",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        },
        {
          "name": "args",
          "type": "Parameters<Record<never, never>[EventName]>",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Synchronously calls all of the listeners attached to that specific event.\nThe event can include any number of arguments that will be passed to the listeners.",
        "deprecated": false
      }
    },
    {
      "name": "NativeRequest.listenerCount",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a number of listeners added to the given event.",
        "deprecated": false
      }
    },
    {
      "name": "NativeRequest.startObserving",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Function that is automatically invoked when the first listener for an event with the given name is added.\nOverride it in a subclass to perform some additional setup once the event started being observed.",
        "deprecated": false
      }
    },
    {
      "name": "NativeRequest.stopObserving",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Function that is automatically invoked when the last listener for an event with the given name is removed.\nOverride it in a subclass to perform some additional cleanup once the event is no longer observed.",
        "deprecated": false
      }
    },
    {
      "name": "NativeResponse.startStreaming",
      "parameters": [],
      "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": null,
      "xaiDescription": "Starts streaming the native response body as a Uint8Array."
    },
    {
      "name": "NativeResponse.cancelStreaming",
      "parameters": [
        {
          "name": "reason",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Cancels the streaming of the native response body with a given reason."
    },
    {
      "name": "NativeResponse.arrayBuffer",
      "parameters": [],
      "returnType": "Promise<ArrayBuffer>",
      "jsdoc": null,
      "xaiDescription": "Returns a promise that resolves with the native response body as an ArrayBuffer."
    },
    {
      "name": "NativeResponse.text",
      "parameters": [],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Returns a promise that resolves with the native response body as a string."
    },
    {
      "name": "NativeResponse.release",
      "parameters": [],
      "returnType": "void",
      "jsdoc": {
        "description": "A function that detaches the JS and native objects to let the native object deallocate\nbefore the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native\nfunctions of the object will throw an error as it is no longer associated with its native counterpart.\n\nIn most cases, you should never need to use this function, except some specific performance-critical cases when\nmanual memory management makes sense and the native object is known to exclusively retain some native memory\n(such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use\nthis object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase,\nfor example: `useVideoPlayer()` from `expo-video` and `useImage()` from `expo-image`.",
        "deprecated": false
      }
    },
    {
      "name": "NativeResponse.addListener",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        },
        {
          "name": "listener",
          "type": "NativeResponseEvents[EventName]",
          "optional": false
        }
      ],
      "returnType": "EventSubscription",
      "jsdoc": {
        "description": "Adds a listener for the given event name.",
        "deprecated": false
      }
    },
    {
      "name": "NativeResponse.removeListener",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        },
        {
          "name": "listener",
          "type": "NativeResponseEvents[EventName]",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Removes a listener for the given event name.",
        "deprecated": false
      }
    },
    {
      "name": "NativeResponse.removeAllListeners",
      "parameters": [
        {
          "name": "eventName",
          "type": "keyof NativeResponseEvents",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Removes all listeners for the given event name.",
        "deprecated": false
      }
    },
    {
      "name": "NativeResponse.emit",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        },
        {
          "name": "args",
          "type": "Parameters<NativeResponseEvents[EventName]>",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Synchronously calls all of the listeners attached to that specific event.\nThe event can include any number of arguments that will be passed to the listeners.",
        "deprecated": false
      }
    },
    {
      "name": "NativeResponse.listenerCount",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a number of listeners added to the given event.",
        "deprecated": false
      }
    },
    {
      "name": "NativeResponse.startObserving",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Function that is automatically invoked when the first listener for an event with the given name is added.\nOverride it in a subclass to perform some additional setup once the event started being observed.",
        "deprecated": false
      }
    },
    {
      "name": "NativeResponse.stopObserving",
      "parameters": [
        {
          "name": "eventName",
          "type": "EventName",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Function that is automatically invoked when the last listener for an event with the given name is removed.\nOverride it in a subclass to perform some additional cleanup once the event is no longer observed.",
        "deprecated": false
      }
    },
    {
      "name": "convertReadableStreamToUint8ArrayAsync",
      "parameters": [
        {
          "name": "stream",
          "type": "ReadableStream<Uint8Array<ArrayBufferLike>>",
          "optional": false
        }
      ],
      "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
      "jsdoc": {
        "description": "convert a ReadableStream to a Uint8Array",
        "deprecated": false
      }
    },
    {
      "name": "normalizeBodyInitAsync",
      "parameters": [
        {
          "name": "body",
          "type": "BodyInit",
          "optional": false
        }
      ],
      "returnType": "Promise<{ body: Uint8Array<ArrayBufferLike>; overriddenHeaders?: NativeHeadersType; }>",
      "jsdoc": {
        "description": "Normalize a BodyInit object to a Uint8Array for NativeRequest",
        "deprecated": false
      }
    },
    {
      "name": "normalizeHeadersInit",
      "parameters": [
        {
          "name": "headers",
          "type": "HeadersInit",
          "optional": false
        }
      ],
      "returnType": "NativeHeadersType",
      "jsdoc": {
        "description": "Normalize a HeadersInit object to an array of key-value tuple for NativeRequest.",
        "deprecated": false
      }
    },
    {
      "name": "overrideHeaders",
      "parameters": [
        {
          "name": "headers",
          "type": "NativeHeadersType",
          "optional": false
        },
        {
          "name": "newHeaders",
          "type": "NativeHeadersType",
          "optional": false
        }
      ],
      "returnType": "NativeHeadersType",
      "jsdoc": {
        "description": "Create a new header array by overriding the existing headers with new headers (by header key).",
        "deprecated": false
      }
    },
    {
      "name": "convertFormDataAsync",
      "parameters": [
        {
          "name": "formData",
          "type": "FormData",
          "optional": false
        },
        {
          "name": "boundary",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Promise<{ body: Uint8Array<ArrayBufferLike>; boundary: string; }>",
      "jsdoc": {
        "description": "Convert FormData to Uint8Array with a boundary\n\n`uri` is not supported for React Native's FormData.\n`blob` is not supported for standard FormData.",
        "deprecated": false
      }
    },
    {
      "name": "createBoundary",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Create mutipart boundary",
        "deprecated": false
      }
    },
    {
      "name": "joinUint8Arrays",
      "parameters": [
        {
          "name": "arrays",
          "type": "Uint8Array<ArrayBufferLike>[]",
          "optional": false
        }
      ],
      "returnType": "Uint8Array<ArrayBufferLike>",
      "jsdoc": {
        "description": "Merge Uint8Arrays into a single Uint8Array",
        "deprecated": false
      }
    },
    {
      "name": "fetch",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "init",
          "type": "FetchRequestInit",
          "optional": true
        }
      ],
      "returnType": "Promise<FetchResponse>",
      "jsdoc": null,
      "xaiDescription": "Fetches a resource from the specified URL, returning a promise with the response."
    },
    {
      "name": "getExpoUpdatesPackageVersion",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the version of the Expo Updates package from the project root."
    },
    {
      "name": "getUpdateUrl",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the update URL from the given configuration."
    },
    {
      "name": "getAppVersion",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"version\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the app version from the given configuration."
    },
    {
      "name": "getNativeVersion",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"version\"> & { android?: Pick<Android, \"versionCode\">; ios?: Pick<IOS, \"buildNumber\">; }",
          "optional": false
        },
        {
          "name": "platform",
          "type": "\"android\" | \"ios\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the native version from the given configuration for the specified platform."
    },
    {
      "name": "getRuntimeVersionNullableAsync",
      "parameters": [
        {
          "name": "__0",
          "type": "[projectRoot: string, config: Pick<ExpoConfig, \"sdkVersion\" | \"runtimeVersion\" | \"version\"> & { android?: Pick<Android, \"runtimeVersion\" | \"versionCode\">; ios?: Pick<...>; }, platform: \"android\" | \"ios\"]",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Retrieves the nullable runtime version asynchronously based on the given parameters."
    },
    {
      "name": "getRuntimeVersionAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"sdkVersion\" | \"runtimeVersion\" | \"version\"> & { android?: Pick<Android, \"runtimeVersion\" | \"versionCode\">; ios?: Pick<IOS, \"runtimeVersion\" | \"buildNumber\">; }",
          "optional": false
        },
        {
          "name": "platform",
          "type": "\"android\" | \"ios\"",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Retrieves the runtime version asynchronously based on the given parameters."
    },
    {
      "name": "resolveRuntimeVersionPolicyAsync",
      "parameters": [
        {
          "name": "policy",
          "type": "\"sdkVersion\" | \"appVersion\" | \"nativeVersion\"",
          "optional": false
        },
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"sdkVersion\" | \"version\"> & { android?: Pick<Android, \"versionCode\">; ios?: Pick<IOS, \"buildNumber\">; }",
          "optional": false
        },
        {
          "name": "platform",
          "type": "\"android\" | \"ios\"",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Resolves the runtime version policy asynchronously based on the given parameters."
    },
    {
      "name": "getSDKVersion",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"sdkVersion\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the SDK version from the given configuration."
    },
    {
      "name": "getUpdatesEnabled",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if updates are enabled in the given configuration."
    },
    {
      "name": "getUpdatesUseEmbeddedUpdate",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if embedded updates should be used in the given configuration."
    },
    {
      "name": "getUpdatesTimeout",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Retrieves the timeout value for updates from the given configuration."
    },
    {
      "name": "getUpdatesCheckOnLaunch",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        },
        {
          "name": "expoUpdatesPackageVersion",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "\"NEVER\" | \"ERROR_RECOVERY_ONLY\" | \"ALWAYS\" | \"WIFI_ONLY\"",
      "jsdoc": null,
      "xaiDescription": "Determines when updates should be checked on launch based on the given configuration and package version."
    },
    {
      "name": "getUpdatesCodeSigningCertificate",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the code signing certificate for updates from the given project root and configuration."
    },
    {
      "name": "getUpdatesCodeSigningMetadata",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "{ alg?: \"rsa-v1_5-sha256\"; keyid?: string; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves the code signing metadata for updates from the given configuration."
    },
    {
      "name": "getUpdatesCodeSigningMetadataStringified",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the stringified code signing metadata for updates from the given configuration."
    },
    {
      "name": "getUpdatesRequestHeaders",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "{ [k: string]: any; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves the request headers for updates from the given configuration."
    },
    {
      "name": "getUpdatesRequestHeadersStringified",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the stringified request headers for updates from the given configuration."
    },
    {
      "name": "getDisableAntiBrickingMeasures",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if anti-bricking measures should be disabled in the given configuration."
    },
    {
      "name": "Updates.getExpoUpdatesPackageVersion",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the version of the Expo Updates package from the project root."
    },
    {
      "name": "Updates.getUpdateUrl",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the update URL from the given configuration."
    },
    {
      "name": "Updates.getAppVersion",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"version\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the app version from the given configuration."
    },
    {
      "name": "Updates.getNativeVersion",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"version\"> & { android?: Pick<Android, \"versionCode\">; ios?: Pick<IOS, \"buildNumber\">; }",
          "optional": false
        },
        {
          "name": "platform",
          "type": "\"android\" | \"ios\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the native version from the given configuration for the specified platform."
    },
    {
      "name": "Updates.getRuntimeVersionNullableAsync",
      "parameters": [
        {
          "name": "__0",
          "type": "[projectRoot: string, config: Pick<ExpoConfig, \"sdkVersion\" | \"runtimeVersion\" | \"version\"> & { android?: Pick<Android, \"runtimeVersion\" | \"versionCode\">; ios?: Pick<...>; }, platform: \"android\" | \"ios\"]",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Retrieves the nullable runtime version asynchronously based on the given parameters."
    },
    {
      "name": "Updates.getRuntimeVersionAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"sdkVersion\" | \"runtimeVersion\" | \"version\"> & { android?: Pick<Android, \"runtimeVersion\" | \"versionCode\">; ios?: Pick<IOS, \"runtimeVersion\" | \"buildNumber\">; }",
          "optional": false
        },
        {
          "name": "platform",
          "type": "\"android\" | \"ios\"",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Retrieves the runtime version asynchronously based on the given parameters."
    },
    {
      "name": "Updates.resolveRuntimeVersionPolicyAsync",
      "parameters": [
        {
          "name": "policy",
          "type": "\"sdkVersion\" | \"appVersion\" | \"nativeVersion\"",
          "optional": false
        },
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"sdkVersion\" | \"version\"> & { android?: Pick<Android, \"versionCode\">; ios?: Pick<IOS, \"buildNumber\">; }",
          "optional": false
        },
        {
          "name": "platform",
          "type": "\"android\" | \"ios\"",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Resolves the runtime version policy asynchronously based on the given parameters."
    },
    {
      "name": "Updates.getSDKVersion",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"sdkVersion\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the SDK version from the given configuration."
    },
    {
      "name": "Updates.getUpdatesEnabled",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if updates are enabled in the given configuration."
    },
    {
      "name": "Updates.getUpdatesUseEmbeddedUpdate",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if embedded updates should be used in the given configuration."
    },
    {
      "name": "Updates.getUpdatesTimeout",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Retrieves the timeout value for updates from the given configuration."
    },
    {
      "name": "Updates.getUpdatesCheckOnLaunch",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        },
        {
          "name": "expoUpdatesPackageVersion",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "\"NEVER\" | \"ERROR_RECOVERY_ONLY\" | \"ALWAYS\" | \"WIFI_ONLY\"",
      "jsdoc": null,
      "xaiDescription": "Determines when updates should be checked on launch based on the given configuration and package version."
    },
    {
      "name": "Updates.getUpdatesCodeSigningCertificate",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the code signing certificate for updates from the given project root and configuration."
    },
    {
      "name": "Updates.getUpdatesCodeSigningMetadata",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "{ alg?: \"rsa-v1_5-sha256\"; keyid?: string; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves code signing metadata for updates."
    },
    {
      "name": "Updates.getUpdatesCodeSigningMetadataStringified",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves stringified code signing metadata for updates."
    },
    {
      "name": "Updates.getUpdatesRequestHeaders",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "{ [k: string]: any; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves request headers for updates."
    },
    {
      "name": "Updates.getUpdatesRequestHeadersStringified",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves stringified request headers for updates."
    },
    {
      "name": "Updates.getDisableAntiBrickingMeasures",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"updates\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if anti-bricking measures are disabled for updates."
    },
    {
      "name": "Updates.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "Updates.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "Updates.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "Updates.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "Updates.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "Updates.__@iterator@3879",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "Updates.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the character at the specified index."
    },
    {
      "name": "IOSConfig.setAssociatedDomains",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "__1",
          "type": "JSONObject",
          "optional": false
        }
      ],
      "returnType": "JSONObject",
      "jsdoc": null,
      "xaiDescription": "Sets associated domains in the Expo config."
    },
    {
      "name": "IOSConfig.getEntitlementsPath",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ targetName?: string; buildConfiguration?: string; }",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the path to the entitlements file."
    },
    {
      "name": "IOSConfig.ensureApplicationTargetEntitlementsFileConfigured",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Ensures the application target entitlements file is configured."
    },
    {
      "name": "IOSConfig.withAssociatedDomains",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies the Expo config with associated domains."
    },
    {
      "name": "IOSConfig.getAppDelegateHeaderFilePath",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the path to the AppDelegate header file."
    },
    {
      "name": "IOSConfig.getAppDelegateFilePath",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the path to the AppDelegate file."
    },
    {
      "name": "IOSConfig.getAppDelegateObjcHeaderFilePath",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the path to the AppDelegate Objective-C header file."
    },
    {
      "name": "IOSConfig.getPodfilePath",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the path to the Podfile."
    },
    {
      "name": "IOSConfig.getFileInfo",
      "parameters": [
        {
          "name": "filePath",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "{ path: string; contents: string; language: AppleLanguage; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves file info including path, contents, and language."
    },
    {
      "name": "IOSConfig.getAppDelegate",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "AppDelegateProjectFile",
      "jsdoc": null,
      "xaiDescription": "Retrieves the AppDelegate project file."
    },
    {
      "name": "IOSConfig.getSourceRoot",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the source root path."
    },
    {
      "name": "IOSConfig.findSchemePaths",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": null,
      "xaiDescription": "Finds paths to schemes in the project."
    },
    {
      "name": "IOSConfig.findSchemeNames",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": null,
      "xaiDescription": "Finds names of schemes in the project."
    },
    {
      "name": "IOSConfig.getAllXcodeProjectPaths",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves paths to all Xcode projects."
    },
    {
      "name": "IOSConfig.getXcodeProjectPath",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Get the pbxproj for the given path",
        "deprecated": false
      }
    },
    {
      "name": "IOSConfig.getAllPBXProjectPaths",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves paths to all PBX projects."
    },
    {
      "name": "IOSConfig.getPBXProjectPath",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the path to the PBX project."
    },
    {
      "name": "IOSConfig.getAllInfoPlistPaths",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves paths to all Info.plist files."
    },
    {
      "name": "IOSConfig.getInfoPlistPath",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the path to the Info.plist file."
    },
    {
      "name": "IOSConfig.getAllEntitlementsPaths",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves paths to all entitlements files."
    },
    {
      "name": "IOSConfig.getSupportingPath",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the path to the supporting files."
    },
    {
      "name": "IOSConfig.getExpoPlistPath",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the path to the Expo.plist file."
    },
    {
      "name": "IOSConfig.applyPermissions",
      "parameters": [
        {
          "name": "defaults",
          "type": "Defaults",
          "optional": false
        },
        {
          "name": "permissions",
          "type": "Partial<Record<keyof Defaults, string | false>>",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Applies permissions to the Info.plist file."
    },
    {
      "name": "IOSConfig.createPermissionsPlugin",
      "parameters": [
        {
          "name": "defaults",
          "type": "Defaults",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "ConfigPlugin<Record<keyof Defaults, string | false>>",
      "jsdoc": {
        "description": "Helper method for creating mods to apply default permissions.",
        "params": [
          {
            "name": "action"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "IOSConfig.getProjectName",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the name of the project."
    },
    {
      "name": "IOSConfig.resolvePathOrProject",
      "parameters": [
        {
          "name": "projectRootOrProject",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": null,
      "xaiDescription": "Resolves the project root or project object."
    },
    {
      "name": "IOSConfig.sanitizedName",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Sanitizes the given name for use in iOS."
    },
    {
      "name": "IOSConfig.getHackyProjectName",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the project name using a hacky method."
    },
    {
      "name": "IOSConfig.addResourceFileToGroup",
      "parameters": [
        {
          "name": "__0",
          "type": "{ filepath: string; groupName: string; isBuildFile?: boolean; project: XcodeProject; verbose?: boolean; targetUuid?: string; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": {
        "description": "Add a resource file (ex: `SplashScreen.storyboard`, `Images.xcassets`) to an Xcode project.\nThis is akin to creating a new code file in Xcode with `⌘+n`.",
        "deprecated": false
      }
    },
    {
      "name": "IOSConfig.addBuildSourceFileToGroup",
      "parameters": [
        {
          "name": "__0",
          "type": "{ filepath: string; groupName: string; project: XcodeProject; verbose?: boolean; targetUuid?: string; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": {
        "description": "Add a build source file (ex: `AppDelegate.m`, `ViewController.swift`) to an Xcode project.\nThis is akin to creating a new code file in Xcode with `⌘+n`.",
        "deprecated": false
      }
    },
    {
      "name": "IOSConfig.addFileToGroupAndLink",
      "parameters": [
        {
          "name": "__0",
          "type": "{ filepath: string; groupName: string; project: XcodeProject; verbose?: boolean; targetUuid?: string; addFileToProject: (props: { file: PBXFile; project: XcodeProject; }) => void; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": null,
      "xaiDescription": "Adds a file to a group and links it to the project."
    },
    {
      "name": "IOSConfig.getApplicationNativeTarget",
      "parameters": [
        {
          "name": "__0",
          "type": "{ project: XcodeProject; projectName: string; }",
          "optional": false
        }
      ],
      "returnType": "{ uuid: string; target: xcode.PBXNativeTarget; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves the application native target."
    },
    {
      "name": "IOSConfig.addFramework",
      "parameters": [
        {
          "name": "__0",
          "type": "{ project: XcodeProject; projectName: string; framework: string; }",
          "optional": false
        }
      ],
      "returnType": "unknown",
      "jsdoc": {
        "description": "Add a framework to the default app native target.",
        "params": [
          {
            "name": "projectName",
            "description": "Name of the PBX project."
          },
          {
            "name": "framework",
            "description": "String ending in `.framework`, i.e. `StoreKit.framework`"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "IOSConfig.ensureGroupRecursively",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        },
        {
          "name": "filepath",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": null,
      "xaiDescription": "Ensures a group exists recursively in the project."
    },
    {
      "name": "IOSConfig.getPbxproj",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": {
        "description": "Get the pbxproj for the given path",
        "deprecated": false
      }
    },
    {
      "name": "IOSConfig.getProductName",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.",
        "params": [
          {
            "name": "project"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "IOSConfig.getProjectSection",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        }
      ],
      "returnType": "Record<string, xcode.PBXProject> & Record<string, string>",
      "jsdoc": null,
      "xaiDescription": "Retrieves the project section from the Xcode project."
    },
    {
      "name": "IOSConfig.getXCConfigurationListEntries",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        }
      ],
      "returnType": "ConfigurationListEntry[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves XC configuration list entries."
    },
    {
      "name": "IOSConfig.getBuildConfigurationsForListId",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        },
        {
          "name": "configurationListId",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "ConfigurationSectionEntry[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves build configurations for a given list ID."
    },
    {
      "name": "IOSConfig.getBuildConfigurationForListIdAndName",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ configurationListId: string; buildConfiguration: string; }",
          "optional": false
        }
      ],
      "returnType": "ConfigurationSectionEntry",
      "jsdoc": null,
      "xaiDescription": "Retrieves a build configuration for a given list ID and name."
    },
    {
      "name": "IOSConfig.isBuildConfig",
      "parameters": [
        {
          "name": "__0",
          "type": "ConfigurationSectionEntry",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if the entry is a build configuration."
    },
    {
      "name": "IOSConfig.isNotTestHost",
      "parameters": [
        {
          "name": "__0",
          "type": "ConfigurationSectionEntry",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if the entry is not a test host."
    },
    {
      "name": "IOSConfig.isNotComment",
      "parameters": [
        {
          "name": "__0",
          "type": "ConfigurationListEntry | ConfigurationSectionEntry | ProjectSectionEntry | NativeTargetSectionEntry",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if the entry is not a comment."
    },
    {
      "name": "IOSConfig.unquote",
      "parameters": [
        {
          "name": "value",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Removes quotes from the given value."
    },
    {
      "name": "IOSConfig.resolveXcodeBuildSetting",
      "parameters": [
        {
          "name": "value",
          "type": "string",
          "optional": false
        },
        {
          "name": "lookup",
          "type": "(buildSetting: string) => string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Resolves an Xcode build setting using a lookup function."
    },
    {
      "name": "IOSConfig.getBitcode",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        }
      ],
      "returnType": "string | boolean",
      "jsdoc": {
        "description": "Get the bitcode preference from the Expo config.",
        "deprecated": false
      },
      "xaiDescription": "Retrieves bitcode setting from Expo config."
    },
    {
      "name": "IOSConfig.setBitcodeWithConfig",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ project: XcodeProject; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": {
        "description": "Enable or disable the `ENABLE_BITCODE` property of the project configurations.",
        "deprecated": false
      },
      "xaiDescription": "Sets ENABLE_BITCODE in Xcode project."
    },
    {
      "name": "IOSConfig.setBitcode",
      "parameters": [
        {
          "name": "bitcode",
          "type": "string | boolean",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ project: XcodeProject; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": {
        "description": "Enable or disable the `ENABLE_BITCODE` property.",
        "deprecated": false
      },
      "xaiDescription": "Enables/disables ENABLE_BITCODE in Xcode project."
    },
    {
      "name": "IOSConfig.withBitcode",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures bitcode settings in Expo config."
    },
    {
      "name": "IOSConfig.withCustomBitcode",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "string | boolean",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Sets custom bitcode in Expo config."
    },
    {
      "name": "IOSConfig.withBundleIdentifier",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "{ bundleIdentifier?: string; }",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Updates bundle identifier in Expo config."
    },
    {
      "name": "IOSConfig.getBundleIdentifier",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves bundle identifier from Expo config."
    },
    {
      "name": "IOSConfig.setBundleIdentifier",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Sets bundle identifier in InfoPlist."
    },
    {
      "name": "IOSConfig.getBundleIdentifierFromPbxproj",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ targetName?: string; buildConfiguration?: string; }",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Extracts bundle identifier from pbxproj file."
    },
    {
      "name": "IOSConfig.updateBundleIdentifierForPbxproj",
      "parameters": [
        {
          "name": "pbxprojPath",
          "type": "string",
          "optional": false
        },
        {
          "name": "bundleIdentifier",
          "type": "string",
          "optional": false
        },
        {
          "name": "updateProductName",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Updates bundle identifier in pbxproj file."
    },
    {
      "name": "IOSConfig.setBundleIdentifierForPbxproj",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "bundleIdentifier",
          "type": "string",
          "optional": false
        },
        {
          "name": "updateProductName",
          "type": "boolean",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Sets bundle identifier in pbxproj file."
    },
    {
      "name": "IOSConfig.resetAllPlistBundleIdentifiers",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Resets all plist bundle identifiers."
    },
    {
      "name": "IOSConfig.resetPlistBundleIdentifier",
      "parameters": [
        {
          "name": "plistPath",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Resets bundle identifier in plist file."
    },
    {
      "name": "IOSConfig.createBuildPodfilePropsConfigPlugin",
      "parameters": [
        {
          "name": "configToPropertyRules",
          "type": "ConfigToPropertyRuleType<SourceConfigType>[]",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "ConfigPlugin<SourceConfigType extends ExpoConfig ? void : SourceConfigType>",
      "jsdoc": {
        "description": "Creates a `withPodfileProperties` config-plugin based on given config to property mapping rules.\n\nThe factory supports two modes from generic type inference\nts\n// config-plugin without `props`, it will implicitly use the expo config as source config.\ncreateBuildPodfilePropsConfigPlugin<ExpoConfig>(): ConfigPlugin<void>;\n\n// config-plugin with a parameter `props: CustomType`, it will use the `props` as source config.\ncreateBuildPodfilePropsConfigPlugin<CustomType>(): ConfigPlugin<CustomType>;\n",
        "params": [
          {
            "name": "configToPropertyRules",
            "description": "config to property mapping rules"
          },
          {
            "name": "name",
            "description": "the config plugin name"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Creates a Podfile properties config plugin."
    },
    {
      "name": "IOSConfig.updateIosBuildPropertiesFromConfig",
      "parameters": [
        {
          "name": "config",
          "type": "SourceConfigType",
          "optional": false
        },
        {
          "name": "podfileProperties",
          "type": "Record<string, string>",
          "optional": false
        },
        {
          "name": "configToPropertyRules",
          "type": "ConfigToPropertyRuleType<SourceConfigType>[]",
          "optional": false
        }
      ],
      "returnType": "Record<string, string>",
      "jsdoc": null,
      "xaiDescription": "Updates iOS build properties from config."
    },
    {
      "name": "IOSConfig.updateIosBuildProperty",
      "parameters": [
        {
          "name": "podfileProperties",
          "type": "Record<string, string>",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "value",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "{ removePropWhenValueIsNull?: boolean; }",
          "optional": true
        }
      ],
      "returnType": "Record<string, string>",
      "jsdoc": null,
      "xaiDescription": "Updates a specific iOS build property."
    },
    {
      "name": "IOSConfig.withJsEnginePodfileProps",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures JS engine properties in Podfile."
    },
    {
      "name": "IOSConfig.withNewArchEnabledPodfileProps",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures new architecture in Podfile."
    },
    {
      "name": "IOSConfig.getSchemesFromXcodeproj",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves schemes from Xcode project."
    },
    {
      "name": "IOSConfig.getRunnableSchemesFromXcodeproj",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ configuration?: \"Debug\" | \"Release\"; }",
          "optional": true
        }
      ],
      "returnType": "{ name: string; osType: string; type: string; }[]",
      "jsdoc": null,
      "xaiDescription": "Gets runnable schemes from Xcode project."
    },
    {
      "name": "IOSConfig.getApplicationTargetNameForSchemeAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "scheme",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Retrieves application target name for scheme."
    },
    {
      "name": "IOSConfig.getArchiveBuildConfigurationForSchemeAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "scheme",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Gets archive build configuration for scheme."
    },
    {
      "name": "IOSConfig.getDevelopmentTeam",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Get the Apple development team ID from Expo config, if defined",
        "deprecated": false
      },
      "xaiDescription": "Retrieves Apple development team ID."
    },
    {
      "name": "IOSConfig.setDevelopmentTeamForBuildConfiguration",
      "parameters": [
        {
          "name": "xcBuildConfiguration",
          "type": "XCBuildConfiguration",
          "optional": false
        },
        {
          "name": "developmentTeam",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Set the Apple development team ID for an XCBuildConfiguration object",
        "deprecated": false
      },
      "xaiDescription": "Sets Apple development team ID for XCBuildConfiguration."
    },
    {
      "name": "IOSConfig.updateDevelopmentTeamForPbxproj",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        },
        {
          "name": "appleTeamId",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": {
        "description": "Update the Apple development team ID for all XCBuildConfiguration entries, in all native targets.\n\nA development team is stored as a value in XCBuildConfiguration entry.\nThose entries exist for every pair (build target, build configuration).\nUnless target name is passed, the first target defined in the pbxproj is used\n(to keep compatibility with the inaccurate legacy implementation of this function).",
        "deprecated": false
      },
      "xaiDescription": "Updates Apple development team ID in pbxproj."
    },
    {
      "name": "IOSConfig.setDevelopmentTeamForPbxproj",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "appleTeamId",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Updates the Apple development team ID for pbx projects inside the ios directory of the given project root",
        "params": [
          {
            "name": "projectRoot",
            "description": "Path to project root containing the ios directory"
          },
          {
            "name": "appleTeamId",
            "description": "Desired Apple development team ID"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Sets Apple development team ID in pbxproj."
    },
    {
      "name": "IOSConfig.withDevelopmentTeam",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void | { appleTeamId?: string; }",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures development team in Expo config."
    },
    {
      "name": "IOSConfig.getSupportsTablet",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if app supports tablet."
    },
    {
      "name": "IOSConfig.getIsTabletOnly",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if app is tablet-only."
    },
    {
      "name": "IOSConfig.getDeviceFamilies",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        }
      ],
      "returnType": "number[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves supported device families."
    },
    {
      "name": "IOSConfig.formatDeviceFamilies",
      "parameters": [
        {
          "name": "deviceFamilies",
          "type": "number[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Wrapping the families in double quotes is the only way to set a value with a comma in it.",
        "params": [
          {
            "name": "deviceFamilies"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Formats device families for plist."
    },
    {
      "name": "IOSConfig.setDeviceFamily",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ project: XcodeProject; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": {
        "description": "Add to pbxproj under TARGETED_DEVICE_FAMILY",
        "deprecated": false
      },
      "xaiDescription": "Sets device family in Xcode project."
    },
    {
      "name": "IOSConfig.withDeviceFamily",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures device family in Expo config."
    },
    {
      "name": "IOSConfig.getGoogleSignInReversedClientId",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        },
        {
          "name": "modRequest",
          "type": "Pick<ModProps<InfoPlist>, \"projectRoot\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves reversed Google Sign-In client ID."
    },
    {
      "name": "IOSConfig.getGoogleServicesFile",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves Google Services file path."
    },
    {
      "name": "IOSConfig.setGoogleSignInReversedClientId",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        },
        {
          "name": "modRequest",
          "type": "Pick<ModProps<InfoPlist>, \"projectRoot\">",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Sets reversed Google Sign-In client ID."
    },
    {
      "name": "IOSConfig.setGoogleConfig",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        },
        {
          "name": "modRequest",
          "type": "ModProps<InfoPlist>",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Configures Google settings in InfoPlist."
    },
    {
      "name": "IOSConfig.setGoogleServicesFile",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ project: XcodeProject; projectRoot: string; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": null,
      "xaiDescription": "Sets Google Services file in Xcode project."
    },
    {
      "name": "IOSConfig.withGoogle",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures Google services in Expo config."
    },
    {
      "name": "IOSConfig.withGoogleServicesFile",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures Google Services file in Expo config."
    },
    {
      "name": "IOSConfig.getGoogleMapsApiKey",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves Google Maps API key."
    },
    {
      "name": "IOSConfig.setGoogleMapsApiKey",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        },
        {
          "name": "__1",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Sets Google Maps API key in InfoPlist."
    },
    {
      "name": "IOSConfig.addGoogleMapsAppDelegateImport",
      "parameters": [
        {
          "name": "src",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "MergeResults",
      "jsdoc": null,
      "xaiDescription": "Adds Google Maps import to AppDelegate."
    },
    {
      "name": "IOSConfig.removeGoogleMapsAppDelegateImport",
      "parameters": [
        {
          "name": "src",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "MergeResults",
      "jsdoc": null,
      "xaiDescription": "Removes Google Maps import from AppDelegate."
    },
    {
      "name": "IOSConfig.addGoogleMapsAppDelegateInit",
      "parameters": [
        {
          "name": "src",
          "type": "string",
          "optional": false
        },
        {
          "name": "apiKey",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "MergeResults",
      "jsdoc": null,
      "xaiDescription": "Adds Google Maps initialization to AppDelegate."
    },
    {
      "name": "IOSConfig.removeGoogleMapsAppDelegateInit",
      "parameters": [
        {
          "name": "src",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "MergeResults",
      "jsdoc": null,
      "xaiDescription": "Removes Google Maps initialization from AppDelegate."
    },
    {
      "name": "IOSConfig.addMapsCocoaPods",
      "parameters": [
        {
          "name": "src",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "MergeResults",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "src",
            "description": "The contents of the Podfile."
          }
        ],
        "returns": "Podfile with Google Maps added.",
        "deprecated": false
      },
      "xaiDescription": "Adds Google Maps to Podfile."
    },
    {
      "name": "IOSConfig.removeMapsCocoaPods",
      "parameters": [
        {
          "name": "src",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "MergeResults",
      "jsdoc": null,
      "xaiDescription": "Removes Google Maps from Podfile."
    },
    {
      "name": "IOSConfig.withMaps",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures Google Maps in Expo config."
    },
    {
      "name": "IOSConfig.getLocales",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"locales\">",
          "optional": false
        }
      ],
      "returnType": "Record<string, string | LocaleJson>",
      "jsdoc": null,
      "xaiDescription": "Retrieves app locales from Expo config."
    },
    {
      "name": "IOSConfig.setLocalesAsync",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"locales\">",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ projectRoot: string; project: XcodeProject; }",
          "optional": false
        }
      ],
      "returnType": "Promise<XcodeProject>",
      "jsdoc": null,
      "xaiDescription": "Sets app locales in Xcode project."
    },
    {
      "name": "IOSConfig.getResolvedLocalesAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "input",
          "type": "{ [k: string]: string | { [k: string]: any; }; }",
          "optional": false
        }
      ],
      "returnType": "Promise<ResolvedLocalesJson>",
      "jsdoc": null,
      "xaiDescription": "Resolves app locales asynchronously."
    },
    {
      "name": "IOSConfig.withLocales",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures app locales in Expo config."
    },
    {
      "name": "IOSConfig.getName",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"name\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves app name from Expo config."
    },
    {
      "name": "IOSConfig.setDisplayName",
      "parameters": [
        {
          "name": "configOrName",
          "type": "string | Pick<ExpoConfig, \"name\">",
          "optional": false
        },
        {
          "name": "__1",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": {
        "description": "CFBundleDisplayName is used for most things: the name on the home screen, in\nnotifications, and others.",
        "deprecated": false
      },
      "xaiDescription": "Sets display name in InfoPlist."
    },
    {
      "name": "IOSConfig.setName",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"name\">",
          "optional": false
        },
        {
          "name": "__1",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": {
        "description": "CFBundleName is recommended to be 16 chars or less and is used in lists, eg:\nsometimes on the App Store",
        "deprecated": false
      },
      "xaiDescription": "Sets app name in InfoPlist."
    },
    {
      "name": "IOSConfig.setProductName",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"name\">",
          "optional": false
        },
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": null,
      "xaiDescription": "Sets product name in Xcode project."
    },
    {
      "name": "IOSConfig.withDisplayName",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures display name in Expo config."
    },
    {
      "name": "IOSConfig.withName",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures app name in Expo config."
    },
    {
      "name": "IOSConfig.withProductName",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures product name in Expo config."
    },
    {
      "name": "IOSConfig.getOrientation",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"orientation\">",
          "optional": false
        }
      ],
      "returnType": "\"default\" | \"portrait\" | \"landscape\"",
      "jsdoc": null,
      "xaiDescription": "Retrieves app orientation from Expo config."
    },
    {
      "name": "IOSConfig.setOrientation",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"orientation\">",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Sets app orientation in InfoPlist."
    },
    {
      "name": "IOSConfig.withOrientation",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures app orientation in Expo config."
    },
    {
      "name": "IOSConfig.setProvisioningProfileForPbxproj",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "__1",
          "type": "ProvisioningProfileSettings",
          "optional": false
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Sets provisioning profile in pbxproj."
    },
    {
      "name": "IOSConfig.getRequiresFullScreen",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"sdkVersion\" | \"ios\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if app requires full screen."
    },
    {
      "name": "IOSConfig.setRequiresFullScreen",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Sets full screen requirement in InfoPlist."
    },
    {
      "name": "IOSConfig.withRequiresFullScreen",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures full screen in Expo config."
    },
    {
      "name": "IOSConfig.getScheme",
      "parameters": [
        {
          "name": "config",
          "type": "{ scheme?: string | string[]; }",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves app schemes from config."
    },
    {
      "name": "IOSConfig.setScheme",
      "parameters": [
        {
          "name": "config",
          "type": "Partial<Pick<ExpoConfig, \"ios\" | \"scheme\">>",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Sets app schemes in InfoPlist."
    },
    {
      "name": "IOSConfig.appendScheme",
      "parameters": [
        {
          "name": "scheme",
          "type": "string",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Appends scheme to InfoPlist."
    },
    {
      "name": "IOSConfig.removeScheme",
      "parameters": [
        {
          "name": "scheme",
          "type": "string",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Removes scheme from InfoPlist."
    },
    {
      "name": "IOSConfig.hasScheme",
      "parameters": [
        {
          "name": "scheme",
          "type": "string",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if scheme exists in InfoPlist."
    },
    {
      "name": "IOSConfig.getSchemesFromPlist",
      "parameters": [
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves schemes from InfoPlist."
    },
    {
      "name": "IOSConfig.withScheme",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures app schemes in Expo config."
    },
    {
      "name": "IOSConfig.ensureSwiftBridgingHeaderSetup",
      "parameters": [
        {
          "name": "__0",
          "type": "{ projectRoot: string; project: XcodeProject; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": null,
      "xaiDescription": "Ensures Swift bridging header setup."
    },
    {
      "name": "IOSConfig.getDesignatedSwiftBridgingHeaderFileReference",
      "parameters": [
        {
          "name": "__0",
          "type": "{ project: XcodeProject; }",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Gets Swift bridging header file reference."
    },
    {
      "name": "IOSConfig.linkBridgingHeaderFile",
      "parameters": [
        {
          "name": "__0",
          "type": "{ project: XcodeProject; bridgingHeader: string; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": {
        "description": "",
        "params": [
          {
            "name": "bridgingHeader",
            "description": "The bridging header filename ex: `ExpoAPIs-Bridging-Header.h`"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Links bridging header file to Xcode project."
    },
    {
      "name": "IOSConfig.createBridgingHeaderFile",
      "parameters": [
        {
          "name": "__0",
          "type": "{ project: XcodeProject; projectName: string; projectRoot: string; bridgingHeader: string; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": null,
      "xaiDescription": "Creates Swift bridging header file."
    },
    {
      "name": "IOSConfig.withSwiftBridgingHeader",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures Swift bridging header in Expo config."
    },
    {
      "name": "IOSConfig.withNoopSwiftFile",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures no-op Swift file in Expo config."
    },
    {
      "name": "IOSConfig.getXCBuildConfigurationFromPbxproj",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ targetName?: string; buildConfiguration?: string; }",
          "optional": true
        }
      ],
      "returnType": "any",
      "jsdoc": null,
      "xaiDescription": "Retrieves XCBuildConfiguration from pbxproj."
    },
    {
      "name": "IOSConfig.findApplicationTargetWithDependenciesAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "scheme",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<Target>",
      "jsdoc": null,
      "xaiDescription": "Finds application target with dependencies."
    },
    {
      "name": "IOSConfig.isTargetOfType",
      "parameters": [
        {
          "name": "target",
          "type": "PBXNativeTarget",
          "optional": false
        },
        {
          "name": "targetType",
          "type": "TargetType",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if target is of specified type."
    },
    {
      "name": "IOSConfig.getNativeTargets",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        }
      ],
      "returnType": "NativeTargetSectionEntry[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves native targets from Xcode project."
    },
    {
      "name": "IOSConfig.findSignableTargets",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        }
      ],
      "returnType": "NativeTargetSectionEntry[]",
      "jsdoc": null,
      "xaiDescription": "Finds signable targets in Xcode project."
    },
    {
      "name": "IOSConfig.findFirstNativeTarget",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        }
      ],
      "returnType": "NativeTargetSectionEntry",
      "jsdoc": null,
      "xaiDescription": "Finds first native target in Xcode project."
    },
    {
      "name": "IOSConfig.findNativeTargetByName",
      "parameters": [
        {
          "name": "project",
          "type": "XcodeProject",
          "optional": false
        },
        {
          "name": "targetName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "NativeTargetSectionEntry",
      "jsdoc": null,
      "xaiDescription": "Finds native target by name in Xcode project."
    },
    {
      "name": "IOSConfig.setUpdatesConfigAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "ExpoConfigUpdates",
          "optional": false
        },
        {
          "name": "expoPlist",
          "type": "ExpoPlist",
          "optional": false
        },
        {
          "name": "expoUpdatesPackageVersion",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Promise<ExpoPlist>",
      "jsdoc": null,
      "xaiDescription": "Sets updates configuration in Expo plist."
    },
    {
      "name": "IOSConfig.setVersionsConfigAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "ExpoConfigUpdates",
          "optional": false
        },
        {
          "name": "expoPlist",
          "type": "ExpoPlist",
          "optional": false
        }
      ],
      "returnType": "Promise<ExpoPlist>",
      "jsdoc": null,
      "xaiDescription": "Sets versions configuration in Expo plist."
    },
    {
      "name": "IOSConfig.withUpdates",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures updates in Expo config."
    },
    {
      "name": "IOSConfig.getUsesNonExemptEncryption",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": null,
      "xaiDescription": "Checks if app uses non-exempt encryption."
    },
    {
      "name": "IOSConfig.setUsesNonExemptEncryption",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        },
        {
          "name": "__1",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Sets non-exempt encryption in InfoPlist."
    },
    {
      "name": "IOSConfig.withUsesNonExemptEncryption",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures non-exempt encryption in Expo config."
    },
    {
      "name": "IOSConfig.getVersion",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"version\" | \"ios\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves app version from Expo config."
    },
    {
      "name": "IOSConfig.setVersion",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"version\" | \"ios\">",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Sets app version in InfoPlist."
    },
    {
      "name": "IOSConfig.getBuildNumber",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves build number from Expo config."
    },
    {
      "name": "IOSConfig.setBuildNumber",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"ios\">",
          "optional": false
        },
        {
          "name": "infoPlist",
          "type": "InfoPlist",
          "optional": false
        }
      ],
      "returnType": "InfoPlist",
      "jsdoc": null,
      "xaiDescription": "Sets build number in InfoPlist."
    },
    {
      "name": "IOSConfig.withVersion",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures app version in Expo config."
    },
    {
      "name": "IOSConfig.withBuildNumber",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures build number in Expo config."
    },
    {
      "name": "IOSConfig.createBuildSourceFile",
      "parameters": [
        {
          "name": "__0",
          "type": "{ project: XcodeProject; nativeProjectRoot: string; filePath: string; fileContents: string; overwrite?: boolean; }",
          "optional": false
        }
      ],
      "returnType": "XcodeProject",
      "jsdoc": {
        "description": "Add a source file to the Xcode project and write it to the file system.",
        "params": [
          {
            "name": "nativeProjectRoot",
            "description": "absolute path to the native app root `user/app/ios`"
          },
          {
            "name": "filePath",
            "description": "path relative to the `nativeProjectRoot` for the file to create `user/app/ios/myapp/foobar.swift`"
          },
          {
            "name": "fileContents",
            "description": "string file contents to write to the `filePath`"
          },
          {
            "name": "overwrite",
            "description": "should write file even if one already exists"
          }
        ],
        "deprecated": false
      },
      "xaiDescription": "Creates a build source file in Xcode project."
    },
    {
      "name": "IOSConfig.withBuildSourceFile",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "{ filePath: string; contents: string; overwrite?: boolean; }",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures ExpoConfig with a build source file."
    },
    {
      "name": "IOSConfig.withPrivacyInfo",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Adds privacy info to ExpoConfig."
    },
    {
      "name": "IOSConfig.setPrivacyInfo",
      "parameters": [
        {
          "name": "projectConfig",
          "type": "ExportedConfigWithProps<XcodeProject>",
          "optional": false
        },
        {
          "name": "privacyManifests",
          "type": "Partial<PrivacyInfo>",
          "optional": false
        }
      ],
      "returnType": "ExportedConfigWithProps<XcodeProject>",
      "jsdoc": null,
      "xaiDescription": "Sets privacy info for Xcode project config."
    },
    {
      "name": "IOSConfig.mergePrivacyInfo",
      "parameters": [
        {
          "name": "existing",
          "type": "Partial<PrivacyInfo>",
          "optional": false
        },
        {
          "name": "privacyManifests",
          "type": "Partial<PrivacyInfo>",
          "optional": false
        }
      ],
      "returnType": "PrivacyInfo",
      "jsdoc": null,
      "xaiDescription": "Merges existing and new privacy info."
    },
    {
      "name": "AndroidConfig.writeAndroidManifestAsync",
      "parameters": [
        {
          "name": "manifestPath",
          "type": "string",
          "optional": false
        },
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": null,
      "xaiDescription": "Writes AndroidManifest to specified path asynchronously."
    },
    {
      "name": "AndroidConfig.readAndroidManifestAsync",
      "parameters": [
        {
          "name": "manifestPath",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<AndroidManifest>",
      "jsdoc": null,
      "xaiDescription": "Reads AndroidManifest from specified path asynchronously."
    },
    {
      "name": "AndroidConfig.getMainApplication",
      "parameters": [
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "ManifestApplication",
      "jsdoc": {
        "description": "Returns the `manifest.application` tag ending in `.MainApplication`",
        "deprecated": false
      },
      "xaiDescription": "Retrieves the main application from AndroidManifest."
    },
    {
      "name": "AndroidConfig.getMainApplicationOrThrow",
      "parameters": [
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "ManifestApplication",
      "jsdoc": null,
      "xaiDescription": "Gets main application or throws if not found."
    },
    {
      "name": "AndroidConfig.getMainActivityOrThrow",
      "parameters": [
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "ManifestActivity",
      "jsdoc": null,
      "xaiDescription": "Gets main activity or throws if not found."
    },
    {
      "name": "AndroidConfig.getRunnableActivity",
      "parameters": [
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "ManifestActivity",
      "jsdoc": null,
      "xaiDescription": "Retrieves the runnable activity from AndroidManifest."
    },
    {
      "name": "AndroidConfig.getMainActivity",
      "parameters": [
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "ManifestActivity",
      "jsdoc": null,
      "xaiDescription": "Retrieves the main activity from AndroidManifest."
    },
    {
      "name": "AndroidConfig.addMetaDataItemToMainApplication",
      "parameters": [
        {
          "name": "mainApplication",
          "type": "ManifestApplication",
          "optional": false
        },
        {
          "name": "itemName",
          "type": "string",
          "optional": false
        },
        {
          "name": "itemValue",
          "type": "string",
          "optional": false
        },
        {
          "name": "itemType",
          "type": "\"resource\" | \"value\"",
          "optional": true
        }
      ],
      "returnType": "ManifestApplication",
      "jsdoc": null,
      "xaiDescription": "Adds metadata item to main application."
    },
    {
      "name": "AndroidConfig.removeMetaDataItemFromMainApplication",
      "parameters": [
        {
          "name": "mainApplication",
          "type": "any",
          "optional": false
        },
        {
          "name": "itemName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": null,
      "xaiDescription": "Removes metadata item from main application."
    },
    {
      "name": "AndroidConfig.findMetaDataItem",
      "parameters": [
        {
          "name": "mainApplication",
          "type": "any",
          "optional": false
        },
        {
          "name": "itemName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Finds index of metadata item in main application."
    },
    {
      "name": "AndroidConfig.findUsesLibraryItem",
      "parameters": [
        {
          "name": "mainApplication",
          "type": "any",
          "optional": false
        },
        {
          "name": "itemName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Finds index of uses-library item in main application."
    },
    {
      "name": "AndroidConfig.getMainApplicationMetaDataValue",
      "parameters": [
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves metadata value from main application."
    },
    {
      "name": "AndroidConfig.addUsesLibraryItemToMainApplication",
      "parameters": [
        {
          "name": "mainApplication",
          "type": "ManifestApplication",
          "optional": false
        },
        {
          "name": "item",
          "type": "{ name: string; required?: boolean; }",
          "optional": false
        }
      ],
      "returnType": "ManifestApplication",
      "jsdoc": null,
      "xaiDescription": "Adds uses-library item to main application."
    },
    {
      "name": "AndroidConfig.removeUsesLibraryItemFromMainApplication",
      "parameters": [
        {
          "name": "mainApplication",
          "type": "ManifestApplication",
          "optional": false
        },
        {
          "name": "itemName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "ManifestApplication",
      "jsdoc": null,
      "xaiDescription": "Removes uses-library item from main application."
    },
    {
      "name": "AndroidConfig.prefixAndroidKeys",
      "parameters": [
        {
          "name": "head",
          "type": "T",
          "optional": false
        }
      ],
      "returnType": "Record<string, any>",
      "jsdoc": null,
      "xaiDescription": "Prefixes Android keys in given object."
    },
    {
      "name": "AndroidConfig.ensureToolsAvailable",
      "parameters": [
        {
          "name": "manifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "AndroidManifest",
      "jsdoc": {
        "description": "Ensure the `tools:*` namespace is available in the manifest.",
        "params": [
          {
            "name": "manifest",
            "description": "AndroidManifest.xml"
          }
        ],
        "returns": "manifest with the `tools:*` namespace available",
        "deprecated": false
      },
      "xaiDescription": "Ensures `tools:*` namespace is available in manifest."
    },
    {
      "name": "AndroidConfig.withApplyPlugin",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Applies a plugin to the Android configuration. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.withGoogleServicesFile",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures Google Services file for Android. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.getIntentFilters",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"android\">",
          "optional": false
        }
      ],
      "returnType": "{ autoVerify?: boolean; action: string; data?: AndroidIntentFiltersData | AndroidIntentFiltersData[]; category?: string | string[]; }[]",
      "jsdoc": null,
      "xaiDescription": "Retrieves intent filters from Android config. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.setAndroidIntentFilters",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"android\">",
          "optional": false
        },
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "AndroidManifest",
      "jsdoc": null,
      "xaiDescription": "Sets intent filters in Android manifest. Uses ExpoConfig, AndroidManifest."
    },
    {
      "name": "AndroidConfig.default",
      "parameters": [
        {
          "name": "intentFilters",
          "type": "{ autoVerify?: boolean; action: string; data?: AndroidIntentFiltersData | AndroidIntentFiltersData[]; category?: string | string[]; }[]",
          "optional": false
        }
      ],
      "returnType": "ManifestIntentFilter[]",
      "jsdoc": null,
      "xaiDescription": "Creates default manifest intent filters. Uses ManifestIntentFilter."
    },
    {
      "name": "AndroidConfig.withAndroidIntentFilters",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures Android intent filters. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.sanitizeNameForGradle",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Sanitize a name, this should be used for files and gradle names.\n- `[/, \\, :, <, >, \", ?, *, |]` are not allowed\nhttps://docs.gradle.org/4.2/release-notes.html#path-separator-characters-in-names-are-deprecated",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AndroidConfig.getName",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"name\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the name from the config. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.applyNameSettingsGradle",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"name\">",
          "optional": false
        },
        {
          "name": "settingsGradle",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Regex a name change -- fragile.",
        "params": [
          {
            "name": "config"
          },
          {
            "name": "settingsGradle"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AndroidConfig.withName",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Sets the name in the configuration. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.withNameSettingsGradle",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Applies name settings to Gradle. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.getOrientation",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"orientation\">",
          "optional": false
        }
      ],
      "returnType": "\"default\" | \"portrait\" | \"landscape\"",
      "jsdoc": null,
      "xaiDescription": "Retrieves the orientation from the config. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.setAndroidOrientation",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"orientation\">",
          "optional": false
        },
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "AndroidManifest",
      "jsdoc": null,
      "xaiDescription": "Sets the orientation in Android manifest. Uses ExpoConfig, AndroidManifest."
    },
    {
      "name": "AndroidConfig.withOrientation",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures the orientation. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.getPackage",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"android\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the package from the config. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.renamePackageOnDisk",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"android\">",
          "optional": false
        },
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": null,
      "xaiDescription": "Renames package on disk. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.renameJniOnDiskForType",
      "parameters": [
        {
          "name": "__0",
          "type": "{ projectRoot: string; type: string; packageName: string; }",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": null,
      "xaiDescription": "Renames JNI on disk for a specific type."
    },
    {
      "name": "AndroidConfig.renamePackageOnDiskForType",
      "parameters": [
        {
          "name": "__0",
          "type": "{ projectRoot: string; type: string; packageName: string; }",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": null,
      "xaiDescription": "Renames package on disk for a specific type."
    },
    {
      "name": "AndroidConfig.setPackageInBuildGradle",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"android\">",
          "optional": false
        },
        {
          "name": "buildGradle",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Sets package in build.gradle. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.getApplicationIdAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": null,
      "xaiDescription": "Retrieves application ID asynchronously."
    },
    {
      "name": "AndroidConfig.kotlinSanitized",
      "parameters": [
        {
          "name": "packageName",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Make a package name safe to use in a kotlin file,\ne.g. is.pvin.hello -> `is`.pvin.hello",
        "deprecated": false
      }
    },
    {
      "name": "AndroidConfig.withPackageGradle",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures package in Gradle. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.withPackageRefactor",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Refactors package in configuration. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.getPrimaryColor",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"primaryColor\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves the primary color from the config. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.withPrimaryColor",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Sets the primary color. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.withPrimaryColorColors",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures primary color for colors. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.withPrimaryColorStyles",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures primary color for styles. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.setStatusBarColors",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"androidStatusBar\">",
          "optional": false
        },
        {
          "name": "colors",
          "type": "ResourceXML",
          "optional": false
        }
      ],
      "returnType": "ResourceXML",
      "jsdoc": null,
      "xaiDescription": "Sets status bar colors. Uses ExpoConfig, ResourceXML."
    },
    {
      "name": "AndroidConfig.setStatusBarStyles",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"androidStatusBar\">",
          "optional": false
        },
        {
          "name": "styles",
          "type": "ResourceXML",
          "optional": false
        }
      ],
      "returnType": "ResourceXML",
      "jsdoc": null,
      "xaiDescription": "Sets status bar styles. Uses ExpoConfig, ResourceXML."
    },
    {
      "name": "AndroidConfig.getStatusBarColor",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"androidStatusBar\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves status bar color. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.getStatusBarTranslucent",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"androidStatusBar\">",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Specifies whether the status bar should be \"translucent\". When true, the status bar is drawn with `position: absolute` and a gray underlay, when false `position: relative` (pushes content down).",
        "params": [
          {
            "name": "config"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "AndroidConfig.getStatusBarStyle",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"androidStatusBar\">",
          "optional": false
        }
      ],
      "returnType": "\"light-content\" | \"dark-content\"",
      "jsdoc": null,
      "xaiDescription": "Retrieves status bar style. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.withStatusBar",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures the status bar. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.applyRuntimeVersionFromConfigAsync",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfigWithProps<ResourceXML>",
          "optional": false
        },
        {
          "name": "stringsJSON",
          "type": "ResourceXML",
          "optional": false
        }
      ],
      "returnType": "Promise<ResourceXML>",
      "jsdoc": null,
      "xaiDescription": "Applies runtime version from config asynchronously. Uses ExportedConfigWithProps, ResourceXML."
    },
    {
      "name": "AndroidConfig.applyRuntimeVersionFromConfigForProjectRootAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "ExpoConfigUpdates",
          "optional": false
        },
        {
          "name": "stringsJSON",
          "type": "ResourceXML",
          "optional": false
        }
      ],
      "returnType": "Promise<ResourceXML>",
      "jsdoc": null,
      "xaiDescription": "Applies runtime version for project root asynchronously. Uses ExpoConfigUpdates, ResourceXML."
    },
    {
      "name": "AndroidConfig.setUpdatesConfigAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "ExpoConfigUpdates",
          "optional": false
        },
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        },
        {
          "name": "expoUpdatesPackageVersion",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "Promise<AndroidManifest>",
      "jsdoc": null,
      "xaiDescription": "Sets updates config asynchronously. Uses ExpoConfigUpdates, AndroidManifest."
    },
    {
      "name": "AndroidConfig.setVersionsConfigAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "config",
          "type": "Pick<ExpoConfigUpdates, \"sdkVersion\" | \"runtimeVersion\">",
          "optional": false
        },
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "Promise<AndroidManifest>",
      "jsdoc": null,
      "xaiDescription": "Sets versions config asynchronously. Uses ExpoConfigUpdates, AndroidManifest."
    },
    {
      "name": "AndroidConfig.withUpdates",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures updates. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.setMinBuildScriptExtVersion",
      "parameters": [
        {
          "name": "buildGradle",
          "type": "string",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ name: string; minVersion: number; }",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Sets minimum build script extension version."
    },
    {
      "name": "AndroidConfig.getVersionName",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"version\" | \"android\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves version name from config. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.setVersionName",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"version\" | \"android\">",
          "optional": false
        },
        {
          "name": "buildGradle",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Sets version name in build.gradle. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.getVersionCode",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"android\">",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": null,
      "xaiDescription": "Retrieves version code from config. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.setVersionCode",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"android\">",
          "optional": false
        },
        {
          "name": "buildGradle",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Sets version code in build.gradle. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.withVersion",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures version. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.withBuildScriptExtMinimumVersion",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "{ name: string; minVersion: number; }",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Sets minimum build script extension version. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.setWindowSoftInputModeMode",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"android\" | \"userInterfaceStyle\">",
          "optional": false
        },
        {
          "name": "androidManifest",
          "type": "AndroidManifest",
          "optional": false
        }
      ],
      "returnType": "AndroidManifest",
      "jsdoc": null,
      "xaiDescription": "Sets window soft input mode. Uses ExpoConfig, AndroidManifest."
    },
    {
      "name": "AndroidConfig.getWindowSoftInputModeMode",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"android\">",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves window soft input mode. Uses ExpoConfig."
    },
    {
      "name": "AndroidConfig.withWindowSoftInputMode",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "void",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Configures window soft input mode. Uses ExpoConfig."
    },
    {
      "name": "addWarningAndroid",
      "parameters": [
        {
          "name": "property",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "link",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Log a warning that doesn't disrupt the spinners.\n\nsh\n» android: android.package: property is invalid https://expo.fyi/android-package\n",
        "params": [
          {
            "name": "property",
            "description": "Name of the config property that triggered the warning (best-effort)"
          },
          {
            "name": "text",
            "description": "Main warning message"
          },
          {
            "name": "link",
            "description": "Useful link to resources related to the warning"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "addWarningIOS",
      "parameters": [
        {
          "name": "property",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "link",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Log a warning that doesn't disrupt the spinners.\n\nsh\n» ios: ios.bundleIdentifier: property is invalid https://expo.fyi/bundle-identifier\n",
        "params": [
          {
            "name": "property",
            "description": "Name of the config property that triggered the warning (best-effort)"
          },
          {
            "name": "text",
            "description": "Main warning message"
          },
          {
            "name": "link",
            "description": "Useful link to resources related to the warning"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "addWarningForPlatform",
      "parameters": [
        {
          "name": "platform",
          "type": "\"android\" | \"ios\"",
          "optional": false
        },
        {
          "name": "property",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "link",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Adds a warning for a specific platform."
    },
    {
      "name": "WarningAggregator.addWarningAndroid",
      "parameters": [
        {
          "name": "property",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "link",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Log a warning that doesn't disrupt the spinners.\n\nsh\n» android: android.package: property is invalid https://expo.fyi/android-package\n",
        "params": [
          {
            "name": "property",
            "description": "Name of the config property that triggered the warning (best-effort)"
          },
          {
            "name": "text",
            "description": "Main warning message"
          },
          {
            "name": "link",
            "description": "Useful link to resources related to the warning"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "WarningAggregator.addWarningIOS",
      "parameters": [
        {
          "name": "property",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "link",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Log a warning that doesn't disrupt the spinners.\n\nsh\n» ios: ios.bundleIdentifier: property is invalid https://expo.fyi/bundle-identifier\n",
        "params": [
          {
            "name": "property",
            "description": "Name of the config property that triggered the warning (best-effort)"
          },
          {
            "name": "text",
            "description": "Main warning message"
          },
          {
            "name": "link",
            "description": "Useful link to resources related to the warning"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "WarningAggregator.addWarningForPlatform",
      "parameters": [
        {
          "name": "platform",
          "type": "\"android\" | \"ios\"",
          "optional": false
        },
        {
          "name": "property",
          "type": "string",
          "optional": false
        },
        {
          "name": "text",
          "type": "string",
          "optional": false
        },
        {
          "name": "link",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": null,
      "xaiDescription": "Adds a warning for a specific platform in WarningAggregator."
    },
    {
      "name": "getHistoryItem",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"_internal\">",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "PluginHistoryItem",
      "jsdoc": null,
      "xaiDescription": "Retrieves a history item. Uses ExpoConfig, PluginHistoryItem."
    },
    {
      "name": "addHistoryItem",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "item",
          "type": "Omit<PluginHistoryItem, \"version\"> & { version?: string; }",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Adds a history item. Uses ExpoConfig, PluginHistoryItem."
    },
    {
      "name": "History.getHistoryItem",
      "parameters": [
        {
          "name": "config",
          "type": "Pick<ExpoConfig, \"_internal\">",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "PluginHistoryItem",
      "jsdoc": null,
      "xaiDescription": "Retrieves a history item from History. Uses ExpoConfig, PluginHistoryItem."
    },
    {
      "name": "History.addHistoryItem",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "item",
          "type": "Omit<PluginHistoryItem, \"version\"> & { version?: string; }",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Adds a history item to History. Uses ExpoConfig, PluginHistoryItem."
    },
    {
      "name": "writeXMLAsync",
      "parameters": [
        {
          "name": "options",
          "type": "{ path: string; xml: any; }",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": null,
      "xaiDescription": "Writes XML asynchronously."
    },
    {
      "name": "readXMLAsync",
      "parameters": [
        {
          "name": "options",
          "type": "{ path: string; fallback?: string; }",
          "optional": false
        }
      ],
      "returnType": "Promise<XMLObject>",
      "jsdoc": null,
      "xaiDescription": "Reads XML asynchronously. Uses XMLObject."
    },
    {
      "name": "_processAndroidXML",
      "parameters": [
        {
          "name": "manifest",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "XMLObject",
      "jsdoc": null,
      "xaiDescription": "Processes Android XML. Uses XMLObject."
    },
    {
      "name": "parseXMLAsync",
      "parameters": [
        {
          "name": "contents",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<XMLObject>",
      "jsdoc": null,
      "xaiDescription": "Parses XML asynchronously. Uses XMLObject."
    },
    {
      "name": "format",
      "parameters": [
        {
          "name": "manifest",
          "type": "any",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ indentLevel?: number; newline?: string; }",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Formats XML."
    },
    {
      "name": "escapeAndroidString",
      "parameters": [
        {
          "name": "value",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Escapes Android string literals, specifically characters `\"`, `'`, `\\`, `\\n`, `\\r`, `\\t`",
        "params": [
          {
            "name": "value",
            "description": "unescaped Android XML string literal."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "unescapeAndroidString",
      "parameters": [
        {
          "name": "value",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Unescapes Android string."
    },
    {
      "name": "XML.writeXMLAsync",
      "parameters": [
        {
          "name": "options",
          "type": "{ path: string; xml: any; }",
          "optional": false
        }
      ],
      "returnType": "Promise<void>",
      "jsdoc": null,
      "xaiDescription": "Writes XML asynchronously in XML namespace."
    },
    {
      "name": "XML.readXMLAsync",
      "parameters": [
        {
          "name": "options",
          "type": "{ path: string; fallback?: string; }",
          "optional": false
        }
      ],
      "returnType": "Promise<XMLObject>",
      "jsdoc": null,
      "xaiDescription": "Reads XML asynchronously in XML namespace. Uses XMLObject."
    },
    {
      "name": "XML._processAndroidXML",
      "parameters": [
        {
          "name": "manifest",
          "type": "any",
          "optional": false
        }
      ],
      "returnType": "XMLObject",
      "jsdoc": null,
      "xaiDescription": "Processes Android XML in XML namespace. Uses XMLObject."
    },
    {
      "name": "XML.parseXMLAsync",
      "parameters": [
        {
          "name": "contents",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "Promise<XMLObject>",
      "jsdoc": null,
      "xaiDescription": "Parses XML asynchronously in XML namespace. Uses XMLObject."
    },
    {
      "name": "XML.format",
      "parameters": [
        {
          "name": "manifest",
          "type": "any",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ indentLevel?: number; newline?: string; }",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Formats XML in XML namespace."
    },
    {
      "name": "XML.escapeAndroidString",
      "parameters": [
        {
          "name": "value",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Escapes Android string literals, specifically characters `\"`, `'`, `\\`, `\\n`, `\\r`, `\\t`",
        "params": [
          {
            "name": "value",
            "description": "unescaped Android XML string literal."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "XML.unescapeAndroidString",
      "parameters": [
        {
          "name": "value",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Unescapes Android string in XML namespace."
    },
    {
      "name": "withPlugins",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "(string | ConfigPlugin | StaticPlugin)[]",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Applies plugins to configuration. Uses ExpoConfig."
    },
    {
      "name": "withRunOnce",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "{ plugin: ConfigPlugin<void>; name: string; version?: string; }",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Runs a plugin once. Uses ExpoConfig, ConfigPlugin."
    },
    {
      "name": "createRunOncePlugin",
      "parameters": [
        {
          "name": "plugin",
          "type": "ConfigPlugin<T>",
          "optional": false
        },
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "version",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "ConfigPlugin<T>",
      "jsdoc": null,
      "xaiDescription": "Creates a run-once plugin. Uses ConfigPlugin."
    },
    {
      "name": "withDangerousMod",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "[keyof ModConfig, Mod<unknown>]",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Applies a dangerous modification. Uses ExpoConfig, ModConfig, Mod."
    },
    {
      "name": "withFinalizedMod",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "[keyof ModConfig, Mod<unknown>]",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Applies a finalized modification. Uses ExpoConfig, ModConfig, Mod."
    },
    {
      "name": "withMod",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ platform: keyof ModConfig; mod: string; action: Mod<T>; }",
          "optional": false
        }
      ],
      "returnType": "ExportedConfig",
      "jsdoc": null,
      "xaiDescription": "Applies a modification. Uses ExportedConfig, ModConfig, Mod."
    },
    {
      "name": "withBaseMod",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "__1",
          "type": "BaseModOptions & { action: Mod<T>; }",
          "optional": false
        }
      ],
      "returnType": "ExportedConfig",
      "jsdoc": null,
      "xaiDescription": "Applies a base modification. Uses ExportedConfig, BaseModOptions, Mod."
    },
    {
      "name": "withAppDelegate",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<AppDelegateProjectFile>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies AppDelegate. Uses ExpoConfig, AppDelegateProjectFile, Mod."
    },
    {
      "name": "withInfoPlist",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<InfoPlist>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Info.plist. Uses ExpoConfig, InfoPlist, Mod."
    },
    {
      "name": "withEntitlementsPlist",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<JSONObject>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Entitlements.plist. Uses ExpoConfig, JSONObject, Mod."
    },
    {
      "name": "withExpoPlist",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<ExpoPlist>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Expo.plist. Uses ExpoConfig, ExpoPlist, Mod."
    },
    {
      "name": "withXcodeProject",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<XcodeProject>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Xcode project. Uses ExpoConfig, XcodeProject, Mod."
    },
    {
      "name": "withPodfile",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<PodfileProjectFile>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Podfile. Uses ExpoConfig, PodfileProjectFile, Mod."
    },
    {
      "name": "withPodfileProperties",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<Record<string, string>>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Podfile properties. Uses ExpoConfig, Mod."
    },
    {
      "name": "withAndroidManifest",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<AndroidManifest>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Android manifest. Uses ExpoConfig, AndroidManifest, Mod."
    },
    {
      "name": "withStringsXml",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<ResourceXML>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies strings.xml. Uses ExpoConfig, ResourceXML, Mod."
    },
    {
      "name": "withAndroidColors",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<ResourceXML>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Android colors. Uses ExpoConfig, ResourceXML, Mod."
    },
    {
      "name": "withAndroidColorsNight",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<ResourceXML>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Android night colors. Uses ExpoConfig, ResourceXML, Mod."
    },
    {
      "name": "withAndroidStyles",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<ResourceXML>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Android styles. Uses ExpoConfig, ResourceXML, Mod."
    },
    {
      "name": "withMainActivity",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<ApplicationProjectFile>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies MainActivity. Uses ExpoConfig, ApplicationProjectFile, Mod."
    },
    {
      "name": "withMainApplication",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<ApplicationProjectFile>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies MainApplication. Uses ExpoConfig, ApplicationProjectFile, Mod."
    },
    {
      "name": "withProjectBuildGradle",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<GradleProjectFile>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies project build.gradle. Uses ExpoConfig, GradleProjectFile, Mod."
    },
    {
      "name": "withAppBuildGradle",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<GradleProjectFile>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies app build.gradle. Uses ExpoConfig, GradleProjectFile, Mod."
    },
    {
      "name": "withSettingsGradle",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<GradleProjectFile>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies settings.gradle. Uses ExpoConfig, GradleProjectFile, Mod."
    },
    {
      "name": "withGradleProperties",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Mod<PropertiesItem[]>",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Modifies Gradle properties. Uses ExpoConfig, PropertiesItem, Mod."
    },
    {
      "name": "withStaticPlugin",
      "parameters": [
        {
          "name": "config",
          "type": "ExpoConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "{ plugin: string | ConfigPlugin | StaticPlugin; fallback?: ConfigPlugin<any>; projectRoot?: string; _isLegacyPlugin?: boolean; }",
          "optional": false
        }
      ],
      "returnType": "ExpoConfig",
      "jsdoc": null,
      "xaiDescription": "Applies a static plugin. Uses ExpoConfig, ConfigPlugin, StaticPlugin."
    },
    {
      "name": "compileModsAsync",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "{ projectRoot: string; platforms?: (keyof ModConfig)[]; introspect?: boolean; assertMissingModProviders?: boolean; ignoreExistingNativeFiles?: boolean; }",
          "optional": false
        }
      ],
      "returnType": "Promise<ExportedConfig>",
      "jsdoc": null,
      "xaiDescription": "Compiles modifications asynchronously. Uses ExportedConfig, ModConfig."
    },
    {
      "name": "withDefaultBaseMods",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "props",
          "type": "Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">>",
          "optional": true
        }
      ],
      "returnType": "ExportedConfig",
      "jsdoc": null,
      "xaiDescription": "Applies default base modifications to config. Uses ExportedConfig, BaseModOptions."
    },
    {
      "name": "evalModsAsync",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "__1",
          "type": "{ projectRoot: string; introspect?: boolean; platforms?: (keyof ModConfig)[]; assertMissingModProviders?: boolean; ignoreExistingNativeFiles?: boolean; }",
          "optional": false
        }
      ],
      "returnType": "Promise<ExportedConfig>",
      "jsdoc": null,
      "xaiDescription": "Evaluates modifications asynchronously. Uses ExportedConfig, ModConfig."
    },
    {
      "name": "PluginError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "PluginError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "PluginError.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PluginError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PluginError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PluginError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "PluginError.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "PluginError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "withGeneratedBaseMods",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "__1",
          "type": "Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">> & { platform: \"android\" | \"ios\"; providers: Partial<Record<ModName, BaseModProviderMethods<any, any>>>; }",
          "optional": false
        }
      ],
      "returnType": "ExportedConfig",
      "jsdoc": null,
      "xaiDescription": "Applies generated base modifications to config. Uses ExportedConfig, BaseModOptions."
    },
    {
      "name": "provider",
      "parameters": [
        {
          "name": "props",
          "type": "BaseModProviderMethods<ModType, Props>",
          "optional": false
        }
      ],
      "returnType": "BaseModProviderMethods<ModType, Props>",
      "jsdoc": null,
      "xaiDescription": "Creates a provider with base modification methods. Uses BaseModProviderMethods."
    },
    {
      "name": "withAndroidBaseMods",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "__1",
          "type": "Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">> & { providers?: Partial<{ dangerous: BaseModProviderMethods<unknown, Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">>>; ... 11 more ...; mainApplication: BaseModProviderMethods<...>; }>; }",
          "optional": true
        }
      ],
      "returnType": "ExportedConfig",
      "jsdoc": null,
      "xaiDescription": "Applies Android-specific base modifications to config. Uses ExportedConfig, BaseModOptions."
    },
    {
      "name": "getAndroidModFileProviders",
      "parameters": [],
      "returnType": "{ dangerous: BaseModProviderMethods<unknown, Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">>>; finalized: BaseModProviderMethods<...>; ... 10 more ...; mainApplication: BaseModProviderMethods<...>; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves Android mod file providers. Uses BaseModProviderMethods."
    },
    {
      "name": "withIosBaseMods",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "__1",
          "type": "Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">> & { providers?: Partial<{ dangerous: BaseModProviderMethods<unknown, Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">>>; ... 7 more ...; podfileProperties: BaseModProviderMethods<...>; }>; }",
          "optional": true
        }
      ],
      "returnType": "ExportedConfig",
      "jsdoc": null,
      "xaiDescription": "Applies iOS-specific base modifications to config. Uses ExportedConfig, BaseModOptions."
    },
    {
      "name": "getIosModFileProviders",
      "parameters": [],
      "returnType": "{ dangerous: BaseModProviderMethods<unknown, Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">>>; finalized: BaseModProviderMethods<...>; ... 6 more ...; podfileProperties: BaseModProviderMethods<...>; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves iOS mod file providers. Uses BaseModProviderMethods."
    },
    {
      "name": "BaseMods.withGeneratedBaseMods",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "__1",
          "type": "Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">> & { platform: \"android\" | \"ios\"; providers: Partial<Record<ModName, BaseModProviderMethods<any, any>>>; }",
          "optional": false
        }
      ],
      "returnType": "ExportedConfig",
      "jsdoc": null,
      "xaiDescription": "Applies generated base modifications to config. Uses ExportedConfig, BaseModOptions."
    },
    {
      "name": "BaseMods.provider",
      "parameters": [
        {
          "name": "props",
          "type": "BaseModProviderMethods<ModType, Props>",
          "optional": false
        }
      ],
      "returnType": "BaseModProviderMethods<ModType, Props>",
      "jsdoc": null,
      "xaiDescription": "Creates a provider with base modification methods. Uses BaseModProviderMethods."
    },
    {
      "name": "BaseMods.withAndroidBaseMods",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "__1",
          "type": "Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">> & { providers?: Partial<{ dangerous: BaseModProviderMethods<unknown, Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">>>; ... 11 more ...; mainApplication: BaseModProviderMethods<...>; }>; }",
          "optional": true
        }
      ],
      "returnType": "ExportedConfig",
      "jsdoc": null,
      "xaiDescription": "Applies Android-specific base modifications to config. Uses ExportedConfig, BaseModOptions."
    },
    {
      "name": "BaseMods.getAndroidModFileProviders",
      "parameters": [],
      "returnType": "{ dangerous: BaseModProviderMethods<unknown, Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">>>; finalized: BaseModProviderMethods<...>; ... 10 more ...; mainApplication: BaseModProviderMethods<...>; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves Android mod file providers. Uses BaseModProviderMethods."
    },
    {
      "name": "BaseMods.withIosBaseMods",
      "parameters": [
        {
          "name": "config",
          "type": "ExportedConfig",
          "optional": false
        },
        {
          "name": "__1",
          "type": "Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">> & { providers?: Partial<{ dangerous: BaseModProviderMethods<unknown, Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">>>; ... 7 more ...; podfileProperties: BaseModProviderMethods<...>; }>; }",
          "optional": true
        }
      ],
      "returnType": "ExportedConfig",
      "jsdoc": null,
      "xaiDescription": "Applies iOS-specific base modifications to config. Uses ExportedConfig, BaseModOptions."
    },
    {
      "name": "BaseMods.getIosModFileProviders",
      "parameters": [],
      "returnType": "{ dangerous: BaseModProviderMethods<unknown, Partial<Pick<BaseModOptions, \"saveToInternal\" | \"skipEmptyMod\">>>; finalized: BaseModProviderMethods<...>; ... 6 more ...; podfileProperties: BaseModProviderMethods<...>; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves iOS mod file providers. Uses BaseModProviderMethods."
    },
    {
      "name": "getAccountUsername",
      "parameters": [
        {
          "name": "manifest",
          "type": "Pick<ExpoConfig, \"owner\">",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves account username from manifest. Uses ExpoConfig."
    },
    {
      "name": "getConfig",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "GetConfigOptions",
          "optional": true
        }
      ],
      "returnType": "ProjectConfig",
      "jsdoc": {
        "description": "Evaluate the config for an Expo project.\nIf a function is exported from the `app.config.js` then a partial config will be passed as an argument.\nThe partial config is composed from any existing app.json, and certain fields from the `package.json` like name and description.\n\nIf options.isPublicConfig is true, the Expo config will include only public-facing options (omitting private keys).\nThe resulting config should be suitable for hosting or embedding in a publicly readable location.\n\n**Example**\njs\nmodule.exports = function({ config }) {\n  // mutate the config before returning it.\n  config.slug = 'new slug'\n  return { expo: config };\n}\n\n\n**Supports**\n- `app.config.ts`\n- `app.config.js`\n- `app.config.json`\n- `app.json`",
        "params": [
          {
            "name": "projectRoot",
            "description": "the root folder containing all of your application code"
          },
          {
            "name": "options",
            "description": "enforce criteria for a project config"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "getPackageJson",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "PackageJSONConfig",
      "jsdoc": null,
      "xaiDescription": "Retrieves package.json from project root. Uses PackageJSONConfig."
    },
    {
      "name": "getConfigFilePaths",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "ConfigFilePaths",
      "jsdoc": {
        "description": "Get the static and dynamic config paths for a project. Also accounts for custom paths.",
        "params": [
          {
            "name": "projectRoot"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "modifyConfigAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "modifications",
          "type": "Partial<ExpoConfig>",
          "optional": false
        },
        {
          "name": "readOptions",
          "type": "GetConfigOptions",
          "optional": true
        },
        {
          "name": "writeOptions",
          "type": "WriteConfigOptions",
          "optional": true
        }
      ],
      "returnType": "Promise<{ type: \"success\" | \"warn\" | \"fail\"; message?: string; config: ExpoConfig; }>",
      "jsdoc": {
        "description": "Attempt to modify an Expo project config.\nThis will only fully work if the project is using static configs only.\nOtherwise 'warn' | 'fail' will return with a message about why the config couldn't be updated.\nThe potentially modified config object will be returned for testing purposes.",
        "params": [
          {
            "name": "projectRoot"
          },
          {
            "name": "modifications",
            "description": "modifications to make to an existing config"
          },
          {
            "name": "readOptions",
            "description": "options for reading the current config file"
          },
          {
            "name": "writeOptions",
            "description": "If true, the static config file will not be rewritten"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "getWebOutputPath",
      "parameters": [
        {
          "name": "config",
          "type": "{ [key: string]: any; }",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Retrieves web output path from config."
    },
    {
      "name": "getNameFromConfig",
      "parameters": [
        {
          "name": "exp",
          "type": "Record<string, any>",
          "optional": true
        }
      ],
      "returnType": "{ appName?: string; webName?: string; }",
      "jsdoc": null,
      "xaiDescription": "Retrieves app and web names from config."
    },
    {
      "name": "getDefaultTarget",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "exp",
          "type": "Pick<ExpoConfig, \"sdkVersion\">",
          "optional": true
        }
      ],
      "returnType": "ProjectTarget",
      "jsdoc": null,
      "xaiDescription": "Retrieves default target for project. Uses ExpoConfig, ProjectTarget."
    },
    {
      "name": "getProjectConfigDescription",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Return a useful name describing the project config.\n- dynamic: app.config.js\n- static: app.json\n- custom path app config relative to root folder\n- both: app.config.js or app.json",
        "deprecated": false
      }
    },
    {
      "name": "getProjectConfigDescriptionWithPaths",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "projectConfig",
          "type": "ConfigFilePaths",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string describing the configurations used for the given project root.\nWill return null if no config is found.",
        "params": [
          {
            "name": "projectRoot"
          },
          {
            "name": "projectConfig"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.substring",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the substring at the specified location within a String object.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based index number indicating the beginning of the substring."
          },
          {
            "name": "end",
            "description": "Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\nIf end is omitted, the characters from start through the end of the original string are returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.toLowerCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to lowercase.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.toLocaleLowerCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.toUpperCase",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts all the alphabetic characters in a string to uppercase.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.toLocaleUpperCase",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.trim",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading and trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.substr",
      "parameters": [
        {
          "name": "from",
          "type": "number",
          "optional": false
        },
        {
          "name": "length",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Gets a substring beginning at the specified location and having the specified length.",
        "params": [
          {
            "name": "from",
            "description": "The starting position of the desired substring. The index of the first character in the string is zero."
          },
          {
            "name": "length",
            "description": "The number of characters to include in the returned substring."
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.valueOf",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.codePointAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.includes",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false.",
        "params": [
          {
            "name": "searchString",
            "description": "search string"
          },
          {
            "name": "position",
            "description": "If position is undefined, 0 is assumed, so as to search all of the String."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.endsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "endPosition",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition – length(this). Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.normalize",
      "parameters": [
        {
          "name": "form",
          "type": "\"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.",
        "params": [
          {
            "name": "form",
            "description": "Applicable values: \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", If not specified default\nis \"NFC\""
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.repeat",
      "parameters": [
        {
          "name": "count",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned.",
        "params": [
          {
            "name": "count",
            "description": "number of copies to append"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.startsWith",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.anchor",
      "parameters": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value",
        "params": [
          {
            "name": "name"
          }
        ],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.big",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<big>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.blink",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<blink>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.bold",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<b>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.fixed",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<tt>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.fontcolor",
      "parameters": [
        {
          "name": "color",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the color attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.fontsize",
      "parameters": [
        {
          "name": "size",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<font>` HTML element and sets the size attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.italics",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<i>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.link",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns an `<a>` HTML element and sets the href attribute value",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.small",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<small>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.strike",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<strike>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.sub",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sub>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.sup",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a `<sup>` HTML element",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.padStart",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.padEnd",
      "parameters": [
        {
          "name": "maxLength",
          "type": "number",
          "optional": false
        },
        {
          "name": "fillString",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string.",
        "params": [
          {
            "name": "maxLength",
            "description": "The length of the resulting string once the current string has been padded.\nIf this parameter is smaller than the current string's length, the current string will be returned as it is."
          },
          {
            "name": "fillString",
            "description": "The string to pad the current string with.\nIf this string is too long, it will be truncated and the left-most part will be applied.\nThe default value for this parameter is \" \" (U+0020)."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.trimEnd",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.trimStart",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.trimLeft",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the leading white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.trimRight",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the trailing white space and line terminator characters from a string.",
        "params": [],
        "deprecated": true
      }
    },
    {
      "name": "ProjectPrivacy.matchAll",
      "parameters": [
        {
          "name": "regexp",
          "type": "RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpExecArray>",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.__@iterator@5831",
      "parameters": [],
      "returnType": "StringIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "ProjectPrivacy.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "xaiDescription": "Returns the character at the specified index in the string."
      }
    },
    {
      "name": "getExpoSDKVersion",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "exp",
          "type": "Pick<ExpoConfig, \"sdkVersion\">",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Resolve the Expo SDK Version either from the input Expo config or from the installed\nversion of the `expo` package.",
        "deprecated": false
      }
    },
    {
      "name": "ConfigError.captureStackTrace",
      "parameters": [
        {
          "name": "targetObject",
          "type": "object",
          "optional": false
        },
        {
          "name": "constructorOpt",
          "type": "Function",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Create .stack property on a target object",
        "deprecated": false
      }
    },
    {
      "name": "ConfigError.prepareStackTrace",
      "parameters": [
        {
          "name": "err",
          "type": "Error",
          "optional": false
        },
        {
          "name": "stackTraces",
          "type": "CallSite[]",
          "optional": false
        }
      ],
      "returnType": "any",
      "jsdoc": {
        "description": "Optional override for formatting stack traces",
        "params": [],
        "deprecated": false
      }
    },
    {
      "name": "ConfigError.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ConfigError.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ConfigError.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ConfigError.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "ConfigError.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "ConfigError.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "pop",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
        "deprecated": false
      }
    },
    {
      "name": "push",
      "parameters": [
        {
          "name": "items",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Appends new elements to the end of an array, and returns the new length of the array.",
        "params": [
          {
            "name": "items",
            "description": "New elements to add to the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "join",
      "parameters": [
        {
          "name": "separator",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Adds all the elements of an array into a string, separated by the specified separator string.",
        "params": [
          {
            "name": "separator",
            "description": "A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "reverse",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
        "deprecated": false
      }
    },
    {
      "name": "shift",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
        "deprecated": false
      }
    },
    {
      "name": "sort",
      "parameters": [
        {
          "name": "compareFn",
          "type": "(a: string, b: string) => number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.",
        "params": [
          {
            "name": "compareFn",
            "description": "Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, UTF-16 code unit order.\nts\n[11,2,22,1].sort((a, b) => a - b)\n"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "splice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "deleteCount",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based location in the array from which to start removing elements."
          },
          {
            "name": "deleteCount",
            "description": "The number of elements to remove."
          }
        ],
        "returns": "An array containing the elements that were deleted.",
        "deprecated": false
      }
    },
    {
      "name": "unshift",
      "parameters": [
        {
          "name": "items",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Inserts new elements at the start of an array, and returns the new length of the array.",
        "params": [
          {
            "name": "items",
            "description": "Elements to insert at the start of the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "every",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: string, index: number, array: string[]) => value is S",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether all the members of an array satisfy the specified test.",
        "params": [
          {
            "name": "predicate",
            "description": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "some",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: string, index: number, array: string[]) => unknown",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether the specified callback function returns true for any element of an array.",
        "params": [
          {
            "name": "predicate",
            "description": "A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "forEach",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(value: string, index: number, array: string[]) => void",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Performs the specified action for each element in an array.",
        "params": [
          {
            "name": "callbackfn",
            "description": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "map",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(value: string, index: number, array: string[]) => U",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "U[]",
      "jsdoc": {
        "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
        "params": [
          {
            "name": "callbackfn",
            "description": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "filter",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: string, index: number, array: string[]) => value is S",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "S[]",
      "jsdoc": {
        "description": "Returns the elements of an array that meet the condition specified in a callback function.",
        "params": [
          {
            "name": "predicate",
            "description": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "reduce",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
        "params": [
          {
            "name": "callbackfn",
            "description": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
          },
          {
            "name": "initialValue",
            "description": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "reduceRight",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
        "params": [
          {
            "name": "callbackfn",
            "description": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
          },
          {
            "name": "initialValue",
            "description": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "find",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: string, index: number, obj: string[]) => value is S",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "S",
      "jsdoc": {
        "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.",
        "params": [
          {
            "name": "predicate",
            "description": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined."
          },
          {
            "name": "thisArg",
            "description": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "findIndex",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: string, index: number, obj: string[]) => unknown",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.",
        "params": [
          {
            "name": "predicate",
            "description": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1."
          },
          {
            "name": "thisArg",
            "description": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "fill",
      "parameters": [
        {
          "name": "value",
          "type": "string",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array",
        "params": [
          {
            "name": "value",
            "description": "value to fill array section with"
          },
          {
            "name": "start",
            "description": "index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array."
          },
          {
            "name": "end",
            "description": "index to stop filling the array at. If end is negative, it is treated as\nlength+end."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "copyWithin",
      "parameters": [
        {
          "name": "target",
          "type": "number",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target",
        "params": [
          {
            "name": "target",
            "description": "If target is negative, it is treated as length+target where length is the\nlength of the array."
          },
          {
            "name": "start",
            "description": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end."
          },
          {
            "name": "end",
            "description": "If not specified, length of the this object is used as its default value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "entries",
      "parameters": [],
      "returnType": "ArrayIterator<[number, string]>",
      "jsdoc": {
        "description": "Returns an iterable of key, value pairs for every entry in the array",
        "deprecated": false
      }
    },
    {
      "name": "keys",
      "parameters": [],
      "returnType": "ArrayIterator<number>",
      "jsdoc": {
        "description": "Returns an iterable of keys in the array",
        "deprecated": false
      }
    },
    {
      "name": "values",
      "parameters": [],
      "returnType": "ArrayIterator<string>",
      "jsdoc": {
        "description": "Returns an iterable of values in the array",
        "deprecated": false
      }
    },
    {
      "name": "flatMap",
      "parameters": [
        {
          "name": "callback",
          "type": "(this: This, value: string, index: number, array: string[]) => U | readonly U[]",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "This",
          "optional": true
        }
      ],
      "returnType": "U[]",
      "jsdoc": {
        "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.",
        "params": [
          {
            "name": "callback",
            "description": "A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "flat",
      "parameters": [
        {
          "name": "depth",
          "type": "D",
          "optional": true
        }
      ],
      "returnType": "FlatArray<A, D>[]",
      "jsdoc": {
        "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.",
        "params": [
          {
            "name": "depth",
            "description": "The maximum recursion depth"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "__@iterator@6157",
      "parameters": [],
      "returnType": "ArrayIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.pop",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.push",
      "parameters": [
        {
          "name": "items",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Appends new elements to the end of an array, and returns the new length of the array.",
        "params": [
          {
            "name": "items",
            "description": "New elements to add to the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.concat",
      "parameters": [
        {
          "name": "items",
          "type": "ConcatArray<string>[]",
          "optional": false
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.",
        "params": [
          {
            "name": "items",
            "description": "Additional arrays and/or items to add to the end of the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.join",
      "parameters": [
        {
          "name": "separator",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Adds all the elements of an array into a string, separated by the specified separator string.",
        "params": [
          {
            "name": "separator",
            "description": "A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.reverse",
      "parameters": [],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.shift",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.",
        "params": [
          {
            "name": "start",
            "description": "The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0."
          },
          {
            "name": "end",
            "description": "The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.sort",
      "parameters": [
        {
          "name": "compareFn",
          "type": "(a: string, b: string) => number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.",
        "params": [
          {
            "name": "compareFn",
            "description": "Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, UTF-16 code unit order.\nts\n[11,2,22,1].sort((a, b) => a - b)\n"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.splice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "deleteCount",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
        "params": [
          {
            "name": "start",
            "description": "The zero-based location in the array from which to start removing elements."
          },
          {
            "name": "deleteCount",
            "description": "The number of elements to remove."
          }
        ],
        "returns": "An array containing the elements that were deleted.",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.unshift",
      "parameters": [
        {
          "name": "items",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Inserts new elements at the start of an array, and returns the new length of the array.",
        "params": [
          {
            "name": "items",
            "description": "Elements to insert at the start of the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.indexOf",
      "parameters": [
        {
          "name": "searchElement",
          "type": "string",
          "optional": false
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
        "params": [
          {
            "name": "searchElement",
            "description": "The value to locate in the array."
          },
          {
            "name": "fromIndex",
            "description": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.lastIndexOf",
      "parameters": [
        {
          "name": "searchElement",
          "type": "string",
          "optional": false
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
        "params": [
          {
            "name": "searchElement",
            "description": "The value to locate in the array."
          },
          {
            "name": "fromIndex",
            "description": "The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.every",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: string, index: number, array: string[]) => value is S",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether all the members of an array satisfy the specified test.",
        "params": [
          {
            "name": "predicate",
            "description": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.some",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: string, index: number, array: string[]) => unknown",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether the specified callback function returns true for any element of an array.",
        "params": [
          {
            "name": "predicate",
            "description": "A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.forEach",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(value: string, index: number, array: string[]) => void",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "void",
      "jsdoc": {
        "description": "Performs the specified action for each element in an array.",
        "params": [
          {
            "name": "callbackfn",
            "description": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.map",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(value: string, index: number, array: string[]) => U",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "U[]",
      "jsdoc": {
        "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
        "params": [
          {
            "name": "callbackfn",
            "description": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.filter",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: string, index: number, array: string[]) => value is S",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "S[]",
      "jsdoc": {
        "description": "Returns the elements of an array that meet the condition specified in a callback function.",
        "params": [
          {
            "name": "predicate",
            "description": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.reduce",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
        "params": [
          {
            "name": "callbackfn",
            "description": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
          },
          {
            "name": "initialValue",
            "description": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.reduceRight",
      "parameters": [
        {
          "name": "callbackfn",
          "type": "(previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
        "params": [
          {
            "name": "callbackfn",
            "description": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
          },
          {
            "name": "initialValue",
            "description": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.find",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: string, index: number, obj: string[]) => value is S",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "S",
      "jsdoc": {
        "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.",
        "params": [
          {
            "name": "predicate",
            "description": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined."
          },
          {
            "name": "thisArg",
            "description": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.findIndex",
      "parameters": [
        {
          "name": "predicate",
          "type": "(value: string, index: number, obj: string[]) => unknown",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "any",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.",
        "params": [
          {
            "name": "predicate",
            "description": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1."
          },
          {
            "name": "thisArg",
            "description": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.fill",
      "parameters": [
        {
          "name": "value",
          "type": "string",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array",
        "params": [
          {
            "name": "value",
            "description": "value to fill array section with"
          },
          {
            "name": "start",
            "description": "index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array."
          },
          {
            "name": "end",
            "description": "index to stop filling the array at. If end is negative, it is treated as\nlength+end."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.copyWithin",
      "parameters": [
        {
          "name": "target",
          "type": "number",
          "optional": false
        },
        {
          "name": "start",
          "type": "number",
          "optional": false
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target",
        "params": [
          {
            "name": "target",
            "description": "If target is negative, it is treated as length+target where length is the\nlength of the array."
          },
          {
            "name": "start",
            "description": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end."
          },
          {
            "name": "end",
            "description": "If not specified, length of the this object is used as its default value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.entries",
      "parameters": [],
      "returnType": "ArrayIterator<[number, string]>",
      "jsdoc": {
        "description": "Returns an iterable of key, value pairs for every entry in the array",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.keys",
      "parameters": [],
      "returnType": "ArrayIterator<number>",
      "jsdoc": {
        "description": "Returns an iterable of keys in the array",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.values",
      "parameters": [],
      "returnType": "ArrayIterator<string>",
      "jsdoc": {
        "description": "Returns an iterable of values in the array",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.includes",
      "parameters": [
        {
          "name": "searchElement",
          "type": "string",
          "optional": false
        },
        {
          "name": "fromIndex",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Determines whether an array includes a certain element, returning true or false as appropriate.",
        "params": [
          {
            "name": "searchElement",
            "description": "The element to search for."
          },
          {
            "name": "fromIndex",
            "description": "The position in this array at which to begin searching for searchElement."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.flatMap",
      "parameters": [
        {
          "name": "callback",
          "type": "(this: This, value: string, index: number, array: string[]) => U | readonly U[]",
          "optional": false
        },
        {
          "name": "thisArg",
          "type": "This",
          "optional": true
        }
      ],
      "returnType": "U[]",
      "jsdoc": {
        "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1.",
        "params": [
          {
            "name": "callback",
            "description": "A function that accepts up to three arguments. The flatMap method calls the\ncallback function one time for each element in the array."
          },
          {
            "name": "thisArg",
            "description": "An object to which the this keyword can refer in the callback function. If\nthisArg is omitted, undefined is used as the this value."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.flat",
      "parameters": [
        {
          "name": "depth",
          "type": "D",
          "optional": true
        }
      ],
      "returnType": "FlatArray<A, D>[]",
      "jsdoc": {
        "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth.",
        "params": [
          {
            "name": "depth",
            "description": "The maximum recursion depth"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.__@iterator@6157",
      "parameters": [],
      "returnType": "ArrayIterator<string>",
      "jsdoc": {
        "description": "Iterator",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_IGNORE_PATHS.at",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": null,
      "xaiDescription": "Returns the element at the specified index in the array."
    },
    {
      "name": "DEFAULT_SOURCE_SKIPS.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_SOURCE_SKIPS.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_SOURCE_SKIPS.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_SOURCE_SKIPS.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_SOURCE_SKIPS.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "DEFAULT_SOURCE_SKIPS.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "createFingerprintAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "Options",
          "optional": true
        }
      ],
      "returnType": "Promise<Fingerprint>",
      "jsdoc": {
        "description": "Create a fingerprint from project",
        "deprecated": false
      }
    },
    {
      "name": "createProjectHashAsync",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "Options",
          "optional": true
        }
      ],
      "returnType": "Promise<string>",
      "jsdoc": {
        "description": "Create a native hash value from project",
        "deprecated": false
      }
    },
    {
      "name": "diffFingerprintChangesAsync",
      "parameters": [
        {
          "name": "fingerprint",
          "type": "Fingerprint",
          "optional": false
        },
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "options",
          "type": "Options",
          "optional": true
        }
      ],
      "returnType": "Promise<FingerprintDiffItem[]>",
      "jsdoc": {
        "description": "Differentiate given `fingerprint` with the current project fingerprint state",
        "deprecated": false
      }
    },
    {
      "name": "diffFingerprints",
      "parameters": [
        {
          "name": "fingerprint1",
          "type": "Fingerprint",
          "optional": false
        },
        {
          "name": "fingerprint2",
          "type": "Fingerprint",
          "optional": false
        }
      ],
      "returnType": "FingerprintDiffItem[]",
      "jsdoc": {
        "description": "Differentiate two fingerprints with operation type.\nThe implementation is assumed that the sources are sorted.",
        "deprecated": false
      }
    },
    {
      "name": "SourceSkips.toString",
      "parameters": [
        {
          "name": "radix",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of an object.",
        "params": [
          {
            "name": "radix",
            "description": "Specifies a radix for converting numeric values to strings. This value is only used for numbers."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "SourceSkips.toFixed",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representing a number in fixed-point notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "SourceSkips.toExponential",
      "parameters": [
        {
          "name": "fractionDigits",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented in exponential notation.",
        "params": [
          {
            "name": "fractionDigits",
            "description": "Number of digits after the decimal point. Must be in the range 0 - 20, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "SourceSkips.toPrecision",
      "parameters": [
        {
          "name": "precision",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.",
        "params": [
          {
            "name": "precision",
            "description": "Number of significant digits. Must be in the range 1 - 21, inclusive."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "SourceSkips.valueOf",
      "parameters": [],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the primitive value of the specified object.",
        "deprecated": false
      }
    },
    {
      "name": "SourceSkips.toLocaleString",
      "parameters": [
        {
          "name": "locales",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "options",
          "type": "NumberFormatOptions",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Converts a number to a string by using the current or specified locale.",
        "params": [
          {
            "name": "locales",
            "description": "A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used."
          },
          {
            "name": "options",
            "description": "An object that contains one or more properties that specify comparison options."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "createStableModuleIdFactory",
      "parameters": [
        {
          "name": "root",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "(path: string, context?: { platform: string; environment?: string; }) => number",
      "jsdoc": null,
      "xaiDescription": "Creates a factory for generating stable module IDs based on a root path."
    },
    {
      "name": "getDefaultConfig",
      "parameters": [
        {
          "name": "projectRoot",
          "type": "string",
          "optional": false
        },
        {
          "name": "__1",
          "type": "DefaultConfigOptions",
          "optional": true
        }
      ],
      "returnType": "InputConfigT",
      "jsdoc": null,
      "xaiDescription": "Retrieves the default configuration for a project."
    },
    {
      "name": "exec",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "RegExpExecArray",
      "jsdoc": {
        "description": "Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "string",
            "description": "The String object or string literal on which to perform the search."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "test",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns a Boolean value that indicates whether or not a pattern exists in a searched string.",
        "params": [
          {
            "name": "string",
            "description": "String on which to perform the search."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "compile",
      "parameters": [
        {
          "name": "pattern",
          "type": "string",
          "optional": false
        },
        {
          "name": "flags",
          "type": "string",
          "optional": true
        }
      ],
      "returnType": "RegExp",
      "jsdoc": {
        "description": "",
        "params": [],
        "deprecated": true
      },
      "xaiDescription": "Compiles a regular expression pattern into a RegExp object."
    },
    {
      "name": "__@match@6458",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with this regular expression, and returns an array containing the results of\nthat search.",
        "params": [
          {
            "name": "string",
            "description": "A string to search within."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "__@replace@6460",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using this regular expression.",
        "params": [
          {
            "name": "string",
            "description": "A String object or string literal whose contents matching against\nthis regular expression will be replaced"
          },
          {
            "name": "replaceValue",
            "description": "A String object or string literal containing the text to replace for every\nsuccessful match of this regular expression."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "__@search@6463",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the position beginning first substring match in a regular expression search\nusing this regular expression.",
        "params": [
          {
            "name": "string",
            "description": "The string to search within."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "__@split@6465",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Returns an array of substrings that were delimited by strings in the original input that\nmatch against this regular expression.\n\nIf the regular expression contains capturing parentheses, then each time this\nregular expression matches, the results (including any undefined results) of the\ncapturing parentheses are spliced.",
        "params": [
          {
            "name": "string",
            "description": "string value to split"
          },
          {
            "name": "limit",
            "description": "if not undefined, the output array is truncated so that it contains no more\nthan 'limit' elements."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "__@matchAll@6467",
      "parameters": [
        {
          "name": "str",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "RegExpStringIterator<RegExpMatchArray>",
      "jsdoc": {
        "description": "Matches a string with this regular expression, and returns an iterable of matches\ncontaining the results of that search.",
        "params": [
          {
            "name": "string",
            "description": "A string to search within."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.exec",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "RegExpExecArray",
      "jsdoc": {
        "description": "Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "string",
            "description": "The String object or string literal on which to perform the search."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.test",
      "parameters": [
        {
          "name": "string",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "boolean",
      "jsdoc": {
        "description": "Returns a Boolean value that indicates whether or not a pattern exists in a searched string.",
        "params": [
          {
            "name": "string",
            "description": "String on which to perform the search."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.toString",
      "parameters": [],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string representation of a string.",
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.charAt",
      "parameters": [
        {
          "name": "pos",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns the character at the specified index.",
        "params": [
          {
            "name": "pos",
            "description": "The zero-based index of the desired character."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.charCodeAt",
      "parameters": [
        {
          "name": "index",
          "type": "number",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the Unicode value of the character at the specified location.",
        "params": [
          {
            "name": "index",
            "description": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.concat",
      "parameters": [
        {
          "name": "strings",
          "type": "string[]",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a string that contains the concatenation of two or more strings.",
        "params": [
          {
            "name": "strings",
            "description": "The strings to append to the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.indexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the position of the first occurrence of a substring.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for in the string"
          },
          {
            "name": "position",
            "description": "The index at which to begin searching the String object. If omitted, search starts at the beginning of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.lastIndexOf",
      "parameters": [
        {
          "name": "searchString",
          "type": "string",
          "optional": false
        },
        {
          "name": "position",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Returns the last occurrence of a substring in the string.",
        "params": [
          {
            "name": "searchString",
            "description": "The substring to search for."
          },
          {
            "name": "position",
            "description": "The index at which to begin searching. If omitted, the search begins at the end of the string."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.localeCompare",
      "parameters": [
        {
          "name": "that",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Determines whether two strings are equivalent in the current locale.",
        "params": [
          {
            "name": "that",
            "description": "String to compare to target string"
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.match",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "RegExpMatchArray",
      "jsdoc": {
        "description": "Matches a string with a regular expression, and returns an array containing the results of that search.",
        "params": [
          {
            "name": "regexp",
            "description": "A variable name or string literal containing the regular expression pattern and flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.replace",
      "parameters": [
        {
          "name": "searchValue",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "replaceValue",
          "type": "string",
          "optional": false
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Replaces text in a string, using a regular expression or search string.",
        "params": [
          {
            "name": "searchValue",
            "description": "A string or regular expression to search for."
          },
          {
            "name": "replaceValue",
            "description": "A string containing the text to replace. When the    is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of    is replaced."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.search",
      "parameters": [
        {
          "name": "regexp",
          "type": "string | RegExp",
          "optional": false
        }
      ],
      "returnType": "number",
      "jsdoc": {
        "description": "Finds the first substring match in a regular expression search.",
        "params": [
          {
            "name": "regexp",
            "description": "The regular expression pattern and applicable flags."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.slice",
      "parameters": [
        {
          "name": "start",
          "type": "number",
          "optional": true
        },
        {
          "name": "end",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string",
      "jsdoc": {
        "description": "Returns a section of a string.",
        "params": [
          {
            "name": "start",
            "description": "The index to the beginning of the specified portion of stringObj."
          },
          {
            "name": "end",
            "description": "The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."
          }
        ],
        "deprecated": false
      }
    },
    {
      "name": "INTERNAL_CALLSITES_REGEX.split",
      "parameters": [
        {
          "name": "separator",
          "type": "string | RegExp",
          "optional": false
        },
        {
          "name": "limit",
          "type": "number",
          "optional": true
        }
      ],
      "returnType": "string[]",
      "jsdoc": {
        "description": "Split a string into substrings using the specified separator and return them as an array.",
        "params": [
          {
            "name": "separator",
            "description": "A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned."
          },
          {
            "name": "limit",
            "description": "A value used to limit the number of elements returned in the array."
          }
        ],
        "deprecated": false
      }
    }
  ],
  "enums": [],
  "types": [
    {
      "name": "MessageKeyTypeBase",
      "type": "MessageKeyTypeBase",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "A message frame packer that serializes a messageKey and a payload into either a JSON string\n(fast path) or a binary format (for complex payloads).\n\nFast Path (JSON.stringify/JSON.parse):\n- For simple payloads (e.g., strings, numbers, null, undefined, or plain objects), the packer\n  uses `JSON.stringify` for serialization and `JSON.parse` for deserialization, ensuring\n  optimal performance.\n\nBinary Format:\n- For more complex payloads (e.g., Uint8Array, ArrayBuffer, Blob), the packer uses a binary\n  format with the following structure:\n\n  +------------------+-------------------+----------------------------+--------------------------+\n  | 4 bytes (Uint32) | Variable length   | 1 byte (Uint8)             | Variable length          |\n  | MessageKeyLength | MessageKey (JSON) | PayloadTypeIndicator (enum)| Payload (binary data)    |\n  +------------------+-------------------+----------------------------+--------------------------+\n\n  1. MessageKeyLength (4 bytes):\n     - A 4-byte unsigned integer indicating the length of the MessageKey JSON string.\n\n  2. MessageKey (Variable length):\n     - The JSON string representing the message key, encoded as UTF-8.\n\n  3. PayloadTypeIndicator (1 byte):\n     - A single byte enum value representing the type of the payload (e.g., Uint8Array, String,\n       Object, ArrayBuffer, Blob).\n\n  4. Payload (Variable length):\n     - The actual payload data, which can vary in type and length depending on the PayloadType.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "PayloadType",
      "type": "PayloadType",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string) | ((radix?: number) => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object) | (() => number) | (() => Uint8Array<ArrayBufferLike>)",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; } | { ...; }",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Type representing the possible payload types.",
        "xaiDescription": "Defines types of message payloads."
      },
      "isExported": false
    },
    {
      "name": "MessageFrame",
      "type": "MessageFrame<T>",
      "properties": [
        {
          "name": "messageKey",
          "type": "T",
          "optional": false
        },
        {
          "name": "payload",
          "type": "PayloadType",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Represents a message frame with a key and optional payload.",
        "xaiDescription": "Structure for message frames."
      },
      "isExported": false
    },
    {
      "name": "Options",
      "type": "Options",
      "properties": [
        {
          "name": "retriesInterval",
          "type": "number",
          "optional": true
        },
        {
          "name": "maxRetries",
          "type": "number",
          "optional": true
        },
        {
          "name": "connectTimeout",
          "type": "number",
          "optional": true
        },
        {
          "name": "onError",
          "type": "(error: Error) => void",
          "optional": true
        },
        {
          "name": "onReconnect",
          "type": "(reason: string) => void",
          "optional": true
        },
        {
          "name": "binaryType",
          "type": "\"arraybuffer\" | \"blob\"",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Options for configuring connection behavior.",
        "xaiDescription": "Settings for connection management."
      },
      "isExported": false
    },
    {
      "name": "ConnectionInfo",
      "type": "ConnectionInfo",
      "properties": [
        {
          "name": "sender",
          "type": "\"app\" | \"browser\"",
          "optional": false
        },
        {
          "name": "devServer",
          "type": "string",
          "optional": false
        },
        {
          "name": "pluginName",
          "type": "string",
          "optional": false
        },
        {
          "name": "wsStore",
          "type": "WebSocketBackingStore",
          "optional": true
        },
        {
          "name": "protocolVersion",
          "type": "number",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "The connection info for devtools plugins client.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "DevToolsPluginClientOptions",
      "type": "DevToolsPluginClientOptions",
      "properties": [
        {
          "name": "websocketBinaryType",
          "type": "\"arraybuffer\" | \"blob\"",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Options for the devtools plugin client.",
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "HandshakeMessageParams",
      "type": "HandshakeMessageParams",
      "properties": [
        {
          "name": "protocolVersion",
          "type": "number",
          "optional": false
        },
        {
          "name": "pluginName",
          "type": "string",
          "optional": false
        },
        {
          "name": "method",
          "type": "\"handshake\" | \"terminateBrowserClient\"",
          "optional": false
        },
        {
          "name": "browserClientId",
          "type": "string",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "The handshake messages for the devtools plugin client.",
        "params": [],
        "deprecated": false
      },
      "isExported": false
    },
    {
      "name": "JSONValue",
      "type": "JSONValue",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | ((radix?: number) => string) | (() => string) | (() => string)",
          "optional": false
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => number) | (() => boolean) | (() => Object)",
          "optional": false
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; } | { ...; }",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Represents a value that can be serialized to JSON.",
        "xaiDescription": "Type for JSON-serializable values."
      },
      "isExported": false
    },
    {
      "name": "JSONArray",
      "type": "JSONArray",
      "properties": [
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Number of elements in the JSONArray."
        },
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Returns a string representation of the JSONArray."
        },
        {
          "name": "toLocaleString",
          "type": "{ (): string; (locales: string | string[], options?: NumberFormatOptions & DateTimeFormatOptions): string; }",
          "optional": false,
          "xaiDescription": "Returns a locale-specific string representation of the JSONArray."
        },
        {
          "name": "pop",
          "type": "() => JSONValue",
          "optional": false,
          "xaiDescription": "Removes and returns the last element from the JSONArray."
        },
        {
          "name": "push",
          "type": "(...items: JSONValue[]) => number",
          "optional": false,
          "xaiDescription": "Adds elements to the end of the JSONArray, returns new length."
        },
        {
          "name": "concat",
          "type": "{ (...items: ConcatArray<JSONValue>[]): JSONValue[]; (...items: (JSONValue | ConcatArray<JSONValue>)[]): JSONValue[]; }",
          "optional": false,
          "xaiDescription": "Combines the JSONArray with other arrays or values."
        },
        {
          "name": "join",
          "type": "(separator?: string) => string",
          "optional": false,
          "xaiDescription": "Joins all elements of the JSONArray into a string."
        },
        {
          "name": "reverse",
          "type": "() => JSONValue[]",
          "optional": false,
          "xaiDescription": "Reverses the order of elements in the JSONArray."
        },
        {
          "name": "shift",
          "type": "() => JSONValue",
          "optional": false,
          "xaiDescription": "Removes and returns the first element from the JSONArray."
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => JSONValue[]",
          "optional": false,
          "xaiDescription": "Returns a shallow copy of a portion of the JSONArray."
        },
        {
          "name": "sort",
          "type": "(compareFn?: (a: JSONValue, b: JSONValue) => number) => JSONArray",
          "optional": false,
          "xaiDescription": "Sorts the elements of the JSONArray in place."
        },
        {
          "name": "splice",
          "type": "{ (start: number, deleteCount?: number): JSONValue[]; (start: number, deleteCount: number, ...items: JSONValue[]): JSONValue[]; }",
          "optional": false,
          "xaiDescription": "Changes the contents of the JSONArray by removing or replacing existing elements and/or adding new elements."
        },
        {
          "name": "unshift",
          "type": "(...items: JSONValue[]) => number",
          "optional": false,
          "xaiDescription": "Adds elements to the beginning of the JSONArray, returns new length."
        },
        {
          "name": "indexOf",
          "type": "(searchElement: JSONValue, fromIndex?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the first index at which a given element can be found in the JSONArray, or -1 if it is not present."
        },
        {
          "name": "lastIndexOf",
          "type": "(searchElement: JSONValue, fromIndex?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the last index at which a given element can be found in the JSONArray, or -1 if it is not present."
        },
        {
          "name": "every",
          "type": "{ <S extends JSONValue>(predicate: (value: JSONValue, index: number, array: JSONValue[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: JSONValue, index: number, array: JSONValue[]) => unknown, thisArg?: any): boolean; }",
          "optional": false,
          "xaiDescription": "Tests whether all elements in the JSONArray pass the test implemented by the provided function."
        },
        {
          "name": "some",
          "type": "(predicate: (value: JSONValue, index: number, array: JSONValue[]) => unknown, thisArg?: any) => boolean",
          "optional": false,
          "xaiDescription": "Tests whether at least one element in the JSONArray passes the test implemented by the provided function."
        },
        {
          "name": "forEach",
          "type": "(callbackfn: (value: JSONValue, index: number, array: JSONValue[]) => void, thisArg?: any) => void",
          "optional": false,
          "xaiDescription": "Executes a provided function once for each JSONArray element."
        },
        {
          "name": "map",
          "type": "<U>(callbackfn: (value: JSONValue, index: number, array: JSONValue[]) => U, thisArg?: any) => U[]",
          "optional": false,
          "xaiDescription": "Creates a new array with the results of calling a provided function on every element in the JSONArray."
        },
        {
          "name": "filter",
          "type": "{ <S extends JSONValue>(predicate: (value: JSONValue, index: number, array: JSONValue[]) => value is S, thisArg?: any): S[]; (predicate: (value: JSONValue, index: number, array: JSONValue[]) => unknown, thisArg?: any): JSONValue[]; }",
          "optional": false,
          "xaiDescription": "Creates a new array with all elements that pass the test implemented by the provided function."
        },
        {
          "name": "reduce",
          "type": "{ (callbackfn: (previousValue: JSONValue, currentValue: JSONValue, currentIndex: number, array: JSONValue[]) => JSONValue): JSONValue; (callbackfn: (previousValue: JSONValue, currentValue: JSONValue, currentIndex: number, array: JSONValue[]) => JSONValue, initialValue: JSONValue): JSONValue; <U>(callbackfn: (previousValue: U, currentValue: JSONValue, currentIndex: number, array: JSONValue[]) => U, initialValue: U): U; }",
          "optional": false,
          "xaiDescription": "Applies a function against an accumulator and each element in the JSONArray (from left to right) to reduce it to a single value."
        },
        {
          "name": "reduceRight",
          "type": "{ (callbackfn: (previousValue: JSONValue, currentValue: JSONValue, currentIndex: number, array: JSONValue[]) => JSONValue): JSONValue; (callbackfn: (previousValue: JSONValue, currentValue: JSONValue, currentIndex: number, array: JSONValue[]) => JSONValue, initialValue: JSONValue): JSONValue; <U>(callbackfn: (previousValue: U, currentValue: JSONValue, currentIndex: number, array: JSONValue[]) => U, initialValue: U): U; }",
          "optional": false,
          "xaiDescription": "Applies a function against an accumulator and each element in the JSONArray (from right to left) to reduce it to a single value."
        },
        {
          "name": "find",
          "type": "{ <S extends JSONValue>(predicate: (value: JSONValue, index: number, obj: JSONValue[]) => value is S, thisArg?: any): S; (predicate: (value: JSONValue, index: number, obj: JSONValue[]) => unknown, thisArg?: any): JSONValue; }",
          "optional": false,
          "xaiDescription": "Returns the value of the first element in the JSONArray that satisfies the provided testing function."
        },
        {
          "name": "findIndex",
          "type": "(predicate: (value: JSONValue, index: number, obj: JSONValue[]) => unknown, thisArg?: any) => number",
          "optional": false,
          "xaiDescription": "Returns the index of the first element in the JSONArray that satisfies the provided testing function."
        },
        {
          "name": "fill",
          "type": "(value: JSONValue, start?: number, end?: number) => JSONArray",
          "optional": false,
          "xaiDescription": "Fills all the elements of the JSONArray from a start index to an end index with a static value."
        },
        {
          "name": "copyWithin",
          "type": "(target: number, start: number, end?: number) => JSONArray",
          "optional": false,
          "xaiDescription": "Copies a sequence of array elements within the JSONArray."
        },
        {
          "name": "entries",
          "type": "() => ArrayIterator<[number, JSONValue]>",
          "optional": false,
          "xaiDescription": "Returns a new Array Iterator object that contains the key/value pairs for each index in the JSONArray."
        },
        {
          "name": "keys",
          "type": "() => ArrayIterator<number>",
          "optional": false,
          "xaiDescription": "Returns a new Array Iterator that contains the keys for each index in the JSONArray."
        },
        {
          "name": "values",
          "type": "() => ArrayIterator<JSONValue>",
          "optional": false,
          "xaiDescription": "Returns a new Array Iterator object that contains the values for each index in the JSONArray."
        },
        {
          "name": "includes",
          "type": "(searchElement: JSONValue, fromIndex?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the JSONArray includes a certain element, returning true or false as appropriate."
        },
        {
          "name": "flatMap",
          "type": "<U, This = undefined>(callback: (this: This, value: JSONValue, index: number, array: JSONValue[]) => U | readonly U[], thisArg?: This) => U[]",
          "optional": false,
          "xaiDescription": "Returns a new array formed by applying a given callback function to each element of the JSONArray, and then flattening the result into a new array."
        },
        {
          "name": "flat",
          "type": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]",
          "optional": false,
          "xaiDescription": "Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth."
        },
        {
          "name": "__@iterator@1134",
          "type": "() => ArrayIterator<JSONValue>",
          "optional": false,
          "xaiDescription": "Returns a new Array Iterator object that contains the values for each index in the JSONArray."
        },
        {
          "name": "__@unscopables@1144",
          "type": "{ [x: number]: boolean; length?: boolean; toString?: boolean; toLocaleString?: boolean; pop?: boolean; push?: boolean; concat?: boolean; join?: boolean; reverse?: boolean; shift?: boolean; slice?: boolean; sort?: boolean; splice?: boolean; unshift?: boolean; indexOf?: boolean; lastIndexOf?: boolean; every?: boolean; some?: boolean; forEach?: boolean; map?: boolean; filter?: boolean; reduce?: boolean; reduceRight?: boolean; find?: boolean; findIndex?: boolean; fill?: boolean; copyWithin?: boolean; entries?: boolean; keys?: boolean; values?: boolean; includes?: boolean; flatMap?: boolean; flat?: boolean; at?: boolean; }",
          "optional": false,
          "xaiDescription": "Returns an object whose properties are the names of the JSONArray methods that should not be exposed in the `with` statement."
        },
        {
          "name": "at",
          "type": "(index: number) => JSONValue",
          "optional": false,
          "xaiDescription": "Returns the element at the specified index in the JSONArray."
        }
      ],
      "extends": [
        "Array<JSONValue>"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents an array of JSON values."
    },
    {
      "name": "JSONObject",
      "type": "JSONObject",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a JSON object."
    },
    {
      "name": "BridgeMessage",
      "type": "BridgeMessage<TData>",
      "properties": [
        {
          "name": "type",
          "type": "string",
          "optional": false,
          "xaiDescription": "The type of the bridge message."
        },
        {
          "name": "data",
          "type": "TData",
          "optional": false,
          "xaiDescription": "The data associated with the bridge message."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a message sent over a bridge."
    },
    {
      "name": "DOMImperativeFactory",
      "type": "DOMImperativeFactory",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "The return type of the init function for `useDOMImperativeHandle`.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Factory for DOM imperative handles."
    },
    {
      "name": "RNWebViewRef",
      "type": "/*unresolved*/ any",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Reference to a React Native WebView."
    },
    {
      "name": "WebViewRef",
      "type": "/*unresolved*/ any",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Reference to a WebView."
    },
    {
      "name": "WebViewProps",
      "type": "/*unresolved*/ any",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Properties for a WebView."
    },
    {
      "name": "DOMProps",
      "type": "DOMProps",
      "properties": [
        {
          "name": "matchContents",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to match the contents of the DOM element."
        },
        {
          "name": "useExpoDOMWebView",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to use the Expo DOM WebView."
        }
      ],
      "extends": [
        "Omit<RNWebViewProps, 'source'>"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Properties for a DOM element, excluding the 'source' property."
    },
    {
      "name": "UseDebugZeroHeightType",
      "type": "UseDebugZeroHeightType",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Type for debugging zero height issues."
    },
    {
      "name": "Props",
      "type": "Props",
      "properties": [
        {
          "name": "dom",
          "type": "DOMProps",
          "optional": true,
          "xaiDescription": "DOM properties for the component."
        },
        {
          "name": "filePath",
          "type": "string",
          "optional": false,
          "xaiDescription": "The file path associated with the component."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Properties for a component."
    },
    {
      "name": "ExpoGoProjectConfig",
      "type": "ExpoGoProjectConfig",
      "properties": [
        {
          "name": "mainModuleName",
          "type": "string",
          "optional": true,
          "xaiDescription": "The name of the main module in the Expo Go project."
        },
        {
          "name": "debuggerHost",
          "type": "string",
          "optional": true,
          "xaiDescription": "The host for the debugger in the Expo Go project."
        },
        {
          "name": "logUrl",
          "type": "string",
          "optional": true,
          "xaiDescription": "The URL for logging in the Expo Go project."
        },
        {
          "name": "developer",
          "type": "{ [key: string]: any; tool?: string; }",
          "optional": true,
          "xaiDescription": "Developer information in the Expo Go project."
        },
        {
          "name": "packagerOpts",
          "type": "ExpoGoPackagerOpts",
          "optional": true,
          "xaiDescription": "Options for the packager in the Expo Go project."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Configuration for an Expo Go project."
    },
    {
      "name": "ExpoGoPackagerOpts",
      "type": "ExpoGoPackagerOpts",
      "properties": [
        {
          "name": "hostType",
          "type": "string",
          "optional": true,
          "xaiDescription": "The type of host for the packager."
        },
        {
          "name": "dev",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to run the packager in development mode."
        },
        {
          "name": "strict",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to run the packager in strict mode."
        },
        {
          "name": "minify",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to minify the code when running the packager."
        },
        {
          "name": "urlType",
          "type": "string",
          "optional": true,
          "xaiDescription": "The type of URL used by the packager."
        },
        {
          "name": "urlRandomness",
          "type": "string",
          "optional": true,
          "xaiDescription": "Randomness added to the URL by the packager."
        },
        {
          "name": "lanType",
          "type": "string",
          "optional": true,
          "xaiDescription": "The type of LAN used by the packager."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Options for the Expo Go packager."
    },
    {
      "name": "AnyEventListener",
      "type": "AnyEventListener",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Any type of event listener."
    },
    {
      "name": "InferEventName",
      "type": "InferEventName<TEventsMap>",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | ((radix?: number) => string) | (() => string)",
          "optional": false,
          "xaiDescription": "Converts the event name to a string."
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => number) | (() => symbol)",
          "optional": false,
          "xaiDescription": "Returns the primitive value of the event name."
        },
        {
          "name": "toLocaleString",
          "type": "(() => string) | { (locales?: string | string[], options?: NumberFormatOptions): string; (locales?: LocalesArgument, options?: NumberFormatOptions): string; }",
          "optional": false,
          "xaiDescription": "Returns a locale-specific string representation of the event name."
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Type helper that infers the event name from the emitter's events map.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Infers the event name from an events map."
    },
    {
      "name": "InferEventListener",
      "type": "InferEventListener<TEventsMap, TEventName>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "Type helper that infers the event listener from the emitter's events map.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Infers the event listener from an events map and event name."
    },
    {
      "name": "InferEventParameter",
      "type": "InferEventParameter<TEventListener, TInitialValue>",
      "properties": [],
      "extends": [],
      "jsdoc": {
        "description": "Type helper that infers the first parameter of the event listener.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Infers the first parameter of an event listener."
    },
    {
      "name": "InitialProps",
      "type": "InitialProps",
      "properties": [
        {
          "name": "exp",
          "type": "{ [key: string]: any; notification?: any; manifestString?: string; }",
          "optional": true,
          "xaiDescription": "Expo-related properties for the component."
        },
        {
          "name": "shell",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the component is running in a shell environment."
        },
        {
          "name": "shellManifestUrl",
          "type": "string",
          "optional": true,
          "xaiDescription": "The URL of the shell manifest for the component."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Initial properties for a component."
    },
    {
      "name": "ExpoFormDataValue",
      "type": "ExpoFormDataValue",
      "properties": [
        {
          "name": "toString",
          "type": "(() => string) | (() => string)",
          "optional": false,
          "xaiDescription": "Converts the ExpoFormDataValue to a string."
        },
        {
          "name": "slice",
          "type": "((start?: number, end?: number) => string) | ((start?: number, end?: number, contentType?: string) => Blob)",
          "optional": false,
          "xaiDescription": "Extracts a section of the ExpoFormDataValue."
        },
        {
          "name": "valueOf",
          "type": "(() => string) | (() => Object)",
          "optional": false,
          "xaiDescription": "Returns the primitive value of the ExpoFormDataValue."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a value in Expo FormData."
    },
    {
      "name": "ExpoFormDataPart",
      "type": "ExpoFormDataPart",
      "properties": [
        {
          "name": "headers",
          "type": "{ [name: string]: string; } | { [name: string]: string; } | { [name: string]: string; }",
          "optional": false,
          "xaiDescription": "Headers associated with the ExpoFormDataPart."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a part in Expo FormData."
    },
    {
      "name": "AbortSubscriptionCleanupFunction",
      "type": "AbortSubscriptionCleanupFunction",
      "properties": [],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Function to clean up an aborted subscription."
    },
    {
      "name": "NativeHeadersType",
      "type": "NativeHeadersType",
      "properties": [
        {
          "name": "length",
          "type": "number",
          "optional": false,
          "xaiDescription": "Number of headers in the NativeHeadersType."
        },
        {
          "name": "toString",
          "type": "() => string",
          "optional": false,
          "xaiDescription": "Converts the NativeHeadersType to a string."
        },
        {
          "name": "toLocaleString",
          "type": "{ (): string; (locales: string | string[], options?: NumberFormatOptions & DateTimeFormatOptions): string; }",
          "optional": false,
          "xaiDescription": "Converts the NativeHeadersType to a locale-specific string."
        },
        {
          "name": "pop",
          "type": "() => [string, string]",
          "optional": false,
          "xaiDescription": "Removes and returns the last header from the NativeHeadersType."
        },
        {
          "name": "push",
          "type": "(...items: [string, string][]) => number",
          "optional": false,
          "xaiDescription": "Adds headers to the end of the NativeHeadersType, returns new length."
        },
        {
          "name": "concat",
          "type": "{ (...items: ConcatArray<[string, string]>[]): [string, string][]; (...items: ([string, string] | ConcatArray<[string, string]>)[]): [string, string][]; }",
          "optional": false,
          "xaiDescription": "Combines the NativeHeadersType with other headers or arrays."
        },
        {
          "name": "join",
          "type": "(separator?: string) => string",
          "optional": false,
          "xaiDescription": "Joins all headers in the NativeHeadersType into a string."
        },
        {
          "name": "reverse",
          "type": "() => [string, string][]",
          "optional": false,
          "xaiDescription": "Reverses the order of headers in the NativeHeadersType."
        },
        {
          "name": "shift",
          "type": "() => [string, string]",
          "optional": false,
          "xaiDescription": "Removes and returns the first header from the NativeHeadersType."
        },
        {
          "name": "slice",
          "type": "(start?: number, end?: number) => [string, string][]",
          "optional": false,
          "xaiDescription": "Returns a shallow copy of a portion of the NativeHeadersType."
        },
        {
          "name": "sort",
          "type": "(compareFn?: (a: [string, string], b: [string, string]) => number) => NativeHeadersType",
          "optional": false,
          "xaiDescription": "Sorts the headers in the NativeHeadersType in place."
        },
        {
          "name": "splice",
          "type": "{ (start: number, deleteCount?: number): [string, string][]; (start: number, deleteCount: number, ...items: [string, string][]): [string, string][]; }",
          "optional": false,
          "xaiDescription": "Changes the contents of the NativeHeadersType by removing or replacing existing headers and/or adding new headers."
        },
        {
          "name": "unshift",
          "type": "(...items: [string, string][]) => number",
          "optional": false,
          "xaiDescription": "Adds headers to the beginning of the NativeHeadersType, returns new length."
        },
        {
          "name": "indexOf",
          "type": "(searchElement: [string, string], fromIndex?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the first index at which a given header can be found in the NativeHeadersType, or -1 if it is not present."
        },
        {
          "name": "lastIndexOf",
          "type": "(searchElement: [string, string], fromIndex?: number) => number",
          "optional": false,
          "xaiDescription": "Returns the last index at which a given header can be found in the NativeHeadersType, or -1 if it is not present."
        },
        {
          "name": "every",
          "type": "{ <S extends [string, string]>(predicate: (value: [string, string], index: number, array: [string, string][]) => value is S, thisArg?: any): this is S[]; (predicate: (value: [string, string], index: number, array: [string, string][]) => unknown, thisArg?: any): boolean; }",
          "optional": false,
          "xaiDescription": "Tests whether all headers in the NativeHeadersType pass the test implemented by the provided function."
        },
        {
          "name": "some",
          "type": "(predicate: (value: [string, string], index: number, array: [string, string][]) => unknown, thisArg?: any) => boolean",
          "optional": false,
          "xaiDescription": "Tests whether at least one header in the NativeHeadersType passes the test implemented by the provided function."
        },
        {
          "name": "forEach",
          "type": "(callbackfn: (value: [string, string], index: number, array: [string, string][]) => void, thisArg?: any) => void",
          "optional": false,
          "xaiDescription": "Executes a provided function once for each header in the NativeHeadersType."
        },
        {
          "name": "map",
          "type": "<U>(callbackfn: (value: [string, string], index: number, array: [string, string][]) => U, thisArg?: any) => U[]",
          "optional": false,
          "xaiDescription": "Creates a new array with the results of calling a provided function on every header in the NativeHeadersType."
        },
        {
          "name": "filter",
          "type": "{ <S extends [string, string]>(predicate: (value: [string, string], index: number, array: [string, string][]) => value is S, thisArg?: any): S[]; (predicate: (value: [string, string], index: number, array: [string, string][]) => unknown, thisArg?: any): [string, string][]; }",
          "optional": false,
          "xaiDescription": "Creates a new array with all headers that pass the test implemented by the provided function."
        },
        {
          "name": "reduce",
          "type": "{ (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string]): [string, string]; (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string], initialValue: [string, string]): [string, string]; <U>(callbackfn: (previousValue: U, currentValue: [string, string], currentIndex: number, array: [string, string][]) => U, initialValue: U): U; }",
          "optional": false,
          "xaiDescription": "Applies a function against an accumulator and each header in the NativeHeadersType (from left to right) to reduce it to a single value."
        },
        {
          "name": "reduceRight",
          "type": "{ (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string]): [string, string]; (callbackfn: (previousValue: [string, string], currentValue: [string, string], currentIndex: number, array: [string, string][]) => [string, string], initialValue: [string, string]): [string, string]; <U>(callbackfn: (previousValue: U, currentValue: [string, string], currentIndex: number, array: [string, string][]) => U, initialValue: U): U; }",
          "optional": false,
          "xaiDescription": "Applies a function against an accumulator and each header in the NativeHeadersType (from right to left) to reduce it to a single value."
        },
        {
          "name": "find",
          "type": "{ <S extends [string, string]>(predicate: (value: [string, string], index: number, obj: [string, string][]) => value is S, thisArg?: any): S; (predicate: (value: [string, string], index: number, obj: [string, string][]) => unknown, thisArg?: any): [string, string]; }",
          "optional": false,
          "xaiDescription": "Returns the value of the first header in the NativeHeadersType that satisfies the provided testing function."
        },
        {
          "name": "findIndex",
          "type": "(predicate: (value: [string, string], index: number, obj: [string, string][]) => unknown, thisArg?: any) => number",
          "optional": false,
          "xaiDescription": "Returns the index of the first header in the NativeHeadersType that satisfies the provided testing function."
        },
        {
          "name": "fill",
          "type": "(value: [string, string], start?: number, end?: number) => NativeHeadersType",
          "optional": false,
          "xaiDescription": "Fills all the headers of the NativeHeadersType from a start index to an end index with a static value."
        },
        {
          "name": "copyWithin",
          "type": "(target: number, start: number, end?: number) => NativeHeadersType",
          "optional": false,
          "xaiDescription": "Copies a sequence of headers within the NativeHeadersType."
        },
        {
          "name": "entries",
          "type": "() => ArrayIterator<[number, [string, string]]>",
          "optional": false,
          "xaiDescription": "Returns a new Array Iterator object that contains the key/value pairs for each index in the NativeHeadersType."
        },
        {
          "name": "keys",
          "type": "() => ArrayIterator<number>",
          "optional": false,
          "xaiDescription": "Returns a new Array Iterator that contains the keys for each index in the NativeHeadersType."
        },
        {
          "name": "values",
          "type": "() => ArrayIterator<[string, string]>",
          "optional": false,
          "xaiDescription": "Returns a new Array Iterator object that contains the values for each index in the NativeHeadersType."
        },
        {
          "name": "includes",
          "type": "(searchElement: [string, string], fromIndex?: number) => boolean",
          "optional": false,
          "xaiDescription": "Determines whether the NativeHeadersType includes a certain header, returning true or false as appropriate."
        },
        {
          "name": "flatMap",
          "type": "<U, This = undefined>(callback: (this: This, value: [string, string], index: number, array: [string, string][]) => U | readonly U[], thisArg?: This) => U[]",
          "optional": false,
          "xaiDescription": "Returns a new array formed by applying a given callback function to each header of the NativeHeadersType, and then flattening the result into a new array."
        },
        {
          "name": "flat",
          "type": "<A, D extends number = 1>(this: A, depth?: D) => FlatArray<A, D>[]",
          "optional": false,
          "xaiDescription": "Creates a new array with all sub-array elements concatenated into it recursively up to the specified depth."
        },
        {
          "name": "__@iterator@3117",
          "type": "() => ArrayIterator<[string, string]>",
          "optional": false,
          "xaiDescription": "Returns a new Array Iterator object that contains the values for each index in the NativeHeadersType."
        },
        {
          "name": "__@unscopables@3119",
          "type": "{ [x: number]: boolean; length?: boolean; toString?: boolean; toLocaleString?: boolean; pop?: boolean; push?: boolean; concat?: boolean; join?: boolean; reverse?: boolean; shift?: boolean; slice?: boolean; sort?: boolean; splice?: boolean; unshift?: boolean; indexOf?: boolean; lastIndexOf?: boolean; every?: boolean; some?: boolean; forEach?: boolean; map?: boolean; filter?: boolean; reduce?: boolean; reduceRight?: boolean; find?: boolean; findIndex?: boolean; fill?: boolean; copyWithin?: boolean; entries?: boolean; keys?: boolean; values?: boolean; includes?: boolean; flatMap?: boolean; flat?: boolean; at?: boolean; }",
          "optional": false,
          "xaiDescription": "Returns an object whose properties are the names of the NativeHeadersType methods that should not be exposed in the `with` statement."
        },
        {
          "name": "at",
          "type": "(index: number) => [string, string]",
          "optional": false,
          "xaiDescription": "Returns the header at the specified index in the NativeHeadersType."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents native headers as an array of key-value pairs."
    },
    {
      "name": "NativeRequestInit",
      "type": "NativeRequestInit",
      "properties": [
        {
          "name": "credentials",
          "type": "RequestCredentials",
          "optional": true,
          "xaiDescription": "The credentials mode for the native request."
        },
        {
          "name": "headers",
          "type": "NativeHeadersType",
          "optional": true,
          "xaiDescription": "The headers for the native request."
        },
        {
          "name": "method",
          "type": "string",
          "optional": true,
          "xaiDescription": "The HTTP method for the native request."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Initialization options for a native request."
    },
    {
      "name": "NativeResponseEvents",
      "type": "NativeResponseEvents",
      "properties": [
        {
          "name": "didReceiveResponseData",
          "type": "(data: Uint8Array<ArrayBufferLike>) => void",
          "optional": false,
          "xaiDescription": "Callback for when response data is received."
        },
        {
          "name": "didComplete",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Callback for when the response is complete."
        },
        {
          "name": "didFailWithError",
          "type": "(error: string) => void",
          "optional": false,
          "xaiDescription": "Callback for when the response fails with an error."
        },
        {
          "name": "readyForJSFinalization",
          "type": "() => void",
          "optional": false,
          "xaiDescription": "Callback for when the response is ready for JavaScript finalization."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Events related to a native response."
    },
    {
      "name": "FetchRequestInit",
      "type": "FetchRequestInit",
      "properties": [
        {
          "name": "body",
          "type": "BodyInit",
          "optional": true,
          "xaiDescription": "The body of the fetch request."
        },
        {
          "name": "credentials",
          "type": "RequestCredentials",
          "optional": true,
          "xaiDescription": "The credentials mode for the fetch request."
        },
        {
          "name": "headers",
          "type": "HeadersInit",
          "optional": true,
          "xaiDescription": "The headers for the fetch request."
        },
        {
          "name": "method",
          "type": "string",
          "optional": true,
          "xaiDescription": "The HTTP method for the fetch request."
        },
        {
          "name": "signal",
          "type": "AbortSignal",
          "optional": true,
          "xaiDescription": "The abort signal for the fetch request."
        },
        {
          "name": "integrity",
          "type": "string",
          "optional": true,
          "xaiDescription": "The integrity check for the fetch request."
        },
        {
          "name": "keepalive",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to keep the connection alive for the fetch request."
        },
        {
          "name": "mode",
          "type": "RequestMode",
          "optional": true,
          "xaiDescription": "The mode of the fetch request."
        },
        {
          "name": "referrer",
          "type": "string",
          "optional": true,
          "xaiDescription": "The referrer for the fetch request."
        },
        {
          "name": "window",
          "type": "any",
          "optional": true,
          "xaiDescription": "The window for the fetch request."
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "A fetch RequestInit compatible structure.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Initialization options for a fetch request."
    },
    {
      "name": "Console",
      "type": "Console",
      "properties": [
        {
          "name": "assert",
          "type": "{ (condition?: boolean, ...data: any[]): void; (condition?: boolean, message?: string, ...data: any[]): void; (value: any, message?: string, ...optionalParams: any[]): void; }",
          "optional": false,
          "xaiDescription": "Logs an error message if the assertion fails."
        },
        {
          "name": "clear",
          "type": "{ (): void; (): void; (): void; }",
          "optional": false,
          "xaiDescription": "Clears the console."
        },
        {
          "name": "count",
          "type": "{ (label?: string): void; (label?: string): void; (label?: string): void; }",
          "optional": false,
          "xaiDescription": "Logs the number of times a label has been counted."
        },
        {
          "name": "countReset",
          "type": "{ (label?: string): void; (label?: string): void; }",
          "optional": false,
          "xaiDescription": "Resets the count for a label."
        },
        {
          "name": "debug",
          "type": "{ (...data: any[]): void; (message?: any, ...optionalParams: any[]): void; (message?: any, ...optionalParams: any[]): void; }",
          "optional": false,
          "xaiDescription": "Logs a debug message."
        },
        {
          "name": "dir",
          "type": "{ (item?: any, options?: any): void; (value?: any, ...optionalParams: any[]): void; (obj: any, options?: InspectOptions): void; }",
          "optional": false,
          "xaiDescription": "Logs a JavaScript object in a structured format."
        },
        {
          "name": "dirxml",
          "type": "{ (...data: any[]): void; (value: any): void; (...data: any[]): void; }",
          "optional": false,
          "xaiDescription": "Logs an XML representation of an object."
        },
        {
          "name": "error",
          "type": "{ (...data: any[]): void; (message?: any, ...optionalParams: any[]): void; (message?: any, ...optionalParams: any[]): void; }",
          "optional": false,
          "xaiDescription": "Logs an error message."
        },
        {
          "name": "group",
          "type": "{ (...data: any[]): void; (groupTitle?: string, ...optionalParams: any[]): void; (...label: any[]): void; }",
          "optional": false,
          "xaiDescription": "Creates a new inline group in the console."
        },
        {
          "name": "groupCollapsed",
          "type": "{ (...data: any[]): void; (groupTitle?: string, ...optionalParams: any[]): void; (...label: any[]): void; }",
          "optional": false,
          "xaiDescription": "Creates a new collapsed group in the console."
        },
        {
          "name": "groupEnd",
          "type": "{ (): void; (): void; (): void; }",
          "optional": false,
          "xaiDescription": "Ends the current inline group in the console."
        },
        {
          "name": "info",
          "type": "{ (...data: any[]): void; (message?: any, ...optionalParams: any[]): void; (message?: any, ...optionalParams: any[]): void; }",
          "optional": false,
          "xaiDescription": "Logs an informational message."
        },
        {
          "name": "log",
          "type": "{ (...data: any[]): void; (message?: any, ...optionalParams: any[]): void; (message?: any, ...optionalParams: any[]): void; }",
          "optional": false,
          "xaiDescription": "Logs a message."
        },
        {
          "name": "table",
          "type": "{ (tabularData?: any, properties?: string[]): void; (...tabularData: any[]): void; (tabularData: any, properties?: readonly string[]): void; }",
          "optional": false,
          "xaiDescription": "Logs tabular data in a table format."
        },
        {
          "name": "time",
          "type": "{ (label?: string): void; (label?: string): void; (label?: string): void; }",
          "optional": false,
          "xaiDescription": "Starts a timer with the given label."
        },
        {
          "name": "timeEnd",
          "type": "{ (label?: string): void; (label?: string): void; (label?: string): void; }",
          "optional": false,
          "xaiDescription": "Stops a timer with the given label and logs the elapsed time."
        },
        {
          "name": "timeLog",
          "type": "{ (label?: string, ...data: any[]): void; (label?: string, ...data: any[]): void; }",
          "optional": false,
          "xaiDescription": "Logs the current value of a timer with the given label."
        },
        {
          "name": "timeStamp",
          "type": "{ (label?: string): void; (label?: string): void; (label?: string): void; }",
          "optional": false,
          "xaiDescription": "Adds a timestamp with the given label to the console."
        },
        {
          "name": "trace",
          "type": "{ (...data: any[]): void; (message?: any, ...optionalParams: any[]): void; (message?: any, ...optionalParams: any[]): void; }",
          "optional": false,
          "xaiDescription": "Logs a stack trace to the console."
        },
        {
          "name": "warn",
          "type": "{ (...data: any[]): void; (message?: any, ...optionalParams: any[]): void; (message?: any, ...optionalParams: any[]): void; }",
          "optional": false,
          "xaiDescription": "Logs a warning message."
        },
        {
          "name": "memory",
          "type": "any",
          "optional": false,
          "xaiDescription": "Information about the memory usage of the console."
        },
        {
          "name": "exception",
          "type": "(message?: string, ...optionalParams: any[]) => void",
          "optional": false,
          "xaiDescription": "Logs an exception message."
        },
        {
          "name": "markTimeline",
          "type": "(label?: string) => void",
          "optional": false,
          "xaiDescription": "Adds a mark to the timeline with the given label."
        },
        {
          "name": "profile",
          "type": "{ (reportName?: string): void; (label?: string): void; }",
          "optional": false,
          "xaiDescription": "Starts recording a CPU profile with the given label."
        },
        {
          "name": "profileEnd",
          "type": "{ (reportName?: string): void; (label?: string): void; }",
          "optional": false,
          "xaiDescription": "Stops recording a CPU profile with the given label."
        },
        {
          "name": "timeline",
          "type": "(label?: string) => void",
          "optional": false,
          "xaiDescription": "Starts recording a timeline with the given label."
        },
        {
          "name": "timelineEnd",
          "type": "(label?: string) => void",
          "optional": false,
          "xaiDescription": "Stops recording a timeline with the given label."
        },
        {
          "name": "Console",
          "type": "ConsoleConstructor",
          "optional": false,
          "xaiDescription": "The constructor for the Console object."
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "This is a more comprehensive declaration of the Console API that JavaScript VMs include.\n\nThis declaration is from https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Provides access to the browser's debugging console."
    },
    {
      "name": "FormData",
      "type": "FormData",
      "properties": [
        {
          "name": "keys",
          "type": "() => IterableIterator<string>",
          "optional": false,
          "xaiDescription": "Returns an iterator of all the keys in the FormData object."
        },
        {
          "name": "values",
          "type": "() => IterableIterator<string | Blob>",
          "optional": false,
          "xaiDescription": "Returns an iterator of all the values in the FormData object."
        },
        {
          "name": "entries",
          "type": "() => IterableIterator<[string, string | Blob]>",
          "optional": false,
          "xaiDescription": "Returns an iterator of all the key-value pairs in the FormData object."
        },
        {
          "name": "__@iterator@6767",
          "type": "() => IterableIterator<[string, string | Blob]>",
          "optional": false,
          "xaiDescription": "Returns an iterator of all the key-value pairs in the FormData object."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a set of key-value pairs representing form fields and their values."
    },
    {
      "name": "ProcessEnv",
      "type": "ProcessEnv",
      "properties": [
        {
          "name": "NODE_ENV",
          "type": "\"development\" | \"production\" | \"test\"",
          "optional": false,
          "xaiDescription": "The environment mode of the process."
        },
        {
          "name": "TZ",
          "type": "string",
          "optional": true,
          "xaiDescription": "The timezone of the process."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Environment variables available to the process."
    },
    {
      "name": "RequireContext",
      "type": "RequireContext",
      "properties": [
        {
          "name": "keys",
          "type": "() => string[]",
          "optional": false,
          "xaiDescription": "Returns an array of all the keys in the require context."
        },
        {
          "name": "resolve",
          "type": "(id: string) => string",
          "optional": false,
          "xaiDescription": "Resolves a module ID to a file path."
        },
        {
          "name": "id",
          "type": "string",
          "optional": false,
          "xaiDescription": "The ID of the require context."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Represents a context for requiring modules."
    },
    {
      "name": "RequireFunction",
      "type": "RequireFunction",
      "properties": [
        {
          "name": "context",
          "type": "(path: string, recursive?: boolean, filter?: RegExp, mode?: \"sync\" | \"eager\" | \"weak\" | \"lazy\" | \"lazy-once\") => RequireContext",
          "optional": false,
          "xaiDescription": "Creates a require context for the given path and options."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Function for requiring modules."
    },
    {
      "name": "Require",
      "type": "Require",
      "properties": [
        {
          "name": "cache",
          "type": "Dict<Module>",
          "optional": false,
          "xaiDescription": "Cache of loaded modules."
        },
        {
          "name": "extensions",
          "type": "RequireExtensions",
          "optional": false,
          "xaiDescription": "Extensions for the require function."
        },
        {
          "name": "main",
          "type": "Module",
          "optional": false,
          "xaiDescription": "The main module of the application."
        },
        {
          "name": "resolve",
          "type": "RequireResolve",
          "optional": false,
          "xaiDescription": "Function to resolve module paths."
        },
        {
          "name": "context",
          "type": "(path: string, recursive?: boolean, filter?: RegExp, mode?: \"sync\" | \"eager\" | \"weak\" | \"lazy\" | \"lazy-once\") => RequireContext",
          "optional": false,
          "xaiDescription": "Creates a require context for the given path and options."
        }
      ],
      "extends": [
        "__MetroModuleApi.RequireFunction"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "The require function for loading modules."
    },
    {
      "name": "ViewProps",
      "type": "ViewProps",
      "properties": [
        {
          "name": "children",
          "type": "ReactNode",
          "optional": true
        },
        {
          "name": "hitSlop",
          "type": "number | Insets",
          "optional": true
        },
        {
          "name": "id",
          "type": "string",
          "optional": true
        },
        {
          "name": "needsOffscreenAlphaCompositing",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "onLayout",
          "type": "(event: LayoutChangeEvent) => void",
          "optional": true
        },
        {
          "name": "pointerEvents",
          "type": "\"box-none\" | \"none\" | \"box-only\" | \"auto\"",
          "optional": true
        },
        {
          "name": "removeClippedSubviews",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "style",
          "type": "StyleProp<ViewStyle>",
          "optional": true
        },
        {
          "name": "testID",
          "type": "string",
          "optional": true
        },
        {
          "name": "nativeID",
          "type": "string",
          "optional": true
        },
        {
          "name": "className",
          "type": "string",
          "optional": true
        },
        {
          "name": "collapsable",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "collapsableChildren",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "renderToHardwareTextureAndroid",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "focusable",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "tabIndex",
          "type": "0 | -1",
          "optional": true
        },
        {
          "name": "shouldRasterizeIOS",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "isTVSelectable",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "hasTVPreferredFocus",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "tvParallaxShiftDistanceX",
          "type": "number",
          "optional": true
        },
        {
          "name": "tvParallaxShiftDistanceY",
          "type": "number",
          "optional": true
        },
        {
          "name": "tvParallaxTiltAngle",
          "type": "number",
          "optional": true
        },
        {
          "name": "tvParallaxMagnification",
          "type": "number",
          "optional": true
        },
        {
          "name": "onStartShouldSetResponder",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true
        },
        {
          "name": "onMoveShouldSetResponder",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true
        },
        {
          "name": "onResponderEnd",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderGrant",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderReject",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderMove",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderRelease",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderStart",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderTerminationRequest",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true
        },
        {
          "name": "onResponderTerminate",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onStartShouldSetResponderCapture",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true
        },
        {
          "name": "onMoveShouldSetResponderCapture",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true
        },
        {
          "name": "onTouchStart",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onTouchMove",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onTouchEnd",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onTouchCancel",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onTouchEndCapture",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerEnter",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerEnterCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerLeave",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerLeaveCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerMove",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerMoveCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerCancel",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerCancelCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerDown",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerDownCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerUp",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerUpCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "accessible",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityActions",
          "type": "readonly Readonly<{ name: string; label?: string; }>[]",
          "optional": true
        },
        {
          "name": "accessibilityLabel",
          "type": "string",
          "optional": true
        },
        {
          "name": "aria-label",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityRole",
          "type": "AccessibilityRole",
          "optional": true
        },
        {
          "name": "accessibilityState",
          "type": "AccessibilityState",
          "optional": true
        },
        {
          "name": "aria-busy",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-checked",
          "type": "boolean | \"mixed\"",
          "optional": true
        },
        {
          "name": "aria-disabled",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-expanded",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-selected",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityHint",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityValue",
          "type": "AccessibilityValue",
          "optional": true
        },
        {
          "name": "aria-valuemax",
          "type": "number",
          "optional": true
        },
        {
          "name": "aria-valuemin",
          "type": "number",
          "optional": true
        },
        {
          "name": "aria-valuenow",
          "type": "number",
          "optional": true
        },
        {
          "name": "aria-valuetext",
          "type": "string",
          "optional": true
        },
        {
          "name": "onAccessibilityAction",
          "type": "(event: AccessibilityActionEvent) => void",
          "optional": true
        },
        {
          "name": "importantForAccessibility",
          "type": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\"",
          "optional": true
        },
        {
          "name": "aria-hidden",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-modal",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "role",
          "type": "Role",
          "optional": true
        },
        {
          "name": "accessibilityLabelledBy",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityLiveRegion",
          "type": "\"none\" | \"polite\" | \"assertive\"",
          "optional": true
        },
        {
          "name": "aria-live",
          "type": "\"polite\" | \"assertive\" | \"off\"",
          "optional": true
        },
        {
          "name": "accessibilityElementsHidden",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityViewIsModal",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "onAccessibilityEscape",
          "type": "() => void",
          "optional": true
        },
        {
          "name": "onAccessibilityTap",
          "type": "() => void",
          "optional": true
        },
        {
          "name": "onMagicTap",
          "type": "() => void",
          "optional": true
        },
        {
          "name": "accessibilityIgnoresInvertColors",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityLanguage",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityShowsLargeContentViewer",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityLargeContentTitle",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "View",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Properties for a View component in React Native."
    },
    {
      "name": "ViewStyle",
      "type": "ViewStyle",
      "properties": [
        {
          "name": "backfaceVisibility",
          "type": "\"visible\" | \"hidden\"",
          "optional": true
        },
        {
          "name": "backgroundColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderBlockColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderBlockEndColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderBlockStartColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderBottomColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderBottomEndRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderBottomLeftRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderBottomRightRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderBottomStartRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderCurve",
          "type": "\"circular\" | \"continuous\"",
          "optional": true
        },
        {
          "name": "borderEndColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderEndEndRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderEndStartRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderLeftColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderRightColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderStartColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderStartEndRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderStartStartRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderStyle",
          "type": "\"solid\" | \"dotted\" | \"dashed\"",
          "optional": true
        },
        {
          "name": "borderTopColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderTopEndRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderTopLeftRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderTopRightRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderTopStartRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "outlineColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "outlineOffset",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "outlineStyle",
          "type": "\"solid\" | \"dotted\" | \"dashed\"",
          "optional": true
        },
        {
          "name": "outlineWidth",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "opacity",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "elevation",
          "type": "number",
          "optional": true
        },
        {
          "name": "pointerEvents",
          "type": "\"box-none\" | \"none\" | \"box-only\" | \"auto\"",
          "optional": true
        },
        {
          "name": "isolation",
          "type": "\"auto\" | \"isolate\"",
          "optional": true
        },
        {
          "name": "cursor",
          "type": "CursorValue",
          "optional": true
        },
        {
          "name": "boxShadow",
          "type": "string | readonly BoxShadowValue[]",
          "optional": true
        },
        {
          "name": "filter",
          "type": "string | readonly FilterFunction[]",
          "optional": true
        },
        {
          "name": "mixBlendMode",
          "type": "BlendMode",
          "optional": true
        },
        {
          "name": "experimental_backgroundImage",
          "type": "string | readonly GradientValue[]",
          "optional": true
        },
        {
          "name": "backdropFilter",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationDelay",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationDirection",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationDuration",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationFillMode",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationName",
          "type": "string | any[]",
          "optional": true
        },
        {
          "name": "animationIterationCount",
          "type": "number | \"infinite\"",
          "optional": true
        },
        {
          "name": "animationPlayState",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationTimingFunction",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundAttachment",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundBlendMode",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundClip",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundImage",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundOrigin",
          "type": "\"border-box\" | \"content-box\" | \"padding-box\"",
          "optional": true
        },
        {
          "name": "backgroundPosition",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundRepeat",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundSize",
          "type": "string",
          "optional": true
        },
        {
          "name": "boxSizing",
          "type": "string",
          "optional": true
        },
        {
          "name": "clip",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridAutoColumns",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridAutoFlow",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridAutoRows",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridColumnEnd",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridColumnGap",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridColumnStart",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridRowEnd",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridRowGap",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridRowStart",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridTemplateColumns",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridTemplateRows",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridTemplateAreas",
          "type": "string",
          "optional": true
        },
        {
          "name": "outline",
          "type": "string",
          "optional": true
        },
        {
          "name": "overflowX",
          "type": "string",
          "optional": true
        },
        {
          "name": "overflowY",
          "type": "string",
          "optional": true
        },
        {
          "name": "overscrollBehavior",
          "type": "\"none\" | \"auto\" | \"contain\"",
          "optional": true
        },
        {
          "name": "overscrollBehaviorX",
          "type": "\"none\" | \"auto\" | \"contain\"",
          "optional": true
        },
        {
          "name": "overscrollBehaviorY",
          "type": "\"none\" | \"auto\" | \"contain\"",
          "optional": true
        },
        {
          "name": "perspective",
          "type": "string",
          "optional": true
        },
        {
          "name": "perspectiveOrigin",
          "type": "string",
          "optional": true
        },
        {
          "name": "touchAction",
          "type": "string",
          "optional": true
        },
        {
          "name": "transformOrigin",
          "type": "string",
          "optional": true
        },
        {
          "name": "transitionDelay",
          "type": "string",
          "optional": true
        },
        {
          "name": "transitionDuration",
          "type": "string",
          "optional": true
        },
        {
          "name": "transitionProperty",
          "type": "string",
          "optional": true
        },
        {
          "name": "transitionTimingFunction",
          "type": "string",
          "optional": true
        },
        {
          "name": "userSelect",
          "type": "string",
          "optional": true
        },
        {
          "name": "visibility",
          "type": "string",
          "optional": true
        },
        {
          "name": "willChange",
          "type": "string",
          "optional": true
        },
        {
          "name": "position",
          "type": "\"static\" | \"relative\" | \"absolute\" | \"fixed\" | \"sticky\"",
          "optional": true
        },
        {
          "name": "alignContent",
          "type": "\"flex-start\" | \"flex-end\" | \"center\" | \"stretch\" | \"space-between\" | \"space-around\" | \"space-evenly\"",
          "optional": true
        },
        {
          "name": "alignItems",
          "type": "FlexAlignType",
          "optional": true
        },
        {
          "name": "alignSelf",
          "type": "\"auto\" | FlexAlignType",
          "optional": true
        },
        {
          "name": "aspectRatio",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "borderBottomWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderEndWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderLeftWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderRightWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderStartWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderTopWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "bottom",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "display",
          "type": "\"none\" | \"flex\" | \"contents\"",
          "optional": true
        },
        {
          "name": "end",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "flex",
          "type": "number",
          "optional": true
        },
        {
          "name": "flexBasis",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "flexDirection",
          "type": "\"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"",
          "optional": true
        },
        {
          "name": "rowGap",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "gap",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "columnGap",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "flexGrow",
          "type": "number",
          "optional": true
        },
        {
          "name": "flexShrink",
          "type": "number",
          "optional": true
        },
        {
          "name": "flexWrap",
          "type": "\"wrap\" | \"nowrap\" | \"wrap-reverse\"",
          "optional": true
        },
        {
          "name": "height",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "justifyContent",
          "type": "\"flex-start\" | \"flex-end\" | \"center\" | \"space-between\" | \"space-around\" | \"space-evenly\"",
          "optional": true
        },
        {
          "name": "left",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "margin",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginBottom",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginHorizontal",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginLeft",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginRight",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginTop",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginVertical",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "maxHeight",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "maxWidth",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "minHeight",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "minWidth",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "overflow",
          "type": "\"visible\" | \"hidden\" | \"scroll\"",
          "optional": true
        },
        {
          "name": "padding",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingBottom",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingHorizontal",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingLeft",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingRight",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingTop",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingVertical",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "right",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "start",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "top",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "width",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "zIndex",
          "type": "number",
          "optional": true
        },
        {
          "name": "direction",
          "type": "\"inherit\" | \"ltr\" | \"rtl\"",
          "optional": true
        },
        {
          "name": "inset",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetBlock",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetBlockEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetBlockStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetInline",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetInlineEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetInlineStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginBlock",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginBlockEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginBlockStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginInline",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginInlineEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginInlineStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingBlock",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingBlockEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingBlockStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingInline",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingInlineEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingInlineStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "shadowColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "shadowOffset",
          "type": "Readonly<{ width: number; height: number; }>",
          "optional": true
        },
        {
          "name": "shadowOpacity",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "shadowRadius",
          "type": "number",
          "optional": true
        },
        {
          "name": "transform",
          "type": "string | readonly (({ perspective: AnimatableNumericValue; } & { rotate?: never; rotateX?: never; rotateY?: never; rotateZ?: never; scale?: never; scaleX?: never; scaleY?: never; ... 4 more ...; matrix?: never; }) | ... 11 more ... | ({ ...; } & { ...; }))[]",
          "optional": true
        },
        {
          "name": "transformMatrix",
          "type": "number[]",
          "optional": true
        },
        {
          "name": "rotation",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "scaleX",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "scaleY",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "translateX",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "translateY",
          "type": "AnimatableNumericValue",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Style properties for a View component in React Native."
    },
    {
      "name": "TextProps",
      "type": "TextProps",
      "properties": [
        {
          "name": "allowFontScaling",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "children",
          "type": "ReactNode",
          "optional": true
        },
        {
          "name": "ellipsizeMode",
          "type": "\"head\" | \"middle\" | \"tail\" | \"clip\"",
          "optional": true
        },
        {
          "name": "id",
          "type": "string",
          "optional": true
        },
        {
          "name": "lineBreakMode",
          "type": "\"head\" | \"middle\" | \"tail\" | \"clip\"",
          "optional": true
        },
        {
          "name": "numberOfLines",
          "type": "number",
          "optional": true
        },
        {
          "name": "onLayout",
          "type": "(event: LayoutChangeEvent) => void",
          "optional": true
        },
        {
          "name": "onTextLayout",
          "type": "(event: NativeSyntheticEvent<TextLayoutEventData>) => void",
          "optional": true
        },
        {
          "name": "onPress",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onPressIn",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onPressOut",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onLongPress",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "style",
          "type": "StyleProp<TextStyle>",
          "optional": true
        },
        {
          "name": "testID",
          "type": "string",
          "optional": true
        },
        {
          "name": "nativeID",
          "type": "string",
          "optional": true
        },
        {
          "name": "maxFontSizeMultiplier",
          "type": "number",
          "optional": true
        },
        {
          "name": "minimumFontScale",
          "type": "number",
          "optional": true
        },
        {
          "name": "pointerEvents",
          "type": "\"box-none\" | \"none\" | \"box-only\" | \"auto\"",
          "optional": true
        },
        {
          "name": "className",
          "type": "string",
          "optional": true
        },
        {
          "name": "tabIndex",
          "type": "number",
          "optional": true
        },
        {
          "name": "lang",
          "type": "string",
          "optional": true
        },
        {
          "name": "adjustsFontSizeToFit",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "dynamicTypeRamp",
          "type": "\"caption2\" | \"caption1\" | \"footnote\" | \"subheadline\" | \"callout\" | \"body\" | \"headline\" | \"title3\" | \"title2\" | \"title1\" | \"largeTitle\"",
          "optional": true
        },
        {
          "name": "suppressHighlighting",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "lineBreakStrategyIOS",
          "type": "\"none\" | \"standard\" | \"hangul-word\" | \"push-out\"",
          "optional": true
        },
        {
          "name": "disabled",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "selectable",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "selectionColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "textBreakStrategy",
          "type": "\"simple\" | \"highQuality\" | \"balanced\"",
          "optional": true
        },
        {
          "name": "dataDetectorType",
          "type": "\"none\" | \"link\" | \"phoneNumber\" | \"email\" | \"all\"",
          "optional": true
        },
        {
          "name": "android_hyphenationFrequency",
          "type": "\"none\" | \"normal\" | \"full\"",
          "optional": true
        },
        {
          "name": "accessible",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityActions",
          "type": "readonly Readonly<{ name: string; label?: string; }>[]",
          "optional": true
        },
        {
          "name": "accessibilityLabel",
          "type": "string",
          "optional": true
        },
        {
          "name": "aria-label",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityRole",
          "type": "AccessibilityRole",
          "optional": true
        },
        {
          "name": "accessibilityState",
          "type": "AccessibilityState",
          "optional": true
        },
        {
          "name": "aria-busy",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-checked",
          "type": "boolean | \"mixed\"",
          "optional": true
        },
        {
          "name": "aria-disabled",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-expanded",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-selected",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityHint",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityValue",
          "type": "AccessibilityValue",
          "optional": true
        },
        {
          "name": "aria-valuemax",
          "type": "number",
          "optional": true
        },
        {
          "name": "aria-valuemin",
          "type": "number",
          "optional": true
        },
        {
          "name": "aria-valuenow",
          "type": "number",
          "optional": true
        },
        {
          "name": "aria-valuetext",
          "type": "string",
          "optional": true
        },
        {
          "name": "onAccessibilityAction",
          "type": "(event: AccessibilityActionEvent) => void",
          "optional": true
        },
        {
          "name": "importantForAccessibility",
          "type": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\"",
          "optional": true
        },
        {
          "name": "aria-hidden",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-modal",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "role",
          "type": "Role",
          "optional": true
        },
        {
          "name": "accessibilityLabelledBy",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityLiveRegion",
          "type": "\"none\" | \"polite\" | \"assertive\"",
          "optional": true
        },
        {
          "name": "aria-live",
          "type": "\"polite\" | \"assertive\" | \"off\"",
          "optional": true
        },
        {
          "name": "accessibilityElementsHidden",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityViewIsModal",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "onAccessibilityEscape",
          "type": "() => void",
          "optional": true
        },
        {
          "name": "onAccessibilityTap",
          "type": "() => void",
          "optional": true
        },
        {
          "name": "onMagicTap",
          "type": "() => void",
          "optional": true
        },
        {
          "name": "accessibilityIgnoresInvertColors",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityLanguage",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityShowsLargeContentViewer",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityLargeContentTitle",
          "type": "string",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Text",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Properties for a Text component in React Native."
    },
    {
      "name": "TextStyle",
      "type": "TextStyle",
      "properties": [
        {
          "name": "color",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "fontFamily",
          "type": "string",
          "optional": true
        },
        {
          "name": "fontSize",
          "type": "number",
          "optional": true
        },
        {
          "name": "fontStyle",
          "type": "\"normal\" | \"italic\"",
          "optional": true
        },
        {
          "name": "fontWeight",
          "type": "\"normal\" | \"bold\" | \"100\" | \"200\" | \"300\" | \"400\" | \"500\" | \"600\" | \"700\" | \"800\" | \"900\" | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | \"ultralight\" | \"thin\" | \"light\" | \"medium\" | ... 5 more ... | \"black\"",
          "optional": true
        },
        {
          "name": "letterSpacing",
          "type": "number",
          "optional": true
        },
        {
          "name": "lineHeight",
          "type": "number",
          "optional": true
        },
        {
          "name": "textAlign",
          "type": "\"auto\" | \"center\" | \"left\" | \"right\" | \"justify\"",
          "optional": true
        },
        {
          "name": "textDecorationLine",
          "type": "\"none\" | \"underline\" | \"line-through\" | \"underline line-through\"",
          "optional": true
        },
        {
          "name": "textDecorationStyle",
          "type": "\"solid\" | \"dotted\" | \"dashed\" | \"double\"",
          "optional": true
        },
        {
          "name": "textDecorationColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "textShadowColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "textShadowOffset",
          "type": "{ width: number; height: number; }",
          "optional": true
        },
        {
          "name": "textShadowRadius",
          "type": "number",
          "optional": true
        },
        {
          "name": "textTransform",
          "type": "\"none\" | \"capitalize\" | \"uppercase\" | \"lowercase\"",
          "optional": true
        },
        {
          "name": "userSelect",
          "type": "\"none\" | \"auto\" | \"text\" | \"contain\" | \"all\"",
          "optional": true
        },
        {
          "name": "backdropFilter",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationDelay",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationDirection",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationDuration",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationFillMode",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationName",
          "type": "string | any[]",
          "optional": true
        },
        {
          "name": "animationIterationCount",
          "type": "number | \"infinite\"",
          "optional": true
        },
        {
          "name": "animationPlayState",
          "type": "string",
          "optional": true
        },
        {
          "name": "animationTimingFunction",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundAttachment",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundBlendMode",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundClip",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundImage",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundOrigin",
          "type": "\"border-box\" | \"content-box\" | \"padding-box\"",
          "optional": true
        },
        {
          "name": "backgroundPosition",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundRepeat",
          "type": "string",
          "optional": true
        },
        {
          "name": "backgroundSize",
          "type": "string",
          "optional": true
        },
        {
          "name": "boxShadow",
          "type": "string",
          "optional": true
        },
        {
          "name": "boxSizing",
          "type": "string",
          "optional": true
        },
        {
          "name": "clip",
          "type": "string",
          "optional": true
        },
        {
          "name": "cursor",
          "type": "string",
          "optional": true
        },
        {
          "name": "filter",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridAutoColumns",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridAutoFlow",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridAutoRows",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridColumnEnd",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridColumnGap",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridColumnStart",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridRowEnd",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridRowGap",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridRowStart",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridTemplateColumns",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridTemplateRows",
          "type": "string",
          "optional": true
        },
        {
          "name": "gridTemplateAreas",
          "type": "string",
          "optional": true
        },
        {
          "name": "outline",
          "type": "string",
          "optional": true
        },
        {
          "name": "outlineColor",
          "type": "string",
          "optional": true
        },
        {
          "name": "overflowX",
          "type": "string",
          "optional": true
        },
        {
          "name": "overflowY",
          "type": "string",
          "optional": true
        },
        {
          "name": "overscrollBehavior",
          "type": "\"none\" | \"auto\" | \"contain\"",
          "optional": true
        },
        {
          "name": "overscrollBehaviorX",
          "type": "\"none\" | \"auto\" | \"contain\"",
          "optional": true
        },
        {
          "name": "overscrollBehaviorY",
          "type": "\"none\" | \"auto\" | \"contain\"",
          "optional": true
        },
        {
          "name": "perspective",
          "type": "string",
          "optional": true
        },
        {
          "name": "perspectiveOrigin",
          "type": "string",
          "optional": true
        },
        {
          "name": "touchAction",
          "type": "string",
          "optional": true
        },
        {
          "name": "transformOrigin",
          "type": "string",
          "optional": true
        },
        {
          "name": "transitionDelay",
          "type": "string",
          "optional": true
        },
        {
          "name": "transitionDuration",
          "type": "string",
          "optional": true
        },
        {
          "name": "transitionProperty",
          "type": "string",
          "optional": true
        },
        {
          "name": "transitionTimingFunction",
          "type": "string",
          "optional": true
        },
        {
          "name": "visibility",
          "type": "string",
          "optional": true
        },
        {
          "name": "willChange",
          "type": "string",
          "optional": true
        },
        {
          "name": "position",
          "type": "\"static\" | \"relative\" | \"absolute\" | \"fixed\" | \"sticky\"",
          "optional": true
        },
        {
          "name": "fontFeatureSettings",
          "type": "string",
          "optional": true
        },
        {
          "name": "textIndent",
          "type": "string",
          "optional": true
        },
        {
          "name": "textOverflow",
          "type": "string",
          "optional": true
        },
        {
          "name": "textRendering",
          "type": "string",
          "optional": true
        },
        {
          "name": "unicodeBidi",
          "type": "string",
          "optional": true
        },
        {
          "name": "wordWrap",
          "type": "string",
          "optional": true
        },
        {
          "name": "fontVariant",
          "type": "FontVariant[]",
          "optional": true
        },
        {
          "name": "writingDirection",
          "type": "\"auto\" | \"ltr\" | \"rtl\"",
          "optional": true
        },
        {
          "name": "backfaceVisibility",
          "type": "\"visible\" | \"hidden\"",
          "optional": true
        },
        {
          "name": "backgroundColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderBlockColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderBlockEndColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderBlockStartColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderBottomColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderBottomEndRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderBottomLeftRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderBottomRightRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderBottomStartRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderCurve",
          "type": "\"circular\" | \"continuous\"",
          "optional": true
        },
        {
          "name": "borderEndColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderEndEndRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderEndStartRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderLeftColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderRightColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderStartColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderStartEndRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderStartStartRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderStyle",
          "type": "\"solid\" | \"dotted\" | \"dashed\"",
          "optional": true
        },
        {
          "name": "borderTopColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "borderTopEndRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderTopLeftRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderTopRightRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "borderTopStartRadius",
          "type": "string | AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "outlineOffset",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "outlineStyle",
          "type": "\"solid\" | \"dotted\" | \"dashed\"",
          "optional": true
        },
        {
          "name": "outlineWidth",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "opacity",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "elevation",
          "type": "number",
          "optional": true
        },
        {
          "name": "pointerEvents",
          "type": "\"box-none\" | \"none\" | \"box-only\" | \"auto\"",
          "optional": true
        },
        {
          "name": "isolation",
          "type": "\"auto\" | \"isolate\"",
          "optional": true
        },
        {
          "name": "mixBlendMode",
          "type": "BlendMode",
          "optional": true
        },
        {
          "name": "experimental_backgroundImage",
          "type": "string | readonly GradientValue[]",
          "optional": true
        },
        {
          "name": "alignContent",
          "type": "\"flex-start\" | \"flex-end\" | \"center\" | \"stretch\" | \"space-between\" | \"space-around\" | \"space-evenly\"",
          "optional": true
        },
        {
          "name": "alignItems",
          "type": "FlexAlignType",
          "optional": true
        },
        {
          "name": "alignSelf",
          "type": "\"auto\" | FlexAlignType",
          "optional": true
        },
        {
          "name": "aspectRatio",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "borderBottomWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderEndWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderLeftWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderRightWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderStartWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderTopWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "borderWidth",
          "type": "number",
          "optional": true
        },
        {
          "name": "bottom",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "display",
          "type": "\"none\" | \"flex\" | \"contents\"",
          "optional": true
        },
        {
          "name": "end",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "flex",
          "type": "number",
          "optional": true
        },
        {
          "name": "flexBasis",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "flexDirection",
          "type": "\"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"",
          "optional": true
        },
        {
          "name": "rowGap",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "gap",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "columnGap",
          "type": "string | number",
          "optional": true
        },
        {
          "name": "flexGrow",
          "type": "number",
          "optional": true
        },
        {
          "name": "flexShrink",
          "type": "number",
          "optional": true
        },
        {
          "name": "flexWrap",
          "type": "\"wrap\" | \"nowrap\" | \"wrap-reverse\"",
          "optional": true
        },
        {
          "name": "height",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "justifyContent",
          "type": "\"flex-start\" | \"flex-end\" | \"center\" | \"space-between\" | \"space-around\" | \"space-evenly\"",
          "optional": true
        },
        {
          "name": "left",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "margin",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginBottom",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginHorizontal",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginLeft",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginRight",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginTop",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginVertical",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "maxHeight",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "maxWidth",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "minHeight",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "minWidth",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "overflow",
          "type": "\"visible\" | \"hidden\" | \"scroll\"",
          "optional": true
        },
        {
          "name": "padding",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingBottom",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingHorizontal",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingLeft",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingRight",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingTop",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingVertical",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "right",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "start",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "top",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "width",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "zIndex",
          "type": "number",
          "optional": true
        },
        {
          "name": "direction",
          "type": "\"inherit\" | \"ltr\" | \"rtl\"",
          "optional": true
        },
        {
          "name": "inset",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetBlock",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetBlockEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetBlockStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetInline",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetInlineEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "insetInlineStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginBlock",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginBlockEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginBlockStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginInline",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginInlineEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "marginInlineStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingBlock",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingBlockEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingBlockStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingInline",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingInlineEnd",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "paddingInlineStart",
          "type": "DimensionValue",
          "optional": true
        },
        {
          "name": "shadowColor",
          "type": "ColorValue",
          "optional": true
        },
        {
          "name": "shadowOffset",
          "type": "Readonly<{ width: number; height: number; }>",
          "optional": true
        },
        {
          "name": "shadowOpacity",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "shadowRadius",
          "type": "number",
          "optional": true
        },
        {
          "name": "transform",
          "type": "string | readonly (({ perspective: AnimatableNumericValue; } & { rotate?: never; rotateX?: never; rotateY?: never; rotateZ?: never; scale?: never; scaleX?: never; scaleY?: never; ... 4 more ...; matrix?: never; }) | ... 11 more ... | ({ ...; } & { ...; }))[]",
          "optional": true
        },
        {
          "name": "transformMatrix",
          "type": "number[]",
          "optional": true
        },
        {
          "name": "rotation",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "scaleX",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "scaleY",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "translateX",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "translateY",
          "type": "AnimatableNumericValue",
          "optional": true
        },
        {
          "name": "textAlignVertical",
          "type": "\"auto\" | \"center\" | \"top\" | \"bottom\"",
          "optional": true
        },
        {
          "name": "verticalAlign",
          "type": "\"auto\" | \"middle\" | \"top\" | \"bottom\"",
          "optional": true
        },
        {
          "name": "includeFontPadding",
          "type": "boolean",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Defines text styling properties and values."
      },
      "isExported": false
    },
    {
      "name": "PressableStateCallbackType",
      "type": "PressableStateCallbackType",
      "properties": [
        {
          "name": "pressed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "hovered",
          "type": "boolean",
          "optional": false
        }
      ],
      "extends": [],
      "jsdoc": {
        "description": "Pressable",
        "deprecated": false,
        "xaiDescription": "Callback type for Pressable component state."
      },
      "isExported": false
    },
    {
      "name": "PressableProps",
      "type": "PressableProps",
      "properties": [
        {
          "name": "onHoverIn",
          "type": "(event: MouseEvent) => void",
          "optional": true
        },
        {
          "name": "onHoverOut",
          "type": "(event: MouseEvent) => void",
          "optional": true
        },
        {
          "name": "onPress",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onPressIn",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onPressOut",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onLongPress",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onBlur",
          "type": "(event: NativeSyntheticEvent<TargetedEvent>) => void",
          "optional": true
        },
        {
          "name": "onFocus",
          "type": "(event: NativeSyntheticEvent<TargetedEvent>) => void",
          "optional": true
        },
        {
          "name": "children",
          "type": "ReactNode | ((state: PressableStateCallbackType) => ReactNode)",
          "optional": true
        },
        {
          "name": "cancelable",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "delayHoverIn",
          "type": "number",
          "optional": true
        },
        {
          "name": "delayHoverOut",
          "type": "number",
          "optional": true
        },
        {
          "name": "delayLongPress",
          "type": "number",
          "optional": true
        },
        {
          "name": "disabled",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "hitSlop",
          "type": "number | Insets",
          "optional": true
        },
        {
          "name": "pressRetentionOffset",
          "type": "number | Insets",
          "optional": true
        },
        {
          "name": "android_disableSound",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "android_ripple",
          "type": "PressableAndroidRippleConfig",
          "optional": true
        },
        {
          "name": "testOnly_pressed",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "style",
          "type": "StyleProp<ViewStyle> | ((state: PressableStateCallbackType) => StyleProp<ViewStyle>)",
          "optional": true
        },
        {
          "name": "unstable_pressDelay",
          "type": "number",
          "optional": true
        },
        {
          "name": "accessible",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityActions",
          "type": "readonly Readonly<{ name: string; label?: string; }>[]",
          "optional": true
        },
        {
          "name": "accessibilityLabel",
          "type": "string",
          "optional": true
        },
        {
          "name": "aria-label",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityRole",
          "type": "AccessibilityRole",
          "optional": true
        },
        {
          "name": "accessibilityState",
          "type": "AccessibilityState",
          "optional": true
        },
        {
          "name": "aria-busy",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-checked",
          "type": "boolean | \"mixed\"",
          "optional": true
        },
        {
          "name": "aria-disabled",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-expanded",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-selected",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityHint",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityValue",
          "type": "AccessibilityValue",
          "optional": true
        },
        {
          "name": "aria-valuemax",
          "type": "number",
          "optional": true
        },
        {
          "name": "aria-valuemin",
          "type": "number",
          "optional": true
        },
        {
          "name": "aria-valuenow",
          "type": "number",
          "optional": true
        },
        {
          "name": "aria-valuetext",
          "type": "string",
          "optional": true
        },
        {
          "name": "onAccessibilityAction",
          "type": "(event: AccessibilityActionEvent) => void",
          "optional": true
        },
        {
          "name": "importantForAccessibility",
          "type": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\"",
          "optional": true
        },
        {
          "name": "aria-hidden",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "aria-modal",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "role",
          "type": "Role",
          "optional": true
        },
        {
          "name": "accessibilityLabelledBy",
          "type": "string | string[]",
          "optional": true
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityLiveRegion",
          "type": "\"none\" | \"polite\" | \"assertive\"",
          "optional": true
        },
        {
          "name": "aria-live",
          "type": "\"polite\" | \"assertive\" | \"off\"",
          "optional": true
        },
        {
          "name": "accessibilityElementsHidden",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityViewIsModal",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "onAccessibilityEscape",
          "type": "() => void",
          "optional": true
        },
        {
          "name": "onAccessibilityTap",
          "type": "() => void",
          "optional": true
        },
        {
          "name": "onMagicTap",
          "type": "() => void",
          "optional": true
        },
        {
          "name": "accessibilityIgnoresInvertColors",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityLanguage",
          "type": "string",
          "optional": true
        },
        {
          "name": "accessibilityShowsLargeContentViewer",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "accessibilityLargeContentTitle",
          "type": "string",
          "optional": true
        },
        {
          "name": "pointerEvents",
          "type": "\"box-none\" | \"none\" | \"box-only\" | \"auto\"",
          "optional": true
        },
        {
          "name": "id",
          "type": "string",
          "optional": true
        },
        {
          "name": "needsOffscreenAlphaCompositing",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "onLayout",
          "type": "(event: LayoutChangeEvent) => void",
          "optional": true
        },
        {
          "name": "removeClippedSubviews",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "testID",
          "type": "string",
          "optional": true
        },
        {
          "name": "nativeID",
          "type": "string",
          "optional": true
        },
        {
          "name": "className",
          "type": "string",
          "optional": true
        },
        {
          "name": "collapsable",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "collapsableChildren",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "renderToHardwareTextureAndroid",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "focusable",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "tabIndex",
          "type": "0 | -1",
          "optional": true
        },
        {
          "name": "shouldRasterizeIOS",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "isTVSelectable",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "hasTVPreferredFocus",
          "type": "boolean",
          "optional": true
        },
        {
          "name": "tvParallaxShiftDistanceX",
          "type": "number",
          "optional": true
        },
        {
          "name": "tvParallaxShiftDistanceY",
          "type": "number",
          "optional": true
        },
        {
          "name": "tvParallaxTiltAngle",
          "type": "number",
          "optional": true
        },
        {
          "name": "tvParallaxMagnification",
          "type": "number",
          "optional": true
        },
        {
          "name": "onStartShouldSetResponder",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true
        },
        {
          "name": "onMoveShouldSetResponder",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true
        },
        {
          "name": "onResponderEnd",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderGrant",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderReject",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderMove",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderRelease",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderStart",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onResponderTerminationRequest",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true
        },
        {
          "name": "onResponderTerminate",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onStartShouldSetResponderCapture",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true
        },
        {
          "name": "onMoveShouldSetResponderCapture",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true
        },
        {
          "name": "onTouchStart",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onTouchMove",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onTouchEnd",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onTouchCancel",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onTouchEndCapture",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerEnter",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerEnterCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerLeave",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerLeaveCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerMove",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerMoveCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerCancel",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerCancelCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerDown",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerDownCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerUp",
          "type": "(event: PointerEvent) => void",
          "optional": true
        },
        {
          "name": "onPointerUpCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true
        }
      ],
      "extends": [],
      "jsdoc": {
        "xaiDescription": "Properties for Pressable component."
      },
      "isExported": false
    },
    {
      "name": "FlatListProps",
      "type": "FlatListProps<ItemT>",
      "properties": [
        {
          "name": "columnWrapperStyle",
          "type": "StyleProp<ViewStyle>",
          "optional": true,
          "xaiDescription": "Style for the wrapper of columns in a horizontal FlatList"
        },
        {
          "name": "keyboardShouldPersistTaps",
          "type": "boolean | \"always\" | \"never\" | \"handled\"",
          "optional": true,
          "xaiDescription": "Determines if keyboard should persist taps on FlatList"
        },
        {
          "name": "data",
          "type": "ArrayLike<ItemT>",
          "optional": false,
          "xaiDescription": "The data to render in the FlatList"
        },
        {
          "name": "extraData",
          "type": "any",
          "optional": true,
          "xaiDescription": "Extra data to trigger re-renders of FlatList"
        },
        {
          "name": "getItemLayout",
          "type": "(data: ArrayLike<ItemT>, index: number) => { length: number; offset: number; index: number; }",
          "optional": true,
          "xaiDescription": "Method to calculate the layout of items in FlatList"
        },
        {
          "name": "horizontal",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, renders items in a horizontal direction"
        },
        {
          "name": "initialNumToRender",
          "type": "number",
          "optional": true,
          "xaiDescription": "How many items to render initially in FlatList"
        },
        {
          "name": "initialScrollIndex",
          "type": "number",
          "optional": true,
          "xaiDescription": "Index to scroll to initially in FlatList"
        },
        {
          "name": "keyExtractor",
          "type": "(item: ItemT, index: number) => string",
          "optional": true,
          "xaiDescription": "Extracts a unique key for each item in FlatList"
        },
        {
          "name": "legacyImplementation",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, uses legacy implementation of FlatList"
        },
        {
          "name": "numColumns",
          "type": "number",
          "optional": true,
          "xaiDescription": "Number of columns to display in FlatList"
        },
        {
          "name": "onRefresh",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when the user begins to refresh FlatList"
        },
        {
          "name": "onViewableItemsChanged",
          "type": "(info: { viewableItems: ViewToken<ItemT>[]; changed: ViewToken<ItemT>[]; }) => void",
          "optional": true,
          "xaiDescription": "Called when viewable items change in FlatList"
        },
        {
          "name": "refreshing",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, indicates FlatList is refreshing"
        },
        {
          "name": "renderItem",
          "type": "ListRenderItem<ItemT>",
          "optional": false,
          "xaiDescription": "Function to render each item in FlatList"
        },
        {
          "name": "viewabilityConfig",
          "type": "ViewabilityConfig",
          "optional": true,
          "xaiDescription": "Configures when items are considered viewable in FlatList"
        },
        {
          "name": "removeClippedSubviews",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, removes subviews that are offscreen in FlatList"
        },
        {
          "name": "fadingEdgeLength",
          "type": "number",
          "optional": true,
          "xaiDescription": "Length of the fading edge in FlatList"
        },
        {
          "name": "className",
          "type": "string",
          "optional": true,
          "xaiDescription": "CSS class to apply to the FlatList component"
        },
        {
          "name": "ItemSeparatorComponent",
          "type": "ComponentType<any>",
          "optional": true,
          "xaiDescription": "Component to render between items in FlatList"
        },
        {
          "name": "ListEmptyComponent",
          "type": "ComponentType<any> | ReactElement<unknown, string | JSXElementConstructor<any>>",
          "optional": true,
          "xaiDescription": "Component to render when FlatList is empty"
        },
        {
          "name": "ListFooterComponent",
          "type": "ComponentType<any> | ReactElement<unknown, string | JSXElementConstructor<any>>",
          "optional": true,
          "xaiDescription": "Component to render at the bottom of FlatList"
        },
        {
          "name": "ListFooterComponentStyle",
          "type": "StyleProp<ViewStyle>",
          "optional": true,
          "xaiDescription": "Style for the footer component in FlatList"
        },
        {
          "name": "ListHeaderComponent",
          "type": "ComponentType<any> | ReactElement<unknown, string | JSXElementConstructor<any>>",
          "optional": true,
          "xaiDescription": "Component to render at the top of FlatList"
        },
        {
          "name": "ListHeaderComponentStyle",
          "type": "StyleProp<ViewStyle>",
          "optional": true,
          "xaiDescription": "Style for the header component in FlatList"
        },
        {
          "name": "debug",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables debug mode for FlatList"
        },
        {
          "name": "disableVirtualization",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, disables virtualization in FlatList"
        },
        {
          "name": "getItem",
          "type": "(data: any, index: number) => ItemT",
          "optional": true,
          "xaiDescription": "Method to retrieve an item from data in FlatList"
        },
        {
          "name": "getItemCount",
          "type": "(data: any) => number",
          "optional": true,
          "xaiDescription": "Method to get the count of items in data for FlatList"
        },
        {
          "name": "inverted",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, inverts the rendering of FlatList"
        },
        {
          "name": "maxToRenderPerBatch",
          "type": "number",
          "optional": true,
          "xaiDescription": "Maximum number of items to render per batch in FlatList"
        },
        {
          "name": "onEndReached",
          "type": "(info: { distanceFromEnd: number; }) => void",
          "optional": true,
          "xaiDescription": "Called when the end of FlatList is reached"
        },
        {
          "name": "onEndReachedThreshold",
          "type": "number",
          "optional": true,
          "xaiDescription": "Threshold to trigger onEndReached in FlatList"
        },
        {
          "name": "onLayout",
          "type": "(event: LayoutChangeEvent) => void",
          "optional": true,
          "xaiDescription": "Called when the layout of FlatList changes"
        },
        {
          "name": "onScrollToIndexFailed",
          "type": "(info: { index: number; highestMeasuredFrameIndex: number; averageItemLength: number; }) => void",
          "optional": true,
          "xaiDescription": "Called when scrollToIndex fails in FlatList"
        },
        {
          "name": "onStartReached",
          "type": "(info: { distanceFromStart: number; }) => void",
          "optional": true,
          "xaiDescription": "Called when the start of FlatList is reached"
        },
        {
          "name": "onStartReachedThreshold",
          "type": "number",
          "optional": true,
          "xaiDescription": "Threshold to trigger onStartReached in FlatList"
        },
        {
          "name": "progressViewOffset",
          "type": "number",
          "optional": true,
          "xaiDescription": "Offset for the progress view in FlatList"
        },
        {
          "name": "renderScrollComponent",
          "type": "(props: ScrollViewProps) => ReactElement<ScrollViewProps, string | JSXElementConstructor<any>>",
          "optional": true,
          "xaiDescription": "Custom function to render the scroll component in FlatList"
        },
        {
          "name": "updateCellsBatchingPeriod",
          "type": "number",
          "optional": true,
          "xaiDescription": "Time between batch updates in FlatList"
        },
        {
          "name": "viewabilityConfigCallbackPairs",
          "type": "ViewabilityConfigCallbackPairs",
          "optional": true,
          "xaiDescription": "Pairs of viewability configs and callbacks for FlatList"
        },
        {
          "name": "windowSize",
          "type": "number",
          "optional": true,
          "xaiDescription": "Size of the window for rendering items in FlatList"
        },
        {
          "name": "CellRendererComponent",
          "type": "ComponentType<CellRendererProps<ItemT>>",
          "optional": true,
          "xaiDescription": "Custom component to render cells in FlatList"
        },
        {
          "name": "contentContainerStyle",
          "type": "StyleProp<ViewStyle>",
          "optional": true,
          "xaiDescription": "Style for the content container in FlatList"
        },
        {
          "name": "decelerationRate",
          "type": "number | \"normal\" | \"fast\"",
          "optional": true,
          "xaiDescription": "Rate of deceleration for scrolling in FlatList"
        },
        {
          "name": "invertStickyHeaders",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, inverts the position of sticky headers in FlatList"
        },
        {
          "name": "keyboardDismissMode",
          "type": "\"none\" | \"interactive\" | \"on-drag\"",
          "optional": true,
          "xaiDescription": "Determines how the keyboard is dismissed in FlatList"
        },
        {
          "name": "onContentSizeChange",
          "type": "(w: number, h: number) => void",
          "optional": true,
          "xaiDescription": "Called when the content size of FlatList changes"
        },
        {
          "name": "onScroll",
          "type": "(event: NativeSyntheticEvent<NativeScrollEvent>) => void",
          "optional": true,
          "xaiDescription": "Called when scrolling occurs in FlatList"
        },
        {
          "name": "onScrollBeginDrag",
          "type": "(event: NativeSyntheticEvent<NativeScrollEvent>) => void",
          "optional": true,
          "xaiDescription": "Called when scrolling begins in FlatList"
        },
        {
          "name": "onScrollEndDrag",
          "type": "(event: NativeSyntheticEvent<NativeScrollEvent>) => void",
          "optional": true,
          "xaiDescription": "Called when scrolling ends in FlatList"
        },
        {
          "name": "onMomentumScrollEnd",
          "type": "(event: NativeSyntheticEvent<NativeScrollEvent>) => void",
          "optional": true,
          "xaiDescription": "Called when momentum scrolling ends in FlatList"
        },
        {
          "name": "onMomentumScrollBegin",
          "type": "(event: NativeSyntheticEvent<NativeScrollEvent>) => void",
          "optional": true,
          "xaiDescription": "Called when momentum scrolling begins in FlatList"
        },
        {
          "name": "pagingEnabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables paging in FlatList"
        },
        {
          "name": "scrollEnabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables scrolling in FlatList"
        },
        {
          "name": "showsHorizontalScrollIndicator",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, shows the horizontal scroll indicator in FlatList"
        },
        {
          "name": "showsVerticalScrollIndicator",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, shows the vertical scroll indicator in FlatList"
        },
        {
          "name": "stickyHeaderHiddenOnScroll",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, hides sticky headers on scroll in FlatList"
        },
        {
          "name": "style",
          "type": "StyleProp<ViewStyle>",
          "optional": true,
          "xaiDescription": "Style for the FlatList component"
        },
        {
          "name": "refreshControl",
          "type": "ReactElement<RefreshControlProps, string | JSXElementConstructor<any>>",
          "optional": true,
          "xaiDescription": "Refresh control component for FlatList"
        },
        {
          "name": "snapToInterval",
          "type": "number",
          "optional": true,
          "xaiDescription": "Interval to snap to while scrolling in FlatList"
        },
        {
          "name": "snapToOffsets",
          "type": "number[]",
          "optional": true,
          "xaiDescription": "Offsets to snap to while scrolling in FlatList"
        },
        {
          "name": "snapToStart",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, snaps to the start of FlatList"
        },
        {
          "name": "snapToEnd",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, snaps to the end of FlatList"
        },
        {
          "name": "stickyHeaderIndices",
          "type": "number[]",
          "optional": true,
          "xaiDescription": "Indices of items to stick to the top in FlatList"
        },
        {
          "name": "disableIntervalMomentum",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, disables interval momentum in FlatList"
        },
        {
          "name": "disableScrollViewPanResponder",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, disables ScrollView pan responder in FlatList"
        },
        {
          "name": "StickyHeaderComponent",
          "type": "ComponentType<any>",
          "optional": true,
          "xaiDescription": "Custom component for sticky headers in FlatList"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "optional": true,
          "xaiDescription": "Children to render within FlatList"
        },
        {
          "name": "hitSlop",
          "type": "number | Insets",
          "optional": true,
          "xaiDescription": "Hit slop for touch events in FlatList"
        },
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "xaiDescription": "Unique identifier for FlatList"
        },
        {
          "name": "needsOffscreenAlphaCompositing",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables offscreen alpha compositing in FlatList"
        },
        {
          "name": "pointerEvents",
          "type": "\"box-none\" | \"none\" | \"box-only\" | \"auto\"",
          "optional": true,
          "xaiDescription": "Determines how pointer events are handled in FlatList"
        },
        {
          "name": "testID",
          "type": "string",
          "optional": true,
          "xaiDescription": "Test identifier for FlatList"
        },
        {
          "name": "nativeID",
          "type": "string",
          "optional": true,
          "xaiDescription": "Native identifier for FlatList"
        },
        {
          "name": "collapsable",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables collapsible behavior in FlatList"
        },
        {
          "name": "collapsableChildren",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables collapsible behavior for children in FlatList"
        },
        {
          "name": "renderToHardwareTextureAndroid",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, renders to hardware texture on Android in FlatList"
        },
        {
          "name": "focusable",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, makes FlatList focusable"
        },
        {
          "name": "tabIndex",
          "type": "0 | -1",
          "optional": true,
          "xaiDescription": "Tab index for FlatList"
        },
        {
          "name": "shouldRasterizeIOS",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables rasterization on iOS for FlatList"
        },
        {
          "name": "isTVSelectable",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, makes FlatList selectable on TV"
        },
        {
          "name": "hasTVPreferredFocus",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, sets preferred focus on TV for FlatList"
        },
        {
          "name": "tvParallaxShiftDistanceX",
          "type": "number",
          "optional": true,
          "xaiDescription": "Horizontal parallax shift distance on TV for FlatList"
        },
        {
          "name": "tvParallaxShiftDistanceY",
          "type": "number",
          "optional": true,
          "xaiDescription": "Vertical parallax shift distance on TV for FlatList"
        },
        {
          "name": "tvParallaxTiltAngle",
          "type": "number",
          "optional": true,
          "xaiDescription": "Parallax tilt angle on TV for FlatList"
        },
        {
          "name": "tvParallaxMagnification",
          "type": "number",
          "optional": true,
          "xaiDescription": "Parallax magnification on TV for FlatList"
        },
        {
          "name": "onStartShouldSetResponder",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true,
          "xaiDescription": "Called when a touch starts to determine if FlatList should become responder"
        },
        {
          "name": "onMoveShouldSetResponder",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true,
          "xaiDescription": "Called when a touch moves to determine if FlatList should become responder"
        },
        {
          "name": "onResponderEnd",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when the responder is released in FlatList"
        },
        {
          "name": "onResponderGrant",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when FlatList becomes the responder"
        },
        {
          "name": "onResponderReject",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when FlatList is denied responder status"
        },
        {
          "name": "onResponderMove",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when the responder moves in FlatList"
        },
        {
          "name": "onResponderRelease",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when the responder is released in FlatList"
        },
        {
          "name": "onResponderStart",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when the responder starts in FlatList"
        },
        {
          "name": "onResponderTerminationRequest",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true,
          "xaiDescription": "Called when another view wants to become responder in FlatList"
        },
        {
          "name": "onResponderTerminate",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when the responder is terminated in FlatList"
        },
        {
          "name": "onStartShouldSetResponderCapture",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true,
          "xaiDescription": "Called when a touch starts to determine if FlatList should capture responder"
        },
        {
          "name": "onMoveShouldSetResponderCapture",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true,
          "xaiDescription": "Called when a touch moves to determine if FlatList should capture responder"
        },
        {
          "name": "onTouchStart",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a touch starts in FlatList"
        },
        {
          "name": "onTouchMove",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a touch moves in FlatList"
        },
        {
          "name": "onTouchEnd",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a touch ends in FlatList"
        },
        {
          "name": "onTouchCancel",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a touch is canceled in FlatList"
        },
        {
          "name": "onTouchEndCapture",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a touch ends in capture phase in FlatList"
        },
        {
          "name": "onPointerEnter",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer enters FlatList"
        },
        {
          "name": "onPointerEnterCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer enters FlatList in capture phase"
        },
        {
          "name": "onPointerLeave",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer leaves FlatList"
        },
        {
          "name": "onPointerLeaveCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer leaves FlatList in capture phase"
        },
        {
          "name": "onPointerMove",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer moves within FlatList"
        },
        {
          "name": "onPointerMoveCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer moves within FlatList in capture phase"
        },
        {
          "name": "onPointerCancel",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer is canceled in FlatList"
        },
        {
          "name": "onPointerCancelCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer is canceled in FlatList in capture phase"
        },
        {
          "name": "onPointerDown",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer is pressed down in FlatList"
        },
        {
          "name": "onPointerDownCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer is pressed down in FlatList in capture phase"
        },
        {
          "name": "onPointerUp",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer is released in FlatList"
        },
        {
          "name": "onPointerUpCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Called when a pointer is released in FlatList in capture phase"
        },
        {
          "name": "accessible",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, makes FlatList accessible"
        },
        {
          "name": "accessibilityActions",
          "type": "readonly Readonly<{ name: string; label?: string; }>[]",
          "optional": true,
          "xaiDescription": "Actions available for accessibility in FlatList"
        },
        {
          "name": "accessibilityLabel",
          "type": "string",
          "optional": true,
          "xaiDescription": "Label for accessibility in FlatList"
        },
        {
          "name": "aria-label",
          "type": "string",
          "optional": true,
          "xaiDescription": "ARIA label for FlatList"
        },
        {
          "name": "accessibilityRole",
          "type": "AccessibilityRole",
          "optional": true,
          "xaiDescription": "Role for accessibility in FlatList"
        },
        {
          "name": "accessibilityState",
          "type": "AccessibilityState",
          "optional": true,
          "xaiDescription": "State for accessibility in FlatList"
        },
        {
          "name": "aria-busy",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Indicates if FlatList is busy for ARIA"
        },
        {
          "name": "aria-checked",
          "type": "boolean | \"mixed\"",
          "optional": true,
          "xaiDescription": "ARIA checked state for FlatList"
        },
        {
          "name": "aria-disabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA disabled state for FlatList"
        },
        {
          "name": "aria-expanded",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA expanded state for FlatList"
        },
        {
          "name": "aria-selected",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA selected state for FlatList"
        },
        {
          "name": "accessibilityHint",
          "type": "string",
          "optional": true,
          "xaiDescription": "Hint for accessibility in FlatList"
        },
        {
          "name": "accessibilityValue",
          "type": "AccessibilityValue",
          "optional": true,
          "xaiDescription": "Value for accessibility in FlatList"
        },
        {
          "name": "aria-valuemax",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA maximum value for FlatList"
        },
        {
          "name": "aria-valuemin",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA minimum value for FlatList"
        },
        {
          "name": "aria-valuenow",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA current value for FlatList"
        },
        {
          "name": "aria-valuetext",
          "type": "string",
          "optional": true,
          "xaiDescription": "ARIA value text for FlatList"
        },
        {
          "name": "onAccessibilityAction",
          "type": "(event: AccessibilityActionEvent) => void",
          "optional": true,
          "xaiDescription": "Called when an accessibility action is performed in FlatList"
        },
        {
          "name": "importantForAccessibility",
          "type": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\"",
          "optional": true,
          "xaiDescription": "Importance for accessibility in FlatList"
        },
        {
          "name": "aria-hidden",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA hidden state for FlatList"
        },
        {
          "name": "aria-modal",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA modal state for FlatList"
        },
        {
          "name": "role",
          "type": "Role",
          "optional": true,
          "xaiDescription": "Role for FlatList"
        },
        {
          "name": "accessibilityLabelledBy",
          "type": "string | string[]",
          "optional": true,
          "xaiDescription": "ID of element that labels FlatList for accessibility"
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "optional": true,
          "xaiDescription": "ARIA label ID for FlatList"
        },
        {
          "name": "accessibilityLiveRegion",
          "type": "\"none\" | \"polite\" | \"assertive\"",
          "optional": true,
          "xaiDescription": "Live region for accessibility in FlatList"
        },
        {
          "name": "aria-live",
          "type": "\"polite\" | \"assertive\" | \"off\"",
          "optional": true,
          "xaiDescription": "ARIA live region for FlatList"
        },
        {
          "name": "accessibilityElementsHidden",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, hides accessibility elements in FlatList"
        },
        {
          "name": "accessibilityViewIsModal",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, treats FlatList as modal for accessibility"
        },
        {
          "name": "onAccessibilityEscape",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when accessibility escape is performed in FlatList"
        },
        {
          "name": "onAccessibilityTap",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when accessibility tap is performed in FlatList"
        },
        {
          "name": "onMagicTap",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when magic tap is performed in FlatList"
        },
        {
          "name": "accessibilityIgnoresInvertColors",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, ignores invert colors for accessibility in FlatList"
        },
        {
          "name": "accessibilityLanguage",
          "type": "string",
          "optional": true,
          "xaiDescription": "Language for accessibility in FlatList"
        },
        {
          "name": "accessibilityShowsLargeContentViewer",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, shows large content viewer for accessibility in FlatList"
        },
        {
          "name": "accessibilityLargeContentTitle",
          "type": "string",
          "optional": true,
          "xaiDescription": "Title for large content viewer in FlatList"
        },
        {
          "name": "alwaysBounceHorizontal",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, always bounces horizontally in FlatList"
        },
        {
          "name": "alwaysBounceVertical",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, always bounces vertically in FlatList"
        },
        {
          "name": "automaticallyAdjustContentInsets",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, automatically adjusts content insets in FlatList"
        },
        {
          "name": "automaticallyAdjustKeyboardInsets",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, automatically adjusts keyboard insets in FlatList"
        },
        {
          "name": "automaticallyAdjustsScrollIndicatorInsets",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, automatically adjusts scroll indicator insets in FlatList"
        },
        {
          "name": "bounces",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables bouncing in FlatList"
        },
        {
          "name": "bouncesZoom",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables bouncing when zooming in FlatList"
        },
        {
          "name": "canCancelContentTouches",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, allows cancellation of content touches in FlatList"
        },
        {
          "name": "centerContent",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, centers content in FlatList"
        },
        {
          "name": "contentInset",
          "type": "Insets",
          "optional": true,
          "xaiDescription": "Insets for content in FlatList"
        },
        {
          "name": "contentOffset",
          "type": "PointProp",
          "optional": true,
          "xaiDescription": "Initial offset for content in FlatList"
        },
        {
          "name": "contentInsetAdjustmentBehavior",
          "type": "\"always\" | \"never\" | \"automatic\" | \"scrollableAxes\"",
          "optional": true,
          "xaiDescription": "Behavior for adjusting content insets in FlatList"
        },
        {
          "name": "directionalLockEnabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables directional lock in FlatList"
        },
        {
          "name": "indicatorStyle",
          "type": "\"black\" | \"default\" | \"white\"",
          "optional": true,
          "xaiDescription": "Style for scroll indicators in FlatList"
        },
        {
          "name": "maintainVisibleContentPosition",
          "type": "{ autoscrollToTopThreshold?: number; minIndexForVisible: number; }",
          "optional": true,
          "xaiDescription": "Config for maintaining visible content position in FlatList"
        },
        {
          "name": "maximumZoomScale",
          "type": "number",
          "optional": true,
          "xaiDescription": "Maximum zoom scale for FlatList"
        },
        {
          "name": "minimumZoomScale",
          "type": "number",
          "optional": true,
          "xaiDescription": "Minimum zoom scale for FlatList"
        },
        {
          "name": "onScrollAnimationEnd",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when scroll animation ends in FlatList"
        },
        {
          "name": "pinchGestureEnabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables pinch gesture in FlatList"
        },
        {
          "name": "scrollEventThrottle",
          "type": "number",
          "optional": true,
          "xaiDescription": "Throttle for scroll events in FlatList"
        },
        {
          "name": "scrollIndicatorInsets",
          "type": "Insets",
          "optional": true,
          "xaiDescription": "Insets for scroll indicators in FlatList"
        },
        {
          "name": "scrollToOverflowEnabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables scrolling to overflow in FlatList"
        },
        {
          "name": "scrollsToTop",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, scrolls to top when tapped in FlatList"
        },
        {
          "name": "snapToAlignment",
          "type": "\"center\" | \"start\" | \"end\"",
          "optional": true,
          "xaiDescription": "Alignment for snapping in FlatList"
        },
        {
          "name": "onScrollToTop",
          "type": "(event: NativeSyntheticEvent<NativeScrollEvent>) => void",
          "optional": true,
          "xaiDescription": "Called when scrolling to top in FlatList"
        },
        {
          "name": "zoomScale",
          "type": "number",
          "optional": true,
          "xaiDescription": "Current zoom scale for FlatList"
        },
        {
          "name": "endFillColor",
          "type": "ColorValue",
          "optional": true,
          "xaiDescription": "Color for filling the end of FlatList"
        },
        {
          "name": "scrollPerfTag",
          "type": "string",
          "optional": true,
          "xaiDescription": "Tag for scroll performance in FlatList"
        },
        {
          "name": "overScrollMode",
          "type": "\"auto\" | \"always\" | \"never\"",
          "optional": true,
          "xaiDescription": "Mode for over-scrolling in FlatList"
        },
        {
          "name": "nestedScrollEnabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables nested scrolling in FlatList"
        },
        {
          "name": "persistentScrollbar",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, makes the scrollbar persistent in FlatList"
        }
      ],
      "extends": [
        "RN.VirtualizedListProps<ItemT>"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Props for the FlatList component, extends VirtualizedListProps"
    },
    {
      "name": "ImagePropsBase",
      "type": "ImagePropsBase",
      "properties": [
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "xaiDescription": "Unique identifier for the Image component"
        },
        {
          "name": "onLayout",
          "type": "(event: LayoutChangeEvent) => void",
          "optional": true,
          "xaiDescription": "Called when the layout of the Image changes"
        },
        {
          "name": "onError",
          "type": "(error: NativeSyntheticEvent<ImageErrorEventData>) => void",
          "optional": true,
          "xaiDescription": "Called when an error occurs while loading the Image"
        },
        {
          "name": "onLoad",
          "type": "(event: NativeSyntheticEvent<ImageLoadEventData>) => void",
          "optional": true,
          "xaiDescription": "Called when the Image finishes loading"
        },
        {
          "name": "onLoadEnd",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when the Image loading ends"
        },
        {
          "name": "onLoadStart",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when the Image loading starts"
        },
        {
          "name": "progressiveRenderingEnabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, enables progressive rendering for the Image"
        },
        {
          "name": "borderRadius",
          "type": "number",
          "optional": true,
          "xaiDescription": "Border radius for the Image"
        },
        {
          "name": "borderTopLeftRadius",
          "type": "number",
          "optional": true,
          "xaiDescription": "Top-left border radius for the Image"
        },
        {
          "name": "borderTopRightRadius",
          "type": "number",
          "optional": true,
          "xaiDescription": "Top-right border radius for the Image"
        },
        {
          "name": "borderBottomLeftRadius",
          "type": "number",
          "optional": true,
          "xaiDescription": "Bottom-left border radius for the Image"
        },
        {
          "name": "borderBottomRightRadius",
          "type": "number",
          "optional": true,
          "xaiDescription": "Bottom-right border radius for the Image"
        },
        {
          "name": "resizeMode",
          "type": "ImageResizeMode",
          "optional": true,
          "xaiDescription": "Mode for resizing the Image"
        },
        {
          "name": "source",
          "type": "ImageSourcePropType",
          "optional": true,
          "xaiDescription": "Source for the Image"
        },
        {
          "name": "src",
          "type": "string",
          "optional": true,
          "xaiDescription": "Source URL for the Image"
        },
        {
          "name": "srcSet",
          "type": "string",
          "optional": true,
          "xaiDescription": "Set of source URLs for responsive Image"
        },
        {
          "name": "loadingIndicatorSource",
          "type": "ImageURISource",
          "optional": true,
          "xaiDescription": "Source for the loading indicator of the Image"
        },
        {
          "name": "testID",
          "type": "string",
          "optional": true,
          "xaiDescription": "Test identifier for the Image"
        },
        {
          "name": "nativeID",
          "type": "string",
          "optional": true,
          "xaiDescription": "Native identifier for the Image"
        },
        {
          "name": "defaultSource",
          "type": "number | ImageURISource",
          "optional": true,
          "xaiDescription": "Default source for the Image"
        },
        {
          "name": "alt",
          "type": "string",
          "optional": true,
          "xaiDescription": "Alternative text for the Image"
        },
        {
          "name": "height",
          "type": "number",
          "optional": true,
          "xaiDescription": "Height for the Image"
        },
        {
          "name": "width",
          "type": "number",
          "optional": true,
          "xaiDescription": "Width for the Image"
        },
        {
          "name": "crossOrigin",
          "type": "\"anonymous\" | \"use-credentials\"",
          "optional": true,
          "xaiDescription": "Cross-origin policy for the Image"
        },
        {
          "name": "tintColor",
          "type": "ColorValue",
          "optional": true,
          "xaiDescription": "Tint color for the Image"
        },
        {
          "name": "referrerPolicy",
          "type": "\"no-referrer\" | \"no-referrer-when-downgrade\" | \"origin\" | \"origin-when-cross-origin\" | \"same-origin\" | \"strict-origin\" | \"strict-origin-when-cross-origin\" | \"unsafe-url\"",
          "optional": true,
          "xaiDescription": "Referrer policy for the Image"
        },
        {
          "name": "className",
          "type": "string",
          "optional": true,
          "xaiDescription": "CSS class to apply to the Image component"
        },
        {
          "name": "blurRadius",
          "type": "number",
          "optional": true,
          "xaiDescription": "Blur radius for the Image"
        },
        {
          "name": "capInsets",
          "type": "Insets",
          "optional": true,
          "xaiDescription": "Cap insets for the Image"
        },
        {
          "name": "onProgress",
          "type": "(event: NativeSyntheticEvent<ImageProgressEventDataIOS>) => void",
          "optional": true,
          "xaiDescription": "Called when the Image loading progresses"
        },
        {
          "name": "onPartialLoad",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when the Image partially loads"
        },
        {
          "name": "resizeMethod",
          "type": "\"none\" | \"auto\" | \"scale\" | \"resize\"",
          "optional": true,
          "xaiDescription": "Method for resizing the Image"
        },
        {
          "name": "fadeDuration",
          "type": "number",
          "optional": true,
          "xaiDescription": "Duration of fade animation for the Image"
        },
        {
          "name": "accessible",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, makes the Image accessible"
        },
        {
          "name": "accessibilityActions",
          "type": "readonly Readonly<{ name: string; label?: string; }>[]",
          "optional": true,
          "xaiDescription": "Actions available for accessibility in the Image"
        },
        {
          "name": "accessibilityLabel",
          "type": "string",
          "optional": true,
          "xaiDescription": "Label for accessibility in the Image"
        },
        {
          "name": "aria-label",
          "type": "string",
          "optional": true,
          "xaiDescription": "ARIA label for the Image"
        },
        {
          "name": "accessibilityRole",
          "type": "AccessibilityRole",
          "optional": true,
          "xaiDescription": "Role for accessibility in the Image"
        },
        {
          "name": "accessibilityState",
          "type": "AccessibilityState",
          "optional": true,
          "xaiDescription": "State for accessibility in the Image"
        },
        {
          "name": "aria-busy",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Indicates if the Image is busy for ARIA"
        },
        {
          "name": "aria-checked",
          "type": "boolean | \"mixed\"",
          "optional": true,
          "xaiDescription": "ARIA checked state for the Image"
        },
        {
          "name": "aria-disabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA disabled state for the Image"
        },
        {
          "name": "aria-expanded",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA expanded state for the Image"
        },
        {
          "name": "aria-selected",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA selected state for the Image"
        },
        {
          "name": "accessibilityHint",
          "type": "string",
          "optional": true,
          "xaiDescription": "Hint for accessibility in the Image"
        },
        {
          "name": "accessibilityValue",
          "type": "AccessibilityValue",
          "optional": true,
          "xaiDescription": "Value for accessibility in the Image"
        },
        {
          "name": "aria-valuemax",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA maximum value for the Image"
        },
        {
          "name": "aria-valuemin",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA minimum value for the Image"
        },
        {
          "name": "aria-valuenow",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA current value for the Image"
        },
        {
          "name": "aria-valuetext",
          "type": "string",
          "optional": true,
          "xaiDescription": "ARIA value text for the Image"
        },
        {
          "name": "onAccessibilityAction",
          "type": "(event: AccessibilityActionEvent) => void",
          "optional": true,
          "xaiDescription": "Called when an accessibility action is performed in the Image"
        },
        {
          "name": "importantForAccessibility",
          "type": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\"",
          "optional": true,
          "xaiDescription": "Importance for accessibility in the Image"
        },
        {
          "name": "aria-hidden",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA hidden state for the Image"
        },
        {
          "name": "aria-modal",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA modal state for the Image"
        },
        {
          "name": "role",
          "type": "Role",
          "optional": true,
          "xaiDescription": "Role for the Image"
        },
        {
          "name": "accessibilityLabelledBy",
          "type": "string | string[]",
          "optional": true,
          "xaiDescription": "ID of element that labels the Image for accessibility"
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "optional": true,
          "xaiDescription": "ARIA label ID for the Image"
        },
        {
          "name": "accessibilityLiveRegion",
          "type": "\"none\" | \"polite\" | \"assertive\"",
          "optional": true,
          "xaiDescription": "Live region for accessibility in the Image"
        },
        {
          "name": "aria-live",
          "type": "\"polite\" | \"assertive\" | \"off\"",
          "optional": true,
          "xaiDescription": "ARIA live region for the Image"
        },
        {
          "name": "accessibilityElementsHidden",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, hides accessibility elements in the Image"
        },
        {
          "name": "accessibilityViewIsModal",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, treats the Image as modal for accessibility"
        },
        {
          "name": "onAccessibilityEscape",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when accessibility escape is performed in the Image"
        },
        {
          "name": "onAccessibilityTap",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when accessibility tap is performed in the Image"
        },
        {
          "name": "onMagicTap",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Called when magic tap is performed in the Image"
        },
        {
          "name": "accessibilityIgnoresInvertColors",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, ignores invert colors for accessibility in the Image"
        },
        {
          "name": "accessibilityLanguage",
          "type": "string",
          "optional": true,
          "xaiDescription": "Language for accessibility in the Image"
        },
        {
          "name": "accessibilityShowsLargeContentViewer",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "If true, shows large content viewer for accessibility in the Image"
        },
        {
          "name": "accessibilityLargeContentTitle",
          "type": "string",
          "optional": true,
          "xaiDescription": "Title for large content viewer in the Image"
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Base props for the Image component"
    },
    {
      "name": "SwitchProps",
      "type": "SwitchProps",
      "properties": [
        {
          "name": "thumbColor",
          "type": "ColorValue",
          "optional": true,
          "xaiDescription": "Color of the switch thumb. Uses ColorValue."
        },
        {
          "name": "trackColor",
          "type": "{ false?: ColorValue; true?: ColorValue; }",
          "optional": true,
          "xaiDescription": "Color of the switch track based on its state. Uses ColorValue."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the switch is disabled."
        },
        {
          "name": "onChange",
          "type": "(event: SwitchChangeEvent) => void | Promise<void>",
          "optional": true,
          "xaiDescription": "Callback for switch state change. Uses SwitchChangeEvent."
        },
        {
          "name": "onValueChange",
          "type": "(value: boolean) => void | Promise<void>",
          "optional": true,
          "xaiDescription": "Callback for switch value change."
        },
        {
          "name": "testID",
          "type": "string",
          "optional": true,
          "xaiDescription": "ID for testing purposes."
        },
        {
          "name": "value",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Current value of the switch."
        },
        {
          "name": "ios_backgroundColor",
          "type": "ColorValue",
          "optional": true,
          "xaiDescription": "Background color for iOS switch. Uses ColorValue."
        },
        {
          "name": "style",
          "type": "StyleProp<ViewStyle>",
          "optional": true,
          "xaiDescription": "Style for the switch. Uses StyleProp<ViewStyle>."
        },
        {
          "name": "className",
          "type": "string",
          "optional": true,
          "xaiDescription": "Class name for styling."
        },
        {
          "name": "onTintColor",
          "type": "ColorValue",
          "optional": true,
          "xaiDescription": "Color of the switch when on. Uses ColorValue."
        },
        {
          "name": "thumbTintColor",
          "type": "ColorValue",
          "optional": true,
          "xaiDescription": "Tint color of the switch thumb. Uses ColorValue."
        },
        {
          "name": "tintColor",
          "type": "ColorValue",
          "optional": true,
          "xaiDescription": "Tint color of the switch. Uses ColorValue."
        },
        {
          "name": "children",
          "type": "ReactNode",
          "optional": true,
          "xaiDescription": "Child elements of the switch. Uses ReactNode."
        },
        {
          "name": "hitSlop",
          "type": "number | Insets",
          "optional": true,
          "xaiDescription": "Area outside the switch to respond to touch. Uses Insets."
        },
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "xaiDescription": "Unique identifier for the switch."
        },
        {
          "name": "needsOffscreenAlphaCompositing",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to use offscreen alpha compositing."
        },
        {
          "name": "onLayout",
          "type": "(event: LayoutChangeEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for layout changes. Uses LayoutChangeEvent."
        },
        {
          "name": "pointerEvents",
          "type": "\"box-none\" | \"none\" | \"box-only\" | \"auto\"",
          "optional": true,
          "xaiDescription": "Controls whether the switch can be the target of touch events."
        },
        {
          "name": "removeClippedSubviews",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to remove clipped subviews."
        },
        {
          "name": "nativeID",
          "type": "string",
          "optional": true,
          "xaiDescription": "Native ID for the switch."
        },
        {
          "name": "collapsable",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the switch can be collapsed."
        },
        {
          "name": "collapsableChildren",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the switch's children can be collapsed."
        },
        {
          "name": "renderToHardwareTextureAndroid",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to render to hardware texture on Android."
        },
        {
          "name": "focusable",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the switch is focusable."
        },
        {
          "name": "tabIndex",
          "type": "0 | -1",
          "optional": true,
          "xaiDescription": "Tab index for the switch."
        },
        {
          "name": "shouldRasterizeIOS",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to rasterize the switch on iOS."
        },
        {
          "name": "isTVSelectable",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the switch is selectable on TV."
        },
        {
          "name": "hasTVPreferredFocus",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the switch has preferred focus on TV."
        },
        {
          "name": "tvParallaxShiftDistanceX",
          "type": "number",
          "optional": true,
          "xaiDescription": "Parallax shift distance on X-axis for TV."
        },
        {
          "name": "tvParallaxShiftDistanceY",
          "type": "number",
          "optional": true,
          "xaiDescription": "Parallax shift distance on Y-axis for TV."
        },
        {
          "name": "tvParallaxTiltAngle",
          "type": "number",
          "optional": true,
          "xaiDescription": "Parallax tilt angle for TV."
        },
        {
          "name": "tvParallaxMagnification",
          "type": "number",
          "optional": true,
          "xaiDescription": "Parallax magnification for TV."
        },
        {
          "name": "onStartShouldSetResponder",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true,
          "xaiDescription": "Whether the switch should become the responder. Uses GestureResponderEvent."
        },
        {
          "name": "onMoveShouldSetResponder",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true,
          "xaiDescription": "Whether the switch should become the responder on move. Uses GestureResponderEvent."
        },
        {
          "name": "onResponderEnd",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for responder end. Uses GestureResponderEvent."
        },
        {
          "name": "onResponderGrant",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for responder grant. Uses GestureResponderEvent."
        },
        {
          "name": "onResponderReject",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for responder reject. Uses GestureResponderEvent."
        },
        {
          "name": "onResponderMove",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for responder move. Uses GestureResponderEvent."
        },
        {
          "name": "onResponderRelease",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for responder release. Uses GestureResponderEvent."
        },
        {
          "name": "onResponderStart",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for responder start. Uses GestureResponderEvent."
        },
        {
          "name": "onResponderTerminationRequest",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true,
          "xaiDescription": "Whether to terminate the responder. Uses GestureResponderEvent."
        },
        {
          "name": "onResponderTerminate",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for responder termination. Uses GestureResponderEvent."
        },
        {
          "name": "onStartShouldSetResponderCapture",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true,
          "xaiDescription": "Whether to capture the responder. Uses GestureResponderEvent."
        },
        {
          "name": "onMoveShouldSetResponderCapture",
          "type": "(event: GestureResponderEvent) => boolean",
          "optional": true,
          "xaiDescription": "Whether to capture the responder on move. Uses GestureResponderEvent."
        },
        {
          "name": "onTouchStart",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for touch start. Uses GestureResponderEvent."
        },
        {
          "name": "onTouchMove",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for touch move. Uses GestureResponderEvent."
        },
        {
          "name": "onTouchEnd",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for touch end. Uses GestureResponderEvent."
        },
        {
          "name": "onTouchCancel",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for touch cancel. Uses GestureResponderEvent."
        },
        {
          "name": "onTouchEndCapture",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for touch end capture. Uses GestureResponderEvent."
        },
        {
          "name": "onPointerEnter",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer enter. Uses PointerEvent."
        },
        {
          "name": "onPointerEnterCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer enter capture. Uses PointerEvent."
        },
        {
          "name": "onPointerLeave",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer leave. Uses PointerEvent."
        },
        {
          "name": "onPointerLeaveCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer leave capture. Uses PointerEvent."
        },
        {
          "name": "onPointerMove",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer move. Uses PointerEvent."
        },
        {
          "name": "onPointerMoveCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer move capture. Uses PointerEvent."
        },
        {
          "name": "onPointerCancel",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer cancel. Uses PointerEvent."
        },
        {
          "name": "onPointerCancelCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer cancel capture. Uses PointerEvent."
        },
        {
          "name": "onPointerDown",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer down. Uses PointerEvent."
        },
        {
          "name": "onPointerDownCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer down capture. Uses PointerEvent."
        },
        {
          "name": "onPointerUp",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer up. Uses PointerEvent."
        },
        {
          "name": "onPointerUpCapture",
          "type": "(event: PointerEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for pointer up capture. Uses PointerEvent."
        },
        {
          "name": "accessible",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the switch is accessible."
        },
        {
          "name": "accessibilityActions",
          "type": "readonly Readonly<{ name: string; label?: string; }>[]",
          "optional": true,
          "xaiDescription": "Actions available for accessibility."
        },
        {
          "name": "accessibilityLabel",
          "type": "string",
          "optional": true,
          "xaiDescription": "Label for accessibility."
        },
        {
          "name": "aria-label",
          "type": "string",
          "optional": true,
          "xaiDescription": "ARIA label for accessibility."
        },
        {
          "name": "accessibilityRole",
          "type": "AccessibilityRole",
          "optional": true,
          "xaiDescription": "Accessibility role. Uses AccessibilityRole."
        },
        {
          "name": "accessibilityState",
          "type": "AccessibilityState",
          "optional": true,
          "xaiDescription": "Accessibility state. Uses AccessibilityState."
        },
        {
          "name": "aria-busy",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA busy state."
        },
        {
          "name": "aria-checked",
          "type": "boolean | \"mixed\"",
          "optional": true,
          "xaiDescription": "ARIA checked state."
        },
        {
          "name": "aria-disabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA disabled state."
        },
        {
          "name": "aria-expanded",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA expanded state."
        },
        {
          "name": "aria-selected",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA selected state."
        },
        {
          "name": "accessibilityHint",
          "type": "string",
          "optional": true,
          "xaiDescription": "Hint for accessibility."
        },
        {
          "name": "accessibilityValue",
          "type": "AccessibilityValue",
          "optional": true,
          "xaiDescription": "Accessibility value. Uses AccessibilityValue."
        },
        {
          "name": "aria-valuemax",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA maximum value."
        },
        {
          "name": "aria-valuemin",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA minimum value."
        },
        {
          "name": "aria-valuenow",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA current value."
        },
        {
          "name": "aria-valuetext",
          "type": "string",
          "optional": true,
          "xaiDescription": "ARIA value text."
        },
        {
          "name": "onAccessibilityAction",
          "type": "(event: AccessibilityActionEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for accessibility actions. Uses AccessibilityActionEvent."
        },
        {
          "name": "importantForAccessibility",
          "type": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\"",
          "optional": true,
          "xaiDescription": "Importance for accessibility."
        },
        {
          "name": "aria-hidden",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA hidden state."
        },
        {
          "name": "aria-modal",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA modal state."
        },
        {
          "name": "role",
          "type": "Role",
          "optional": true,
          "xaiDescription": "Role of the switch. Uses Role."
        },
        {
          "name": "accessibilityLabelledBy",
          "type": "string | string[]",
          "optional": true,
          "xaiDescription": "IDs of elements that label the switch for accessibility."
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "optional": true,
          "xaiDescription": "ID of the element that labels the switch for ARIA."
        },
        {
          "name": "accessibilityLiveRegion",
          "type": "\"none\" | \"polite\" | \"assertive\"",
          "optional": true,
          "xaiDescription": "Live region for accessibility."
        },
        {
          "name": "aria-live",
          "type": "\"polite\" | \"assertive\" | \"off\"",
          "optional": true,
          "xaiDescription": "ARIA live region."
        },
        {
          "name": "accessibilityElementsHidden",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether accessibility elements are hidden."
        },
        {
          "name": "accessibilityViewIsModal",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the switch is a modal view for accessibility."
        },
        {
          "name": "onAccessibilityEscape",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Callback for accessibility escape."
        },
        {
          "name": "onAccessibilityTap",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Callback for accessibility tap."
        },
        {
          "name": "onMagicTap",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Callback for magic tap."
        },
        {
          "name": "accessibilityIgnoresInvertColors",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to ignore invert colors for accessibility."
        },
        {
          "name": "accessibilityLanguage",
          "type": "string",
          "optional": true,
          "xaiDescription": "Language for accessibility."
        },
        {
          "name": "accessibilityShowsLargeContentViewer",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to show large content viewer for accessibility."
        },
        {
          "name": "accessibilityLargeContentTitle",
          "type": "string",
          "optional": true,
          "xaiDescription": "Title for large content viewer accessibility."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Properties for a switch component."
    },
    {
      "name": "InputAccessoryViewProps",
      "type": "InputAccessoryViewProps",
      "properties": [
        {
          "name": "backgroundColor",
          "type": "ColorValue",
          "optional": true,
          "xaiDescription": "Background color of the input accessory view. Uses ColorValue."
        },
        {
          "name": "children",
          "type": "ReactNode",
          "optional": true,
          "xaiDescription": "Child elements of the input accessory view. Uses ReactNode."
        },
        {
          "name": "nativeID",
          "type": "string",
          "optional": true,
          "xaiDescription": "Native ID for the input accessory view."
        },
        {
          "name": "style",
          "type": "StyleProp<ViewStyle>",
          "optional": true,
          "xaiDescription": "Style for the input accessory view. Uses StyleProp<ViewStyle>."
        },
        {
          "name": "className",
          "type": "string",
          "optional": true,
          "xaiDescription": "Class name for styling the input accessory view."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Properties for an input accessory view."
    },
    {
      "name": "TouchableWithoutFeedbackProps",
      "type": "TouchableWithoutFeedbackProps",
      "properties": [
        {
          "name": "children",
          "type": "ReactNode",
          "optional": true,
          "xaiDescription": "Child elements of the touchable component. Uses ReactNode."
        },
        {
          "name": "rejectResponderTermination",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to reject responder termination."
        },
        {
          "name": "delayLongPress",
          "type": "number",
          "optional": true,
          "xaiDescription": "Delay before long press is recognized."
        },
        {
          "name": "delayPressIn",
          "type": "number",
          "optional": true,
          "xaiDescription": "Delay before press in is recognized."
        },
        {
          "name": "delayPressOut",
          "type": "number",
          "optional": true,
          "xaiDescription": "Delay before press out is recognized."
        },
        {
          "name": "disabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the touchable is disabled."
        },
        {
          "name": "focusable",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the touchable is focusable."
        },
        {
          "name": "hitSlop",
          "type": "number | Insets",
          "optional": true,
          "xaiDescription": "Area outside the touchable to respond to touch. Uses Insets."
        },
        {
          "name": "id",
          "type": "string",
          "optional": true,
          "xaiDescription": "Unique identifier for the touchable."
        },
        {
          "name": "onBlur",
          "type": "(e: NativeSyntheticEvent<TargetedEvent>) => void",
          "optional": true,
          "xaiDescription": "Callback for blur event. Uses NativeSyntheticEvent<TargetedEvent>."
        },
        {
          "name": "onFocus",
          "type": "(e: NativeSyntheticEvent<TargetedEvent>) => void",
          "optional": true,
          "xaiDescription": "Callback for focus event. Uses NativeSyntheticEvent<TargetedEvent>."
        },
        {
          "name": "onLayout",
          "type": "(event: LayoutChangeEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for layout changes. Uses LayoutChangeEvent."
        },
        {
          "name": "onLongPress",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for long press. Uses GestureResponderEvent."
        },
        {
          "name": "onPress",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for press. Uses GestureResponderEvent."
        },
        {
          "name": "onPressIn",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for press in. Uses GestureResponderEvent."
        },
        {
          "name": "onPressOut",
          "type": "(event: GestureResponderEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for press out. Uses GestureResponderEvent."
        },
        {
          "name": "style",
          "type": "StyleProp<ViewStyle>",
          "optional": true,
          "xaiDescription": "Style for the touchable. Uses StyleProp<ViewStyle>."
        },
        {
          "name": "pressRetentionOffset",
          "type": "number | Insets",
          "optional": true,
          "xaiDescription": "Offset for press retention. Uses Insets."
        },
        {
          "name": "testID",
          "type": "string",
          "optional": true,
          "xaiDescription": "ID for testing purposes."
        },
        {
          "name": "className",
          "type": "string",
          "optional": true,
          "xaiDescription": "Class name for styling the touchable."
        },
        {
          "name": "touchSoundDisabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to disable touch sound."
        },
        {
          "name": "accessible",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the touchable is accessible."
        },
        {
          "name": "accessibilityActions",
          "type": "readonly Readonly<{ name: string; label?: string; }>[]",
          "optional": true,
          "xaiDescription": "Actions available for accessibility."
        },
        {
          "name": "accessibilityLabel",
          "type": "string",
          "optional": true,
          "xaiDescription": "Label for accessibility."
        },
        {
          "name": "aria-label",
          "type": "string",
          "optional": true,
          "xaiDescription": "ARIA label for accessibility."
        },
        {
          "name": "accessibilityRole",
          "type": "AccessibilityRole",
          "optional": true,
          "xaiDescription": "Accessibility role. Uses AccessibilityRole."
        },
        {
          "name": "accessibilityState",
          "type": "AccessibilityState",
          "optional": true,
          "xaiDescription": "Accessibility state. Uses AccessibilityState."
        },
        {
          "name": "aria-busy",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA busy state."
        },
        {
          "name": "aria-checked",
          "type": "boolean | \"mixed\"",
          "optional": true,
          "xaiDescription": "ARIA checked state."
        },
        {
          "name": "aria-disabled",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA disabled state."
        },
        {
          "name": "aria-expanded",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA expanded state."
        },
        {
          "name": "aria-selected",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA selected state."
        },
        {
          "name": "accessibilityHint",
          "type": "string",
          "optional": true,
          "xaiDescription": "Hint for accessibility."
        },
        {
          "name": "accessibilityValue",
          "type": "AccessibilityValue",
          "optional": true,
          "xaiDescription": "Accessibility value. Uses AccessibilityValue."
        },
        {
          "name": "aria-valuemax",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA maximum value."
        },
        {
          "name": "aria-valuemin",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA minimum value."
        },
        {
          "name": "aria-valuenow",
          "type": "number",
          "optional": true,
          "xaiDescription": "ARIA current value."
        },
        {
          "name": "aria-valuetext",
          "type": "string",
          "optional": true,
          "xaiDescription": "ARIA value text."
        },
        {
          "name": "onAccessibilityAction",
          "type": "(event: AccessibilityActionEvent) => void",
          "optional": true,
          "xaiDescription": "Callback for accessibility actions. Uses AccessibilityActionEvent."
        },
        {
          "name": "importantForAccessibility",
          "type": "\"auto\" | \"yes\" | \"no\" | \"no-hide-descendants\"",
          "optional": true,
          "xaiDescription": "Importance for accessibility."
        },
        {
          "name": "aria-hidden",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA hidden state."
        },
        {
          "name": "aria-modal",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "ARIA modal state."
        },
        {
          "name": "role",
          "type": "Role",
          "optional": true,
          "xaiDescription": "Role of the touchable. Uses Role."
        },
        {
          "name": "accessibilityLabelledBy",
          "type": "string | string[]",
          "optional": true,
          "xaiDescription": "IDs of elements that label the touchable for accessibility."
        },
        {
          "name": "aria-labelledby",
          "type": "string",
          "optional": true,
          "xaiDescription": "ID of the element that labels the touchable for ARIA."
        },
        {
          "name": "accessibilityLiveRegion",
          "type": "\"none\" | \"polite\" | \"assertive\"",
          "optional": true,
          "xaiDescription": "Live region for accessibility."
        },
        {
          "name": "aria-live",
          "type": "\"polite\" | \"assertive\" | \"off\"",
          "optional": true,
          "xaiDescription": "ARIA live region."
        },
        {
          "name": "accessibilityElementsHidden",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether accessibility elements are hidden."
        },
        {
          "name": "accessibilityViewIsModal",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether the touchable is a modal view for accessibility."
        },
        {
          "name": "onAccessibilityEscape",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Callback for accessibility escape."
        },
        {
          "name": "onAccessibilityTap",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Callback for accessibility tap."
        },
        {
          "name": "onMagicTap",
          "type": "() => void",
          "optional": true,
          "xaiDescription": "Callback for magic tap."
        },
        {
          "name": "accessibilityIgnoresInvertColors",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to ignore invert colors for accessibility."
        },
        {
          "name": "accessibilityLanguage",
          "type": "string",
          "optional": true,
          "xaiDescription": "Language for accessibility."
        },
        {
          "name": "accessibilityShowsLargeContentViewer",
          "type": "boolean",
          "optional": true,
          "xaiDescription": "Whether to show large content viewer for accessibility."
        },
        {
          "name": "accessibilityLargeContentTitle",
          "type": "string",
          "optional": true,
          "xaiDescription": "Title for large content viewer accessibility."
        }
      ],
      "extends": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Properties for a touchable without feedback."
    }
  ],
  "classes": [
    {
      "name": "DevToolsPluginClient",
      "constructors": [
        {
          "parameters": [
            {
              "name": "connectionInfo",
              "type": "ConnectionInfo",
              "optional": false
            },
            {
              "name": "options",
              "type": "DevToolsPluginClientOptions",
              "optional": true
            }
          ],
          "returnType": "DevToolsPluginClient",
          "xaiDescription": "Create a DevToolsPluginClient. Uses ConnectionInfo."
        }
      ],
      "methods": [
        {
          "name": "DevToolsPluginClient.initAsync",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Initialize the connection.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Initialize the connection."
        },
        {
          "name": "DevToolsPluginClient.closeAsync",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Close the connection.",
            "deprecated": false
          },
          "xaiDescription": "Close the connection."
        },
        {
          "name": "DevToolsPluginClient.sendMessage",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "params",
              "type": "any",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Send a message to the other end of DevTools.",
            "params": [
              {
                "name": "method",
                "description": "A method name."
              },
              {
                "name": "params",
                "description": "any extra payload."
              }
            ],
            "deprecated": false
          },
          "xaiDescription": "Send message to DevTools."
        },
        {
          "name": "DevToolsPluginClient.sendMessageLegacy",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "params",
              "type": "any",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Send legacy message to DevTools."
        },
        {
          "name": "DevToolsPluginClient.addMessageListener",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(params: any) => void",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Subscribe to a message from the other end of DevTools.",
            "params": [
              {
                "name": "method",
                "description": "Subscribe to a message with a method name."
              },
              {
                "name": "listener",
                "description": "Listener to be called when a message is received."
              }
            ],
            "deprecated": false
          },
          "xaiDescription": "Subscribe to DevTools message. Uses EventSubscription."
        },
        {
          "name": "DevToolsPluginClient.addMessageListenerOnce",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(params: any) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Subscribe to a message from the other end of DevTools just once.",
            "params": [
              {
                "name": "method",
                "description": "Subscribe to a message with a method name."
              },
              {
                "name": "listener",
                "description": "Listener to be called when a message is received."
              }
            ],
            "deprecated": false
          },
          "xaiDescription": "Subscribe to DevTools message once."
        },
        {
          "name": "DevToolsPluginClient.sendHandshakeMessage",
          "parameters": [
            {
              "name": "params",
              "type": "HandshakeMessageParams",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Internal handshake message sender.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Send handshake message. Uses HandshakeMessageParams."
        },
        {
          "name": "DevToolsPluginClient.addHandskakeMessageListener",
          "parameters": [
            {
              "name": "listener",
              "type": "(params: HandshakeMessageParams) => void",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Internal handshake message listener.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Add handshake message listener. Uses EventSubscription."
        },
        {
          "name": "DevToolsPluginClient.isConnected",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Returns whether the client is connected to the server.",
            "deprecated": false
          },
          "xaiDescription": "Check if client is connected."
        },
        {
          "name": "DevToolsPluginClient.connectAsync",
          "parameters": [],
          "returnType": "Promise<WebSocket>",
          "jsdoc": {
            "description": "The method to create the WebSocket connection.",
            "deprecated": false
          },
          "xaiDescription": "Create WebSocket connection."
        },
        {
          "name": "DevToolsPluginClient.getWebSocketBackingStore",
          "parameters": [],
          "returnType": "WebSocketBackingStore",
          "jsdoc": {
            "description": "Get the WebSocket backing store. Exposed for testing.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Get WebSocket backing store. Uses WebSocketBackingStore."
        }
      ],
      "properties": [
        {
          "name": "connectionInfo",
          "type": "ConnectionInfo",
          "optional": false,
          "xaiDescription": "Connection info. Uses ConnectionInfo."
        },
        {
          "name": "options",
          "type": "any",
          "optional": true,
          "xaiDescription": "Optional settings."
        },
        {
          "name": "eventEmitter",
          "type": "EventEmitter",
          "optional": false,
          "xaiDescription": "Event emitter. Uses EventEmitter."
        },
        {
          "name": "wsStore",
          "type": "any",
          "optional": false,
          "xaiDescription": "WebSocket store."
        },
        {
          "name": "isClosed",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Whether the connection is closed."
        },
        {
          "name": "retries",
          "type": "number",
          "optional": false,
          "xaiDescription": "Number of connection retries."
        },
        {
          "name": "messageFramePacker",
          "type": "any",
          "optional": false,
          "xaiDescription": "Packs messages for transmission."
        },
        {
          "name": "sendMessageImpl",
          "type": "any",
          "optional": false,
          "xaiDescription": "Implementation for sending messages."
        },
        {
          "name": "handleMessage",
          "type": "(event: WebSocketMessageEvent) => Promise<void>",
          "optional": false,
          "xaiDescription": "Handle incoming WebSocket messages. Uses WebSocketMessageEvent."
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "This client is for the Expo DevTools Plugins to communicate between the app and the DevTools webpage hosted in a browser.\nAll the code should be both compatible with browsers and React Native.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Client for Expo DevTools communication."
    },
    {
      "name": "DevToolsPluginClientImplApp",
      "constructors": [],
      "methods": [
        {
          "name": "DevToolsPluginClientImplApp.initAsync",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Initialize the connection.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Initialize the connection."
        },
        {
          "name": "DevToolsPluginClientImplApp.sendMessage",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "params",
              "type": "any",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Send message to DevTools."
        },
        {
          "name": "DevToolsPluginClientImplApp.closeAsync",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Close the connection.",
            "deprecated": false
          },
          "xaiDescription": "Close the connection."
        },
        {
          "name": "DevToolsPluginClientImplApp.sendMessageLegacy",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "params",
              "type": "any",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Send legacy message to DevTools."
        },
        {
          "name": "DevToolsPluginClientImplApp.addMessageListener",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(params: any) => void",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Subscribe to a message from the other end of DevTools.",
            "params": [
              {
                "name": "method",
                "description": "Subscribe to a message with a method name."
              },
              {
                "name": "listener",
                "description": "Listener to be called when a message is received."
              }
            ],
            "deprecated": false
          },
          "xaiDescription": "Subscribe to DevTools message. Uses EventSubscription."
        },
        {
          "name": "DevToolsPluginClientImplApp.addMessageListenerOnce",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(params: any) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Subscribe to a message from the other end of DevTools just once.",
            "params": [
              {
                "name": "method",
                "description": "Subscribe to a message with a method name."
              },
              {
                "name": "listener",
                "description": "Listener to be called when a message is received."
              }
            ],
            "deprecated": false
          },
          "xaiDescription": "Subscribe to DevTools message once."
        },
        {
          "name": "DevToolsPluginClientImplApp.sendHandshakeMessage",
          "parameters": [
            {
              "name": "params",
              "type": "HandshakeMessageParams",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Internal handshake message sender.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Send handshake message. Uses HandshakeMessageParams."
        },
        {
          "name": "DevToolsPluginClientImplApp.addHandskakeMessageListener",
          "parameters": [
            {
              "name": "listener",
              "type": "(params: HandshakeMessageParams) => void",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Internal handshake message listener.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Add handshake message listener. Uses EventSubscription."
        },
        {
          "name": "DevToolsPluginClientImplApp.isConnected",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Returns whether the client is connected to the server.",
            "deprecated": false
          },
          "xaiDescription": "Check if client is connected."
        },
        {
          "name": "DevToolsPluginClientImplApp.connectAsync",
          "parameters": [],
          "returnType": "Promise<WebSocket>",
          "jsdoc": {
            "description": "The method to create the WebSocket connection.",
            "deprecated": false
          },
          "xaiDescription": "Create WebSocket connection."
        },
        {
          "name": "DevToolsPluginClientImplApp.getWebSocketBackingStore",
          "parameters": [],
          "returnType": "WebSocketBackingStore",
          "jsdoc": {
            "description": "Get the WebSocket backing store. Exposed for testing.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Get WebSocket backing store. Uses WebSocketBackingStore."
        }
      ],
      "properties": [
        {
          "name": "browserClientMap",
          "type": "any",
          "optional": false,
          "xaiDescription": "Map of browser clients."
        },
        {
          "name": "addHandshakeHandler",
          "type": "any",
          "optional": false,
          "xaiDescription": "Add handshake handler."
        },
        {
          "name": "terminateBrowserClient",
          "type": "any",
          "optional": false,
          "xaiDescription": "Terminate browser client."
        },
        {
          "name": "connectionInfo",
          "type": "ConnectionInfo",
          "optional": false,
          "xaiDescription": "Connection info. Uses ConnectionInfo."
        },
        {
          "name": "options",
          "type": "any",
          "optional": true,
          "xaiDescription": "Optional settings."
        },
        {
          "name": "eventEmitter",
          "type": "EventEmitter",
          "optional": false,
          "xaiDescription": "Event emitter. Uses EventEmitter."
        },
        {
          "name": "wsStore",
          "type": "any",
          "optional": false,
          "xaiDescription": "WebSocket store."
        },
        {
          "name": "isClosed",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Whether the connection is closed."
        },
        {
          "name": "retries",
          "type": "number",
          "optional": false,
          "xaiDescription": "Number of connection retries."
        },
        {
          "name": "messageFramePacker",
          "type": "any",
          "optional": false,
          "xaiDescription": "Packs messages for transmission."
        },
        {
          "name": "sendMessageImpl",
          "type": "any",
          "optional": false,
          "xaiDescription": "Implementation for sending messages."
        },
        {
          "name": "handleMessage",
          "type": "(event: WebSocketMessageEvent) => Promise<void>",
          "optional": false,
          "xaiDescription": "Handle incoming WebSocket messages. Uses WebSocketMessageEvent."
        }
      ],
      "extends": "DevToolsPluginClient",
      "implements": [],
      "jsdoc": {
        "description": "The DevToolsPluginClient for the app -> browser communication.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Client for app to browser communication."
    },
    {
      "name": "DevToolsPluginClientImplBrowser",
      "constructors": [],
      "methods": [
        {
          "name": "DevToolsPluginClientImplBrowser.initAsync",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Initialize the connection.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Initialize the connection."
        },
        {
          "name": "DevToolsPluginClientImplBrowser.closeAsync",
          "parameters": [],
          "returnType": "Promise<void>",
          "jsdoc": {
            "description": "Close the connection.",
            "deprecated": false
          },
          "xaiDescription": "Close the connection."
        },
        {
          "name": "DevToolsPluginClientImplBrowser.sendMessage",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "params",
              "type": "any",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Send a message to the other end of DevTools.",
            "params": [
              {
                "name": "method",
                "description": "A method name."
              },
              {
                "name": "params",
                "description": "any extra payload."
              }
            ],
            "deprecated": false
          },
          "xaiDescription": "Send message to DevTools."
        },
        {
          "name": "DevToolsPluginClientImplBrowser.sendMessageLegacy",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "params",
              "type": "any",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": null,
          "xaiDescription": "Send legacy message to DevTools."
        },
        {
          "name": "DevToolsPluginClientImplBrowser.addMessageListener",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(params: any) => void",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Subscribe to a message from the other end of DevTools.",
            "params": [
              {
                "name": "method",
                "description": "Subscribe to a message with a method name."
              },
              {
                "name": "listener",
                "description": "Listener to be called when a message is received."
              }
            ],
            "deprecated": false
          },
          "xaiDescription": "Subscribe to DevTools message. Uses EventSubscription."
        },
        {
          "name": "DevToolsPluginClientImplBrowser.addMessageListenerOnce",
          "parameters": [
            {
              "name": "method",
              "type": "string",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(params: any) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Subscribe to a message from the other end of DevTools just once.",
            "params": [
              {
                "name": "method",
                "description": "Subscribe to a message with a method name."
              },
              {
                "name": "listener",
                "description": "Listener to be called when a message is received."
              }
            ],
            "deprecated": false
          },
          "xaiDescription": "Subscribe to DevTools message once."
        },
        {
          "name": "DevToolsPluginClientImplBrowser.sendHandshakeMessage",
          "parameters": [
            {
              "name": "params",
              "type": "HandshakeMessageParams",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Internal handshake message sender.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Send handshake message. Uses HandshakeMessageParams."
        },
        {
          "name": "DevToolsPluginClientImplBrowser.addHandskakeMessageListener",
          "parameters": [
            {
              "name": "listener",
              "type": "(params: HandshakeMessageParams) => void",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Internal handshake message listener.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Add handshake message listener. Uses EventSubscription."
        },
        {
          "name": "DevToolsPluginClientImplBrowser.isConnected",
          "parameters": [],
          "returnType": "boolean",
          "jsdoc": {
            "description": "Returns whether the client is connected to the server.",
            "deprecated": false
          },
          "xaiDescription": "Check if client is connected."
        },
        {
          "name": "DevToolsPluginClientImplBrowser.connectAsync",
          "parameters": [],
          "returnType": "Promise<WebSocket>",
          "jsdoc": {
            "description": "The method to create the WebSocket connection.",
            "deprecated": false
          },
          "xaiDescription": "Create WebSocket connection."
        },
        {
          "name": "DevToolsPluginClientImplBrowser.getWebSocketBackingStore",
          "parameters": [],
          "returnType": "WebSocketBackingStore",
          "jsdoc": {
            "description": "Get the WebSocket backing store. Exposed for testing.",
            "params": [],
            "deprecated": false
          },
          "xaiDescription": "Get WebSocket backing store. Uses WebSocketBackingStore."
        }
      ],
      "properties": [
        {
          "name": "browserClientId",
          "type": "any",
          "optional": false,
          "xaiDescription": "ID of the browser client."
        },
        {
          "name": "startHandshake",
          "type": "any",
          "optional": false,
          "xaiDescription": "Start the handshake process."
        },
        {
          "name": "connectionInfo",
          "type": "ConnectionInfo",
          "optional": false,
          "xaiDescription": "Connection info. Uses ConnectionInfo."
        },
        {
          "name": "options",
          "type": "any",
          "optional": true,
          "xaiDescription": "Optional settings."
        },
        {
          "name": "eventEmitter",
          "type": "EventEmitter",
          "optional": false,
          "xaiDescription": "Event emitter. Uses EventEmitter."
        },
        {
          "name": "wsStore",
          "type": "any",
          "optional": false,
          "xaiDescription": "WebSocket store."
        },
        {
          "name": "isClosed",
          "type": "boolean",
          "optional": false,
          "xaiDescription": "Whether the connection is closed."
        },
        {
          "name": "retries",
          "type": "number",
          "optional": false,
          "xaiDescription": "Number of connection retries."
        },
        {
          "name": "messageFramePacker",
          "type": "any",
          "optional": false,
          "xaiDescription": "Packs messages for transmission."
        },
        {
          "name": "sendMessageImpl",
          "type": "any",
          "optional": false,
          "xaiDescription": "Implementation for sending messages."
        },
        {
          "name": "handleMessage",
          "type": "(event: WebSocketMessageEvent) => Promise<void>",
          "optional": false,
          "xaiDescription": "Handle incoming WebSocket messages. Uses WebSocketMessageEvent."
        }
      ],
      "extends": "DevToolsPluginClient",
      "implements": [],
      "jsdoc": {
        "description": "The DevToolsPluginClient for the browser -> app communication.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Client for browser to app communication."
    },
    {
      "name": "MessageFramePacker",
      "constructors": [],
      "methods": [
        {
          "name": "MessageFramePacker.pack",
          "parameters": [
            {
              "name": "__0",
              "type": "MessageFrame<T>",
              "optional": false
            },
            {
              "name": "useLegacyTransport",
              "type": "boolean",
              "optional": true
            }
          ],
          "returnType": "string | Uint8Array<ArrayBufferLike> | Promise<Uint8Array<ArrayBufferLike>>",
          "jsdoc": null,
          "xaiDescription": "Pack a message frame. Uses MessageFrame<T>."
        },
        {
          "name": "MessageFramePacker.unpack",
          "parameters": [
            {
              "name": "packedData",
              "type": "string | ArrayBuffer",
              "optional": false
            }
          ],
          "returnType": "MessageFrame<T>",
          "jsdoc": null,
          "xaiDescription": "Unpack a message frame. Returns MessageFrame<T>."
        }
      ],
      "properties": [
        {
          "name": "textEncoder",
          "type": "any",
          "optional": false,
          "xaiDescription": "Encodes text."
        },
        {
          "name": "textDecoder",
          "type": "any",
          "optional": false,
          "xaiDescription": "Decodes text."
        },
        {
          "name": "isFastPathPayload",
          "type": "any",
          "optional": false,
          "xaiDescription": "Checks if payload uses fast path."
        },
        {
          "name": "payloadToUint8Array",
          "type": "any",
          "optional": false,
          "xaiDescription": "Converts payload to Uint8Array."
        },
        {
          "name": "packImpl",
          "type": "any",
          "optional": false,
          "xaiDescription": "Implementation for packing messages."
        },
        {
          "name": "deserializePayload",
          "type": "any",
          "optional": false,
          "xaiDescription": "Deserializes payload."
        }
      ],
      "implements": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Handles packing and unpacking of message frames."
    },
    {
      "name": "WebSocketBackingStore",
      "constructors": [
        {
          "parameters": [
            {
              "name": "ws",
              "type": "WebSocket",
              "optional": true
            },
            {
              "name": "refCount",
              "type": "number",
              "optional": true
            }
          ],
          "returnType": "WebSocketBackingStore",
          "xaiDescription": "Create a WebSocket backing store. Uses WebSocket."
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "ws",
          "type": "WebSocket",
          "optional": false,
          "xaiDescription": "WebSocket connection. Uses WebSocket."
        },
        {
          "name": "refCount",
          "type": "number",
          "optional": false,
          "xaiDescription": "Reference count for the connection."
        }
      ],
      "implements": [],
      "jsdoc": {
        "description": "The backing store for the WebSocket connection and reference count.\nThis is used for connection multiplexing.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Stores WebSocket connection and reference count for multiplexing."
    },
    {
      "name": "WebSocketWithReconnect",
      "constructors": [
        {
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "options",
              "type": "Options",
              "optional": true
            }
          ],
          "returnType": "WebSocketWithReconnect",
          "xaiDescription": "Creates a WebSocket with automatic reconnection capabilities."
        }
      ],
      "methods": [
        {
          "name": "WebSocketWithReconnect.close",
          "parameters": [
            {
              "name": "code",
              "type": "number",
              "optional": true
            },
            {
              "name": "reason",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "void",
          "xaiDescription": "Closes the WebSocket connection."
        },
        {
          "name": "WebSocketWithReconnect.addEventListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"message\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(event: WebSocketMessageEvent) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Adds a listener for WebSocket message events."
        },
        {
          "name": "WebSocketWithReconnect.addEventListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"open\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "() => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Adds a listener for WebSocket open events."
        },
        {
          "name": "WebSocketWithReconnect.addEventListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"error\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(event: WebSocketErrorEvent) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Adds a listener for WebSocket error events."
        },
        {
          "name": "WebSocketWithReconnect.addEventListener",
          "parameters": [
            {
              "name": "event",
              "type": "\"close\"",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(event: WebSocketCloseEvent) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Adds a listener for WebSocket close events."
        },
        {
          "name": "WebSocketWithReconnect.removeEventListener",
          "parameters": [
            {
              "name": "_event",
              "type": "string",
              "optional": false
            },
            {
              "name": "listener",
              "type": "(event: any) => void",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Removes a listener for WebSocket events."
        },
        {
          "name": "WebSocketWithReconnect.send",
          "parameters": [
            {
              "name": "data",
              "type": "string | ArrayBufferLike | ArrayBufferView<ArrayBufferLike> | Blob",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Sends data through the WebSocket connection."
        },
        {
          "name": "WebSocketWithReconnect.ping",
          "parameters": [],
          "returnType": "void",
          "xaiDescription": "Sends a ping to keep the WebSocket connection alive."
        },
        {
          "name": "WebSocketWithReconnect.dispatchEvent",
          "parameters": [
            {
              "name": "event",
              "type": "Event",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Dispatches an event to the WebSocket."
        }
      ],
      "properties": [
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "retriesInterval",
          "type": "any",
          "optional": false
        },
        {
          "name": "maxRetries",
          "type": "any",
          "optional": false
        },
        {
          "name": "connectTimeout",
          "type": "any",
          "optional": false
        },
        {
          "name": "onError",
          "type": "any",
          "optional": false
        },
        {
          "name": "onReconnect",
          "type": "any",
          "optional": false
        },
        {
          "name": "ws",
          "type": "any",
          "optional": false
        },
        {
          "name": "retries",
          "type": "any",
          "optional": false
        },
        {
          "name": "connectTimeoutHandle",
          "type": "any",
          "optional": false
        },
        {
          "name": "isClosed",
          "type": "any",
          "optional": false
        },
        {
          "name": "sendQueue",
          "type": "any",
          "optional": false
        },
        {
          "name": "lastCloseEvent",
          "type": "any",
          "optional": false
        },
        {
          "name": "emitter",
          "type": "any",
          "optional": false
        },
        {
          "name": "eventSubscriptions",
          "type": "any",
          "optional": false
        },
        {
          "name": "wsBinaryType",
          "type": "any",
          "optional": true
        },
        {
          "name": "connect",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleOpen",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleMessage",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleError",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleClose",
          "type": "any",
          "optional": false
        },
        {
          "name": "handleConnectTimeout",
          "type": "any",
          "optional": false
        },
        {
          "name": "clearConnectTimeoutIfNeeded",
          "type": "any",
          "optional": false
        },
        {
          "name": "reconnectIfNeeded",
          "type": "any",
          "optional": false
        },
        {
          "name": "wsClose",
          "type": "any",
          "optional": false
        },
        {
          "name": "readyState",
          "type": "number",
          "optional": false
        },
        {
          "name": "CONNECTING",
          "type": "0",
          "optional": false
        },
        {
          "name": "OPEN",
          "type": "1",
          "optional": false
        },
        {
          "name": "CLOSING",
          "type": "2",
          "optional": false
        },
        {
          "name": "CLOSED",
          "type": "3",
          "optional": false
        },
        {
          "name": "binaryType",
          "type": "BinaryType",
          "optional": false
        },
        {
          "name": "bufferedAmount",
          "type": "number",
          "optional": false
        },
        {
          "name": "extensions",
          "type": "string",
          "optional": false
        },
        {
          "name": "protocol",
          "type": "string",
          "optional": false
        },
        {
          "name": "onclose",
          "type": "(e: WebSocketCloseEvent) => any",
          "optional": false
        },
        {
          "name": "onerror",
          "type": "(e: Event) => any",
          "optional": false
        },
        {
          "name": "onmessage",
          "type": "(e: WebSocketMessageEvent) => any",
          "optional": false
        },
        {
          "name": "onopen",
          "type": "() => any",
          "optional": false
        }
      ],
      "implements": [
        "WebSocket"
      ],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "WebSocket with automatic reconnection."
    },
    {
      "name": "ExpoFormData",
      "constructors": [
        {
          "parameters": [],
          "returnType": "ExpoFormData",
          "xaiDescription": "Creates a new ExpoFormData object."
        }
      ],
      "methods": [
        {
          "name": "ExpoFormData.append",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Appends a string value to the FormData."
        },
        {
          "name": "ExpoFormData.append",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "Blob",
              "optional": false
            },
            {
              "name": "filename",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "void",
          "xaiDescription": "Appends a Blob value to the FormData, optionally with a filename."
        },
        {
          "name": "ExpoFormData.append",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "{ uri: string; name?: string; type?: string; }",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Appends a file object to the FormData."
        },
        {
          "name": "ExpoFormData.delete",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Deletes an entry from the FormData."
        },
        {
          "name": "ExpoFormData.get",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "FormDataEntryValue",
          "xaiDescription": "Retrieves a value from the FormData by name."
        },
        {
          "name": "ExpoFormData.getAll",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "FormDataEntryValue[]",
          "xaiDescription": "Retrieves all values from the FormData by name."
        },
        {
          "name": "ExpoFormData.has",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "boolean",
          "xaiDescription": "Checks if a name exists in the FormData."
        },
        {
          "name": "ExpoFormData.set",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Sets a string value in the FormData."
        },
        {
          "name": "ExpoFormData.set",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "Blob",
              "optional": false
            },
            {
              "name": "filename",
              "type": "string",
              "optional": true
            }
          ],
          "returnType": "void",
          "xaiDescription": "Sets a Blob value in the FormData, optionally with a filename."
        },
        {
          "name": "ExpoFormData.set",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "optional": false
            },
            {
              "name": "value",
              "type": "{ uri: string; name?: string; type?: string; }",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Sets a file object in the FormData."
        },
        {
          "name": "ExpoFormData.forEach",
          "parameters": [
            {
              "name": "callback",
              "type": "(value: FormDataEntryValue, key: string, iterable: FormData) => void",
              "optional": false
            },
            {
              "name": "thisArg",
              "type": "unknown",
              "optional": true
            }
          ],
          "returnType": "void",
          "xaiDescription": "Executes a callback for each entry in the FormData."
        },
        {
          "name": "ExpoFormData.keys",
          "parameters": [],
          "returnType": "IterableIterator<string>",
          "xaiDescription": "Returns an iterator over the FormData's keys."
        },
        {
          "name": "ExpoFormData.values",
          "parameters": [],
          "returnType": "IterableIterator<FormDataEntryValue>",
          "xaiDescription": "Returns an iterator over the FormData's values."
        },
        {
          "name": "ExpoFormData.entries",
          "parameters": [],
          "returnType": "IterableIterator<[string, FormDataEntryValue]>",
          "xaiDescription": "Returns an iterator over the FormData's entries."
        },
        {
          "name": "ExpoFormData.__@iterator@2674",
          "parameters": [],
          "returnType": "IterableIterator<[string, FormDataEntryValue]>",
          "xaiDescription": "Returns an iterator over the FormData's entries."
        }
      ],
      "properties": [],
      "implements": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Expo-specific FormData implementation."
    },
    {
      "name": "TextDecoder",
      "constructors": [
        {
          "parameters": [
            {
              "name": "label",
              "type": "string",
              "optional": true
            },
            {
              "name": "options",
              "type": "{ fatal?: boolean; ignoreBOM?: boolean; }",
              "optional": true
            }
          ],
          "returnType": "TextDecoder",
          "xaiDescription": "Creates a TextDecoder with optional encoding and options."
        }
      ],
      "methods": [
        {
          "name": "TextDecoder.decode",
          "parameters": [
            {
              "name": "input",
              "type": "ArrayBuffer | DataView<ArrayBufferLike>",
              "optional": true
            },
            {
              "name": "options",
              "type": "{ stream?: boolean; }",
              "optional": true
            }
          ],
          "returnType": "string",
          "xaiDescription": "Decodes the given input to a string."
        }
      ],
      "properties": [
        {
          "name": "_encoding",
          "type": "any",
          "optional": false
        },
        {
          "name": "_ignoreBOM",
          "type": "any",
          "optional": false
        },
        {
          "name": "_errorMode",
          "type": "any",
          "optional": false
        },
        {
          "name": "_BOMseen",
          "type": "any",
          "optional": false
        },
        {
          "name": "_doNotFlush",
          "type": "any",
          "optional": false
        },
        {
          "name": "_decoder",
          "type": "any",
          "optional": false
        },
        {
          "name": "encoding",
          "type": "string",
          "optional": false
        },
        {
          "name": "fatal",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "ignoreBOM",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "serializeStream",
          "type": "any",
          "optional": false
        }
      ],
      "implements": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Decodes an ArrayBuffer or DataView into a string."
    },
    {
      "name": "StubNativeRequest",
      "constructors": [],
      "methods": [],
      "properties": [],
      "implements": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "A stub for native request handling."
    },
    {
      "name": "StubNativeResponse",
      "constructors": [],
      "methods": [],
      "properties": [],
      "implements": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "A stub for native response handling."
    },
    {
      "name": "FetchError",
      "constructors": [
        {
          "parameters": [
            {
              "name": "message",
              "type": "string",
              "optional": false
            },
            {
              "name": "__1",
              "type": "{ cause?: unknown; stack?: string; }",
              "optional": true
            }
          ],
          "returnType": "FetchError",
          "xaiDescription": "Creates a FetchError with a message and optional cause and stack."
        }
      ],
      "methods": [],
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "message",
          "type": "string",
          "optional": false
        },
        {
          "name": "stack",
          "type": "string",
          "optional": true
        }
      ],
      "extends": "Error",
      "implements": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Custom error for fetch operations."
    },
    {
      "name": "FetchResponse",
      "constructors": [
        {
          "parameters": [
            {
              "name": "abortCleanupFunction",
              "type": "AbortSubscriptionCleanupFunction",
              "optional": false
            }
          ],
          "returnType": "FetchResponse",
          "xaiDescription": "Creates a FetchResponse with an abort cleanup function."
        }
      ],
      "methods": [
        {
          "name": "FetchResponse.blob",
          "parameters": [],
          "returnType": "Promise<Blob>",
          "xaiDescription": "Returns the response body as a Blob."
        },
        {
          "name": "FetchResponse.formData",
          "parameters": [],
          "returnType": "Promise<FormData>",
          "xaiDescription": "Returns the response body as FormData."
        },
        {
          "name": "FetchResponse.json",
          "parameters": [],
          "returnType": "Promise<any>",
          "xaiDescription": "Returns the response body parsed as JSON."
        },
        {
          "name": "FetchResponse.toString",
          "parameters": [],
          "returnType": "string",
          "xaiDescription": "Returns a string representation of the response."
        },
        {
          "name": "FetchResponse.toJSON",
          "parameters": [],
          "returnType": "object",
          "xaiDescription": "Returns a JSON representation of the response."
        },
        {
          "name": "FetchResponse.clone",
          "parameters": [],
          "returnType": "FetchResponse",
          "xaiDescription": "Creates a clone of the FetchResponse."
        },
        {
          "name": "FetchResponse.startStreaming",
          "parameters": [],
          "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
          "xaiDescription": "Starts streaming the response body."
        },
        {
          "name": "FetchResponse.cancelStreaming",
          "parameters": [
            {
              "name": "reason",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Cancels the streaming of the response body."
        },
        {
          "name": "FetchResponse.arrayBuffer",
          "parameters": [],
          "returnType": "Promise<ArrayBuffer>",
          "xaiDescription": "Returns the response body as an ArrayBuffer."
        },
        {
          "name": "FetchResponse.text",
          "parameters": [],
          "returnType": "Promise<string>",
          "xaiDescription": "Returns the response body as text."
        },
        {
          "name": "FetchResponse.release",
          "parameters": [],
          "returnType": "void",
          "jsdoc": {
            "description": "A function that detaches the JS and native objects to let the native object deallocate before the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native functions of the object will throw an error as it is no longer associated with its native counterpart. In most cases, you should never need to use this function, except some specific performance-critical cases when manual memory management makes sense and the native object is known to exclusively retain some native memory (such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use this object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase, for example: `useVideoPlayer()` from `expo-video` and `useImage()` from `expo-image`.",
            "deprecated": false
          },
          "xaiDescription": "Detaches JS and native objects for deallocation."
        },
        {
          "name": "FetchResponse.addListener",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            },
            {
              "name": "listener",
              "type": "NativeResponseEvents[EventName]",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Adds a listener for the given event name.",
            "deprecated": false
          },
          "xaiDescription": "Adds a listener for response events."
        },
        {
          "name": "FetchResponse.removeListener",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            },
            {
              "name": "listener",
              "type": "NativeResponseEvents[EventName]",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Removes a listener for the given event name.",
            "deprecated": false
          },
          "xaiDescription": "Removes a listener for response events."
        },
        {
          "name": "FetchResponse.removeAllListeners",
          "parameters": [
            {
              "name": "eventName",
              "type": "keyof NativeResponseEvents",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Removes all listeners for the given event name.",
            "deprecated": false
          },
          "xaiDescription": "Removes all listeners for response events."
        },
        {
          "name": "FetchResponse.emit",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            },
            {
              "name": "args",
              "type": "Parameters<NativeResponseEvents[EventName]>",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Synchronously calls all of the listeners attached to that specific event. The event can include any number of arguments that will be passed to the listeners.",
            "deprecated": false
          },
          "xaiDescription": "Emits an event to all listeners."
        },
        {
          "name": "FetchResponse.listenerCount",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Returns a number of listeners added to the given event.",
            "deprecated": false
          },
          "xaiDescription": "Returns the number of listeners for an event."
        },
        {
          "name": "FetchResponse.startObserving",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Function that is automatically invoked when the first listener for an event with the given name is added. Override it in a subclass to perform some additional setup once the event started being observed.",
            "deprecated": false
          },
          "xaiDescription": "Starts observing an event."
        },
        {
          "name": "FetchResponse.stopObserving",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Function that is automatically invoked when the last listener for an event with the given name is removed. Override it in a subclass to perform some additional cleanup once the event is no longer observed.",
            "deprecated": false
          },
          "xaiDescription": "Stops observing an event."
        }
      ],
      "properties": [
        {
          "name": "abortCleanupFunction",
          "type": "any",
          "optional": false
        },
        {
          "name": "streamingState",
          "type": "any",
          "optional": false
        },
        {
          "name": "bodyStream",
          "type": "any",
          "optional": false
        },
        {
          "name": "body",
          "type": "ReadableStream<Uint8Array<ArrayBufferLike>>",
          "optional": false
        },
        {
          "name": "headers",
          "type": "Headers",
          "optional": false
        },
        {
          "name": "ok",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "type",
          "type": "\"default\"",
          "optional": false
        },
        {
          "name": "finalize",
          "type": "any",
          "optional": false
        },
        {
          "name": "bodyUsed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "_rawHeaders",
          "type": "NativeHeadersType",
          "optional": false
        },
        {
          "name": "status",
          "type": "number",
          "optional": false
        },
        {
          "name": "statusText",
          "type": "string",
          "optional": false
        },
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "redirected",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "_TEventsMap_DONT_USE_IT",
          "type": "NativeResponseEvents",
          "optional": true
        }
      ],
      "extends": "ConcreteNativeResponse",
      "implements": [
        "Response"
      ],
      "jsdoc": {
        "description": "A response implementation for the `fetch.Response` API.",
        "deprecated": false
      },
      "isExported": false,
      "xaiDescription": "Implements the fetch.Response API."
    },
    {
      "name": "NativeRequest",
      "constructors": [],
      "methods": [
        {
          "name": "NativeRequest.start",
          "parameters": [
            {
              "name": "url",
              "type": "string",
              "optional": false
            },
            {
              "name": "requestInit",
              "type": "NativeRequestInit",
              "optional": false
            },
            {
              "name": "requestBody",
              "type": "Uint8Array<ArrayBufferLike>",
              "optional": false
            }
          ],
          "returnType": "Promise<NativeResponse>",
          "xaiDescription": "Starts a native request with URL, init, and body."
        },
        {
          "name": "NativeRequest.cancel",
          "parameters": [],
          "returnType": "void",
          "xaiDescription": "Cancels the current native request."
        },
        {
          "name": "NativeRequest.release",
          "parameters": [],
          "returnType": "void",
          "jsdoc": {
            "description": "A function that detaches the JS and native objects to let the native object deallocate before the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native functions of the object will throw an error as it is no longer associated with its native counterpart. In most cases, you should never need to use this function, except some specific performance-critical cases when manual memory management makes sense and the native object is known to exclusively retain some native memory (such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use this object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase, for example: `useVideoPlayer()` from `expo-video` and `useImage()` from `expo-image`.",
            "deprecated": false
          },
          "xaiDescription": "Detaches JS and native objects for deallocation."
        },
        {
          "name": "NativeRequest.addListener",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            },
            {
              "name": "listener",
              "type": "Record<never, never>[EventName]",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Adds a listener for the given event name.",
            "deprecated": false
          },
          "xaiDescription": "Adds a listener for request events."
        },
        {
          "name": "NativeRequest.removeListener",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            },
            {
              "name": "listener",
              "type": "Record<never, never>[EventName]",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Removes a listener for the given event name.",
            "deprecated": false
          },
          "xaiDescription": "Removes a listener for request events."
        },
        {
          "name": "NativeRequest.removeAllListeners",
          "parameters": [
            {
              "name": "eventName",
              "type": "never",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Removes all listeners for the given event name.",
            "deprecated": false
          },
          "xaiDescription": "Removes all listeners for request events."
        },
        {
          "name": "NativeRequest.emit",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            },
            {
              "name": "args",
              "type": "Parameters<Record<never, never>[EventName]>",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Synchronously calls all of the listeners attached to that specific event. The event can include any number of arguments that will be passed to the listeners.",
            "deprecated": false
          },
          "xaiDescription": "Emits an event to all listeners."
        },
        {
          "name": "NativeRequest.listenerCount",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Returns a number of listeners added to the given event.",
            "deprecated": false
          },
          "xaiDescription": "Returns the number of listeners for an event."
        },
        {
          "name": "NativeRequest.startObserving",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Function that is automatically invoked when the first listener for an event with the given name is added. Override it in a subclass to perform some additional setup once the event started being observed.",
            "deprecated": false
          },
          "xaiDescription": "Starts observing an event."
        },
        {
          "name": "NativeRequest.stopObserving",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Function that is automatically invoked when the last listener for an event with the given name is removed. Override it in a subclass to perform some additional cleanup once the event is no longer observed.",
            "deprecated": false
          },
          "xaiDescription": "Stops observing an event."
        }
      ],
      "properties": [
        {
          "name": "_TEventsMap_DONT_USE_IT",
          "type": "Record<never, never>",
          "optional": true
        }
      ],
      "extends": "SharedObject",
      "implements": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Handles native requests."
    },
    {
      "name": "NativeResponse",
      "constructors": [],
      "methods": [
        {
          "name": "NativeResponse.startStreaming",
          "parameters": [],
          "returnType": "Promise<Uint8Array<ArrayBufferLike>>",
          "xaiDescription": "Starts streaming the response body."
        },
        {
          "name": "NativeResponse.cancelStreaming",
          "parameters": [
            {
              "name": "reason",
              "type": "string",
              "optional": false
            }
          ],
          "returnType": "void",
          "xaiDescription": "Cancels the streaming of the response body."
        },
        {
          "name": "NativeResponse.arrayBuffer",
          "parameters": [],
          "returnType": "Promise<ArrayBuffer>",
          "xaiDescription": "Returns the response body as an ArrayBuffer."
        },
        {
          "name": "NativeResponse.text",
          "parameters": [],
          "returnType": "Promise<string>",
          "xaiDescription": "Returns the response body as text."
        },
        {
          "name": "NativeResponse.release",
          "parameters": [],
          "returnType": "void",
          "jsdoc": {
            "description": "A function that detaches the JS and native objects to let the native object deallocate before the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native functions of the object will throw an error as it is no longer associated with its native counterpart. In most cases, you should never need to use this function, except some specific performance-critical cases when manual memory management makes sense and the native object is known to exclusively retain some native memory (such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use this object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase, for example: `useVideoPlayer()` from `expo-video` and `useImage()` from `expo-image`.",
            "deprecated": false
          },
          "xaiDescription": "Detaches JS and native objects for deallocation."
        },
        {
          "name": "NativeResponse.addListener",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            },
            {
              "name": "listener",
              "type": "NativeResponseEvents[EventName]",
              "optional": false
            }
          ],
          "returnType": "EventSubscription",
          "jsdoc": {
            "description": "Adds a listener for the given event name.",
            "deprecated": false
          },
          "xaiDescription": "Adds a listener for response events."
        },
        {
          "name": "NativeResponse.removeListener",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            },
            {
              "name": "listener",
              "type": "NativeResponseEvents[EventName]",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Removes a listener for the given event name.",
            "deprecated": false
          },
          "xaiDescription": "Removes a listener for response events."
        },
        {
          "name": "NativeResponse.removeAllListeners",
          "parameters": [
            {
              "name": "eventName",
              "type": "keyof NativeResponseEvents",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Removes all listeners for the given event name.",
            "deprecated": false
          },
          "xaiDescription": "Removes all listeners for response events."
        },
        {
          "name": "NativeResponse.emit",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            },
            {
              "name": "args",
              "type": "Parameters<NativeResponseEvents[EventName]>",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Synchronously calls all of the listeners attached to that specific event. The event can include any number of arguments that will be passed to the listeners.",
            "deprecated": false
          },
          "xaiDescription": "Emits an event to all listeners."
        },
        {
          "name": "NativeResponse.listenerCount",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            }
          ],
          "returnType": "number",
          "jsdoc": {
            "description": "Returns a number of listeners added to the given event.",
            "deprecated": false
          },
          "xaiDescription": "Returns the number of listeners for an event."
        },
        {
          "name": "NativeResponse.startObserving",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Function that is automatically invoked when the first listener for an event with the given name is added. Override it in a subclass to perform some additional setup once the event started being observed.",
            "deprecated": false
          },
          "xaiDescription": "Starts observing an event."
        },
        {
          "name": "NativeResponse.stopObserving",
          "parameters": [
            {
              "name": "eventName",
              "type": "EventName",
              "optional": false
            }
          ],
          "returnType": "void",
          "jsdoc": {
            "description": "Function that is automatically invoked when the last listener for an event with the given name is removed. Override it in a subclass to perform some additional cleanup once the event is no longer observed.",
            "deprecated": false
          },
          "xaiDescription": "Stops observing an event."
        }
      ],
      "properties": [
        {
          "name": "bodyUsed",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "_rawHeaders",
          "type": "NativeHeadersType",
          "optional": false
        },
        {
          "name": "status",
          "type": "number",
          "optional": false
        },
        {
          "name": "statusText",
          "type": "string",
          "optional": false
        },
        {
          "name": "url",
          "type": "string",
          "optional": false
        },
        {
          "name": "redirected",
          "type": "boolean",
          "optional": false
        },
        {
          "name": "_TEventsMap_DONT_USE_IT",
          "type": "NativeResponseEvents",
          "optional": true
        }
      ],
      "extends": "SharedObject<NativeResponseEvents>",
      "implements": [],
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Handles native responses."
    }
  ],
  "constants": [],
  "namespaces": [
    {
      "name": "expo",
      "contents": {
        "functions": [
          {
            "name": "disableErrorHandling",
            "parameters": [],
            "returnType": "void",
            "xaiDescription": "Disables error handling for Expo."
          },
          {
            "name": "registerRootComponent",
            "parameters": [
              {
                "name": "component",
                "type": "ComponentType<P>",
                "optional": false
              }
            ],
            "returnType": "void",
            "xaiDescription": "Registers the root component for Expo."
          },
          {
            "name": "isRunningInExpoGo",
            "parameters": [],
            "returnType": "boolean",
            "xaiDescription": "Checks if the app is running in Expo Go."
          },
          {
            "name": "getExpoGoProjectConfig",
            "parameters": [],
            "returnType": "ExpoGoProjectConfig",
            "xaiDescription": "Retrieves the Expo Go project configuration."
          },
          {
            "name": "requireNativeModule",
            "parameters": [
              {
                "name": "moduleName",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "ModuleType",
            "xaiDescription": "Requires a native module by name."
          },
          {
            "name": "requireOptionalNativeModule",
            "parameters": [
              {
                "name": "moduleName",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "ModuleType",
            "xaiDescription": "Optionally requires a native module by name."
          },
          {
            "name": "requireNativeView",
            "parameters": [
              {
                "name": "viewName",
                "type": "string",
                "optional": false
              }
            ],
            "returnType": "React.ComponentType<P>",
            "xaiDescription": "Requires a native view by name."
          },
          {
            "name": "registerWebModule",
            "parameters": [
              {
                "name": "moduleImplementation",
                "type": "ModuleType",
                "optional": false
              }
            ],
            "returnType": "ModuleType",
            "xaiDescription": "Registers a web module."
          },
          {
            "name": "reloadAppAsync",
            "parameters": [
              {
                "name": "reason",
                "type": "string",
                "optional": true
              }
            ],
            "returnType": "Promise<void>",
            "xaiDescription": "Reloads the app asynchronously."
          },
          {
            "name": "useEvent",
            "parameters": [
              {
                "name": "eventEmitter",
                "type": "EventEmitter<TEventsMap>",
                "optional": false
              },
              {
                "name": "eventName",
                "type": "TEventName",
                "optional": false
              },
              {
                "name": "initialValue",
                "type": "TInitialValue",
                "optional": true
              }
            ],
            "returnType": "InferEventParameter<TEventListener, TInitialValue>",
            "xaiDescription": "Hooks into an event from an event emitter."
          },
          {
            "name": "useEventListener",
            "parameters": [
              {
                "name": "eventEmitter",
                "type": "EventEmitter<TEventsMap>",
                "optional": false
              },
              {
                "name": "eventName",
                "type": "TEventName",
                "optional": false
              },
              {
                "name": "listener",
                "type": "TEventListener",
                "optional": false
              }
            ],
            "returnType": "void",
            "xaiDescription": "Adds a listener to an event emitter."
          }
        ],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": true,
      "xaiDescription": "Expo namespace for utility functions."
    },
    {
      "name": "__global",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [
          {
            "name": "FormData",
            "type": "FormData",
            "properties": [
              {
                "name": "keys",
                "type": "() => IterableIterator<string>",
                "optional": false
              },
              {
                "name": "values",
                "type": "() => IterableIterator<string | Blob>",
                "optional": false
              },
              {
                "name": "entries",
                "type": "() => IterableIterator<[string, string | Blob]>",
                "optional": false
              },
              {
                "name": "__@iterator@6767",
                "type": "() => IterableIterator<[string, string | Blob]>",
                "optional": false
              }
            ],
            "extends": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Global FormData type with iterator methods."
          }
        ],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Global namespace for shared types."
    },
    {
      "name": "NodeJS",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [
          {
            "name": "ProcessEnv",
            "type": "ProcessEnv",
            "properties": [
              {
                "name": "NODE_ENV",
                "type": "\"development\" | \"production\" | \"test\"",
                "optional": false
              },
              {
                "name": "TZ",
                "type": "string",
                "optional": true
              }
            ],
            "extends": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Environment variables for Node.js."
          }
        ],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Node.js related utilities and types."
    },
    {
      "name": "\"*.module.css\"",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Namespace for CSS module imports."
    },
    {
      "name": "\"*.module.sass\"",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Namespace for Sass module imports."
    },
    {
      "name": "\"*.module.scss\"",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Namespace for SCSS module imports."
    },
    {
      "name": "__MetroModuleApi",
      "contents": {
        "functions": [],
        "enums": [],
        "types": [
          {
            "name": "RequireContext",
            "type": "RequireContext",
            "properties": [
              {
                "name": "keys",
                "type": "() => string[]",
                "optional": false
              },
              {
                "name": "resolve",
                "type": "(id: string) => string",
                "optional": false
              },
              {
                "name": "id",
                "type": "string",
                "optional": false
              }
            ],
            "extends": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Context for requiring modules."
          },
          {
            "name": "RequireFunction",
            "type": "RequireFunction",
            "properties": [
              {
                "name": "context",
                "type": "(path: string, recursive?: boolean, filter?: RegExp, mode?: \"sync\" | \"eager\" | \"weak\" | \"lazy\" | \"lazy-once\") => RequireContext",
                "optional": false
              }
            ],
            "extends": [],
            "jsdoc": null,
            "isExported": false,
            "xaiDescription": "Function for requiring modules."
          }
        ],
        "classes": [],
        "constants": []
      },
      "jsdoc": null,
      "isExported": false,
      "xaiDescription": "Metro module API utilities."
    }
  ]
}